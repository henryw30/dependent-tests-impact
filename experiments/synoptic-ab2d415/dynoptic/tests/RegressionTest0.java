
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test001"); }

    synoptic.model.channelid.ChannelId[] channelId_array0 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId1 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId1, channelId_array0);
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState3 = null;
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array4 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState5 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState5, obsFifoSysState_array4);
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array7 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState8 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState8, obsFifoSysState_array7);
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSys obsFifoSys10 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSys((java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId1, obsFifoSysState3, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState5, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test002"); }

    java.util.List<synoptic.model.channelid.ChannelId> list_channelId1 = null;
    // The following exception was thrown during execution in test generation
    try {
    synoptic.model.event.DistEventType distEventType2 = mcscm.McScMCExample.parseScmEventStr("hi!", list_channelId1);
      org.junit.Assert.fail("Expected exception of type mcscm.VerifyOutputParseException");
    } catch (mcscm.VerifyOutputParseException e) {
      // Expected exception.
    }

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test003"); }

    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.clearCache();

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test004"); }

    dynoptic.model.export.GraphExporter graphExporter0 = new dynoptic.model.export.GraphExporter();

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test005"); }

    dynoptic.main.DynopticOptions dynopticOptions0 = null;
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.main.DynopticMain dynopticMain1 = new dynoptic.main.DynopticMain(dynopticOptions0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test006"); }

    java.lang.String str0 = mcscm.Os.getOsArch();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str0 + "' != '" + "amd64"+ "'", str0.equals("amd64"));

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test007"); }

    java.util.List<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSys> list_obsFifoSys0 = null;
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.model.fifosys.gfsm.GFSM gFSM1 = new dynoptic.model.fifosys.gfsm.GFSM(list_obsFifoSys0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test008"); }

    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath0 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath1 = null;
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath2 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMPath0, gFSMPath1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test009"); }

    synoptic.model.channelid.ChannelId[] channelId_array1 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId2 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId2, channelId_array1);
    dynoptic.model.fifosys.cfsm.CFSM cFSM4 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId2);
    mcscm.McScMCExample mcScMCExample5 = new mcscm.McScMCExample((java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId2);
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState6 = null;
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState7 = null;
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array8 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState9 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState9, obsFifoSysState_array8);
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSys obsFifoSys11 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSys((java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId2, obsFifoSysState6, obsFifoSysState7, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test010"); }

    java.util.logging.Logger logger0 = null;
    dynoptic.model.fifosys.gfsm.GFSM.logger = logger0;

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test011"); }

    synoptic.model.channelid.ChannelId[] channelId_array0 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId1 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId1, channelId_array0);
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState3 = null;
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState4 = null;
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array5 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState6 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState6, obsFifoSysState_array5);
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSys obsFifoSys8 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSys((java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId1, obsFifoSysState3, obsFifoSysState4, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test012"); }

    dynoptic.model.fifosys.channel.channelstate.ChState<dynoptic.model.fifosys.gfsm.observed.ObsDistEventType> chstate_obsDistEventType0 = null;
    dynoptic.model.fifosys.channel.channelstate.ChState<dynoptic.model.fifosys.gfsm.observed.ObsDistEventType> chstate_obsDistEventType1 = null;
    boolean b2 = dynoptic.model.fifosys.channel.channelstate.ChState.equalsObsDistETypeIgnoringTraceIds(chstate_obsDistEventType0, chstate_obsDistEventType1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test013"); }

    dynoptic.model.automaton.EventTypeEncodings eventTypeEncodings0 = null;
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM1 = null;
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.model.automaton.EncodedAutomaton encodedAutomaton2 = new dynoptic.model.automaton.EncodedAutomaton(eventTypeEncodings0, fSM1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test014"); }

    java.lang.Iterable<synoptic.model.channelid.ChannelId> iterable_channelId0 = null;
    synoptic.model.channelid.ChannelId[] channelId_array2 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId3 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId3, channelId_array2);
    dynoptic.model.fifosys.cfsm.CFSM cFSM5 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId3);
    mcscm.McScMCExample mcScMCExample6 = new mcscm.McScMCExample((java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId3);
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.util.List<synoptic.model.channelid.ChannelId>> list_list_channelId7 = dynoptic.util.Util.get2DPermutations(iterable_channelId0, (java.lang.Iterable<synoptic.model.channelid.ChannelId>)arraylist_channelId3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test015"); }

    synoptic.model.channelid.ChannelId[] channelId_array2 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId3 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId3, channelId_array2);
    dynoptic.model.fifosys.cfsm.CFSM cFSM5 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId3);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId6 = dynoptic.util.Util.newList((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId3);
    // The following exception was thrown during execution in test generation
    try {
    synoptic.model.event.DistEventType distEventType7 = mcscm.McScMCExample.parseScmEventStr("amd64", (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId3);
      org.junit.Assert.fail("Expected exception of type mcscm.VerifyOutputParseException");
    } catch (mcscm.VerifyOutputParseException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId6);

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test016"); }

    synoptic.invariants.TemporalInvariantSet temporalInvariantSet0 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<dynoptic.invariants.BinaryInvariant> list_binaryInvariant1 = dynoptic.main.DynopticMain.synInvsToDynInvs(temporalInvariantSet0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test017"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache();

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test018"); }

    dynoptic.invariants.BinaryInvariant binaryInvariant0 = null;
    dynoptic.invariants.checkers.APChecker aPChecker1 = new dynoptic.invariants.checkers.APChecker(binaryInvariant0);
    synoptic.model.event.DistEventType distEventType2 = null;
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.invariants.checkers.BinChecker.Validity validity3 = aPChecker1.transition(distEventType2);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test019"); }

    java.lang.String[] str_array2 = new java.lang.String[] { "hi!", "" };
    java.util.ArrayList<java.lang.String> arraylist_str3 = new java.util.ArrayList<java.lang.String>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str3, str_array2);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId5 = null;
    // The following exception was thrown during execution in test generation
    try {
    mcscm.VerifyResult verifyResult6 = new mcscm.VerifyResult((java.util.List<java.lang.String>)arraylist_str3, list_channelId5);
      org.junit.Assert.fail("Expected exception of type mcscm.VerifyOutputParseException");
    } catch (mcscm.VerifyOutputParseException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test020"); }

    boolean b0 = mcscm.Os.isMac();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b0 == false);

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test021"); }

    boolean b0 = dynoptic.main.DynopticMain.assertsOn;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b0 == true);

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test022"); }

    dynoptic.invariants.BinaryInvariant binaryInvariant0 = null;
    dynoptic.invariants.checkers.AFbyChecker aFbyChecker1 = new dynoptic.invariants.checkers.AFbyChecker(binaryInvariant0);
    synoptic.model.event.DistEventType distEventType2 = null;
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.invariants.checkers.BinChecker.Validity validity3 = aFbyChecker1.transition(distEventType2);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test024"); }

    synoptic.model.channelid.ChannelId[] channelId_array1 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId2 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId2, channelId_array1);
    dynoptic.model.fifosys.cfsm.CFSM cFSM4 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId2);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId5 = dynoptic.util.Util.newList((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId2);
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState6 = dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds(list_channelId5);
    synoptic.model.channelid.ChannelId channelId7 = null;
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.model.fifosys.gfsm.observed.ObsDistEventType obsDistEventType8 = mutableMultiChState6.peek(channelId7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableMultiChState6);

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test025"); }

    // The following exception was thrown during execution in test generation
    try {
    java.util.Set<java.lang.CharSequence> set_charSequence1 = dynoptic.util.Util.newSet((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test026"); }

    synoptic.model.channelid.ChannelId[] channelId_array1 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId2 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId2, channelId_array1);
    dynoptic.model.fifosys.cfsm.CFSM cFSM4 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId2);
    mcscm.McScMCExample mcScMCExample5 = new mcscm.McScMCExample((java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId2);
    // The following exception was thrown during execution in test generation
    try {
    mcScMCExample5.addScmEventStrToPath("");
      org.junit.Assert.fail("Expected exception of type mcscm.VerifyOutputParseException");
    } catch (mcscm.VerifyOutputParseException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test027"); }

    dynoptic.model.fifosys.gfsm.GFSMState gFSMState0 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath2 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState0, (int)(byte)100);
    java.util.List<synoptic.model.event.DistEventType> list_distEventType3 = gFSMPath2.getEvents();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str4 = gFSMPath2.toString();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_distEventType3);

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test028"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState8 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath10 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState8, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState11 = gFSMPath10.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState12 = dynoptic.util.Util.newPair(obsFSMState1, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState11);
    boolean b13 = obsFSMState1.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test029"); }

    boolean b0 = mcscm.Os.isLinux();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b0 == true);

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test030"); }

    dynoptic.model.fifosys.FifoSys<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState,dynoptic.model.fifosys.gfsm.observed.ObsDistEventType> fifosys_obsMultFSMState_obsDistEventType0 = null;
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState2 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array4 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId5 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId5, channelId_array4);
    dynoptic.model.fifosys.cfsm.CFSM cFSM7 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId5);
    boolean b8 = obsFSMState2.equals((java.lang.Object)arraylist_channelId5);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState10 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array12 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId13 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId13, channelId_array12);
    dynoptic.model.fifosys.cfsm.CFSM cFSM15 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId13);
    boolean b16 = obsFSMState10.equals((java.lang.Object)arraylist_channelId13);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState17 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath19 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState17, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState20 = gFSMPath19.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState21 = dynoptic.util.Util.newPair(obsFSMState10, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState20);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState23 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState25 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array26 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState2, obsFSMState10, obsFSMState23, obsFSMState25 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState27 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b28 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState27, obsFSMState_array26);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState29 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState27);
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.model.fifosys.exec.FifoSysExecution<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState> fifosysexecution_obsMultFSMState30 = new dynoptic.model.fifosys.exec.FifoSysExecution<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState>(fifosys_obsMultFSMState_obsDistEventType0, obsMultFSMState29);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState29);

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test031"); }

    dynoptic.main.OptionException optionException1 = new dynoptic.main.OptionException("hi!");

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test032"); }

    dynoptic.main.DynopticOptions dynopticOptions0 = null;
    dynoptic.main.DynopticMain.setUpLogging(dynopticOptions0);

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test033"); }

    dynoptic.model.fifosys.gfsm.GFSMState gFSMState0 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath2 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState0, (int)(byte)100);
    int i3 = gFSMPath2.getPid();
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath4 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMPath2);
    dynoptic.model.fifosys.gfsm.GFSM gFSM5 = null;
    boolean b6 = gFSMPath4.refine(gFSM5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test034"); }

    synoptic.model.channelid.ChannelId[] channelId_array1 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId2 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId2, channelId_array1);
    dynoptic.model.fifosys.cfsm.CFSM cFSM4 = new dynoptic.model.fifosys.cfsm.CFSM((int)(byte)10, (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId2);
    dynoptic.invariants.BinaryInvariant binaryInvariant5 = null;
    // The following exception was thrown during execution in test generation
    try {
    cFSM4.augmentWithInvTracing(binaryInvariant5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test035"); }

    dynoptic.model.fifosys.gfsm.GFSMState gFSMState0 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath2 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState0, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState3 = gFSMPath2.getStates();
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState4 = null;
    gFSMPath2.prefixState(gFSMState4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState3);

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test036"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState fSMState0 = null;
    dynoptic.model.fifosys.cfsm.CFSMState cFSMState1 = new dynoptic.model.fifosys.cfsm.CFSMState(fSMState0);
    // The following exception was thrown during execution in test generation
    try {
    java.util.Set<dynoptic.model.fifosys.cfsm.CFSMState> set_cFSMState2 = cFSMState1.getNextStates();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test037"); }

    java.util.logging.Logger logger0 = dynoptic.model.fifosys.gfsm.GFSM.logger;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(logger0);

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test038"); }

    synoptic.model.channelid.ChannelId[] channelId_array1 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId2 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId2, channelId_array1);
    dynoptic.model.fifosys.cfsm.CFSM cFSM4 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId2);
    mcscm.McScMCExample mcScMCExample5 = new mcscm.McScMCExample((java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId2);
    java.util.List<synoptic.model.event.DistEventType> list_distEventType6 = mcScMCExample5.getEvents();
    // The following exception was thrown during execution in test generation
    try {
    mcScMCExample5.addScmEventStrToPath("");
      org.junit.Assert.fail("Expected exception of type mcscm.VerifyOutputParseException");
    } catch (mcscm.VerifyOutputParseException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_distEventType6);

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test039"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState fSMState0 = null;
    dynoptic.model.fifosys.cfsm.CFSMState cFSMState1 = new dynoptic.model.fifosys.cfsm.CFSMState(fSMState0);
    // The following exception was thrown during execution in test generation
    try {
    java.util.Set<synoptic.model.event.DistEventType> set_distEventType2 = cFSMState1.getTransitioningEvents();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test040"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    boolean b30 = obsMultFSMState28.equals((java.lang.Object)(short)0);
    // The following exception was thrown during execution in test generation
    try {
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.ObsDistEventType> set_obsDistEventType31 = obsMultFSMState28.getTransitioningEvents();
      org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test041"); }

    dynoptic.invariants.BinaryInvariant binaryInvariant0 = null;
    dynoptic.invariants.checkers.AFbyChecker aFbyChecker1 = new dynoptic.invariants.checkers.AFbyChecker(binaryInvariant0);
    dynoptic.invariants.checkers.AFbyChecker aFbyChecker2 = aFbyChecker1.getClone();
    boolean b3 = aFbyChecker2.isFail();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(aFbyChecker2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test042"); }

    java.util.List<dynoptic.invariants.checkers.AFbyChecker> list_aFbyChecker1 = dynoptic.util.Util.newList((int)(byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_aFbyChecker1);

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test043"); }

    dynoptic.model.fifosys.gfsm.GFSMState gFSMState0 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath2 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState0, (int)(byte)100);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState3 = gFSMPath2.lastState();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(gFSMState3);

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test044"); }

    dynoptic.invariants.BinaryInvariant binaryInvariant0 = null;
    dynoptic.invariants.checkers.EventuallyChecker eventuallyChecker1 = new dynoptic.invariants.checkers.EventuallyChecker(binaryInvariant0);
    synoptic.model.event.DistEventType distEventType2 = null;
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.invariants.checkers.BinChecker.Validity validity3 = eventuallyChecker1.transition(distEventType2);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test045"); }

    java.util.Set<dynoptic.model.AbsFSMState<dynoptic.model.fifosys.gfsm.GFSMState,synoptic.model.event.DistEventType>> set_absfsmstate_gFSMState_distEventType0 = dynoptic.util.Util.newSet();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_absfsmstate_gFSMState_distEventType0);

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test046"); }

    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.clearCache();

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test047"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array1 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState2 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, fSMState_array1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState6 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState6, fSMState_array5);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array8 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState9 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState9, fSMState_array8);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState12 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState12, fSMState_array11);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM15 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState6, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState9, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState12, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState18 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState18, fSMState_array17);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array20 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState21 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState21, fSMState_array20);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array23 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState24 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState24, fSMState_array23);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM27 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState18, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState21, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState24, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM29 = new dynoptic.model.fifosys.cfsm.fsm.FSM(1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState9, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState24, (int)' ');
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState31 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState31, fSMState_array30);
    dynoptic.model.fifosys.cfsm.CFSMState cFSMState33 = new dynoptic.model.fifosys.cfsm.CFSMState((java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState31);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array34 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState35 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState35, fSMState_array34);
    dynoptic.model.fifosys.cfsm.CFSMState cFSMState37 = new dynoptic.model.fifosys.cfsm.CFSMState((java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState35);
    java.util.ArrayList<java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>> arraylist_list_fSMState38 = new java.util.ArrayList<java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>>();
    boolean b39 = arraylist_list_fSMState38.add((java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState24);
    boolean b40 = arraylist_list_fSMState38.add((java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState31);
    boolean b41 = arraylist_list_fSMState38.add((java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState35);
    java.util.Set<dynoptic.model.fifosys.cfsm.CFSMState> set_cFSMState42 = dynoptic.model.fifosys.cfsm.CFSMState.CFSMStatesFromFSMListLists((java.util.List<java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>>)arraylist_list_fSMState38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_cFSMState42);

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test048"); }

    java.util.logging.Logger logger0 = dynoptic.model.automaton.EncodedAutomaton.logger;
    dynoptic.model.fifosys.gfsm.GFSM.logger = logger0;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(logger0);

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test049"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    // The following exception was thrown during execution in test generation
    try {
    boolean b30 = obsMultFSMState28.isInitForPid((int)(byte)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test050"); }

    mcscm.ProcessUtil processUtil0 = new mcscm.ProcessUtil();

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test051"); }

    dynoptic.main.OptionException optionException1 = new dynoptic.main.OptionException("");
    java.lang.Throwable[] throwable_array2 = optionException1.getSuppressed();
    java.lang.Throwable[] throwable_array3 = optionException1.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array3);

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test052"); }

    synoptic.model.channelid.ChannelId[] channelId_array1 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId2 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId2, channelId_array1);
    dynoptic.model.fifosys.cfsm.CFSM cFSM4 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId2);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId5 = dynoptic.util.Util.newList((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId2);
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState6 = dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds(list_channelId5);
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState7 = mutableMultiChState6.clone();
    synoptic.model.channelid.ChannelId channelId8 = null;
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.model.fifosys.gfsm.observed.ObsDistEventType obsDistEventType9 = mutableMultiChState7.peek(channelId8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableMultiChState6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableMultiChState7);

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test053"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState fSMState0 = null;
    dynoptic.model.fifosys.cfsm.CFSMState cFSMState1 = new dynoptic.model.fifosys.cfsm.CFSMState(fSMState0);
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.model.fifosys.cfsm.fsm.FSMState fSMState3 = cFSMState1.getFSMState((int)'#');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test054"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.ObsDistEventType> set_obsDistEventType33 = obsFifoSysState32.getTransitioningEvents();
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.ObsDistEventType> set_obsDistEventType34 = dynoptic.util.Util.newSet(set_obsDistEventType33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsDistEventType33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsDistEventType34);

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test055"); }

    dynoptic.main.DynopticMain.assertsOn = false;

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test056"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState3 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    int i4 = obsFSMState3.getPid();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState6 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array8 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId9 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId9, channelId_array8);
    dynoptic.model.fifosys.cfsm.CFSM cFSM11 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId9);
    boolean b12 = obsFSMState6.equals((java.lang.Object)arraylist_channelId9);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState13 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath15 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState13, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState16 = gFSMPath15.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState17 = dynoptic.util.Util.newPair(obsFSMState6, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState16);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState19 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    int i20 = obsFSMState19.getPid();
    obsFSMState19.markInit();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array22 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState3, obsFSMState6, obsFSMState19 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState23 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState23, obsFSMState_array22);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState25 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState23);
    dynoptic.model.fifosys.gfsm.observed.ObsDistEventType obsDistEventType26 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState> set_obsMultFSMState27 = obsMultFSMState25.getNextStates(obsDistEventType26);
      org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState25);

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test057"); }

    dynoptic.main.OptionException optionException1 = new dynoptic.main.OptionException("");
    java.lang.Throwable[] throwable_array2 = optionException1.getSuppressed();
    java.lang.String str3 = optionException1.toString();
    java.lang.Throwable[] throwable_array4 = optionException1.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array4);

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test058"); }

    dynoptic.invariants.BinaryInvariant binaryInvariant0 = null;
    dynoptic.invariants.checkers.NFbyChecker nFbyChecker1 = new dynoptic.invariants.checkers.NFbyChecker(binaryInvariant0);
    synoptic.model.event.DistEventType distEventType2 = null;
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.invariants.checkers.BinChecker.Validity validity3 = nFbyChecker1.transition(distEventType2);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test059"); }

    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<dynoptic.model.fifosys.gfsm.observed.ObsDistEventType>> arraylist_chstate_obsDistEventType0 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<dynoptic.model.fifosys.gfsm.observed.ObsDistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState1 = new dynoptic.model.fifosys.channel.channelstate.MutableMultiChState((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<dynoptic.model.fifosys.gfsm.observed.ObsDistEventType>>)arraylist_chstate_obsDistEventType0);
    synoptic.model.channelid.ChannelId channelId2 = null;
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.model.fifosys.gfsm.observed.ObsDistEventType obsDistEventType3 = mutableMultiChState1.peek(channelId2);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test060"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    int i8 = obsFSMState1.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test061"); }

    java.lang.String str0 = mcscm.Os.getMajorOSXVersion();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str0 + "' != '" + "3.19"+ "'", str0.equals("3.19"));

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test062"); }

    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSys[] obsFifoSys_array0 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSys[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSys> arraylist_obsFifoSys1 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSys>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSys>)arraylist_obsFifoSys1, obsFifoSys_array0);
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.model.fifosys.gfsm.GFSM gFSM3 = new dynoptic.model.fifosys.gfsm.GFSM((java.util.List<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSys>)arraylist_obsFifoSys1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSys_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test063"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    boolean b30 = obsMultFSMState28.equals((java.lang.Object)(short)0);
    boolean b31 = obsMultFSMState28.isAccept();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test064"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState33 = obsFifoSysState32.getFSMStates();
    synoptic.model.channelid.ChannelId[] channelId_array35 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId36 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b37 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId36, channelId_array35);
    dynoptic.model.fifosys.cfsm.CFSM cFSM38 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId36);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId39 = dynoptic.util.Util.newList((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId36);
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState40 = dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds(list_channelId39);
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState41 = mutableMultiChState40.clone();
    dynoptic.model.fifosys.exec.FifoSysExecState<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState> fifosysexecstate_obsMultFSMState42 = new dynoptic.model.fifosys.exec.FifoSysExecState<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState>(obsMultFSMState33, mutableMultiChState40);
    // The following exception was thrown during execution in test generation
    try {
    boolean b44 = obsMultFSMState33.isAcceptForPid((int)'#');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableMultiChState40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableMultiChState41);

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test065"); }

    synoptic.model.channelid.ChannelId[] channelId_array1 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId2 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId2, channelId_array1);
    dynoptic.model.fifosys.cfsm.CFSM cFSM4 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId2);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId5 = dynoptic.util.Util.newList((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId2);
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState6 = dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds(list_channelId5);
    dynoptic.model.fifosys.gfsm.observed.ObsDistEventType obsDistEventType7 = null;
    // The following exception was thrown during execution in test generation
    try {
    mutableMultiChState6.enqueue(obsDistEventType7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableMultiChState6);

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test066"); }

    dynoptic.invariants.BinaryInvariant binaryInvariant0 = null;
    dynoptic.invariants.checkers.AFbyChecker aFbyChecker1 = new dynoptic.invariants.checkers.AFbyChecker(binaryInvariant0);
    dynoptic.invariants.checkers.AFbyChecker aFbyChecker2 = aFbyChecker1.getClone();
    boolean b3 = aFbyChecker1.isFail();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(aFbyChecker2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test067"); }

    synoptic.model.DAGsTraceGraph dAGsTraceGraph0 = null;
    synoptic.model.channelid.ChannelId[] channelId_array2 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId3 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId3, channelId_array2);
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSys> list_obsFifoSys6 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSys.synTraceGraphToDynObsFifoSys(dAGsTraceGraph0, 17, (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId3, false);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test068"); }

    mcscm.VerifyOutputParseException verifyOutputParseException1 = new mcscm.VerifyOutputParseException("3.19");

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test069"); }

    dynoptic.model.fifosys.gfsm.GFSMState gFSMState0 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath2 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState0, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState3 = gFSMPath2.getStates();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str4 = gFSMPath2.toString();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState3);

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test070"); }

    synoptic.model.channelid.ChannelId[] channelId_array1 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId2 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId2, channelId_array1);
    dynoptic.model.fifosys.cfsm.CFSM cFSM4 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId2);
    int i5 = cFSM4.getNumProcesses();
    dynoptic.invariants.BinaryInvariant binaryInvariant6 = null;
    // The following exception was thrown during execution in test generation
    try {
    cFSM4.augmentWithInvTracing(binaryInvariant6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 35);

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test071"); }

    mcscm.McScM mcScM1 = new mcscm.McScM("[]");
    // The following exception was thrown during execution in test generation
    try {
    mcScM1.verify("(_)", (int)(byte)100);
      org.junit.Assert.fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
    }

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test072"); }

    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<dynoptic.model.fifosys.gfsm.observed.ObsDistEventType>> arraylist_chstate_obsDistEventType0 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<dynoptic.model.fifosys.gfsm.observed.ObsDistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState1 = new dynoptic.model.fifosys.channel.channelstate.MutableMultiChState((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<dynoptic.model.fifosys.gfsm.observed.ObsDistEventType>>)arraylist_chstate_obsDistEventType0);
    synoptic.model.channelid.ChannelId channelId2 = null;
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.model.fifosys.gfsm.observed.ObsDistEventType obsDistEventType3 = mutableMultiChState1.dequeue(channelId2);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test073"); }

    synoptic.model.channelid.ChannelId[] channelId_array2 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId3 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId3, channelId_array2);
    dynoptic.model.fifosys.cfsm.CFSM cFSM5 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId3);
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.model.export.GraphExporter.exportCFSM("} // digraph {\n", cFSM5);
      org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test074"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState33 = obsFifoSysState32.getFSMStates();
    synoptic.model.channelid.ChannelId[] channelId_array35 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId36 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b37 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId36, channelId_array35);
    dynoptic.model.fifosys.cfsm.CFSM cFSM38 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId36);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId39 = dynoptic.util.Util.newList((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId36);
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState40 = dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds(list_channelId39);
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState41 = mutableMultiChState40.clone();
    dynoptic.model.fifosys.exec.FifoSysExecState<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState> fifosysexecstate_obsMultFSMState42 = new dynoptic.model.fifosys.exec.FifoSysExecState<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState>(obsMultFSMState33, mutableMultiChState40);
    synoptic.model.channelid.ChannelId channelId43 = null;
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.model.fifosys.gfsm.observed.ObsDistEventType obsDistEventType44 = mutableMultiChState40.peek(channelId43);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableMultiChState40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableMultiChState41);

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test075"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState33 = obsFifoSysState32.getFSMStates();
    synoptic.model.channelid.ChannelId[] channelId_array35 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId36 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b37 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId36, channelId_array35);
    dynoptic.model.fifosys.cfsm.CFSM cFSM38 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId36);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId39 = dynoptic.util.Util.newList((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId36);
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState40 = dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds(list_channelId39);
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState41 = mutableMultiChState40.clone();
    dynoptic.model.fifosys.exec.FifoSysExecState<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState> fifosysexecstate_obsMultFSMState42 = new dynoptic.model.fifosys.exec.FifoSysExecState<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState>(obsMultFSMState33, mutableMultiChState40);
    // The following exception was thrown during execution in test generation
    try {
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.ObsDistEventType> set_obsDistEventType43 = fifosysexecstate_obsMultFSMState42.getEnabledEvents();
      org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableMultiChState40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableMultiChState41);

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test076"); }

    java.io.InputStream inputStream0 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.List<java.lang.String> list_str1 = mcscm.ProcessUtil.getInputStreamContent(inputStream0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test077"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState8 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath10 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState8, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState11 = gFSMPath10.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState12 = dynoptic.util.Util.newPair(obsFSMState1, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState11);
    obsFSMState1.markInit();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState12);

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test078"); }

    java.util.List<java.util.ArrayList<java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>>> list_arraylist_list_fSMState0 = dynoptic.util.Util.newList();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_arraylist_list_fSMState0);

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test079"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(1, "amd64", true, false);
    java.lang.String str5 = obsFSMState4.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "amd64"+ "'", str5.equals("amd64"));

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test080"); }

    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array1 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState2 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState2, obsFifoSysState_array1);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState4 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)10, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState2);
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> set_obsFifoSysState5 = gFSMState4.getTerminalObs();
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> set_obsFifoSysState7 = gFSMState4.getTerminalObsForPid((int)'a');
    dynoptic.model.fifosys.gfsm.observed.ObsDistEventType obsDistEventType8 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMState> set_gFSMState9 = gFSMState4.getNextStates(obsDistEventType8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsFifoSysState5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsFifoSysState7);

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test081"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState33 = obsFifoSysState32.getFSMStates();
    synoptic.model.channelid.ChannelId[] channelId_array35 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId36 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b37 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId36, channelId_array35);
    dynoptic.model.fifosys.cfsm.CFSM cFSM38 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId36);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId39 = dynoptic.util.Util.newList((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId36);
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState40 = dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds(list_channelId39);
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState41 = mutableMultiChState40.clone();
    dynoptic.model.fifosys.exec.FifoSysExecState<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState> fifosysexecstate_obsMultFSMState42 = new dynoptic.model.fifosys.exec.FifoSysExecState<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState>(obsMultFSMState33, mutableMultiChState40);
    boolean b43 = fifosysexecstate_obsMultFSMState42.isAccept();
    // The following exception was thrown during execution in test generation
    try {
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.ObsDistEventType> set_obsDistEventType44 = fifosysexecstate_obsMultFSMState42.getEnabledEvents();
      org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableMultiChState40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableMultiChState41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test082"); }

    synoptic.model.event.DistEventType[] distEventType_array0 = new synoptic.model.event.DistEventType[] {  };
    dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType> fsmalphabet_distEventType1 = new dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<synoptic.model.event.DistEventType>)fsmalphabet_distEventType1, distEventType_array0);
    int i3 = fsmalphabet_distEventType1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(distEventType_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test083"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    boolean b2 = obsFSMState1.isTerminal();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test084"); }

    synoptic.model.channelid.ChannelId[] channelId_array1 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId2 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId2, channelId_array1);
    dynoptic.model.fifosys.cfsm.CFSM cFSM4 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId2);
    int i5 = cFSM4.getNumProcesses();
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState8 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState8, fSMState_array7);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState11 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState11, fSMState_array10);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array13 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState14 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState14, fSMState_array13);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM17 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState8, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState11, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState14, 0);
    java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState> set_fSMState18 = fSM17.getStates();
    int i19 = fSM17.getPid();
    // The following exception was thrown during execution in test generation
    try {
    cFSM4.addFSM(fSM17);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_fSMState18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == (-1));

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test085"); }

    synoptic.model.channelid.ChannelId[] channelId_array2 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId3 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId3, channelId_array2);
    dynoptic.model.fifosys.cfsm.CFSM cFSM5 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId3);
    mcscm.McScMCExample mcScMCExample6 = new mcscm.McScMCExample((java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId3);
    // The following exception was thrown during execution in test generation
    try {
    synoptic.model.event.DistEventType distEventType7 = mcscm.McScMCExample.parseScmEventStr("hi!", (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId3);
      org.junit.Assert.fail("Expected exception of type mcscm.VerifyOutputParseException");
    } catch (mcscm.VerifyOutputParseException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test086"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState fSMState0 = null;
    dynoptic.model.fifosys.cfsm.CFSMState cFSMState1 = new dynoptic.model.fifosys.cfsm.CFSMState(fSMState0);
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.model.fifosys.cfsm.fsm.FSMState fSMState3 = cFSMState1.getFSMState(1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test087"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState33 = obsFifoSysState32.getFSMStates();
    java.lang.String str34 = obsFifoSysState32.toString();
    // The following exception was thrown during execution in test generation
    try {
    boolean b36 = obsFifoSysState32.isInitForPid((int)(short)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "1"+ "'", str34.equals("1"));

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test088"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array1 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState2 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, fSMState_array1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState5 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, fSMState_array4);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState8 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, fSMState_array7);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM11 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, 0);
    java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState> set_fSMState12 = fSM11.getAcceptStates();
    dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType> fsmalphabet_distEventType13 = fSM11.getAlphabet();
    synoptic.model.event.DistEventType distEventType14 = null;
    boolean b15 = fsmalphabet_distEventType13.add(distEventType14);
    // The following exception was thrown during execution in test generation
    try {
    java.util.Set<java.lang.String> set_str16 = fsmalphabet_distEventType13.getLocalEventScmStrings();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_fSMState12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fsmalphabet_distEventType13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test089"); }

    dynoptic.invariants.BinaryInvariant binaryInvariant0 = null;
    dynoptic.invariants.checkers.NFbyChecker nFbyChecker1 = new dynoptic.invariants.checkers.NFbyChecker(binaryInvariant0);
    dynoptic.invariants.checkers.NFbyChecker nFbyChecker2 = nFbyChecker1.getClone();
    boolean b3 = nFbyChecker2.isFail();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(nFbyChecker2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test090"); }

    java.util.Set<java.util.Iterator<synoptic.model.event.DistEventType>> set_iterator_distEventType0 = dynoptic.util.Util.newSet();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_iterator_distEventType0);

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test091"); }

    java.util.List<dynoptic.invariants.checkers.EventuallyChecker> list_eventuallyChecker0 = dynoptic.util.Util.newList();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_eventuallyChecker0);

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test092"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array1 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState2 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, fSMState_array1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState5 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, fSMState_array4);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState8 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, fSMState_array7);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM11 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, 0);
    java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState> set_fSMState12 = fSM11.getAcceptStates();
    dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType> fsmalphabet_distEventType13 = fSM11.getAlphabet();
    java.util.Set<java.lang.String> set_str14 = fsmalphabet_distEventType13.getLocalEventScmStrings();
    java.util.Iterator<synoptic.model.event.DistEventType> iterator_distEventType15 = fsmalphabet_distEventType13.iterator();
    java.lang.String str16 = fsmalphabet_distEventType13.toScmParametersString();
    int i17 = fsmalphabet_distEventType13.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_fSMState12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fsmalphabet_distEventType13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_distEventType15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + ""+ "'", str16.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test093"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> list_obsFSMState29 = dynoptic.util.Util.newList((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_obsFSMState29);

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test094"); }

    dynoptic.invariants.BinaryInvariant binaryInvariant0 = null;
    dynoptic.invariants.checkers.APChecker aPChecker1 = new dynoptic.invariants.checkers.APChecker(binaryInvariant0);
    dynoptic.invariants.checkers.APChecker aPChecker2 = aPChecker1.getClone();
    synoptic.model.event.DistEventType distEventType3 = null;
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.invariants.checkers.BinChecker.Validity validity4 = aPChecker1.transition(distEventType3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(aPChecker2);

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test095"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    boolean b29 = obsMultFSMState28.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test096"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array1 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState2 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, fSMState_array1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState5 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, fSMState_array4);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState8 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, fSMState_array7);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM11 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, 0);
    java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState> set_fSMState12 = fSM11.getAcceptStates();
    dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType> fsmalphabet_distEventType13 = fSM11.getAlphabet();
    fsmalphabet_distEventType13.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_fSMState12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fsmalphabet_distEventType13);

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test097"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    int i2 = obsFSMState1.getPid();
    obsFSMState1.markInit();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode obsDAGNode4 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(obsFSMState1);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode obsDAGNode5 = obsDAGNode4.getPrevState();
    // The following exception was thrown during execution in test generation
    try {
    boolean b6 = obsDAGNode5.isEnabled();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obsDAGNode5);

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test098"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array2 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState3 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState3, fSMState_array2);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState7 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState7, fSMState_array6);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array9 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState10 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState10, fSMState_array9);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState13 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState13, fSMState_array12);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM16 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState7, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState10, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState13, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array18 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState19 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState19, fSMState_array18);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array21 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState22 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState22, fSMState_array21);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array24 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState25 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState25, fSMState_array24);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM28 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState19, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState22, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState25, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM30 = new dynoptic.model.fifosys.cfsm.fsm.FSM(1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState3, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState10, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState25, (int)' ');
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState33 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState33, fSMState_array32);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array36 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState37 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b38 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState37, fSMState_array36);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array39 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState40 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState40, fSMState_array39);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array42 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState43 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b44 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState43, fSMState_array42);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM46 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState37, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState40, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState43, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array48 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState49 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b50 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState49, fSMState_array48);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array51 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState52 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b53 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState52, fSMState_array51);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array54 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState55 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b56 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState55, fSMState_array54);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM58 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState49, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState52, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState55, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM60 = new dynoptic.model.fifosys.cfsm.fsm.FSM(1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState33, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState40, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState55, (int)' ');
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array62 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState63 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b64 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState63, fSMState_array62);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array66 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState67 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b68 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState67, fSMState_array66);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array69 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState70 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b71 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState70, fSMState_array69);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array72 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState73 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b74 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState73, fSMState_array72);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM76 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState67, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState70, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState73, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array78 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState79 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b80 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState79, fSMState_array78);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array81 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState82 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b83 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState82, fSMState_array81);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array84 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState85 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b86 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState85, fSMState_array84);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM88 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState79, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState82, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState85, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM90 = new dynoptic.model.fifosys.cfsm.fsm.FSM(1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState63, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState70, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState85, (int)' ');
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM92 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)'#', (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState3, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState33, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState63, (int)(byte)10);
    java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState> set_fSMState93 = fSM92.getStates();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_fSMState93);

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test099"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    boolean b30 = obsMultFSMState28.equals((java.lang.Object)(short)0);
    // The following exception was thrown during execution in test generation
    try {
    boolean b32 = obsMultFSMState28.isInitForPid((int)(short)10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test100"); }

    synoptic.model.event.DistEventType[] distEventType_array0 = new synoptic.model.event.DistEventType[] {  };
    dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType> fsmalphabet_distEventType1 = new dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<synoptic.model.event.DistEventType>)fsmalphabet_distEventType1, distEventType_array0);
    java.lang.String str3 = fsmalphabet_distEventType1.anyEventScmQRe();
    int i4 = fsmalphabet_distEventType1.size();
    java.lang.String str5 = fsmalphabet_distEventType1.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState8 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState8, fSMState_array7);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState12 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState12, fSMState_array11);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array14 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState15 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState15, fSMState_array14);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState18 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState18, fSMState_array17);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState12, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState15, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState18, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array23 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState24 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState24, fSMState_array23);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array26 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState27 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b28 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState27, fSMState_array26);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array29 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState30 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState30, fSMState_array29);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM33 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState24, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState27, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState30, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM35 = new dynoptic.model.fifosys.cfsm.fsm.FSM(1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState8, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState15, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState30, (int)' ');
    boolean b36 = fsmalphabet_distEventType1.containsAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState30);
    boolean b38 = fsmalphabet_distEventType1.remove((java.lang.Object)"CExample[\n]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(distEventType_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "(_)"+ "'", str3.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test101"); }

    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array1 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState2 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState2, obsFifoSysState_array1);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState4 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)10, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState2);
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> set_obsFifoSysState5 = gFSMState4.getTerminalObs();
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> set_obsFifoSysState7 = gFSMState4.getTerminalObsForPid(100);
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array9 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState10 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState10, obsFifoSysState_array9);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState12 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)10, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState10);
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array14 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState15 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState15, obsFifoSysState_array14);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState17 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)10, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState15);
    java.util.List<java.util.List<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>> list_list_obsFifoSysState18 = dynoptic.util.Util.get2DPermutations((java.lang.Iterable<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState10, (java.lang.Iterable<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState15);
    gFSMState4.addAllObs((java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState10);
    dynoptic.model.fifosys.gfsm.observed.ObsDistEventType obsDistEventType20 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMState> set_gFSMState21 = gFSMState4.getNextStates(obsDistEventType20);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsFifoSysState5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsFifoSysState7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_list_obsFifoSysState18);

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test102"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState3 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState((int)' ', false, false);
    boolean b4 = obsFSMState3.isTerminal();
    boolean b5 = obsFSMState3.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test103"); }

    dynoptic.model.fifosys.gfsm.GFSMState gFSMState0 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath2 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState0, (int)(byte)100);
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array4 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState5 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState5, obsFifoSysState_array4);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState7 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)10, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState5);
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> set_obsFifoSysState8 = gFSMState7.getTerminalObs();
    gFSMPath2.prefixState(gFSMState7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsFifoSysState8);

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test104"); }

    synoptic.model.event.DistEventType[] distEventType_array0 = new synoptic.model.event.DistEventType[] {  };
    dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType> fsmalphabet_distEventType1 = new dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<synoptic.model.event.DistEventType>)fsmalphabet_distEventType1, distEventType_array0);
    boolean b3 = fsmalphabet_distEventType1.isEmpty();
    java.util.Set<java.lang.String> set_str4 = fsmalphabet_distEventType1.getLocalEventScmStrings();
    fsmalphabet_distEventType1.clear();
    java.lang.String str6 = fsmalphabet_distEventType1.anyEventScmQRe();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(distEventType_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "(_)"+ "'", str6.equals("(_)"));

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test105"); }

    mcscm.VerifyOutputParseException verifyOutputParseException1 = new mcscm.VerifyOutputParseException("Part-0-1970692513");
    java.lang.String str2 = verifyOutputParseException1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "mcscm.VerifyOutputParseException: Part-0-1970692513"+ "'", str2.equals("mcscm.VerifyOutputParseException: Part-0-1970692513"));

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test106"); }

    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType1 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState2 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType1);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId3 = immutableMultiChState2.getChannelIds();
    dynoptic.model.fifosys.gfsm.GFSM gFSM4 = new dynoptic.model.fifosys.gfsm.GFSM((int)(byte)1, list_channelId3);
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMState> set_gFSMState5 = gFSM4.getAcceptStates();
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType7 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState8 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType7);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId9 = immutableMultiChState8.getChannelIds();
    dynoptic.model.fifosys.gfsm.GFSM gFSM10 = new dynoptic.model.fifosys.gfsm.GFSM((int)(byte)1, list_channelId9);
    synoptic.model.channelid.ChannelId[] channelId_array12 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId13 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId13, channelId_array12);
    dynoptic.model.fifosys.cfsm.CFSM cFSM15 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId13);
    mcscm.McScMCExample mcScMCExample16 = new mcscm.McScMCExample((java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId13);
    java.util.List<synoptic.model.event.DistEventType> list_distEventType17 = mcScMCExample16.getEvents();
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMPath> set_gFSMPath19 = gFSM10.getCExamplePaths(mcScMCExample16, 1);
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMPath> set_gFSMPath21 = gFSM4.getCExamplePaths(mcScMCExample16, 100);
    // The following exception was thrown during execution in test generation
    try {
    mcScMCExample16.addScmEventStrToPath("Part-0-357159137");
      org.junit.Assert.fail("Expected exception of type mcscm.VerifyOutputParseException");
    } catch (mcscm.VerifyOutputParseException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_gFSMState5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_distEventType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_gFSMPath19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_gFSMPath21);

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test107"); }

    dynoptic.model.fifosys.gfsm.GFSMState gFSMState1 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)1);
    dynoptic.model.fifosys.gfsm.observed.ObsDistEventType obsDistEventType2 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMState> set_gFSMState3 = gFSMState1.getNextStates(obsDistEventType2);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test108"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState2 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array4 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId5 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId5, channelId_array4);
    dynoptic.model.fifosys.cfsm.CFSM cFSM7 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId5);
    boolean b8 = obsFSMState2.equals((java.lang.Object)arraylist_channelId5);
    synoptic.model.channelid.ChannelId[] channelId_array10 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId11 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId11, channelId_array10);
    dynoptic.model.fifosys.cfsm.CFSM cFSM13 = new dynoptic.model.fifosys.cfsm.CFSM((int)(byte)10, (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId11);
    boolean b14 = obsFSMState2.equals((java.lang.Object)arraylist_channelId11);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType15 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState16 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType15);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId17 = immutableMultiChState16.getChannelIds();
    java.util.List<java.util.List<synoptic.model.channelid.ChannelId>> list_list_channelId18 = dynoptic.util.Util.get2DPermutations((java.lang.Iterable<synoptic.model.channelid.ChannelId>)arraylist_channelId11, (java.lang.Iterable<synoptic.model.channelid.ChannelId>)list_channelId17);
    // The following exception was thrown during execution in test generation
    try {
    synoptic.model.event.DistEventType distEventType19 = mcscm.McScMCExample.parseScmEventStr("", list_channelId17);
      org.junit.Assert.fail("Expected exception of type mcscm.VerifyOutputParseException");
    } catch (mcscm.VerifyOutputParseException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_list_channelId18);

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test109"); }

    dynoptic.invariants.BinaryInvariant binaryInvariant0 = null;
    dynoptic.invariants.checkers.AFbyChecker aFbyChecker1 = new dynoptic.invariants.checkers.AFbyChecker(binaryInvariant0);
    dynoptic.invariants.checkers.AFbyChecker aFbyChecker2 = aFbyChecker1.getClone();
    dynoptic.invariants.checkers.AFbyChecker aFbyChecker3 = aFbyChecker2.getClone();
    boolean b4 = aFbyChecker2.isFail();
    boolean b5 = aFbyChecker2.isFail();
    synoptic.model.event.DistEventType distEventType6 = null;
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.invariants.checkers.BinChecker.Validity validity7 = aFbyChecker2.transition(distEventType6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(aFbyChecker2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(aFbyChecker3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test110"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array1 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState2 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, fSMState_array1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState5 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, fSMState_array4);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState8 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, fSMState_array7);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM11 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, 0);
    int i12 = fSM11.getPid();
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array14 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState15 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState15, fSMState_array14);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState18 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState18, fSMState_array17);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array20 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState21 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState21, fSMState_array20);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM24 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState15, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState18, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState21, 0);
    java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState> set_fSMState25 = fSM24.getAcceptStates();
    int i26 = fSM24.getPid();
    dynoptic.model.automaton.EventTypeEncodings eventTypeEncodings27 = fSM24.getEventTypeEncodings();
    dynoptic.model.automaton.EncodedAutomaton encodedAutomaton28 = fSM11.getEncodedAutomaton(eventTypeEncodings27);
    java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState> set_fSMState29 = fSM11.getStates();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_fSMState25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(eventTypeEncodings27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(encodedAutomaton28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_fSMState29);

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test111"); }

    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array1 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState2 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState2, obsFifoSysState_array1);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState4 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)10, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState2);
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> set_obsFifoSysState5 = gFSMState4.getTerminalObs();
    java.lang.String str6 = gFSMState4.toIntermediateString();
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> set_obsFifoSysState8 = gFSMState4.getTerminalObsForPid((int)(short)1);
    dynoptic.model.fifosys.gfsm.observed.ObsDistEventType obsDistEventType9 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMState> set_gFSMState10 = gFSMState4.getNextStates(obsDistEventType9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsFifoSysState5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Part-0-388586400"+ "'", str6.equals("Part-0-388586400"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsFifoSysState8);

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test112"); }

    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSys obsFifoSys1 = null;
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.model.export.GraphExporter.exportObsFifoSys("Part-0-781607459", obsFifoSys1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test113"); }

    java.lang.String[] str_array15 = new java.lang.String[] { "Part-0-357159137", "0", "} // digraph {\n", "1", "Part-0-879220873", "CExample[\n]", "", "[]", "3.19", "CExample[\n]", "amd64", "Part-0-781607459", "1", "Part-0-879220873", "" };
    java.util.ArrayList<java.lang.String> arraylist_str16 = new java.util.ArrayList<java.lang.String>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str16, str_array15);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState19 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array21 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId22 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId22, channelId_array21);
    dynoptic.model.fifosys.cfsm.CFSM cFSM24 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId22);
    boolean b25 = obsFSMState19.equals((java.lang.Object)arraylist_channelId22);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState27 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array29 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId30 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId30, channelId_array29);
    dynoptic.model.fifosys.cfsm.CFSM cFSM32 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId30);
    boolean b33 = obsFSMState27.equals((java.lang.Object)arraylist_channelId30);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState34 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath36 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState34, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState37 = gFSMPath36.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState38 = dynoptic.util.Util.newPair(obsFSMState27, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState37);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState40 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState42 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array43 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState19, obsFSMState27, obsFSMState40, obsFSMState42 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState44 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState44, obsFSMState_array43);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState46 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState44);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType47 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState48 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType47);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId49 = immutableMultiChState48.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState50 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState46, immutableMultiChState48);
    synoptic.model.channelid.ChannelId[] channelId_array52 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId53 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b54 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId53, channelId_array52);
    dynoptic.model.fifosys.cfsm.CFSM cFSM55 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId53);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId56 = dynoptic.util.Util.newList((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId53);
    boolean b57 = obsMultFSMState46.equals((java.lang.Object)arraylist_channelId53);
    // The following exception was thrown during execution in test generation
    try {
    mcscm.VerifyResult verifyResult58 = new mcscm.VerifyResult((java.util.List<java.lang.String>)arraylist_str16, (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId53);
      org.junit.Assert.fail("Expected exception of type mcscm.VerifyOutputParseException");
    } catch (mcscm.VerifyOutputParseException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test114"); }

    synoptic.model.event.DistEventType[] distEventType_array0 = new synoptic.model.event.DistEventType[] {  };
    java.util.LinkedHashSet<synoptic.model.event.DistEventType> linkedhashset_distEventType1 = new java.util.LinkedHashSet<synoptic.model.event.DistEventType>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<synoptic.model.event.DistEventType>)linkedhashset_distEventType1, distEventType_array0);
    dynoptic.model.automaton.EventTypeEncodings eventTypeEncodings3 = new dynoptic.model.automaton.EventTypeEncodings((java.util.Set<synoptic.model.event.DistEventType>)linkedhashset_distEventType1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState6 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState6, fSMState_array5);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array8 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState9 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState9, fSMState_array8);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState12 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState12, fSMState_array11);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM15 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState6, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState9, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState12, 0);
    java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState> set_fSMState16 = fSM15.getAcceptStates();
    int i17 = fSM15.getPid();
    dynoptic.model.automaton.EncodedAutomaton encodedAutomaton18 = new dynoptic.model.automaton.EncodedAutomaton(eventTypeEncodings3, fSM15);
    encodedAutomaton18.minimize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(distEventType_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_fSMState16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test115"); }

    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array1 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState2 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState2, obsFifoSysState_array1);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState4 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)10, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState2);
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array6 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState7 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState7, obsFifoSysState_array6);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState9 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)10, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState7);
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> set_obsFifoSysState10 = dynoptic.util.Util.newSet((java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState7);
    gFSMState4.addAllObs((java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState7);
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> set_obsFifoSysState12 = gFSMState4.getInitialObservations();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsFifoSysState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsFifoSysState12);

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test116"); }

    dynoptic.model.fifosys.gfsm.GFSMState gFSMState0 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath2 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState0, (int)(byte)100);
    int i3 = gFSMPath2.getPid();
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath4 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMPath2);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType6 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState7 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType6);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId8 = immutableMultiChState7.getChannelIds();
    dynoptic.model.fifosys.gfsm.GFSM gFSM9 = new dynoptic.model.fifosys.gfsm.GFSM((int)(byte)1, list_channelId8);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    mcscm.McScMCExample mcScMCExample15 = new mcscm.McScMCExample((java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    java.util.List<synoptic.model.event.DistEventType> list_distEventType16 = mcScMCExample15.getEvents();
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMPath> set_gFSMPath18 = gFSM9.getCExamplePaths(mcScMCExample15, 1);
    boolean b19 = gFSMPath4.refine(gFSM9);
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMState> set_gFSMState21 = gFSM9.getInitStatesForPid((int)(short)-1);
    synoptic.model.channelid.ChannelId[] channelId_array23 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId24 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId24, channelId_array23);
    dynoptic.model.fifosys.cfsm.CFSM cFSM26 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId24);
    mcscm.McScMCExample mcScMCExample27 = new mcscm.McScMCExample((java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId24);
    dynoptic.model.fifosys.cfsm.CFSMExecution cFSMExecution28 = new dynoptic.model.fifosys.cfsm.CFSMExecution(mcScMCExample27);
    boolean b29 = gFSM9.equals((java.lang.Object)mcScMCExample27);
    // The following exception was thrown during execution in test generation
    try {
    mcScMCExample27.addScmEventStrToPath("Part-0-879220873");
      org.junit.Assert.fail("Expected exception of type mcscm.VerifyOutputParseException");
    } catch (mcscm.VerifyOutputParseException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_distEventType16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_gFSMPath18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_gFSMState21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test117"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    int i2 = obsFSMState1.getPid();
    obsFSMState1.markInit();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode obsDAGNode4 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(obsFSMState1);
    boolean b5 = obsDAGNode4.isInitState();
    boolean b6 = obsDAGNode4.isEnabled();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode obsDAGNode7 = obsDAGNode4.getNextState();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obsDAGNode7);

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test118"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState33 = obsFifoSysState32.getFSMStates();
    synoptic.model.channelid.ChannelId[] channelId_array35 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId36 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b37 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId36, channelId_array35);
    dynoptic.model.fifosys.cfsm.CFSM cFSM38 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId36);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId39 = dynoptic.util.Util.newList((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId36);
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState40 = dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds(list_channelId39);
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState41 = mutableMultiChState40.clone();
    dynoptic.model.fifosys.exec.FifoSysExecState<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState> fifosysexecstate_obsMultFSMState42 = new dynoptic.model.fifosys.exec.FifoSysExecState<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState>(obsMultFSMState33, mutableMultiChState40);
    // The following exception was thrown during execution in test generation
    try {
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.ObsDistEventType> set_obsDistEventType43 = obsMultFSMState33.getTransitioningEvents();
      org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableMultiChState40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableMultiChState41);

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test119"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array1 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState2 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, fSMState_array1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState5 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, fSMState_array4);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState8 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, fSMState_array7);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM11 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, 0);
    java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState> set_fSMState12 = fSM11.getAcceptStates();
    dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType> fsmalphabet_distEventType13 = fSM11.getAlphabet();
    synoptic.model.event.DistEventType distEventType14 = null;
    boolean b15 = fsmalphabet_distEventType13.add(distEventType14);
    int i16 = fsmalphabet_distEventType13.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_fSMState12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fsmalphabet_distEventType13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test120"); }

    dynoptic.util.Util util0 = new dynoptic.util.Util();

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test121"); }

    synoptic.model.event.DistEventType[] distEventType_array0 = new synoptic.model.event.DistEventType[] {  };
    java.util.LinkedHashSet<synoptic.model.event.DistEventType> linkedhashset_distEventType1 = new java.util.LinkedHashSet<synoptic.model.event.DistEventType>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<synoptic.model.event.DistEventType>)linkedhashset_distEventType1, distEventType_array0);
    dynoptic.model.automaton.EventTypeEncodings eventTypeEncodings3 = new dynoptic.model.automaton.EventTypeEncodings((java.util.Set<synoptic.model.event.DistEventType>)linkedhashset_distEventType1);
    synoptic.model.event.DistEventType distEventType4 = null;
    char char5 = eventTypeEncodings3.getEncoding(distEventType4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(distEventType_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(char5 == '\u03E8');

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test122"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((int)(byte)1, "} // digraph {\n", false, true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState4);

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test123"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState3 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array5 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId6 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId6, channelId_array5);
    dynoptic.model.fifosys.cfsm.CFSM cFSM8 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId6);
    boolean b9 = obsFSMState3.equals((java.lang.Object)arraylist_channelId6);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)(byte)10, (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState3.equals((java.lang.Object)arraylist_channelId12);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType16 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState17 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType16);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId18 = immutableMultiChState17.getChannelIds();
    java.util.List<java.util.List<synoptic.model.channelid.ChannelId>> list_list_channelId19 = dynoptic.util.Util.get2DPermutations((java.lang.Iterable<synoptic.model.channelid.ChannelId>)arraylist_channelId12, (java.lang.Iterable<synoptic.model.channelid.ChannelId>)list_channelId18);
    dynoptic.model.fifosys.cfsm.CFSM cFSM20 = new dynoptic.model.fifosys.cfsm.CFSM((int)(byte)1, list_channelId18);
    dynoptic.model.fifosys.cfsm.CFSM cFSM21 = new dynoptic.model.fifosys.cfsm.CFSM(17, list_channelId18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_list_channelId19);

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test124"); }

    java.lang.String[] str_array10 = new java.lang.String[] { "0", "Part-0-1970692513", "mcscm.VerifyOutputParseException: Part-0-1970692513", "state 97 :\n", "", "hi!", "Part-0-835782266", "Part-0-1714230415", "(_)", "amd64" };
    java.util.ArrayList<java.lang.String> arraylist_str11 = new java.util.ArrayList<java.lang.String>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str11, str_array10);
    synoptic.model.channelid.ChannelId[] channelId_array14 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId15 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId15, channelId_array14);
    dynoptic.model.fifosys.cfsm.CFSM cFSM17 = new dynoptic.model.fifosys.cfsm.CFSM((int)(byte)10, (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId15);
    // The following exception was thrown during execution in test generation
    try {
    mcscm.VerifyResult verifyResult18 = new mcscm.VerifyResult((java.util.List<java.lang.String>)arraylist_str11, (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId15);
      org.junit.Assert.fail("Expected exception of type mcscm.VerifyOutputParseException");
    } catch (mcscm.VerifyOutputParseException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test125"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array1 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState2 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, fSMState_array1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState5 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, fSMState_array4);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState8 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, fSMState_array7);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM11 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, 0);
    java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState> set_fSMState12 = fSM11.getAcceptStates();
    int i13 = fSM11.getPid();
    dynoptic.model.automaton.EventTypeEncodings eventTypeEncodings14 = fSM11.getEventTypeEncodings();
    // The following exception was thrown during execution in test generation
    try {
    synoptic.model.event.DistEventType distEventType16 = eventTypeEncodings14.getEventType('#');
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_fSMState12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(eventTypeEncodings14);

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test126"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array0 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState1 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState1, fSMState_array0);
    dynoptic.model.fifosys.cfsm.CFSMState cFSMState3 = new dynoptic.model.fifosys.cfsm.CFSMState((java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState1);
    java.util.Set<synoptic.model.event.DistEventType> set_distEventType4 = cFSMState3.getTransitioningEvents();
    java.util.Set<dynoptic.model.fifosys.cfsm.CFSMState> set_cFSMState5 = cFSMState3.getNextStates();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_distEventType4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_cFSMState5);

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test127"); }

    dynoptic.invariants.BinaryInvariant binaryInvariant0 = null;
    dynoptic.invariants.checkers.AFbyChecker aFbyChecker1 = new dynoptic.invariants.checkers.AFbyChecker(binaryInvariant0);
    dynoptic.invariants.checkers.AFbyChecker aFbyChecker2 = aFbyChecker1.getClone();
    dynoptic.invariants.checkers.AFbyChecker aFbyChecker3 = aFbyChecker2.getClone();
    boolean b4 = aFbyChecker2.isFail();
    synoptic.model.event.DistEventType distEventType5 = null;
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.invariants.checkers.BinChecker.Validity validity6 = aFbyChecker2.transition(distEventType5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(aFbyChecker2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(aFbyChecker3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test128"); }

    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath1 = new dynoptic.model.fifosys.gfsm.GFSMPath((int)(short)-1);

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test129"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState3 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    int i4 = obsFSMState3.getPid();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState6 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array8 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId9 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId9, channelId_array8);
    dynoptic.model.fifosys.cfsm.CFSM cFSM11 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId9);
    boolean b12 = obsFSMState6.equals((java.lang.Object)arraylist_channelId9);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState13 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath15 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState13, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState16 = gFSMPath15.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState17 = dynoptic.util.Util.newPair(obsFSMState6, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState16);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState19 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    int i20 = obsFSMState19.getPid();
    obsFSMState19.markInit();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array22 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState3, obsFSMState6, obsFSMState19 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState23 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState23, obsFSMState_array22);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState25 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState23);
    boolean b26 = obsMultFSMState25.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test130"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array1 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState2 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, fSMState_array1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState5 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, fSMState_array4);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState8 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, fSMState_array7);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM11 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, 0);
    java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState> set_fSMState12 = fSM11.getStates();
    boolean b13 = fSM11.isDeterministic();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_fSMState12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test131"); }

    dynoptic.model.fifosys.FifoSys<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState,dynoptic.model.fifosys.gfsm.observed.ObsDistEventType> fifosys_obsMultFSMState_obsDistEventType0 = null;
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState2 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    int i5 = obsFSMState4.getPid();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState7 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array9 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId10 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId10, channelId_array9);
    dynoptic.model.fifosys.cfsm.CFSM cFSM12 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId10);
    boolean b13 = obsFSMState7.equals((java.lang.Object)arraylist_channelId10);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState14 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath16 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState14, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState17 = gFSMPath16.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState18 = dynoptic.util.Util.newPair(obsFSMState7, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState17);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState20 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    int i21 = obsFSMState20.getPid();
    obsFSMState20.markInit();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array23 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState2, obsFSMState4, obsFSMState7, obsFSMState20 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState24 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState24, obsFSMState_array23);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState26 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState24);
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.model.fifosys.exec.FifoSysExecution<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState> fifosysexecution_obsMultFSMState27 = new dynoptic.model.fifosys.exec.FifoSysExecution<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState>(fifosys_obsMultFSMState_obsDistEventType0, obsMultFSMState26);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState26);

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test132"); }

    dynoptic.model.fifosys.gfsm.GFSMState gFSMState0 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath2 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState0, (int)(byte)100);
    java.util.List<synoptic.model.event.DistEventType> list_distEventType3 = gFSMPath2.getEvents();
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState4 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath6 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState4, (int)(byte)100);
    int i7 = gFSMPath6.getPid();
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath8 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMPath6);
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath9 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMPath2, gFSMPath8);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState10 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath12 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState10, (int)(byte)100);
    int i13 = gFSMPath12.getPid();
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath14 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMPath12);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType16 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState17 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType16);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId18 = immutableMultiChState17.getChannelIds();
    dynoptic.model.fifosys.gfsm.GFSM gFSM19 = new dynoptic.model.fifosys.gfsm.GFSM((int)(byte)1, list_channelId18);
    synoptic.model.channelid.ChannelId[] channelId_array21 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId22 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId22, channelId_array21);
    dynoptic.model.fifosys.cfsm.CFSM cFSM24 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId22);
    mcscm.McScMCExample mcScMCExample25 = new mcscm.McScMCExample((java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId22);
    java.util.List<synoptic.model.event.DistEventType> list_distEventType26 = mcScMCExample25.getEvents();
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMPath> set_gFSMPath28 = gFSM19.getCExamplePaths(mcScMCExample25, 1);
    boolean b29 = gFSMPath14.refine(gFSM19);
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMState> set_gFSMState31 = gFSM19.getInitStatesForPid((int)(short)-1);
    boolean b32 = gFSMPath2.refine(gFSM19);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState33 = gFSMPath2.getStates();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_distEventType3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_distEventType26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_gFSMPath28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_gFSMState31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState33);

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test133"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.ObsDistEventType> set_obsDistEventType33 = obsFifoSysState32.getTransitioningEvents();
    boolean b35 = obsFifoSysState32.isInitForPid(1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsDistEventType33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test134"); }

    mcscm.McScM mcScM1 = new mcscm.McScM("CExample[\n]");
    // The following exception was thrown during execution in test generation
    try {
    mcScM1.verify("Part-0-1970692513", (int)(short)-1);
      org.junit.Assert.fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
    }

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test135"); }

    dynoptic.invariants.BinaryInvariant binaryInvariant0 = null;
    dynoptic.invariants.checkers.AFbyChecker aFbyChecker1 = new dynoptic.invariants.checkers.AFbyChecker(binaryInvariant0);
    dynoptic.invariants.checkers.AFbyChecker aFbyChecker2 = aFbyChecker1.getClone();
    dynoptic.invariants.checkers.AFbyChecker aFbyChecker3 = aFbyChecker2.getClone();
    boolean b4 = aFbyChecker3.isFail();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(aFbyChecker2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(aFbyChecker3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test136"); }

    java.lang.String[] str_array6 = new java.lang.String[] { "mcscm.VerifyOutputParseException: Part-0-1970692513", "Part-0-795767496", "} // digraph {\n", "3.19", "state 97 :\n", "0" };
    java.io.File file8 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Process process10 = mcscm.ProcessUtil.runVerifyProcess(str_array6, "Part-0-879220873", file8, (int)(short)10);
      org.junit.Assert.fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test137"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState fSMState4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, (int)'a', (int)(short)10);
    boolean b5 = fSMState4.isAccept();
    boolean b6 = fSMState4.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test138"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    int i2 = obsFSMState1.getPid();
    obsFSMState1.markInit();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode obsDAGNode4 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(obsFSMState1);
    obsDAGNode4.setOccurred(true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode obsDAGNode7 = null;
    // The following exception was thrown during execution in test generation
    try {
    obsDAGNode4.addRemoteDependency(obsDAGNode7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test139"); }

    dynoptic.model.export.DotExportFormatter dotExportFormatter0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String str1 = dotExportFormatter0.endGraphString();
    synoptic.model.event.IDistEventType iDistEventType4 = null;
    synoptic.model.event.DistEventType[] distEventType_array5 = new synoptic.model.event.DistEventType[] {  };
    dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType> fsmalphabet_distEventType6 = new dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<synoptic.model.event.DistEventType>)fsmalphabet_distEventType6, distEventType_array5);
    boolean b8 = fsmalphabet_distEventType6.isEmpty();
    java.util.Set<java.lang.String> set_str9 = fsmalphabet_distEventType6.getLocalEventScmStrings();
    java.util.Set<java.lang.String> set_str10 = dynoptic.util.Util.newSet(set_str9);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str11 = dotExportFormatter0.edgeToStringWithDistEvent((int)(short)0, 10, iDistEventType4, set_str10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "} // digraph {\n"+ "'", str1.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(distEventType_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_str10);

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test140"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState fSMState0 = null;
    dynoptic.model.fifosys.cfsm.CFSMState cFSMState1 = new dynoptic.model.fifosys.cfsm.CFSMState(fSMState0);
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.model.fifosys.cfsm.fsm.FSMState fSMState3 = cFSMState1.getFSMState(17);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test141"); }

    java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> list_obsFSMState0 = null;
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState(list_obsFSMState0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test142"); }

    mcscm.ScmSyntaxException scmSyntaxException1 = new mcscm.ScmSyntaxException("Part-0-1970692513");

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test143"); }

    synoptic.model.channelid.ChannelId[] channelId_array1 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId2 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId2, channelId_array1);
    dynoptic.model.fifosys.cfsm.CFSM cFSM4 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId2);
    dynoptic.invariants.BinaryInvariant binaryInvariant5 = null;
    // The following exception was thrown during execution in test generation
    try {
    cFSM4.augmentWithInvTracing(binaryInvariant5);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test144"); }

    java.util.logging.Logger logger0 = dynoptic.main.DynopticMain.logger;
    dynoptic.model.automaton.EncodedAutomaton.logger = logger0;
    dynoptic.main.DynopticMain.logger = logger0;
    dynoptic.model.automaton.EncodedAutomaton.logger = logger0;
    dynoptic.model.automaton.EncodedAutomaton.logger = logger0;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(logger0);

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test145"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState fSMState0 = null;
    dynoptic.model.fifosys.cfsm.CFSMState cFSMState1 = new dynoptic.model.fifosys.cfsm.CFSMState(fSMState0);
    int i2 = cFSMState1.getNumProcesses();
    int i3 = cFSMState1.getNumProcesses();
    // The following exception was thrown during execution in test generation
    try {
    boolean b4 = cFSMState1.isAccept();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 1);

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test146"); }

    dynoptic.model.fifosys.gfsm.GFSMState gFSMState0 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath2 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState0, (int)(byte)100);
    java.util.List<synoptic.model.event.DistEventType> list_distEventType3 = gFSMPath2.getEvents();
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState4 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath6 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState4, (int)(byte)100);
    int i7 = gFSMPath6.getPid();
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath8 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMPath6);
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath9 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMPath2, gFSMPath8);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState10 = gFSMPath8.getStates();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_distEventType3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState10);

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test147"); }

    java.util.List<java.lang.Iterable<java.util.ArrayList<java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>>>> list_iterable_arraylist_list_fSMState0 = dynoptic.util.Util.newList();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_iterable_arraylist_list_fSMState0);

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test148"); }

    synoptic.model.event.DistEventType[] distEventType_array0 = new synoptic.model.event.DistEventType[] {  };
    dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType> fsmalphabet_distEventType1 = new dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<synoptic.model.event.DistEventType>)fsmalphabet_distEventType1, distEventType_array0);
    java.lang.String str3 = fsmalphabet_distEventType1.anyEventScmQRe();
    java.lang.String str4 = fsmalphabet_distEventType1.anyEventScmQRe();
    java.lang.String str5 = fsmalphabet_distEventType1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(distEventType_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "(_)"+ "'", str3.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "(_)"+ "'", str4.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test149"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState fSMState4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (int)(short)1, (int)'a');
    boolean b6 = fSMState4.equals((java.lang.Object)(-1L));
    dynoptic.model.fifosys.channel.channelid.LocalEventsChannelId localEventsChannelId7 = null;
    java.lang.String str8 = fSMState4.toScmString(localEventsChannelId7);
    boolean b9 = fSMState4.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "state 97 :\n"+ "'", str8.equals("state 97 :\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test150"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    int i2 = obsFSMState1.getPid();
    obsFSMState1.markInit();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode obsDAGNode4 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(obsFSMState1);
    boolean b5 = obsDAGNode4.isInitState();
    boolean b6 = obsDAGNode4.isEnabled();
    synoptic.model.event.Event event7 = obsDAGNode4.getNextEvent();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(event7);

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test151"); }

    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath1 = new dynoptic.model.fifosys.gfsm.GFSMPath((int)'\u03E8');

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test152"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array0 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState1 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState1, fSMState_array0);
    dynoptic.model.fifosys.cfsm.CFSMState cFSMState3 = new dynoptic.model.fifosys.cfsm.CFSMState((java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState1);
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.model.fifosys.cfsm.fsm.FSMState fSMState5 = cFSMState3.getFSMState((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test153"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    synoptic.model.channelid.ChannelId[] channelId_array34 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId35 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId35, channelId_array34);
    dynoptic.model.fifosys.cfsm.CFSM cFSM37 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId35);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId38 = dynoptic.util.Util.newList((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId35);
    boolean b39 = obsMultFSMState28.equals((java.lang.Object)arraylist_channelId35);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType41 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState42 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType41);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId43 = immutableMultiChState42.getChannelIds();
    dynoptic.model.fifosys.gfsm.GFSM gFSM44 = new dynoptic.model.fifosys.gfsm.GFSM((int)(byte)1, list_channelId43);
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState45 = dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds(list_channelId43);
    dynoptic.model.fifosys.exec.FifoSysExecState<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState> fifosysexecstate_obsMultFSMState46 = new dynoptic.model.fifosys.exec.FifoSysExecState<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState>(obsMultFSMState28, mutableMultiChState45);
    dynoptic.model.fifosys.gfsm.observed.ObsDistEventType obsDistEventType47 = null;
    // The following exception was thrown during execution in test generation
    try {
    mutableMultiChState45.enqueue(obsDistEventType47);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableMultiChState45);

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test154"); }

    dynoptic.main.OptionException optionException1 = new dynoptic.main.OptionException("state 97 :\n");

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test155"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array1 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState2 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, fSMState_array1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState5 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, fSMState_array4);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState8 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, fSMState_array7);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM11 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, 0);
    java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState> set_fSMState12 = fSM11.getAcceptStates();
    dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType> fsmalphabet_distEventType13 = fSM11.getAlphabet();
    synoptic.model.event.DistEventType distEventType14 = null;
    boolean b15 = fsmalphabet_distEventType13.add(distEventType14);
    fsmalphabet_distEventType13.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_fSMState12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fsmalphabet_distEventType13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test156"); }

    dynoptic.invariants.BinaryInvariant binaryInvariant0 = null;
    dynoptic.invariants.checkers.NFbyChecker nFbyChecker1 = new dynoptic.invariants.checkers.NFbyChecker(binaryInvariant0);
    dynoptic.invariants.checkers.NFbyChecker nFbyChecker2 = nFbyChecker1.getClone();
    dynoptic.invariants.checkers.NFbyChecker nFbyChecker3 = nFbyChecker1.getClone();
    synoptic.model.event.DistEventType distEventType4 = null;
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.invariants.checkers.BinChecker.Validity validity5 = nFbyChecker1.transition(distEventType4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(nFbyChecker2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(nFbyChecker3);

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test157"); }

    dynoptic.model.fifosys.gfsm.GFSMState gFSMState1 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)1);
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> set_obsFifoSysState2 = gFSMState1.getObservedStates();
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> set_obsFifoSysState4 = gFSMState1.getTerminalObsForPid((int)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsFifoSysState2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsFifoSysState4);

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test158"); }

    mcscm.VerifyOutputParseException verifyOutputParseException1 = new mcscm.VerifyOutputParseException("[]");

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test159"); }

    dynoptic.model.fifosys.gfsm.GFSMState gFSMState0 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath2 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState0, (int)(byte)100);
    java.util.List<synoptic.model.event.DistEventType> list_distEventType3 = gFSMPath2.getEvents();
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState4 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath6 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState4, (int)(byte)100);
    int i7 = gFSMPath6.getPid();
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath8 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMPath6);
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath9 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMPath2, gFSMPath8);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState10 = gFSMPath9.lastState();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str11 = gFSMPath9.toString();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_distEventType3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(gFSMState10);

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test160"); }

    mcscm.VerifyOutputParseException verifyOutputParseException1 = new mcscm.VerifyOutputParseException("} // digraph {\n");

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test161"); }

    synoptic.model.event.DistEventType[] distEventType_array0 = new synoptic.model.event.DistEventType[] {  };
    dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType> fsmalphabet_distEventType1 = new dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<synoptic.model.event.DistEventType>)fsmalphabet_distEventType1, distEventType_array0);
    java.lang.String str3 = fsmalphabet_distEventType1.anyEventScmQRe();
    int i4 = fsmalphabet_distEventType1.size();
    java.lang.String str5 = fsmalphabet_distEventType1.toString();
    fsmalphabet_distEventType1.clear();
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState7 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath9 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState7, (int)(byte)100);
    int i10 = gFSMPath9.getPid();
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState11 = gFSMPath9.getStates();
    boolean b12 = fsmalphabet_distEventType1.remove((java.lang.Object)gFSMPath9);
    java.lang.String str13 = fsmalphabet_distEventType1.anyEventScmQRe();
    java.lang.Object obj14 = null;
    boolean b15 = fsmalphabet_distEventType1.contains(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(distEventType_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "(_)"+ "'", str3.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "(_)"+ "'", str13.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test162"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array34 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState35 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState35, obsFifoSysState_array34);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState37 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)10, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState35);
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array39 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState40 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState40, obsFifoSysState_array39);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState42 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)10, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState40);
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> set_obsFifoSysState43 = dynoptic.util.Util.newSet((java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState40);
    gFSMState37.addAllObs((java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState40);
    gFSMState37.recreateCachedTransitions();
    java.lang.String str46 = gFSMState37.toIntermediateString();
    obsFifoSysState32.setParent(gFSMState37);
    dynoptic.model.fifosys.gfsm.observed.ObsDistEventType obsDistEventType48 = null;
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState49 = obsFifoSysState32.getNextState(obsDistEventType48);
    java.lang.String str50 = obsFifoSysState32.toLongString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsFifoSysState43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Part-0-2141310353"+ "'", str46.equals("Part-0-2141310353"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "ObsFifoSysState[FSMStates[i_a0_t, i_a0_t, i_a0_t, i_a0_t]; ChState]]"+ "'", str50.equals("ObsFifoSysState[FSMStates[i_a0_t, i_a0_t, i_a0_t, i_a0_t]; ChState]]"));

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test163"); }

    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array1 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState2 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState2, obsFifoSysState_array1);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState4 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)10, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState2);
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> set_obsFifoSysState5 = gFSMState4.getTerminalObs();
    java.lang.String str6 = gFSMState4.toIntermediateString();
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> set_obsFifoSysState8 = gFSMState4.getTerminalObsForPid((int)'#');
    dynoptic.model.fifosys.gfsm.observed.ObsDistEventType obsDistEventType9 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMState> set_gFSMState10 = gFSMState4.getNextStates(obsDistEventType9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsFifoSysState5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Part-0-766298129"+ "'", str6.equals("Part-0-766298129"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsFifoSysState8);

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test164"); }

    synoptic.model.channelid.ChannelId[] channelId_array1 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId2 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId2, channelId_array1);
    dynoptic.model.fifosys.cfsm.CFSM cFSM4 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId2);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId5 = dynoptic.util.Util.newList((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId2);
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState6 = dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds(list_channelId5);
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState7 = mutableMultiChState6.clone();
    synoptic.model.channelid.ChannelId channelId8 = null;
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.model.fifosys.gfsm.observed.ObsDistEventType obsDistEventType9 = mutableMultiChState6.peek(channelId8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableMultiChState6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableMultiChState7);

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test165"); }

    mcscm.McScM mcScM1 = new mcscm.McScM("CExample[\n]");
    // The following exception was thrown during execution in test generation
    try {
    mcScM1.verify("ChState]", (int)(byte)0);
      org.junit.Assert.fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
    }

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test166"); }

    synoptic.model.channelid.ChannelId[] channelId_array1 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId2 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId2, channelId_array1);
    dynoptic.model.fifosys.cfsm.CFSM cFSM4 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId2);
    mcscm.McScMCExample mcScMCExample5 = new mcscm.McScMCExample((java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId2);
    dynoptic.model.fifosys.cfsm.CFSMExecution cFSMExecution6 = new dynoptic.model.fifosys.cfsm.CFSMExecution(mcScMCExample5);
    dynoptic.model.fifosys.cfsm.CFSMExecution cFSMExecution7 = new dynoptic.model.fifosys.cfsm.CFSMExecution(mcScMCExample5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test167"); }

    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType0 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState1 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType0);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId2 = immutableMultiChState1.getChannelIds();
    boolean b3 = immutableMultiChState1.isEmpty();
    synoptic.model.event.DistEventType distEventType4 = null;
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState5 = immutableMultiChState1.getNextChState(distEventType4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test168"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    int i33 = immutableMultiChState30.topOfQueuesHash();
    boolean b35 = immutableMultiChState30.isEmptyForPid((int)(byte)-1);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId36 = immutableMultiChState30.getChannelIds();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId36);

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test169"); }

    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSys obsFifoSys1 = null;
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.model.export.GraphExporter.exportObsFifoSys("Part-0-2061659540", obsFifoSys1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test170"); }

    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType2 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState3 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType2);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId4 = immutableMultiChState3.getChannelIds();
    dynoptic.model.fifosys.gfsm.GFSM gFSM5 = new dynoptic.model.fifosys.gfsm.GFSM((int)(byte)1, list_channelId4);
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMState> set_gFSMState6 = gFSM5.getAcceptStates();
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType8 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState9 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType8);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId10 = immutableMultiChState9.getChannelIds();
    dynoptic.model.fifosys.gfsm.GFSM gFSM11 = new dynoptic.model.fifosys.gfsm.GFSM((int)(byte)1, list_channelId10);
    synoptic.model.channelid.ChannelId[] channelId_array13 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId14 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId14, channelId_array13);
    dynoptic.model.fifosys.cfsm.CFSM cFSM16 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId14);
    mcscm.McScMCExample mcScMCExample17 = new mcscm.McScMCExample((java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId14);
    java.util.List<synoptic.model.event.DistEventType> list_distEventType18 = mcScMCExample17.getEvents();
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMPath> set_gFSMPath20 = gFSM11.getCExamplePaths(mcScMCExample17, 1);
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMPath> set_gFSMPath22 = gFSM5.getCExamplePaths(mcScMCExample17, 100);
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMState> set_gFSMState23 = gFSM5.getAcceptStates();
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMState> set_gFSMState25 = gFSM5.getAcceptStatesForPid((int)'4');
    dynoptic.model.export.GraphExporter.exportGFSM("[]", gFSM5);
    java.lang.String str27 = gFSM5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_gFSMState6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_distEventType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_gFSMPath20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_gFSMPath22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_gFSMState23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_gFSMState25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "GFSM[num-states=0] : "+ "'", str27.equals("GFSM[num-states=0] : "));

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test171"); }

    synoptic.model.channelid.ChannelId[] channelId_array1 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId2 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId2, channelId_array1);
    // The following exception was thrown during execution in test generation
    try {
    synoptic.model.event.DistEventType distEventType4 = mcscm.McScMCExample.parseScmEventStr("Part-0-2061659540", (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId2);
      org.junit.Assert.fail("Expected exception of type mcscm.VerifyOutputParseException");
    } catch (mcscm.VerifyOutputParseException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test172"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.ObsDistEventType> set_obsDistEventType33 = obsFifoSysState32.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.observed.ObsDistEventType obsDistEventType34 = null;
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState35 = obsFifoSysState32.getNextState(obsDistEventType34);
    boolean b36 = obsFifoSysState32.isInitial();
    java.lang.String str37 = obsFifoSysState32.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState39 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array41 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId42 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b43 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId42, channelId_array41);
    dynoptic.model.fifosys.cfsm.CFSM cFSM44 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId42);
    boolean b45 = obsFSMState39.equals((java.lang.Object)arraylist_channelId42);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState47 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array49 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId50 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId50, channelId_array49);
    dynoptic.model.fifosys.cfsm.CFSM cFSM52 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId50);
    boolean b53 = obsFSMState47.equals((java.lang.Object)arraylist_channelId50);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState54 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath56 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState54, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState57 = gFSMPath56.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState58 = dynoptic.util.Util.newPair(obsFSMState47, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState57);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState60 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState62 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array63 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState39, obsFSMState47, obsFSMState60, obsFSMState62 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState64 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b65 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState64, obsFSMState_array63);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState66 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState64);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType67 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState68 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType67);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId69 = immutableMultiChState68.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState70 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState66, immutableMultiChState68);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState71 = obsFifoSysState70.getParent();
    obsFifoSysState32.setParent(gFSMState71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsDistEventType33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "1"+ "'", str37.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gFSMState71);

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test173"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType33 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState34 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType33);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId35 = immutableMultiChState34.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState36 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState34);
    boolean b38 = obsMultFSMState28.isAcceptForPid((int)(byte)1);
    synoptic.model.channelid.ChannelId[] channelId_array40 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId41 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b42 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId41, channelId_array40);
    dynoptic.model.fifosys.cfsm.CFSM cFSM43 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId41);
    dynoptic.model.fifosys.exec.FifoSysExecState<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState> fifosysexecstate_obsMultFSMState44 = new dynoptic.model.fifosys.exec.FifoSysExecState<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState>(obsMultFSMState28, (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId41);
    // The following exception was thrown during execution in test generation
    try {
    boolean b46 = fifosysexecstate_obsMultFSMState44.isAcceptForPid((int)(byte)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test174"); }

    java.lang.String str0 = mcscm.Os.getOsVersion();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str0 + "' != '" + "3.19.0-25-generic"+ "'", str0.equals("3.19.0-25-generic"));

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test175"); }

    synoptic.model.event.DistEventType[] distEventType_array0 = new synoptic.model.event.DistEventType[] {  };
    dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType> fsmalphabet_distEventType1 = new dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<synoptic.model.event.DistEventType>)fsmalphabet_distEventType1, distEventType_array0);
    java.lang.String str3 = fsmalphabet_distEventType1.anyEventScmQRe();
    int i4 = fsmalphabet_distEventType1.size();
    java.lang.String str5 = fsmalphabet_distEventType1.toString();
    fsmalphabet_distEventType1.clear();
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState7 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath9 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState7, (int)(byte)100);
    int i10 = gFSMPath9.getPid();
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState11 = gFSMPath9.getStates();
    boolean b12 = fsmalphabet_distEventType1.remove((java.lang.Object)gFSMPath9);
    java.lang.String str13 = fsmalphabet_distEventType1.anyEventScmQRe();
    java.lang.String str14 = fsmalphabet_distEventType1.anyEventScmQRe();
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array15 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState16 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState16, fSMState_array15);
    dynoptic.model.fifosys.cfsm.CFSMState cFSMState18 = new dynoptic.model.fifosys.cfsm.CFSMState((java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState16);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array19 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState20 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState20, fSMState_array19);
    dynoptic.model.fifosys.cfsm.CFSMState cFSMState22 = new dynoptic.model.fifosys.cfsm.CFSMState((java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState20);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array24 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState25 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState25, fSMState_array24);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array28 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState29 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState29, fSMState_array28);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array31 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState32 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b33 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState32, fSMState_array31);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array34 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState35 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState35, fSMState_array34);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM38 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState29, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState32, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState35, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array40 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState41 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b42 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState41, fSMState_array40);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array43 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState44 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState44, fSMState_array43);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array46 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState47 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState47, fSMState_array46);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM50 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState41, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState44, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState47, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM52 = new dynoptic.model.fifosys.cfsm.fsm.FSM(1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState25, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState32, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState47, (int)' ');
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState54 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b55 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState54, fSMState_array53);
    dynoptic.model.fifosys.cfsm.CFSMState cFSMState56 = new dynoptic.model.fifosys.cfsm.CFSMState((java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState54);
    java.util.ArrayList<java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>> arraylist_list_fSMState57 = new java.util.ArrayList<java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>>();
    boolean b58 = arraylist_list_fSMState57.add((java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState16);
    boolean b59 = arraylist_list_fSMState57.add((java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState20);
    boolean b60 = arraylist_list_fSMState57.add((java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState47);
    boolean b61 = arraylist_list_fSMState57.add((java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState54);
    java.util.Set<dynoptic.model.fifosys.cfsm.CFSMState> set_cFSMState62 = dynoptic.model.fifosys.cfsm.CFSMState.CFSMStatesFromFSMListLists((java.util.List<java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>>)arraylist_list_fSMState57);
    java.util.Set<dynoptic.model.fifosys.cfsm.CFSMState> set_cFSMState63 = dynoptic.util.Util.newSet(set_cFSMState62);
    boolean b64 = fsmalphabet_distEventType1.containsAll((java.util.Collection<dynoptic.model.fifosys.cfsm.CFSMState>)set_cFSMState62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(distEventType_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "(_)"+ "'", str3.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "(_)"+ "'", str13.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "(_)"+ "'", str14.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_cFSMState62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_cFSMState63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test176"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState33 = obsFifoSysState32.getFSMStates();
    boolean b34 = obsMultFSMState33.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test177"); }

    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array1 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState2 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState2, obsFifoSysState_array1);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState4 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)10, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState2);
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array6 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState7 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState7, obsFifoSysState_array6);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState9 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)10, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState7);
    java.util.List<java.util.List<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>> list_list_obsFifoSysState10 = dynoptic.util.Util.get2DPermutations((java.lang.Iterable<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState2, (java.lang.Iterable<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState7);
    java.util.List<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> list_obsFifoSysState11 = dynoptic.util.Util.newList((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_list_obsFifoSysState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_obsFifoSysState11);

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test178"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array0 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState1 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState1, fSMState_array0);
    dynoptic.model.fifosys.cfsm.CFSMState cFSMState3 = new dynoptic.model.fifosys.cfsm.CFSMState((java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState1);
    boolean b4 = cFSMState3.isAccept();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test179"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test180"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    synoptic.model.channelid.ChannelId[] channelId_array9 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId10 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId10, channelId_array9);
    dynoptic.model.fifosys.cfsm.CFSM cFSM12 = new dynoptic.model.fifosys.cfsm.CFSM((int)(byte)10, (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId10);
    boolean b13 = obsFSMState1.equals((java.lang.Object)arraylist_channelId10);
    java.lang.String str14 = obsFSMState1.toString();
    java.lang.String str15 = obsFSMState1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "i_a0_t"+ "'", str14.equals("i_a0_t"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "i_a0_t"+ "'", str15.equals("i_a0_t"));

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test181"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState fSMState4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (int)(short)1, (int)'a');
    boolean b5 = fSMState4.isAccept();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test182"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.ObsDistEventType> set_obsDistEventType33 = obsFifoSysState32.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.observed.ObsDistEventType obsDistEventType34 = null;
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState35 = obsFifoSysState32.getNextState(obsDistEventType34);
    boolean b36 = obsFifoSysState32.isInitial();
    java.lang.String str37 = obsFifoSysState32.toString();
    boolean b39 = obsFifoSysState32.isAcceptForPid((int)(short)1);
    int i40 = obsFifoSysState32.getNumProcesses();
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId41 = obsFifoSysState32.getChannelIds();
    synoptic.model.event.DistEventType distEventType42 = null;
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState43 = obsFifoSysState32.getNextState(distEventType42);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsDistEventType33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "1"+ "'", str37.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId41);

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test183"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    int i2 = obsFSMState1.getPid();
    obsFSMState1.markInit();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode obsDAGNode4 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(obsFSMState1);
    boolean b5 = obsDAGNode4.isTermState();
    java.lang.String str6 = obsDAGNode4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "ObsDAGNode[i_a0_t]"+ "'", str6.equals("ObsDAGNode[i_a0_t]"));

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test184"); }

    dynoptic.model.fifosys.gfsm.GFSMState gFSMState0 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath2 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState0, (int)(byte)100);
    java.util.List<synoptic.model.event.DistEventType> list_distEventType3 = gFSMPath2.getEvents();
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState4 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath6 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState4, (int)(byte)100);
    int i7 = gFSMPath6.getPid();
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath8 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMPath6);
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath9 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMPath2, gFSMPath8);
    java.util.List<synoptic.model.event.DistEventType> list_distEventType10 = gFSMPath9.getEvents();
    int i11 = gFSMPath9.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_distEventType3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_distEventType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 100);

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test185"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array1 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState2 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, fSMState_array1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState5 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, fSMState_array4);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState8 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, fSMState_array7);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM11 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array13 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState14 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState14, fSMState_array13);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState18 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState18, fSMState_array17);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array20 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState21 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState21, fSMState_array20);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array23 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState24 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState24, fSMState_array23);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM27 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState18, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState21, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState24, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array29 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState30 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState30, fSMState_array29);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState33 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState33, fSMState_array32);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array35 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState36 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b37 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState36, fSMState_array35);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState30, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState33, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState36, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM41 = new dynoptic.model.fifosys.cfsm.fsm.FSM(1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState14, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState21, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState36, (int)' ');
    java.util.ArrayList<java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>> arraylist_list_fSMState42 = new java.util.ArrayList<java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>>();
    boolean b43 = arraylist_list_fSMState42.add((java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8);
    boolean b44 = arraylist_list_fSMState42.add((java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState36);
    java.util.Set<dynoptic.model.fifosys.cfsm.CFSMState> set_cFSMState45 = dynoptic.model.fifosys.cfsm.CFSMState.CFSMStatesFromFSMListLists((java.util.List<java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>>)arraylist_list_fSMState42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_cFSMState45);

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test186"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    int i2 = obsFSMState1.getPid();
    obsFSMState1.markInit();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode obsDAGNode4 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(obsFSMState1);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode obsDAGNode5 = obsDAGNode4.getPrevState();
    boolean b6 = obsDAGNode4.isTermState();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obsDAGNode5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test187"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    int i2 = obsFSMState1.getPid();
    obsFSMState1.markInit();
    boolean b4 = obsFSMState1.isTerminal();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test188"); }

    java.util.logging.Logger logger0 = dynoptic.main.DynopticMain.logger;
    dynoptic.model.automaton.EncodedAutomaton.logger = logger0;
    dynoptic.main.DynopticMain.logger = logger0;
    dynoptic.main.DynopticMain.logger = logger0;
    dynoptic.model.fifosys.gfsm.GFSM.logger = logger0;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(logger0);

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test189"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    int i33 = immutableMultiChState30.topOfQueuesHash();
    boolean b35 = immutableMultiChState30.isEmptyForPid((int)(byte)-1);
    boolean b36 = immutableMultiChState30.isEmpty();
    java.lang.String str37 = immutableMultiChState30.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "ChState]"+ "'", str37.equals("ChState]"));

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test190"); }

    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType1 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState2 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType1);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId3 = immutableMultiChState2.getChannelIds();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState4 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelIds(list_channelId3);
    // The following exception was thrown during execution in test generation
    try {
    synoptic.model.event.DistEventType distEventType5 = mcscm.McScMCExample.parseScmEventStr("(_)", list_channelId3);
      org.junit.Assert.fail("Expected exception of type mcscm.VerifyOutputParseException");
    } catch (mcscm.VerifyOutputParseException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState4);

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test191"); }

    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array1 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState2 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState2, obsFifoSysState_array1);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState4 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)10, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState2);
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> set_obsFifoSysState5 = gFSMState4.getObservedStates();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsFifoSysState5);

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test192"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    int i2 = obsFSMState1.getPid();
    int i3 = obsFSMState1.getPid();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode obsDAGNode4 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test193"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState33 = obsFifoSysState32.getFSMStates();
    // The following exception was thrown during execution in test generation
    try {
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.ObsDistEventType> set_obsDistEventType34 = obsMultFSMState33.getTransitioningEvents();
      org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState33);

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test194"); }

    dynoptic.invariants.BinaryInvariant binaryInvariant0 = null;
    dynoptic.invariants.checkers.NFbyChecker nFbyChecker1 = new dynoptic.invariants.checkers.NFbyChecker(binaryInvariant0);
    dynoptic.invariants.checkers.NFbyChecker nFbyChecker2 = nFbyChecker1.getClone();
    dynoptic.invariants.checkers.NFbyChecker nFbyChecker3 = nFbyChecker1.getClone();
    boolean b4 = nFbyChecker1.isFail();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(nFbyChecker2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(nFbyChecker3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test195"); }

    synoptic.model.channelid.ChannelId[] channelId_array1 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId2 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId2, channelId_array1);
    dynoptic.model.fifosys.cfsm.CFSM cFSM4 = new dynoptic.model.fifosys.cfsm.CFSM((int)(byte)10, (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId2);
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState5 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelIds((java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId2);
    int i6 = immutableMultiChState5.topOfQueuesHash();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 17);

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test196"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array1 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState2 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, fSMState_array1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState5 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, fSMState_array4);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState8 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, fSMState_array7);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM11 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, 0);
    java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState> set_fSMState12 = fSM11.getStates();
    int i13 = fSM11.getPid();
    boolean b14 = fSM11.isDeterministic();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_fSMState12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test197"); }

    synoptic.model.channelid.ChannelId[] channelId_array1 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId2 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId2, channelId_array1);
    dynoptic.model.fifosys.cfsm.CFSM cFSM4 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId2);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId5 = dynoptic.util.Util.newList((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId2);
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState6 = dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds(list_channelId5);
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState7 = mutableMultiChState6.clone();
    boolean b9 = mutableMultiChState6.equals((java.lang.Object)10);
    dynoptic.model.fifosys.gfsm.observed.ObsDistEventType obsDistEventType10 = null;
    // The following exception was thrown during execution in test generation
    try {
    mutableMultiChState6.enqueue(obsDistEventType10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableMultiChState6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableMultiChState7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test198"); }

    dynoptic.model.fifosys.gfsm.GFSMState gFSMState0 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath2 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState0, (int)(byte)100);
    java.util.List<synoptic.model.event.DistEventType> list_distEventType3 = gFSMPath2.getEvents();
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState4 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath6 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState4, (int)(byte)100);
    int i7 = gFSMPath6.getPid();
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath8 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMPath6);
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath9 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMPath2, gFSMPath8);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState10 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath12 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState10, (int)(byte)100);
    int i13 = gFSMPath12.getPid();
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath14 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMPath12);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType16 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState17 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType16);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId18 = immutableMultiChState17.getChannelIds();
    dynoptic.model.fifosys.gfsm.GFSM gFSM19 = new dynoptic.model.fifosys.gfsm.GFSM((int)(byte)1, list_channelId18);
    synoptic.model.channelid.ChannelId[] channelId_array21 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId22 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId22, channelId_array21);
    dynoptic.model.fifosys.cfsm.CFSM cFSM24 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId22);
    mcscm.McScMCExample mcScMCExample25 = new mcscm.McScMCExample((java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId22);
    java.util.List<synoptic.model.event.DistEventType> list_distEventType26 = mcScMCExample25.getEvents();
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMPath> set_gFSMPath28 = gFSM19.getCExamplePaths(mcScMCExample25, 1);
    boolean b29 = gFSMPath14.refine(gFSM19);
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMState> set_gFSMState31 = gFSM19.getInitStatesForPid((int)(short)-1);
    boolean b32 = gFSMPath2.refine(gFSM19);
    java.util.List<synoptic.model.event.DistEventType> list_distEventType33 = gFSMPath2.getEvents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_distEventType3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_distEventType26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_gFSMPath28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_gFSMState31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_distEventType33);

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test199"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState fSMState4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (int)(short)1, (int)'a');
    java.util.Set<synoptic.model.event.DistEventType> set_distEventType5 = fSMState4.getTransitioningEvents();
    fSMState4.setInitial(true);
    boolean b9 = fSMState4.equals((java.lang.Object)"amd64");
    java.util.Set<synoptic.model.event.DistEventType> set_distEventType10 = fSMState4.getTransitioningEvents();
    int i11 = fSMState4.getScmId();
    fSMState4.setInitial(true);
    dynoptic.model.fifosys.channel.channelid.LocalEventsChannelId localEventsChannelId14 = null;
    java.lang.String str15 = fSMState4.toScmString(localEventsChannelId14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_distEventType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_distEventType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "state 97 :\n"+ "'", str15.equals("state 97 :\n"));

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test200"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState8 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath10 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState8, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState11 = gFSMPath10.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState12 = dynoptic.util.Util.newPair(obsFSMState1, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState11);
    obsFSMState1.markTerm();
    dynoptic.invariants.BinaryInvariant binaryInvariant14 = null;
    dynoptic.invariants.checkers.AFbyChecker aFbyChecker15 = new dynoptic.invariants.checkers.AFbyChecker(binaryInvariant14);
    dynoptic.invariants.checkers.AFbyChecker aFbyChecker16 = aFbyChecker15.getClone();
    dynoptic.invariants.checkers.AFbyChecker aFbyChecker17 = aFbyChecker16.getClone();
    boolean b18 = obsFSMState1.equals((java.lang.Object)aFbyChecker16);
    obsFSMState1.markTerm();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(aFbyChecker16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(aFbyChecker17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test201"); }

    java.util.List<java.util.Collection<synoptic.model.channelid.ChannelId>> list_collection_channelId1 = dynoptic.util.Util.newList((int)'\u03E8');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_collection_channelId1);

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test202"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState fSMState4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, (int)'a', (int)(short)10);
    boolean b5 = fSMState4.isAccept();
    fSMState4.setInitial(true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test203"); }

    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array1 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState2 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState2, obsFifoSysState_array1);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState4 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)10, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState2);
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> set_obsFifoSysState5 = gFSMState4.getTerminalObs();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array7 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState8 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState8, obsFifoSysState_array7);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState10 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)10, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState8);
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array12 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState13 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState13, obsFifoSysState_array12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState15 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)10, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState13);
    java.util.List<java.util.List<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>> list_list_obsFifoSysState16 = dynoptic.util.Util.get2DPermutations((java.lang.Iterable<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState8, (java.lang.Iterable<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState13);
    gFSMState4.addAllObs((java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsFifoSysState5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_list_obsFifoSysState16);

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test204"); }

    java.util.Set<java.util.logging.Logger> set_logger0 = dynoptic.util.Util.newSet();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_logger0);

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test205"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array34 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState35 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState35, obsFifoSysState_array34);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState37 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)10, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState35);
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array39 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState40 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState40, obsFifoSysState_array39);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState42 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)10, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState40);
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> set_obsFifoSysState43 = dynoptic.util.Util.newSet((java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState40);
    gFSMState37.addAllObs((java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState40);
    gFSMState37.recreateCachedTransitions();
    java.lang.String str46 = gFSMState37.toIntermediateString();
    obsFifoSysState32.setParent(gFSMState37);
    dynoptic.model.fifosys.gfsm.observed.ObsDistEventType obsDistEventType48 = null;
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState49 = obsFifoSysState32.getNextState(obsDistEventType48);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType51 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState52 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType51);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId53 = immutableMultiChState52.getChannelIds();
    dynoptic.model.fifosys.gfsm.GFSM gFSM54 = new dynoptic.model.fifosys.gfsm.GFSM((int)(byte)1, list_channelId53);
    synoptic.model.channelid.ChannelId[] channelId_array56 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId57 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b58 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId57, channelId_array56);
    dynoptic.model.fifosys.cfsm.CFSM cFSM59 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId57);
    mcscm.McScMCExample mcScMCExample60 = new mcscm.McScMCExample((java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId57);
    java.util.List<synoptic.model.event.DistEventType> list_distEventType61 = mcScMCExample60.getEvents();
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMPath> set_gFSMPath63 = gFSM54.getCExamplePaths(mcScMCExample60, (int)' ');
    boolean b64 = obsFifoSysState32.equals((java.lang.Object)gFSM54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsFifoSysState43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Part-0-1176141798"+ "'", str46.equals("Part-0-1176141798"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_distEventType61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_gFSMPath63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test206"); }

    dynoptic.model.fifosys.gfsm.GFSMState gFSMState0 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath2 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState0, (int)(byte)100);
    java.util.List<synoptic.model.event.DistEventType> list_distEventType3 = gFSMPath2.getEvents();
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState4 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath6 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState4, (int)(byte)100);
    int i7 = gFSMPath6.getPid();
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath8 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMPath6);
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath9 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMPath2, gFSMPath8);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState10 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath12 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState10, (int)(byte)100);
    int i13 = gFSMPath12.getPid();
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath14 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMPath12);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType16 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState17 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType16);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId18 = immutableMultiChState17.getChannelIds();
    dynoptic.model.fifosys.gfsm.GFSM gFSM19 = new dynoptic.model.fifosys.gfsm.GFSM((int)(byte)1, list_channelId18);
    synoptic.model.channelid.ChannelId[] channelId_array21 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId22 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId22, channelId_array21);
    dynoptic.model.fifosys.cfsm.CFSM cFSM24 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId22);
    mcscm.McScMCExample mcScMCExample25 = new mcscm.McScMCExample((java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId22);
    java.util.List<synoptic.model.event.DistEventType> list_distEventType26 = mcScMCExample25.getEvents();
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMPath> set_gFSMPath28 = gFSM19.getCExamplePaths(mcScMCExample25, 1);
    boolean b29 = gFSMPath14.refine(gFSM19);
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMState> set_gFSMState31 = gFSM19.getInitStatesForPid((int)(short)-1);
    boolean b32 = gFSMPath2.refine(gFSM19);
    synoptic.model.channelid.ChannelId[] channelId_array34 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId35 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId35, channelId_array34);
    dynoptic.model.fifosys.cfsm.CFSM cFSM37 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId35);
    mcscm.McScMCExample mcScMCExample38 = new mcscm.McScMCExample((java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId35);
    java.util.List<synoptic.model.event.DistEventType> list_distEventType39 = mcScMCExample38.getEvents();
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMPath> set_gFSMPath41 = gFSM19.getCExamplePaths(mcScMCExample38, (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_distEventType3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_distEventType26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_gFSMPath28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_gFSMState31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_distEventType39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_gFSMPath41);

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test207"); }

    synoptic.model.event.DistEventType[] distEventType_array0 = new synoptic.model.event.DistEventType[] {  };
    dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType> fsmalphabet_distEventType1 = new dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<synoptic.model.event.DistEventType>)fsmalphabet_distEventType1, distEventType_array0);
    java.lang.String str3 = fsmalphabet_distEventType1.anyEventScmQRe();
    java.lang.String str4 = fsmalphabet_distEventType1.anyEventScmQRe();
    java.lang.Object[] obj_array5 = fsmalphabet_distEventType1.toArray();
    synoptic.model.event.DistEventType distEventType6 = null;
    boolean b7 = fsmalphabet_distEventType1.add(distEventType6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(distEventType_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "(_)"+ "'", str3.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "(_)"+ "'", str4.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test208"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    synoptic.model.channelid.ChannelId[] channelId_array34 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId35 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId35, channelId_array34);
    dynoptic.model.fifosys.cfsm.CFSM cFSM37 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId35);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId38 = dynoptic.util.Util.newList((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId35);
    boolean b39 = obsMultFSMState28.equals((java.lang.Object)arraylist_channelId35);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType41 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState42 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType41);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId43 = immutableMultiChState42.getChannelIds();
    dynoptic.model.fifosys.gfsm.GFSM gFSM44 = new dynoptic.model.fifosys.gfsm.GFSM((int)(byte)1, list_channelId43);
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState45 = dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds(list_channelId43);
    dynoptic.model.fifosys.exec.FifoSysExecState<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState> fifosysexecstate_obsMultFSMState46 = new dynoptic.model.fifosys.exec.FifoSysExecState<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState>(obsMultFSMState28, mutableMultiChState45);
    dynoptic.model.fifosys.gfsm.observed.ObsDistEventType obsDistEventType47 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.Set<dynoptic.model.fifosys.exec.FifoSysExecState<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState>> set_fifosysexecstate_obsMultFSMState48 = fifosysexecstate_obsMultFSMState46.getNextStates(obsDistEventType47);
      org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableMultiChState45);

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test209"); }

    dynoptic.model.fifosys.gfsm.GFSMState gFSMState0 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath2 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState0, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState3 = gFSMPath2.getStates();
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath4 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMPath2);
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array6 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState7 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState7, obsFifoSysState_array6);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState9 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)10, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState7);
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> set_obsFifoSysState10 = gFSMState9.getTerminalObs();
    java.lang.String str11 = gFSMState9.toLongString();
    gFSMPath4.prefixState(gFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsFifoSysState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[]"+ "'", str11.equals("[]"));

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test210"); }

    dynoptic.model.fifosys.gfsm.GFSMState gFSMState1 = new dynoptic.model.fifosys.gfsm.GFSMState(17);
    java.lang.String str2 = gFSMState1.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsDistEventType obsDistEventType3 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMState> set_gFSMState4 = gFSMState1.getNextStates(obsDistEventType3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]"+ "'", str2.equals("[]"));

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test211"); }

    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType1 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState2 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType1);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId3 = immutableMultiChState2.getChannelIds();
    dynoptic.model.fifosys.gfsm.GFSM gFSM4 = new dynoptic.model.fifosys.gfsm.GFSM((int)(byte)1, list_channelId3);
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMState> set_gFSMState5 = gFSM4.getAcceptStates();
    java.lang.String str6 = gFSM4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_gFSMState5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "GFSM[num-states=0] : "+ "'", str6.equals("GFSM[num-states=0] : "));

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test212"); }

    dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType> fsmalphabet_distEventType0 = new dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType>();
    fsmalphabet_distEventType0.clear();
    boolean b2 = fsmalphabet_distEventType0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test213"); }

    dynoptic.model.fifosys.gfsm.GFSMState gFSMState0 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath2 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState0, (int)(byte)100);
    int i3 = gFSMPath2.getPid();
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState4 = gFSMPath2.getStates();
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType6 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState7 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType6);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId8 = immutableMultiChState7.getChannelIds();
    dynoptic.model.fifosys.gfsm.GFSM gFSM9 = new dynoptic.model.fifosys.gfsm.GFSM((int)(byte)1, list_channelId8);
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMState> set_gFSMState10 = gFSM9.getAcceptStates();
    boolean b11 = gFSMPath2.refine(gFSM9);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState12 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath14 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState12, (int)(byte)100);
    java.util.List<synoptic.model.event.DistEventType> list_distEventType15 = gFSMPath14.getEvents();
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    int i19 = gFSMPath18.getPid();
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath20 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMPath18);
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath21 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMPath14, gFSMPath20);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState22 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath24 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState22, (int)(byte)100);
    int i25 = gFSMPath24.getPid();
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath26 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMPath24);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType28 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState29 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType28);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId30 = immutableMultiChState29.getChannelIds();
    dynoptic.model.fifosys.gfsm.GFSM gFSM31 = new dynoptic.model.fifosys.gfsm.GFSM((int)(byte)1, list_channelId30);
    synoptic.model.channelid.ChannelId[] channelId_array33 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId34 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId34, channelId_array33);
    dynoptic.model.fifosys.cfsm.CFSM cFSM36 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId34);
    mcscm.McScMCExample mcScMCExample37 = new mcscm.McScMCExample((java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId34);
    java.util.List<synoptic.model.event.DistEventType> list_distEventType38 = mcScMCExample37.getEvents();
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMPath> set_gFSMPath40 = gFSM31.getCExamplePaths(mcScMCExample37, 1);
    boolean b41 = gFSMPath26.refine(gFSM31);
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMState> set_gFSMState43 = gFSM31.getInitStatesForPid((int)(short)-1);
    boolean b44 = gFSMPath14.refine(gFSM31);
    synoptic.model.event.DistEventType distEventType45 = null;
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array47 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState48 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b49 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState48, obsFifoSysState_array47);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState50 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)10, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState48);
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> set_obsFifoSysState51 = gFSMState50.getTerminalObs();
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> set_obsFifoSysState53 = gFSMState50.getTerminalObsForPid(100);
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array55 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState56 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b57 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState56, obsFifoSysState_array55);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState58 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)10, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState56);
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array60 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState61 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b62 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState61, obsFifoSysState_array60);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState63 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)10, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState61);
    java.util.List<java.util.List<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>> list_list_obsFifoSysState64 = dynoptic.util.Util.get2DPermutations((java.lang.Iterable<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState56, (java.lang.Iterable<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState61);
    gFSMState50.addAllObs((java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState56);
    gFSMPath14.prefixEventAndState(distEventType45, gFSMState50);
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath67 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMPath14);
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath68 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMPath2, gFSMPath14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_gFSMState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_distEventType15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_distEventType38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_gFSMPath40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_gFSMState43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsFifoSysState51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsFifoSysState53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_list_obsFifoSysState64);

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test214"); }

    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath1 = new dynoptic.model.fifosys.gfsm.GFSMPath((int)(byte)100);
    java.util.List<synoptic.model.event.DistEventType> list_distEventType2 = gFSMPath1.getEvents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_distEventType2);

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test215"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    synoptic.model.channelid.ChannelId[] channelId_array34 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId35 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId35, channelId_array34);
    dynoptic.model.fifosys.cfsm.CFSM cFSM37 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId35);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId38 = dynoptic.util.Util.newList((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId35);
    boolean b39 = obsMultFSMState28.equals((java.lang.Object)arraylist_channelId35);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType41 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState42 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType41);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId43 = immutableMultiChState42.getChannelIds();
    dynoptic.model.fifosys.gfsm.GFSM gFSM44 = new dynoptic.model.fifosys.gfsm.GFSM((int)(byte)1, list_channelId43);
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState45 = dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds(list_channelId43);
    dynoptic.model.fifosys.exec.FifoSysExecState<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState> fifosysexecstate_obsMultFSMState46 = new dynoptic.model.fifosys.exec.FifoSysExecState<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState>(obsMultFSMState28, mutableMultiChState45);
    // The following exception was thrown during execution in test generation
    try {
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.ObsDistEventType> set_obsDistEventType47 = fifosysexecstate_obsMultFSMState46.getEnabledEvents();
      org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableMultiChState45);

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test216"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array1 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState2 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, fSMState_array1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState5 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, fSMState_array4);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState8 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, fSMState_array7);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM11 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, 0);
    java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState> set_fSMState12 = fSM11.getAcceptStates();
    dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType> fsmalphabet_distEventType13 = fSM11.getAlphabet();
    dynoptic.model.automaton.EventTypeEncodings eventTypeEncodings14 = new dynoptic.model.automaton.EventTypeEncodings((java.util.Set<synoptic.model.event.DistEventType>)fsmalphabet_distEventType13);
    // The following exception was thrown during execution in test generation
    try {
    synoptic.model.event.DistEventType distEventType16 = eventTypeEncodings14.getEventType('\u03E8');
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_fSMState12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fsmalphabet_distEventType13);

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test217"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    int i2 = obsFSMState1.getPid();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode obsDAGNode3 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(obsFSMState1);
    boolean b4 = obsDAGNode3.hasOccurred();
    boolean b5 = obsDAGNode3.isTermState();
    boolean b6 = obsDAGNode3.isInitState();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test218"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType33 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState34 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType33);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId35 = immutableMultiChState34.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState36 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState34);
    // The following exception was thrown during execution in test generation
    try {
    boolean b38 = obsMultFSMState28.isInitForPid((int)'a');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState36);

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test219"); }

    java.io.Writer writer0 = null;
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)(byte)10, (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState7 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelIds((java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    dynoptic.model.fifosys.cfsm.CFSM cFSM8 = new dynoptic.model.fifosys.cfsm.CFSM((int)(byte)1, (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    dynoptic.main.OptionException optionException10 = new dynoptic.main.OptionException("");
    java.lang.Throwable[] throwable_array11 = optionException10.getSuppressed();
    boolean b12 = cFSM8.equals((java.lang.Object)optionException10);
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.model.export.GraphExporter.exportCFSM(writer0, cFSM8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test220"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState fSMState4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (int)(short)1, (int)'a');
    java.util.Set<synoptic.model.event.DistEventType> set_distEventType5 = fSMState4.getTransitioningEvents();
    fSMState4.setInitial(true);
    boolean b9 = fSMState4.equals((java.lang.Object)"amd64");
    java.util.Set<synoptic.model.event.DistEventType> set_distEventType10 = fSMState4.getTransitioningEvents();
    dynoptic.model.fifosys.cfsm.fsm.FSMState fSMState15 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (int)(short)1, (int)'a');
    boolean b17 = fSMState15.equals((java.lang.Object)(-1L));
    java.util.Set<synoptic.model.event.DistEventType> set_distEventType18 = fSMState15.getTransitioningEvents();
    dynoptic.model.fifosys.cfsm.fsm.FSMState fSMState23 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, (int)'a', (int)(short)10);
    boolean b24 = fSMState23.isAccept();
    fSMState23.setInitial(true);
    dynoptic.model.fifosys.cfsm.fsm.FSMState fSMState31 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (int)(short)1, (int)'a');
    java.util.Set<synoptic.model.event.DistEventType> set_distEventType32 = fSMState31.getTransitioningEvents();
    dynoptic.model.fifosys.cfsm.fsm.FSMState fSMState37 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (int)(short)1, (int)'a');
    java.util.Set<synoptic.model.event.DistEventType> set_distEventType38 = fSMState37.getTransitioningEvents();
    fSMState37.setInitial(true);
    boolean b42 = fSMState37.equals((java.lang.Object)"amd64");
    java.util.Set<synoptic.model.event.DistEventType> set_distEventType43 = fSMState37.getTransitioningEvents();
    int i44 = fSMState37.getScmId();
    fSMState37.setInitial(true);
    dynoptic.model.fifosys.channel.channelid.LocalEventsChannelId localEventsChannelId47 = null;
    java.lang.String str48 = fSMState37.toScmString(localEventsChannelId47);
    dynoptic.model.fifosys.cfsm.fsm.FSMState fSMState53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (int)(short)1, (int)'a');
    java.util.Set<synoptic.model.event.DistEventType> set_distEventType54 = fSMState53.getTransitioningEvents();
    fSMState53.setInitial(true);
    boolean b58 = fSMState53.equals((java.lang.Object)"amd64");
    java.util.Set<synoptic.model.event.DistEventType> set_distEventType59 = fSMState53.getTransitioningEvents();
    mcscm.McScMCExample mcScMCExample60 = null;
    dynoptic.model.fifosys.cfsm.CFSMExecution cFSMExecution61 = new dynoptic.model.fifosys.cfsm.CFSMExecution(mcScMCExample60);
    dynoptic.model.fifosys.cfsm.fsm.FSMState fSMState66 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (int)(short)1, (int)'a');
    java.util.Set<synoptic.model.event.DistEventType> set_distEventType67 = fSMState66.getTransitioningEvents();
    fSMState66.setInitial(true);
    boolean b71 = fSMState66.equals((java.lang.Object)"amd64");
    java.util.Set<synoptic.model.event.DistEventType> set_distEventType72 = fSMState66.getTransitioningEvents();
    int i73 = fSMState66.getScmId();
    fSMState66.setInitial(true);
    cFSMExecution61.addToPath(fSMState66);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array77 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] { fSMState4, fSMState15, fSMState23, fSMState31, fSMState37, fSMState53, fSMState66 };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState78 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b79 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState78, fSMState_array77);
    dynoptic.model.fifosys.cfsm.CFSMState cFSMState80 = new dynoptic.model.fifosys.cfsm.CFSMState((java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_distEventType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_distEventType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_distEventType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_distEventType32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_distEventType38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_distEventType43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "state 97 :\n"+ "'", str48.equals("state 97 :\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_distEventType54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_distEventType59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_distEventType67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_distEventType72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test221"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array0 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState1 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState1, fSMState_array0);
    dynoptic.model.fifosys.cfsm.CFSMState cFSMState3 = new dynoptic.model.fifosys.cfsm.CFSMState((java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState1);
    int i4 = cFSMState3.getNumProcesses();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test222"); }

    dynoptic.model.fifosys.gfsm.GFSMState gFSMState0 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath2 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState0, (int)(byte)100);
    int i3 = gFSMPath2.getPid();
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath4 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMPath2);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType6 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState7 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType6);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId8 = immutableMultiChState7.getChannelIds();
    dynoptic.model.fifosys.gfsm.GFSM gFSM9 = new dynoptic.model.fifosys.gfsm.GFSM((int)(byte)1, list_channelId8);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    mcscm.McScMCExample mcScMCExample15 = new mcscm.McScMCExample((java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    java.util.List<synoptic.model.event.DistEventType> list_distEventType16 = mcScMCExample15.getEvents();
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMPath> set_gFSMPath18 = gFSM9.getCExamplePaths(mcScMCExample15, 1);
    boolean b19 = gFSMPath4.refine(gFSM9);
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMState> set_gFSMState21 = gFSM9.getInitStatesForPid((int)(short)-1);
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMState> set_gFSMState23 = gFSM9.getAcceptStatesForPid((int)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_distEventType16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_gFSMPath18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_gFSMState21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_gFSMState23);

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test223"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.ObsDistEventType> set_obsDistEventType33 = obsFifoSysState32.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.observed.ObsDistEventType obsDistEventType34 = null;
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState35 = obsFifoSysState32.getNextState(obsDistEventType34);
    boolean b36 = obsFifoSysState32.isInitial();
    synoptic.model.event.DistEventType distEventType37 = null;
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.model.fifosys.gfsm.observed.ObsDistEventType obsDistEventType38 = obsFifoSysState32.getObsTransitionByEType(distEventType37);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsDistEventType33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test224"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    // The following exception was thrown during execution in test generation
    try {
    boolean b34 = obsFifoSysState32.isInitForPid(10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test225"); }

    synoptic.model.channelid.ChannelId[] channelId_array1 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId2 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId2, channelId_array1);
    dynoptic.model.fifosys.cfsm.CFSM cFSM4 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId2);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId5 = dynoptic.util.Util.newList((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId2);
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState6 = dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds(list_channelId5);
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState7 = mutableMultiChState6.clone();
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState8 = mutableMultiChState6.clone();
    dynoptic.model.fifosys.gfsm.observed.ObsDistEventType obsDistEventType9 = null;
    // The following exception was thrown during execution in test generation
    try {
    mutableMultiChState8.enqueue(obsDistEventType9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableMultiChState6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableMultiChState7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableMultiChState8);

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test226"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array1 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState2 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, fSMState_array1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState5 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, fSMState_array4);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState8 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, fSMState_array7);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM11 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, 0);
    int i12 = fSM11.getPid();
    java.lang.String str13 = fSM11.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: []\n\taccepts: []"+ "'", str13.equals("FSM[pid=-1]\n\tstates: []\n\tinits: []\n\taccepts: []"));

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test227"); }

    mcscm.ScmSyntaxException scmSyntaxException1 = new mcscm.ScmSyntaxException("Part-0-2061659540");

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test228"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    int i2 = obsFSMState1.getPid();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode obsDAGNode3 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(obsFSMState1);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode obsDAGNode4 = obsDAGNode3.getPrevState();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obsDAGNode4);

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test229"); }

    java.lang.String[] str_array2 = new java.lang.String[] { "0", "3.19" };
    java.io.File file4 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Process process6 = mcscm.ProcessUtil.runVerifyProcess(str_array2, "} // digraph {\n", file4, 0);
      org.junit.Assert.fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);

  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test230"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState33 = obsFifoSysState32.getFSMStates();
    synoptic.model.channelid.ChannelId[] channelId_array35 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId36 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b37 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId36, channelId_array35);
    dynoptic.model.fifosys.cfsm.CFSM cFSM38 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId36);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId39 = dynoptic.util.Util.newList((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId36);
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState40 = dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds(list_channelId39);
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState41 = mutableMultiChState40.clone();
    dynoptic.model.fifosys.exec.FifoSysExecState<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState> fifosysexecstate_obsMultFSMState42 = new dynoptic.model.fifosys.exec.FifoSysExecState<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState>(obsMultFSMState33, mutableMultiChState40);
    boolean b43 = fifosysexecstate_obsMultFSMState42.isAccept();
    boolean b44 = fifosysexecstate_obsMultFSMState42.isInitial();
    // The following exception was thrown during execution in test generation
    try {
    boolean b46 = fifosysexecstate_obsMultFSMState42.isInitForPid((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableMultiChState40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableMultiChState41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test231"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType33 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState34 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType33);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId35 = immutableMultiChState34.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState36 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState34);
    boolean b38 = obsMultFSMState28.isAcceptForPid((int)(byte)1);
    synoptic.model.channelid.ChannelId[] channelId_array40 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId41 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b42 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId41, channelId_array40);
    dynoptic.model.fifosys.cfsm.CFSM cFSM43 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId41);
    dynoptic.model.fifosys.exec.FifoSysExecState<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState> fifosysexecstate_obsMultFSMState44 = new dynoptic.model.fifosys.exec.FifoSysExecState<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState>(obsMultFSMState28, (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId41);
    // The following exception was thrown during execution in test generation
    try {
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.ObsDistEventType> set_obsDistEventType45 = fifosysexecstate_obsMultFSMState44.getEnabledEvents();
      org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test232"); }

    synoptic.model.channelid.ChannelId[] channelId_array1 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId2 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId2, channelId_array1);
    dynoptic.model.fifosys.cfsm.CFSM cFSM4 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId2);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId5 = dynoptic.util.Util.newList((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId2);
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState6 = dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds(list_channelId5);
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState7 = mutableMultiChState6.clone();
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState8 = mutableMultiChState6.clone();
    synoptic.model.channelid.ChannelId channelId9 = null;
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.model.fifosys.gfsm.observed.ObsDistEventType obsDistEventType10 = mutableMultiChState8.peek(channelId9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableMultiChState6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableMultiChState7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableMultiChState8);

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test233"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState fSMState0 = null;
    dynoptic.model.fifosys.cfsm.CFSMState cFSMState1 = new dynoptic.model.fifosys.cfsm.CFSMState(fSMState0);
    int i2 = cFSMState1.getNumProcesses();
    // The following exception was thrown during execution in test generation
    try {
    java.util.Set<dynoptic.model.fifosys.cfsm.CFSMState> set_cFSMState3 = cFSMState1.getNextStates();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test234"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array1 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState2 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, fSMState_array1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState5 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, fSMState_array4);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState8 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, fSMState_array7);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM11 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, 0);
    fSM11.minimize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test235"); }

    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType0 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState1 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType0);
    synoptic.model.event.DistEventType distEventType2 = null;
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState3 = immutableMultiChState1.getNextChState(distEventType2);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState1);

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test236"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState2 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array4 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId5 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId5, channelId_array4);
    dynoptic.model.fifosys.cfsm.CFSM cFSM7 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId5);
    boolean b8 = obsFSMState2.equals((java.lang.Object)arraylist_channelId5);
    synoptic.model.channelid.ChannelId[] channelId_array10 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId11 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId11, channelId_array10);
    dynoptic.model.fifosys.cfsm.CFSM cFSM13 = new dynoptic.model.fifosys.cfsm.CFSM((int)(byte)10, (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId11);
    boolean b14 = obsFSMState2.equals((java.lang.Object)arraylist_channelId11);
    dynoptic.model.fifosys.gfsm.GFSM gFSM15 = new dynoptic.model.fifosys.gfsm.GFSM((int)(short)100, (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId11);
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMState> set_gFSMState16 = gFSM15.getAcceptStates();
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMState> set_gFSMState17 = gFSM15.getAcceptStates();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_gFSMState16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_gFSMState17);

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test237"); }

    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType1 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState2 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType1);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId3 = immutableMultiChState2.getChannelIds();
    dynoptic.model.fifosys.gfsm.GFSM gFSM4 = new dynoptic.model.fifosys.gfsm.GFSM((int)(byte)1, list_channelId3);
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMState> set_gFSMState5 = gFSM4.getAcceptStates();
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType7 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState8 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType7);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId9 = immutableMultiChState8.getChannelIds();
    dynoptic.model.fifosys.gfsm.GFSM gFSM10 = new dynoptic.model.fifosys.gfsm.GFSM((int)(byte)1, list_channelId9);
    synoptic.model.channelid.ChannelId[] channelId_array12 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId13 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId13, channelId_array12);
    dynoptic.model.fifosys.cfsm.CFSM cFSM15 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId13);
    mcscm.McScMCExample mcScMCExample16 = new mcscm.McScMCExample((java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId13);
    java.util.List<synoptic.model.event.DistEventType> list_distEventType17 = mcScMCExample16.getEvents();
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMPath> set_gFSMPath19 = gFSM10.getCExamplePaths(mcScMCExample16, 1);
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMPath> set_gFSMPath21 = gFSM4.getCExamplePaths(mcScMCExample16, 100);
    // The following exception was thrown during execution in test generation
    try {
    mcScMCExample16.addScmEventStrToPath("Part-0-1714230415");
      org.junit.Assert.fail("Expected exception of type mcscm.VerifyOutputParseException");
    } catch (mcscm.VerifyOutputParseException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_gFSMState5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_distEventType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_gFSMPath19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_gFSMPath21);

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test238"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.ObsDistEventType> set_obsDistEventType33 = obsFifoSysState32.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.observed.ObsDistEventType obsDistEventType34 = null;
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState35 = obsFifoSysState32.getNextState(obsDistEventType34);
    boolean b36 = obsFifoSysState32.isInitial();
    java.lang.String str37 = obsFifoSysState32.toString();
    boolean b39 = obsFifoSysState32.isAcceptForPid((int)(short)1);
    int i40 = obsFifoSysState32.getNumProcesses();
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId41 = obsFifoSysState32.getChannelIds();
    java.lang.String str42 = obsFifoSysState32.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsDistEventType33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "1"+ "'", str37.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "1"+ "'", str42.equals("1"));

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test239"); }

    java.lang.String[] str_array30 = new java.lang.String[] { "Part-0-2061659540", "Part-0-795767496", "i_a0_t", "state 97 :\n", "Part-0-921744306", "FSM[pid=-1]\n\tstates: []\n\tinits: []\n\taccepts: []", "Part-0-8745675", "mcscm.VerifyOutputParseException: Part-0-1970692513", "} // digraph {\n", "0", "3.19.0-25-generic", "mcscm.VerifyOutputParseException: Part-0-1970692513", "ObsFifoSysState[FSMStates[i_a0_t, i_a0_t, i_a0_t, i_a0_t]; ChState]]", "ChState]", "Part-0-781607459", "Part-0-879220873", "i_a0_t", "ObsDAGNode[i_a0_t]", "mcscm.VerifyOutputParseException: Part-0-1970692513", "state 97 :\n", "Part-0-1714230415", "Part-0-8745675", "Part-0-1176141798", "ChState]", "GFSM[num-states=0] : ", "Part-0-357159137", "Part-0-1970692513", "Part-0-781607459", "ObsDAGNode[i_a0_t]", "i_a0_t" };
    java.util.ArrayList<java.lang.String> arraylist_str31 = new java.util.ArrayList<java.lang.String>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str31, str_array30);
    synoptic.model.channelid.ChannelId[] channelId_array35 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId36 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b37 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId36, channelId_array35);
    dynoptic.model.fifosys.cfsm.CFSM cFSM38 = new dynoptic.model.fifosys.cfsm.CFSM((int)(byte)10, (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId36);
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState39 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelIds((java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId36);
    dynoptic.model.fifosys.cfsm.CFSM cFSM40 = new dynoptic.model.fifosys.cfsm.CFSM((int)(byte)1, (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId36);
    // The following exception was thrown during execution in test generation
    try {
    mcscm.VerifyResult verifyResult41 = new mcscm.VerifyResult((java.util.List<java.lang.String>)arraylist_str31, (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId36);
      org.junit.Assert.fail("Expected exception of type mcscm.VerifyOutputParseException");
    } catch (mcscm.VerifyOutputParseException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState39);

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test240"); }

    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array1 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState2 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState2, obsFifoSysState_array1);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState4 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)10, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState2);
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> set_obsFifoSysState5 = gFSMState4.getTerminalObs();
    java.lang.String str6 = gFSMState4.toIntermediateString();
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> set_obsFifoSysState8 = gFSMState4.getTerminalObsForPid((int)'#');
    synoptic.model.event.DistEventType distEventType9 = null;
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> set_obsFifoSysState10 = gFSMState4.getObservedStatesWithTransition(distEventType9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsFifoSysState5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Part-0-1572580621"+ "'", str6.equals("Part-0-1572580621"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsFifoSysState8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsFifoSysState10);

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test241"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState33 = obsFifoSysState32.getFSMStates();
    synoptic.model.channelid.ChannelId[] channelId_array35 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId36 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b37 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId36, channelId_array35);
    dynoptic.model.fifosys.cfsm.CFSM cFSM38 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId36);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId39 = dynoptic.util.Util.newList((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId36);
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState40 = dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds(list_channelId39);
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState41 = mutableMultiChState40.clone();
    dynoptic.model.fifosys.exec.FifoSysExecState<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState> fifosysexecstate_obsMultFSMState42 = new dynoptic.model.fifosys.exec.FifoSysExecState<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState>(obsMultFSMState33, mutableMultiChState40);
    boolean b43 = fifosysexecstate_obsMultFSMState42.isAccept();
    boolean b44 = fifosysexecstate_obsMultFSMState42.isAccept();
    boolean b45 = fifosysexecstate_obsMultFSMState42.isInitial();
    // The following exception was thrown during execution in test generation
    try {
    boolean b47 = fifosysexecstate_obsMultFSMState42.isAcceptForPid(97);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableMultiChState40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableMultiChState41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test242"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array34 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState35 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState35, obsFifoSysState_array34);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState37 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)10, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState35);
    obsFifoSysState32.setParent(gFSMState37);
    synoptic.model.event.DistEventType distEventType39 = null;
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> set_obsFifoSysState40 = gFSMState37.getObservedStatesWithTransition(distEventType39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsFifoSysState40);

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test243"); }

    dynoptic.invariants.BinaryInvariant binaryInvariant0 = null;
    dynoptic.invariants.checkers.NFbyChecker nFbyChecker1 = new dynoptic.invariants.checkers.NFbyChecker(binaryInvariant0);
    dynoptic.invariants.checkers.NFbyChecker nFbyChecker2 = nFbyChecker1.getClone();
    dynoptic.invariants.checkers.NFbyChecker nFbyChecker3 = nFbyChecker1.getClone();
    dynoptic.invariants.checkers.NFbyChecker nFbyChecker4 = nFbyChecker3.getClone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(nFbyChecker2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(nFbyChecker3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(nFbyChecker4);

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test244"); }

    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array1 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState2 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState2, obsFifoSysState_array1);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState4 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)10, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState2);
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> set_obsFifoSysState5 = gFSMState4.getTerminalObs();
    java.lang.String str6 = gFSMState4.toIntermediateString();
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> set_obsFifoSysState8 = gFSMState4.getTerminalObsForPid((int)(short)1);
    boolean b10 = gFSMState4.isInitForPid((int)(byte)1);
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> set_obsFifoSysState12 = gFSMState4.getTerminalObsForPid((-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsFifoSysState5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Part-0-206672791"+ "'", str6.equals("Part-0-206672791"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsFifoSysState8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsFifoSysState12);

  }

  @Test
  public void test245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test245"); }

    java.util.List<java.util.List<java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>>> list_list_list_fSMState1 = dynoptic.util.Util.newList((int)(short)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_list_list_fSMState1);

  }

  @Test
  public void test246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test246"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.ObsDistEventType> set_obsDistEventType33 = obsFifoSysState32.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.observed.ObsDistEventType obsDistEventType34 = null;
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState35 = obsFifoSysState32.getNextState(obsDistEventType34);
    boolean b36 = obsFifoSysState32.isInitial();
    java.lang.String str37 = obsFifoSysState32.toString();
    boolean b39 = obsFifoSysState32.isAcceptForPid((int)(short)1);
    int i40 = obsFifoSysState32.getNumProcesses();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array42 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState43 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b44 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState43, obsFifoSysState_array42);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState45 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)10, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState43);
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array47 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState48 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b49 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState48, obsFifoSysState_array47);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState50 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)10, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState48);
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> set_obsFifoSysState51 = dynoptic.util.Util.newSet((java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState48);
    gFSMState45.addAllObs((java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState48);
    gFSMState45.recreateCachedTransitions();
    java.lang.String str54 = gFSMState45.toIntermediateString();
    obsFifoSysState32.setParent(gFSMState45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsDistEventType33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "1"+ "'", str37.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsFifoSysState51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "Part-0-1971164951"+ "'", str54.equals("Part-0-1971164951"));

  }

  @Test
  public void test247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test247"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array1 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState2 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, fSMState_array1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState5 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, fSMState_array4);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState8 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, fSMState_array7);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM11 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, 0);
    java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState> set_fSMState12 = fSM11.getAcceptStates();
    int i13 = fSM11.getPid();
    dynoptic.model.automaton.EventTypeEncodings eventTypeEncodings14 = fSM11.getEventTypeEncodings();
    int i15 = fSM11.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_fSMState12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(eventTypeEncodings14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-1));

  }

  @Test
  public void test248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test248"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.ObsDistEventType> set_obsDistEventType33 = obsFifoSysState32.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState34 = obsFifoSysState32.getParent();
    int i35 = obsFifoSysState32.getNumProcesses();
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.ObsDistEventType> set_obsDistEventType36 = obsFifoSysState32.getTransitioningEvents();
    synoptic.model.event.DistEventType distEventType37 = null;
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.model.fifosys.gfsm.observed.ObsDistEventType obsDistEventType38 = obsFifoSysState32.getObsTransitionByEType(distEventType37);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsDistEventType33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gFSMState34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsDistEventType36);

  }

  @Test
  public void test249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test249"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array0 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState1 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState1, fSMState_array0);
    dynoptic.model.fifosys.cfsm.CFSMState cFSMState3 = new dynoptic.model.fifosys.cfsm.CFSMState((java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState1);
    java.util.Set<synoptic.model.event.DistEventType> set_distEventType4 = cFSMState3.getTransitioningEvents();
    boolean b5 = cFSMState3.isInitial();
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.model.fifosys.cfsm.fsm.FSMState fSMState7 = cFSMState3.getFSMState((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_distEventType4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);

  }

  @Test
  public void test250() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test250"); }

    synoptic.model.channelid.ChannelId[] channelId_array1 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId2 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId2, channelId_array1);
    dynoptic.model.fifosys.cfsm.CFSM cFSM4 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId2);
    mcscm.McScMCExample mcScMCExample5 = new mcscm.McScMCExample((java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId2);
    java.lang.String str6 = mcScMCExample5.toString();
    dynoptic.model.fifosys.cfsm.CFSMExecution cFSMExecution7 = new dynoptic.model.fifosys.cfsm.CFSMExecution(mcScMCExample5);
    dynoptic.model.fifosys.cfsm.CFSMExecution cFSMExecution8 = new dynoptic.model.fifosys.cfsm.CFSMExecution(mcScMCExample5);
    java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState> list_fSMState9 = cFSMExecution8.getFSMPath();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "CExample[\n]"+ "'", str6.equals("CExample[\n]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_fSMState9);

  }

  @Test
  public void test251() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test251"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState fSMState4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, (int)'a', (int)(short)10);
    int i5 = fSMState4.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 97);

  }

  @Test
  public void test252() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test252"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array1 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState2 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, fSMState_array1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState5 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, fSMState_array4);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState8 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, fSMState_array7);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM11 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, 0);
    java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState> set_fSMState12 = fSM11.getAcceptStates();
    int i13 = fSM11.getPid();
    int i14 = fSM11.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_fSMState12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test253() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test253"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    boolean b30 = obsMultFSMState28.equals((java.lang.Object)(short)0);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType31 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState32 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType31);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId33 = immutableMultiChState32.getChannelIds();
    boolean b34 = immutableMultiChState32.isEmpty();
    java.lang.String str35 = immutableMultiChState32.toString();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState36 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState32);
    dynoptic.main.OptionException optionException38 = new dynoptic.main.OptionException("");
    java.lang.String str39 = optionException38.toString();
    java.lang.String str40 = optionException38.toString();
    boolean b41 = immutableMultiChState32.equals((java.lang.Object)optionException38);
    boolean b42 = immutableMultiChState32.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "ChState]"+ "'", str35.equals("ChState]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + ""+ "'", str39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + ""+ "'", str40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);

  }

  @Test
  public void test254() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test254"); }

    synoptic.model.channelid.ChannelId[] channelId_array1 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId2 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId2, channelId_array1);
    dynoptic.model.fifosys.cfsm.CFSM cFSM4 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId2);
    int i5 = cFSM4.getNumProcesses();
    int i6 = cFSM4.getNumProcesses();
    java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSM> list_fSM7 = cFSM4.getFSMs();
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId8 = cFSM4.getChannelIds();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_fSM7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId8);

  }

  @Test
  public void test255() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test255"); }

    synoptic.model.event.DistEventType[] distEventType_array0 = new synoptic.model.event.DistEventType[] {  };
    dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType> fsmalphabet_distEventType1 = new dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<synoptic.model.event.DistEventType>)fsmalphabet_distEventType1, distEventType_array0);
    java.lang.String str3 = fsmalphabet_distEventType1.anyEventScmQRe();
    int i4 = fsmalphabet_distEventType1.size();
    java.lang.String str5 = fsmalphabet_distEventType1.toString();
    fsmalphabet_distEventType1.clear();
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState7 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath9 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState7, (int)(byte)100);
    int i10 = gFSMPath9.getPid();
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState11 = gFSMPath9.getStates();
    boolean b12 = fsmalphabet_distEventType1.remove((java.lang.Object)gFSMPath9);
    fsmalphabet_distEventType1.clear();
    dynoptic.main.OptionException optionException15 = new dynoptic.main.OptionException("");
    java.lang.String str16 = optionException15.toString();
    synoptic.util.Pair<dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType>,dynoptic.main.OptionException> pair_fsmalphabet_distEventType_optionException17 = dynoptic.util.Util.newPair(fsmalphabet_distEventType1, optionException15);
    java.lang.String str18 = optionException15.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(distEventType_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "(_)"+ "'", str3.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + ""+ "'", str16.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_fsmalphabet_distEventType_optionException17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));

  }

  @Test
  public void test256() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test256"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array1 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState2 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, fSMState_array1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState5 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, fSMState_array4);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState8 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, fSMState_array7);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM11 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, 0);
    java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState> set_fSMState12 = fSM11.getAcceptStates();
    dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType> fsmalphabet_distEventType13 = fSM11.getAlphabet();
    java.util.Set<java.lang.String> set_str14 = fsmalphabet_distEventType13.getLocalEventScmStrings();
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array15 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState16 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState16, fSMState_array15);
    dynoptic.model.fifosys.cfsm.CFSMState cFSMState18 = new dynoptic.model.fifosys.cfsm.CFSMState((java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState16);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array19 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState20 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState20, fSMState_array19);
    dynoptic.model.fifosys.cfsm.CFSMState cFSMState22 = new dynoptic.model.fifosys.cfsm.CFSMState((java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState20);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array24 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState25 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState25, fSMState_array24);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array28 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState29 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState29, fSMState_array28);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array31 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState32 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b33 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState32, fSMState_array31);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array34 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState35 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState35, fSMState_array34);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM38 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState29, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState32, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState35, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array40 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState41 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b42 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState41, fSMState_array40);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array43 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState44 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState44, fSMState_array43);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array46 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState47 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState47, fSMState_array46);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM50 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState41, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState44, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState47, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM52 = new dynoptic.model.fifosys.cfsm.fsm.FSM(1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState25, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState32, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState47, (int)' ');
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState54 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b55 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState54, fSMState_array53);
    dynoptic.model.fifosys.cfsm.CFSMState cFSMState56 = new dynoptic.model.fifosys.cfsm.CFSMState((java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState54);
    java.util.ArrayList<java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>> arraylist_list_fSMState57 = new java.util.ArrayList<java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>>();
    boolean b58 = arraylist_list_fSMState57.add((java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState16);
    boolean b59 = arraylist_list_fSMState57.add((java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState20);
    boolean b60 = arraylist_list_fSMState57.add((java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState47);
    boolean b61 = arraylist_list_fSMState57.add((java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState54);
    java.util.Set<dynoptic.model.fifosys.cfsm.CFSMState> set_cFSMState62 = dynoptic.model.fifosys.cfsm.CFSMState.CFSMStatesFromFSMListLists((java.util.List<java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>>)arraylist_list_fSMState57);
    boolean b63 = fsmalphabet_distEventType13.removeAll((java.util.Collection<java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>>)arraylist_list_fSMState57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_fSMState12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fsmalphabet_distEventType13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_cFSMState62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);

  }

  @Test
  public void test257() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test257"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState33 = obsFifoSysState32.getParent();
    synoptic.model.event.DistEventType distEventType34 = null;
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> set_obsFifoSysState35 = gFSMState33.getObservedStatesWithTransition(distEventType34);
    java.util.Set<synoptic.model.event.DistEventType> set_distEventType36 = gFSMState33.getTransitioningEvents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gFSMState33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsFifoSysState35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_distEventType36);

  }

  @Test
  public void test258() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test258"); }

    java.util.List<java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>> list_list_fSMState0 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.util.Set<dynoptic.model.fifosys.cfsm.CFSMState> set_cFSMState1 = dynoptic.model.fifosys.cfsm.CFSMState.CFSMStatesFromFSMListLists(list_list_fSMState0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test259() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test259"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array1 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState2 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, fSMState_array1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState5 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, fSMState_array4);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState8 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, fSMState_array7);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM11 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, 0);
    int i12 = fSM11.getPid();
    boolean b13 = fSM11.isDeterministic();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test260() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test260"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.ObsDistEventType> set_obsDistEventType33 = obsFifoSysState32.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.observed.ObsDistEventType obsDistEventType34 = null;
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState35 = obsFifoSysState32.getNextState(obsDistEventType34);
    int i36 = obsFifoSysState32.getNumProcesses();
    java.lang.String str37 = obsFifoSysState32.toShortIntStr();
    boolean b38 = obsFifoSysState32.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsDistEventType33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "1"+ "'", str37.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);

  }

  @Test
  public void test261() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test261"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType33 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState34 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType33);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId35 = immutableMultiChState34.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState36 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState34);
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array38 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState39 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState39, obsFifoSysState_array38);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState41 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)10, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState39);
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> set_obsFifoSysState42 = gFSMState41.getTerminalObs();
    java.lang.String str43 = gFSMState41.toIntermediateString();
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> set_obsFifoSysState45 = gFSMState41.getTerminalObsForPid((int)(short)1);
    boolean b47 = gFSMState41.isInitForPid((int)(byte)1);
    boolean b48 = obsMultFSMState28.equals((java.lang.Object)b47);
    java.lang.String str49 = obsMultFSMState28.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsFifoSysState42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "Part-0-1236295470"+ "'", str43.equals("Part-0-1236295470"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsFifoSysState45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "FSMStates[i_a0_t, i_a0_t, i_a0_t, i_a0_t]"+ "'", str49.equals("FSMStates[i_a0_t, i_a0_t, i_a0_t, i_a0_t]"));

  }

  @Test
  public void test262() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test262"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState3 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState((int)(byte)1, true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode obsDAGNode4 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(obsFSMState3);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState7 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState7, fSMState_array6);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array9 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState10 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState10, fSMState_array9);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState13 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState13, fSMState_array12);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM16 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState7, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState10, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState13, 0);
    int i17 = fSM16.getPid();
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array19 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState20 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState20, fSMState_array19);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array22 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState23 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState23, fSMState_array22);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState26, fSMState_array25);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM29 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState20, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState23, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState26, 0);
    java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState> set_fSMState30 = fSM29.getAcceptStates();
    int i31 = fSM29.getPid();
    dynoptic.model.automaton.EventTypeEncodings eventTypeEncodings32 = fSM29.getEventTypeEncodings();
    dynoptic.model.automaton.EncodedAutomaton encodedAutomaton33 = fSM16.getEncodedAutomaton(eventTypeEncodings32);
    boolean b34 = obsFSMState3.equals((java.lang.Object)eventTypeEncodings32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_fSMState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(eventTypeEncodings32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(encodedAutomaton33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);

  }

  @Test
  public void test263() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test263"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    int i33 = immutableMultiChState30.topOfQueuesHash();
    boolean b35 = immutableMultiChState30.isEmptyForPid((int)(byte)-1);
    boolean b36 = immutableMultiChState30.isEmpty();
    int i37 = immutableMultiChState30.topOfQueuesHash();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 17);

  }

  @Test
  public void test264() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test264"); }

    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSys obsFifoSys1 = null;
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.model.export.GraphExporter.exportObsFifoSys("CExample[\n]", obsFifoSys1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test265() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test265"); }

    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSys obsFifoSys1 = null;
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.model.export.GraphExporter.exportObsFifoSys("mcscm.VerifyOutputParseException: Part-0-1970692513", obsFifoSys1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test266() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test266"); }

    dynoptic.model.fifosys.gfsm.GFSMState gFSMState1 = new dynoptic.model.fifosys.gfsm.GFSMState(100);
    java.util.Set<synoptic.model.event.DistEventType> set_distEventType2 = gFSMState1.getTransitioningEvents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_distEventType2);

  }

  @Test
  public void test267() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test267"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array0 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState1 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState1, fSMState_array0);
    dynoptic.model.fifosys.cfsm.CFSMState cFSMState3 = new dynoptic.model.fifosys.cfsm.CFSMState((java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState1);
    java.lang.String[] str_array18 = new java.lang.String[] { "CExample[\n]", "Part-0-795767496", "ChState]", "Part-0-1970692513", "state 97 :\n", "(_)", "Part-0-1970692513", "Part-0-433783005", "", "Part-0-206672791", "Part-0-879220873", "Part-0-879220873", "(_)", "mcscm.VerifyOutputParseException: Part-0-1970692513" };
    java.util.ArrayList<java.lang.String> arraylist_str19 = new java.util.ArrayList<java.lang.String>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str19, str_array18);
    dynoptic.model.fifosys.cfsm.BadState badState21 = new dynoptic.model.fifosys.cfsm.BadState(cFSMState3, (java.util.List<java.lang.String>)arraylist_str19);
    java.lang.String str22 = badState21.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "(with CExample[\n] . # . Part-0-795767496 . # . ChState] . # . Part-0-1970692513 . # . state 97 :\n . # . (_) . # . Part-0-1970692513 . # . Part-0-433783005 . # .  . # . Part-0-206672791 . # . Part-0-879220873 . # . Part-0-879220873 . # . (_) . # . mcscm.VerifyOutputParseException: Part-0-1970692513\n)"+ "'", str22.equals("(with CExample[\n] . # . Part-0-795767496 . # . ChState] . # . Part-0-1970692513 . # . state 97 :\n . # . (_) . # . Part-0-1970692513 . # . Part-0-433783005 . # .  . # . Part-0-206672791 . # . Part-0-879220873 . # . Part-0-879220873 . # . (_) . # . mcscm.VerifyOutputParseException: Part-0-1970692513\n)"));

  }

  @Test
  public void test268() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test268"); }

    mcscm.VerifyOutputParseException verifyOutputParseException1 = new mcscm.VerifyOutputParseException("Part-0-879220873");

  }

  @Test
  public void test269() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test269"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState3 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState(4, true, true);
    obsFSMState3.markInit();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState3);

  }

  @Test
  public void test270() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test270"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    synoptic.model.channelid.ChannelId[] channelId_array34 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId35 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId35, channelId_array34);
    dynoptic.model.fifosys.cfsm.CFSM cFSM37 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId35);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId38 = dynoptic.util.Util.newList((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId35);
    boolean b39 = obsMultFSMState28.equals((java.lang.Object)arraylist_channelId35);
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState40 = dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds((java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId35);
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState41 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelIds((java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableMultiChState40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState41);

  }

  @Test
  public void test271() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test271"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    int i2 = obsFSMState1.getPid();
    int i3 = obsFSMState1.getPid();
    boolean b4 = obsFSMState1.isTerminal();
    obsFSMState1.markTerm();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test272() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test272"); }

    synoptic.model.channelid.ChannelId[] channelId_array1 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId2 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId2, channelId_array1);
    dynoptic.model.fifosys.cfsm.CFSM cFSM4 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId2);
    mcscm.McScMCExample mcScMCExample5 = new mcscm.McScMCExample((java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId2);
    java.util.List<synoptic.model.event.DistEventType> list_distEventType6 = mcScMCExample5.getEvents();
    java.util.List<synoptic.model.event.DistEventType> list_distEventType7 = mcScMCExample5.getEvents();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_distEventType6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_distEventType7);

  }

  @Test
  public void test273() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test273"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    boolean b29 = obsMultFSMState28.isAccept();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState31 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array33 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId34 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId34, channelId_array33);
    dynoptic.model.fifosys.cfsm.CFSM cFSM36 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId34);
    boolean b37 = obsFSMState31.equals((java.lang.Object)arraylist_channelId34);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState39 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array41 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId42 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b43 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId42, channelId_array41);
    dynoptic.model.fifosys.cfsm.CFSM cFSM44 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId42);
    boolean b45 = obsFSMState39.equals((java.lang.Object)arraylist_channelId42);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState46 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath48 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState46, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState49 = gFSMPath48.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState50 = dynoptic.util.Util.newPair(obsFSMState39, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState49);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState52 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState54 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array55 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState31, obsFSMState39, obsFSMState52, obsFSMState54 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState56 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b57 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState56, obsFSMState_array55);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState58 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState56);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType59 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState60 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType59);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId61 = immutableMultiChState60.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState62 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState58, immutableMultiChState60);
    int i63 = immutableMultiChState60.topOfQueuesHash();
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId64 = immutableMultiChState60.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState65 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState65);

  }

  @Test
  public void test274() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test274"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState((int)(byte)1);
    obsFSMState1.markTerm();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);

  }

  @Test
  public void test275() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test275"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(1, "amd64", true, false);
    boolean b5 = obsFSMState4.isTerminal();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test276() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test276"); }

    synoptic.model.channelid.ChannelId[] channelId_array1 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId2 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId2, channelId_array1);
    dynoptic.model.fifosys.cfsm.CFSM cFSM4 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId2);
    boolean b6 = cFSM4.equals((java.lang.Object)'a');
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId7 = cFSM4.getChannelIds();
    java.util.Set<dynoptic.model.fifosys.cfsm.CFSMState> set_cFSMState8 = cFSM4.getStates();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_cFSMState8);

  }

  @Test
  public void test277() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test277"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array1 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState2 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, fSMState_array1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState5 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, fSMState_array4);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState8 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, fSMState_array7);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM11 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, 0);
    java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState> set_fSMState12 = fSM11.getAcceptStates();
    dynoptic.model.automaton.EventTypeEncodings eventTypeEncodings13 = fSM11.getEventTypeEncodings();
    java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState> set_fSMState14 = fSM11.getStates();
    dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType> fsmalphabet_distEventType15 = fSM11.getAlphabet();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_fSMState12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(eventTypeEncodings13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_fSMState14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fsmalphabet_distEventType15);

  }

  @Test
  public void test278() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test278"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType33 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState34 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType33);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId35 = immutableMultiChState34.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState36 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState34);
    boolean b38 = obsMultFSMState28.isAcceptForPid((int)(byte)1);
    synoptic.model.channelid.ChannelId[] channelId_array40 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId41 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b42 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId41, channelId_array40);
    dynoptic.model.fifosys.cfsm.CFSM cFSM43 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId41);
    dynoptic.model.fifosys.exec.FifoSysExecState<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState> fifosysexecstate_obsMultFSMState44 = new dynoptic.model.fifosys.exec.FifoSysExecState<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState>(obsMultFSMState28, (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId41);
    // The following exception was thrown during execution in test generation
    try {
    boolean b46 = obsMultFSMState28.isAcceptForPid((int)(byte)10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);

  }

  @Test
  public void test279() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test279"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.ObsDistEventType> set_obsDistEventType33 = obsFifoSysState32.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.observed.ObsDistEventType obsDistEventType34 = null;
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState35 = obsFifoSysState32.getNextState(obsDistEventType34);
    boolean b36 = obsFifoSysState32.isInitial();
    java.lang.String str37 = obsFifoSysState32.toString();
    boolean b39 = obsFifoSysState32.isAcceptForPid((int)(short)1);
    int i40 = obsFifoSysState32.getNumProcesses();
    // The following exception was thrown during execution in test generation
    try {
    boolean b42 = obsFifoSysState32.isInitForPid((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsDistEventType33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "1"+ "'", str37.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 4);

  }

  @Test
  public void test280() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test280"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    int i33 = immutableMultiChState30.topOfQueuesHash();
    boolean b35 = immutableMultiChState30.isEmptyForPid((int)(byte)-1);
    boolean b36 = immutableMultiChState30.isEmpty();
    boolean b38 = immutableMultiChState30.isEmptyForPid(17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);

  }

  @Test
  public void test281() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test281"); }

    synoptic.model.event.DistEventType[] distEventType_array0 = new synoptic.model.event.DistEventType[] {  };
    dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType> fsmalphabet_distEventType1 = new dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<synoptic.model.event.DistEventType>)fsmalphabet_distEventType1, distEventType_array0);
    java.lang.String str3 = fsmalphabet_distEventType1.anyEventScmQRe();
    int i4 = fsmalphabet_distEventType1.size();
    java.lang.String str5 = fsmalphabet_distEventType1.toString();
    fsmalphabet_distEventType1.clear();
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState7 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath9 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState7, (int)(byte)100);
    int i10 = gFSMPath9.getPid();
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState11 = gFSMPath9.getStates();
    boolean b12 = fsmalphabet_distEventType1.remove((java.lang.Object)gFSMPath9);
    fsmalphabet_distEventType1.clear();
    dynoptic.main.OptionException optionException15 = new dynoptic.main.OptionException("");
    java.lang.String str16 = optionException15.toString();
    synoptic.util.Pair<dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType>,dynoptic.main.OptionException> pair_fsmalphabet_distEventType_optionException17 = dynoptic.util.Util.newPair(fsmalphabet_distEventType1, optionException15);
    boolean b18 = fsmalphabet_distEventType1.isEmpty();
    int i19 = fsmalphabet_distEventType1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(distEventType_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "(_)"+ "'", str3.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + ""+ "'", str16.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_fsmalphabet_distEventType_optionException17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);

  }

  @Test
  public void test282() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test282"); }

    java.util.logging.Logger logger0 = dynoptic.main.DynopticMain.logger;
    dynoptic.model.automaton.EncodedAutomaton.logger = logger0;
    dynoptic.main.DynopticMain.logger = logger0;
    dynoptic.main.DynopticMain.logger = logger0;
    dynoptic.model.automaton.EncodedAutomaton.logger = logger0;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(logger0);

  }

  @Test
  public void test283() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test283"); }

    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array1 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState2 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState2, obsFifoSysState_array1);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState4 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)10, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState2);
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> set_obsFifoSysState5 = gFSMState4.getTerminalObs();
    java.lang.String str6 = gFSMState4.toIntermediateString();
    boolean b7 = gFSMState4.isInitial();
    java.lang.String str8 = gFSMState4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsFifoSysState5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Part-0-599461929"+ "'", str6.equals("Part-0-599461929"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[]"+ "'", str8.equals("[]"));

  }

  @Test
  public void test284() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test284"); }

    dynoptic.model.fifosys.cfsm.CFSM cFSM1 = null;
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.model.export.GraphExporter.exportCFSM("Part-0-1236295470", cFSM1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test285() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test285"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    int i2 = obsFSMState1.getPid();
    obsFSMState1.markInit();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode obsDAGNode4 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(obsFSMState1);
    obsDAGNode4.setOccurred(false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);

  }

  @Test
  public void test286() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test286"); }

    dynoptic.model.fifosys.gfsm.GFSMState gFSMState0 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath2 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState0, (int)(byte)100);
    java.util.List<synoptic.model.event.DistEventType> list_distEventType3 = gFSMPath2.getEvents();
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState4 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath6 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState4, (int)(byte)100);
    int i7 = gFSMPath6.getPid();
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath8 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMPath6);
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath9 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMPath2, gFSMPath8);
    int i10 = gFSMPath8.getPid();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str11 = gFSMPath8.toString();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_distEventType3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 100);

  }

  @Test
  public void test287() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test287"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    boolean b30 = obsMultFSMState28.equals((java.lang.Object)(short)0);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType31 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState32 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType31);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId33 = immutableMultiChState32.getChannelIds();
    boolean b34 = immutableMultiChState32.isEmpty();
    java.lang.String str35 = immutableMultiChState32.toString();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState36 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState32);
    synoptic.model.event.DistEventType distEventType37 = null;
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState38 = obsFifoSysState36.getNextState(distEventType37);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "ChState]"+ "'", str35.equals("ChState]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState36);

  }

  @Test
  public void test288() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test288"); }

    mcscm.VerifyOutputParseException verifyOutputParseException1 = new mcscm.VerifyOutputParseException("amd64");
    java.lang.Throwable[] throwable_array2 = verifyOutputParseException1.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array2);

  }

  @Test
  public void test289() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test289"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array1 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState2 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, fSMState_array1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState5 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, fSMState_array4);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState8 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, fSMState_array7);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM11 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, 0);
    java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState> set_fSMState12 = fSM11.getAcceptStates();
    java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState> set_fSMState13 = fSM11.getStates();
    dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType> fsmalphabet_distEventType14 = fSM11.getAlphabet();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_fSMState12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_fSMState13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fsmalphabet_distEventType14);

  }

  @Test
  public void test290() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test290"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((int)(byte)100, "Part-0-2061659540", true, false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState4);

  }

  @Test
  public void test291() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test291"); }

    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array1 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState2 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState2, obsFifoSysState_array1);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState4 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)10, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState2);
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array6 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState7 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState7, obsFifoSysState_array6);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState9 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)10, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState7);
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> set_obsFifoSysState10 = dynoptic.util.Util.newSet((java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState7);
    gFSMState4.addAllObs((java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState7);
    java.lang.String str12 = gFSMState4.toIntermediateString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsFifoSysState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Part-0-86650897"+ "'", str12.equals("Part-0-86650897"));

  }

  @Test
  public void test292() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test292"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState fSMState4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (int)(short)1, (int)'a');
    java.util.Set<synoptic.model.event.DistEventType> set_distEventType5 = fSMState4.getTransitioningEvents();
    fSMState4.setInitial(true);
    boolean b9 = fSMState4.equals((java.lang.Object)"amd64");
    java.util.Set<synoptic.model.event.DistEventType> set_distEventType10 = fSMState4.getTransitioningEvents();
    boolean b11 = fSMState4.isAccept();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_distEventType5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_distEventType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test293() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test293"); }

    mcscm.McScMCExample mcScMCExample0 = null;
    dynoptic.model.fifosys.cfsm.CFSMExecution cFSMExecution1 = new dynoptic.model.fifosys.cfsm.CFSMExecution(mcScMCExample0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState fSMState6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (int)(short)1, (int)'a');
    java.util.Set<synoptic.model.event.DistEventType> set_distEventType7 = fSMState6.getTransitioningEvents();
    fSMState6.setInitial(true);
    boolean b11 = fSMState6.equals((java.lang.Object)"amd64");
    java.util.Set<synoptic.model.event.DistEventType> set_distEventType12 = fSMState6.getTransitioningEvents();
    int i13 = fSMState6.getScmId();
    fSMState6.setInitial(true);
    cFSMExecution1.addToPath(fSMState6);
    java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState> list_fSMState17 = cFSMExecution1.getFSMPath();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_distEventType7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_distEventType12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_fSMState17);

  }

  @Test
  public void test294() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test294"); }

    dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType> fsmalphabet_distEventType0 = new dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType>();
    java.util.Iterator<synoptic.model.event.DistEventType> iterator_distEventType1 = fsmalphabet_distEventType0.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_distEventType1);

  }

  @Test
  public void test295() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test295"); }

    dynoptic.model.fifosys.gfsm.GFSMState gFSMState0 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath2 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState0, (int)(byte)100);
    int i3 = gFSMPath2.getPid();
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath4 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMPath2);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType6 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState7 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType6);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId8 = immutableMultiChState7.getChannelIds();
    dynoptic.model.fifosys.gfsm.GFSM gFSM9 = new dynoptic.model.fifosys.gfsm.GFSM((int)(byte)1, list_channelId8);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    mcscm.McScMCExample mcScMCExample15 = new mcscm.McScMCExample((java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    java.util.List<synoptic.model.event.DistEventType> list_distEventType16 = mcScMCExample15.getEvents();
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMPath> set_gFSMPath18 = gFSM9.getCExamplePaths(mcScMCExample15, 1);
    boolean b19 = gFSMPath4.refine(gFSM9);
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMState> set_gFSMState21 = gFSM9.getInitStatesForPid((int)(short)-1);
    synoptic.model.channelid.ChannelId[] channelId_array23 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId24 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId24, channelId_array23);
    dynoptic.model.fifosys.cfsm.CFSM cFSM26 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId24);
    mcscm.McScMCExample mcScMCExample27 = new mcscm.McScMCExample((java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId24);
    dynoptic.model.fifosys.cfsm.CFSMExecution cFSMExecution28 = new dynoptic.model.fifosys.cfsm.CFSMExecution(mcScMCExample27);
    boolean b29 = gFSM9.equals((java.lang.Object)mcScMCExample27);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array31 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState32 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b33 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState32, fSMState_array31);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array34 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState35 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState35, fSMState_array34);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array37 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState38 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b39 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState38, fSMState_array37);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState32, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState35, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState38, 0);
    java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState> set_fSMState42 = fSM41.getAcceptStates();
    dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType> fsmalphabet_distEventType43 = fSM41.getAlphabet();
    synoptic.model.event.DistEventType distEventType44 = null;
    boolean b45 = fsmalphabet_distEventType43.add(distEventType44);
    boolean b46 = fsmalphabet_distEventType43.isEmpty();
    java.util.Iterator<synoptic.model.event.DistEventType> iterator_distEventType47 = fsmalphabet_distEventType43.iterator();
    boolean b48 = gFSM9.equals((java.lang.Object)fsmalphabet_distEventType43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_distEventType16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_gFSMPath18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_gFSMState21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_fSMState42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fsmalphabet_distEventType43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_distEventType47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);

  }

  @Test
  public void test296() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test296"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array1 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState2 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, fSMState_array1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState5 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, fSMState_array4);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState8 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, fSMState_array7);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM11 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, 0);
    int i12 = fSM11.getPid();
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array14 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState15 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState15, fSMState_array14);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState18 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState18, fSMState_array17);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array20 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState21 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState21, fSMState_array20);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM24 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState15, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState18, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState21, 0);
    java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState> set_fSMState25 = fSM24.getAcceptStates();
    int i26 = fSM24.getPid();
    dynoptic.model.automaton.EventTypeEncodings eventTypeEncodings27 = fSM24.getEventTypeEncodings();
    dynoptic.model.automaton.EncodedAutomaton encodedAutomaton28 = fSM11.getEncodedAutomaton(eventTypeEncodings27);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState30 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array32 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId33 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId33, channelId_array32);
    dynoptic.model.fifosys.cfsm.CFSM cFSM35 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId33);
    boolean b36 = obsFSMState30.equals((java.lang.Object)arraylist_channelId33);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState38 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array40 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId41 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b42 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId41, channelId_array40);
    dynoptic.model.fifosys.cfsm.CFSM cFSM43 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId41);
    boolean b44 = obsFSMState38.equals((java.lang.Object)arraylist_channelId41);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState45 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath47 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState45, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState48 = gFSMPath47.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState49 = dynoptic.util.Util.newPair(obsFSMState38, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState48);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState51 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState53 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array54 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState30, obsFSMState38, obsFSMState51, obsFSMState53 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState55 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b56 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState55, obsFSMState_array54);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState57 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState55);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType58 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState59 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType58);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId60 = immutableMultiChState59.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState61 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState57, immutableMultiChState59);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState62 = obsFifoSysState61.getFSMStates();
    synoptic.model.channelid.ChannelId[] channelId_array64 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId65 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b66 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId65, channelId_array64);
    dynoptic.model.fifosys.cfsm.CFSM cFSM67 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId65);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId68 = dynoptic.util.Util.newList((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId65);
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState69 = dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds(list_channelId68);
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState70 = mutableMultiChState69.clone();
    dynoptic.model.fifosys.exec.FifoSysExecState<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState> fifosysexecstate_obsMultFSMState71 = new dynoptic.model.fifosys.exec.FifoSysExecState<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState>(obsMultFSMState62, mutableMultiChState69);
    boolean b72 = encodedAutomaton28.equals((java.lang.Object)obsMultFSMState62);
    encodedAutomaton28.minimize();
    boolean b75 = encodedAutomaton28.equals((java.lang.Object)"CExample[\n]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_fSMState25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(eventTypeEncodings27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(encodedAutomaton28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableMultiChState69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableMultiChState70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);

  }

  @Test
  public void test297() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test297"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    int i2 = obsFSMState1.getPid();
    obsFSMState1.markInit();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode obsDAGNode4 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(obsFSMState1);
    boolean b5 = obsDAGNode4.isInitState();
    boolean b6 = obsDAGNode4.isTermState();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);

  }

  @Test
  public void test298() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test298"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array1 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState2 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, fSMState_array1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState5 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, fSMState_array4);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState8 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, fSMState_array7);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM11 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, 0);
    int i12 = fSM11.getPid();
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array14 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState15 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState15, fSMState_array14);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState18 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState18, fSMState_array17);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array20 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState21 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState21, fSMState_array20);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM24 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState15, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState18, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState21, 0);
    java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState> set_fSMState25 = fSM24.getAcceptStates();
    int i26 = fSM24.getPid();
    dynoptic.model.automaton.EventTypeEncodings eventTypeEncodings27 = fSM24.getEventTypeEncodings();
    dynoptic.model.automaton.EncodedAutomaton encodedAutomaton28 = fSM11.getEncodedAutomaton(eventTypeEncodings27);
    fSM11.minimize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_fSMState25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(eventTypeEncodings27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(encodedAutomaton28);

  }

  @Test
  public void test299() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test299"); }

    synoptic.model.event.DistEventType[] distEventType_array0 = new synoptic.model.event.DistEventType[] {  };
    dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType> fsmalphabet_distEventType1 = new dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<synoptic.model.event.DistEventType>)fsmalphabet_distEventType1, distEventType_array0);
    java.lang.String str3 = fsmalphabet_distEventType1.anyEventScmQRe();
    java.lang.String str4 = fsmalphabet_distEventType1.anyEventScmQRe();
    java.lang.Object[] obj_array5 = fsmalphabet_distEventType1.toArray();
    java.util.Iterator<synoptic.model.event.DistEventType> iterator_distEventType6 = fsmalphabet_distEventType1.iterator();
    synoptic.model.event.DistEventType distEventType7 = null;
    boolean b8 = fsmalphabet_distEventType1.add(distEventType7);
    synoptic.model.event.DistEventType distEventType9 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str10 = fsmalphabet_distEventType1.anyEventExceptOneScmQRe(distEventType9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(distEventType_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "(_)"+ "'", str3.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "(_)"+ "'", str4.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_distEventType6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test300() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test300"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    int i33 = immutableMultiChState30.topOfQueuesHash();
    synoptic.model.event.DistEventType[] distEventType_array34 = new synoptic.model.event.DistEventType[] {  };
    dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType> fsmalphabet_distEventType35 = new dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<synoptic.model.event.DistEventType>)fsmalphabet_distEventType35, distEventType_array34);
    java.lang.String str37 = fsmalphabet_distEventType35.anyEventScmQRe();
    int i38 = fsmalphabet_distEventType35.size();
    java.lang.String str39 = fsmalphabet_distEventType35.toString();
    fsmalphabet_distEventType35.clear();
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState41 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath43 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState41, (int)(byte)100);
    int i44 = gFSMPath43.getPid();
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState45 = gFSMPath43.getStates();
    boolean b46 = fsmalphabet_distEventType35.remove((java.lang.Object)gFSMPath43);
    fsmalphabet_distEventType35.clear();
    dynoptic.main.OptionException optionException49 = new dynoptic.main.OptionException("");
    java.lang.String str50 = optionException49.toString();
    synoptic.util.Pair<dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType>,dynoptic.main.OptionException> pair_fsmalphabet_distEventType_optionException51 = dynoptic.util.Util.newPair(fsmalphabet_distEventType35, optionException49);
    boolean b52 = fsmalphabet_distEventType35.isEmpty();
    boolean b53 = immutableMultiChState30.equals((java.lang.Object)b52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(distEventType_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "(_)"+ "'", str37.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "[]"+ "'", str39.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + ""+ "'", str50.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_fsmalphabet_distEventType_optionException51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);

  }

  @Test
  public void test301() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test301"); }

    java.lang.String[] str_array12 = new java.lang.String[] { "1", "(_)", "amd64", "ChState]", "i_a0_t", "(with CExample[\n] . # . Part-0-795767496 . # . ChState] . # . Part-0-1970692513 . # . state 97 :\n . # . (_) . # . Part-0-1970692513 . # . Part-0-433783005 . # .  . # . Part-0-206672791 . # . Part-0-879220873 . # . Part-0-879220873 . # . (_) . # . mcscm.VerifyOutputParseException: Part-0-1970692513\n)", "Part-0-1572580621", "", "ChState]", "state 97 :\n", "Part-0-8745675", "ChState]" };
    java.util.ArrayList<java.lang.String> arraylist_str13 = new java.util.ArrayList<java.lang.String>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str13, str_array12);
    synoptic.model.channelid.ChannelId[] channelId_array17 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId18 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId18, channelId_array17);
    dynoptic.model.fifosys.cfsm.CFSM cFSM20 = new dynoptic.model.fifosys.cfsm.CFSM((int)(byte)10, (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId18);
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState21 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelIds((java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId18);
    dynoptic.model.fifosys.cfsm.CFSM cFSM22 = new dynoptic.model.fifosys.cfsm.CFSM((int)(byte)1, (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId18);
    // The following exception was thrown during execution in test generation
    try {
    mcscm.VerifyResult verifyResult23 = new mcscm.VerifyResult((java.util.List<java.lang.String>)arraylist_str13, (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId18);
      org.junit.Assert.fail("Expected exception of type mcscm.VerifyOutputParseException");
    } catch (mcscm.VerifyOutputParseException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState21);

  }

  @Test
  public void test302() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test302"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array1 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState2 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, fSMState_array1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState6 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState6, fSMState_array5);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array8 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState9 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState9, fSMState_array8);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState12 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState12, fSMState_array11);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM15 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState6, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState9, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState12, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState18 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState18, fSMState_array17);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array20 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState21 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState21, fSMState_array20);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array23 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState24 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState24, fSMState_array23);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM27 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState18, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState21, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState24, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM29 = new dynoptic.model.fifosys.cfsm.fsm.FSM(1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState9, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState24, (int)' ');
    int i30 = fSM29.getPid();
    fSM29.minimize();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);

  }

  @Test
  public void test303() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test303"); }

    dynoptic.model.fifosys.gfsm.GFSMState gFSMState1 = new dynoptic.model.fifosys.gfsm.GFSMState((int)'#');

  }

  @Test
  public void test304() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test304"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState29 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    dynoptic.invariants.BinaryInvariant binaryInvariant30 = null;
    dynoptic.invariants.checkers.EventuallyChecker eventuallyChecker31 = new dynoptic.invariants.checkers.EventuallyChecker(binaryInvariant30);
    dynoptic.invariants.checkers.EventuallyChecker eventuallyChecker32 = eventuallyChecker31.getClone();
    boolean b33 = eventuallyChecker31.isFail();
    boolean b34 = obsMultFSMState29.equals((java.lang.Object)eventuallyChecker31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(eventuallyChecker32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);

  }

  @Test
  public void test305() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test305"); }

    synoptic.model.channelid.ChannelId[] channelId_array2 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId3 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId3, channelId_array2);
    dynoptic.model.fifosys.cfsm.CFSM cFSM5 = new dynoptic.model.fifosys.cfsm.CFSM((int)(byte)10, (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId3);
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState6 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelIds((java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM7 = new dynoptic.model.fifosys.cfsm.CFSM((int)(byte)1, (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId3);
    dynoptic.main.OptionException optionException9 = new dynoptic.main.OptionException("");
    java.lang.Throwable[] throwable_array10 = optionException9.getSuppressed();
    boolean b11 = cFSM7.equals((java.lang.Object)optionException9);
    java.util.Set<dynoptic.model.fifosys.cfsm.CFSMState> set_cFSMState12 = cFSM7.getStates();
    java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSM> list_fSM13 = cFSM7.getFSMs();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_cFSMState12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_fSM13);

  }

  @Test
  public void test306() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test306"); }

    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType2 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState3 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType2);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId4 = immutableMultiChState3.getChannelIds();
    dynoptic.model.fifosys.gfsm.GFSM gFSM5 = new dynoptic.model.fifosys.gfsm.GFSM((int)(byte)1, list_channelId4);
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMState> set_gFSMState6 = gFSM5.getAcceptStates();
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType8 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState9 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType8);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId10 = immutableMultiChState9.getChannelIds();
    dynoptic.model.fifosys.gfsm.GFSM gFSM11 = new dynoptic.model.fifosys.gfsm.GFSM((int)(byte)1, list_channelId10);
    synoptic.model.channelid.ChannelId[] channelId_array13 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId14 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId14, channelId_array13);
    dynoptic.model.fifosys.cfsm.CFSM cFSM16 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId14);
    mcscm.McScMCExample mcScMCExample17 = new mcscm.McScMCExample((java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId14);
    java.util.List<synoptic.model.event.DistEventType> list_distEventType18 = mcScMCExample17.getEvents();
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMPath> set_gFSMPath20 = gFSM11.getCExamplePaths(mcScMCExample17, 1);
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMPath> set_gFSMPath22 = gFSM5.getCExamplePaths(mcScMCExample17, 100);
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMState> set_gFSMState23 = gFSM5.getAcceptStates();
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMState> set_gFSMState25 = gFSM5.getAcceptStatesForPid((int)'4');
    dynoptic.model.export.GraphExporter.exportGFSM("[]", gFSM5);
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMState> set_gFSMState27 = gFSM5.getInitStates();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_gFSMState6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_distEventType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_gFSMPath20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_gFSMPath22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_gFSMState23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_gFSMState25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_gFSMState27);

  }

  @Test
  public void test307() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test307"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState33 = obsFifoSysState32.getFSMStates();
    dynoptic.model.fifosys.gfsm.observed.ObsDistEventType obsDistEventType34 = null;
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState35 = obsFifoSysState32.getNextState(obsDistEventType34);
    dynoptic.model.fifosys.gfsm.observed.ObsDistEventType obsDistEventType36 = null;
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState37 = obsFifoSysState32.getNextState(obsDistEventType36);
    synoptic.model.event.DistEventType distEventType38 = null;
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.model.fifosys.gfsm.observed.ObsDistEventType obsDistEventType39 = obsFifoSysState37.getObsTransitionByEType(distEventType38);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState37);

  }

  @Test
  public void test308() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test308"); }

    java.util.Set<java.util.Collection<java.lang.String>> set_collection_str0 = dynoptic.util.Util.newSet();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_collection_str0);

  }

  @Test
  public void test309() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test309"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array1 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState2 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, fSMState_array1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState5 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, fSMState_array4);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState8 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, fSMState_array7);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM11 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, 0);
    java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState> set_fSMState12 = fSM11.getAcceptStates();
    dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType> fsmalphabet_distEventType13 = fSM11.getAlphabet();
    java.util.Set<java.lang.String> set_str14 = fsmalphabet_distEventType13.getLocalEventScmStrings();
    synoptic.model.channelid.ChannelId[] channelId_array16 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId17 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId17, channelId_array16);
    dynoptic.model.fifosys.cfsm.CFSM cFSM19 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId17);
    int i20 = cFSM19.getNumProcesses();
    int i21 = cFSM19.getNumProcesses();
    java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSM> list_fSM22 = cFSM19.getFSMs();
    boolean b23 = fsmalphabet_distEventType13.containsAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSM>)list_fSM22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_fSMState12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fsmalphabet_distEventType13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_fSM22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);

  }

  @Test
  public void test311() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test311"); }

    dynoptic.model.fifosys.gfsm.GFSMState gFSMState1 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)1);
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> set_obsFifoSysState2 = gFSMState1.getObservedStates();
    boolean b3 = gFSMState1.isAccept();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsFifoSysState2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);

  }

  @Test
  public void test312() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test312"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array1 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState2 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, fSMState_array1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState5 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, fSMState_array4);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState8 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, fSMState_array7);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM11 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, 0);
    java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState> set_fSMState12 = fSM11.getAcceptStates();
    dynoptic.model.automaton.EventTypeEncodings eventTypeEncodings13 = fSM11.getEventTypeEncodings();
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array15 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState16 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState16, fSMState_array15);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array18 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState19 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState19, fSMState_array18);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array21 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState22 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState22, fSMState_array21);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState16, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState19, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState22, 0);
    int i26 = fSM25.getPid();
    fSM25.minimize();
    dynoptic.model.automaton.EncodedAutomaton encodedAutomaton28 = new dynoptic.model.automaton.EncodedAutomaton(eventTypeEncodings13, fSM25);
    boolean b29 = fSM25.isDeterministic();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_fSMState12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(eventTypeEncodings13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);

  }

  @Test
  public void test313() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test313"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array34 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState35 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState35, obsFifoSysState_array34);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState37 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)10, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState35);
    obsFifoSysState32.setParent(gFSMState37);
    synoptic.model.event.DistEventType distEventType39 = null;
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.model.fifosys.gfsm.observed.ObsDistEventType obsDistEventType40 = obsFifoSysState32.getObsTransitionByEType(distEventType39);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);

  }

  @Test
  public void test315() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test315"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    int i2 = obsFSMState1.getPid();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode obsDAGNode3 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(obsFSMState1);
    boolean b4 = obsFSMState1.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test316() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test316"); }

    synoptic.model.channelid.ChannelId[] channelId_array1 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId2 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId2, channelId_array1);
    dynoptic.model.fifosys.cfsm.CFSM cFSM4 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId2);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId5 = dynoptic.util.Util.newList((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId2);
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState6 = dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds(list_channelId5);
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState7 = mutableMultiChState6.clone();
    dynoptic.model.fifosys.gfsm.observed.ObsDistEventType obsDistEventType8 = null;
    // The following exception was thrown during execution in test generation
    try {
    mutableMultiChState6.enqueue(obsDistEventType8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableMultiChState6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableMultiChState7);

  }

  @Test
  public void test317() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test317"); }

    dynoptic.model.export.DotExportFormatter dotExportFormatter0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String str1 = dotExportFormatter0.beginGraphString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "digraph {\n"+ "'", str1.equals("digraph {\n"));

  }

  @Test
  public void test318() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test318"); }

    synoptic.model.channelid.ChannelId[] channelId_array1 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId2 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId2, channelId_array1);
    dynoptic.model.fifosys.cfsm.CFSM cFSM4 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId2);
    boolean b6 = cFSM4.equals((java.lang.Object)'a');
    mcscm.Os os7 = new mcscm.Os();
    boolean b8 = cFSM4.equals((java.lang.Object)os7);
    dynoptic.invariants.BinaryInvariant binaryInvariant9 = null;
    // The following exception was thrown during execution in test generation
    try {
    cFSM4.augmentWithInvTracing(binaryInvariant9);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test319() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test319"); }

    dynoptic.invariants.BinaryInvariant binaryInvariant0 = null;
    dynoptic.invariants.checkers.AFbyChecker aFbyChecker1 = new dynoptic.invariants.checkers.AFbyChecker(binaryInvariant0);
    dynoptic.invariants.checkers.AFbyChecker aFbyChecker2 = aFbyChecker1.getClone();
    dynoptic.invariants.checkers.AFbyChecker aFbyChecker3 = aFbyChecker1.getClone();
    boolean b4 = aFbyChecker1.isFail();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(aFbyChecker2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(aFbyChecker3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test320() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test320"); }

    dynoptic.model.fifosys.FifoSys<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState,dynoptic.model.fifosys.gfsm.observed.ObsDistEventType> fifosys_obsFifoSysState_obsDistEventType0 = null;
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState2 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array4 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId5 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId5, channelId_array4);
    dynoptic.model.fifosys.cfsm.CFSM cFSM7 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId5);
    boolean b8 = obsFSMState2.equals((java.lang.Object)arraylist_channelId5);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState10 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array12 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId13 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId13, channelId_array12);
    dynoptic.model.fifosys.cfsm.CFSM cFSM15 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId13);
    boolean b16 = obsFSMState10.equals((java.lang.Object)arraylist_channelId13);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState17 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath19 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState17, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState20 = gFSMPath19.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState21 = dynoptic.util.Util.newPair(obsFSMState10, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState20);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState23 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState25 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array26 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState2, obsFSMState10, obsFSMState23, obsFSMState25 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState27 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b28 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState27, obsFSMState_array26);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState29 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState27);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType30 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState31 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType30);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId32 = immutableMultiChState31.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState33 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState29, immutableMultiChState31);
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.ObsDistEventType> set_obsDistEventType34 = obsFifoSysState33.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.observed.ObsDistEventType obsDistEventType35 = null;
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState36 = obsFifoSysState33.getNextState(obsDistEventType35);
    boolean b37 = obsFifoSysState33.isInitial();
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.model.fifosys.exec.FifoSysExecution<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> fifosysexecution_obsFifoSysState38 = new dynoptic.model.fifosys.exec.FifoSysExecution<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>(fifosys_obsFifoSysState_obsDistEventType0, obsFifoSysState33);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsDistEventType34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);

  }

  @Test
  public void test321() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test321"); }

    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath1 = new dynoptic.model.fifosys.gfsm.GFSMPath((int)(byte)0);
    int i2 = gFSMPath1.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState4 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)1);
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> set_obsFifoSysState5 = gFSMState4.getObservedStates();
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> set_obsFifoSysState7 = gFSMState4.getTerminalObsForPid(97);
    gFSMPath1.prefixState(gFSMState4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsFifoSysState5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsFifoSysState7);

  }

  @Test
  public void test322() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test322"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array1 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState2 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, fSMState_array1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState5 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, fSMState_array4);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState8 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, fSMState_array7);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM11 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, 0);
    java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState> set_fSMState12 = fSM11.getAcceptStates();
    dynoptic.model.automaton.EventTypeEncodings eventTypeEncodings13 = fSM11.getEventTypeEncodings();
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array15 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState16 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState16, fSMState_array15);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array18 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState19 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState19, fSMState_array18);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array21 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState22 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState22, fSMState_array21);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState16, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState19, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState22, 0);
    int i26 = fSM25.getPid();
    fSM25.minimize();
    dynoptic.model.automaton.EncodedAutomaton encodedAutomaton28 = new dynoptic.model.automaton.EncodedAutomaton(eventTypeEncodings13, fSM25);
    dk.brics.automaton.Automaton automaton29 = encodedAutomaton28.getAutomaton();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_fSMState12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(eventTypeEncodings13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(automaton29);

  }

  @Test
  public void test323() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test323"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    int i2 = obsFSMState1.getPid();
    obsFSMState1.markInit();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode obsDAGNode4 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(obsFSMState1);
    obsDAGNode4.setOccurred(true);
    boolean b7 = obsDAGNode4.hasOccurred();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode obsDAGNode8 = obsDAGNode4.getPrevState();
    // The following exception was thrown during execution in test generation
    try {
    boolean b9 = obsDAGNode8.isInitState();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obsDAGNode8);

  }

  @Test
  public void test324() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test324"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array1 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState2 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, fSMState_array1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState5 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, fSMState_array4);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState8 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, fSMState_array7);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM11 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, 0);
    java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState> set_fSMState12 = fSM11.getStates();
    int i13 = fSM11.getPid();
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array15 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState16 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState16, fSMState_array15);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array18 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState19 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState19, fSMState_array18);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array21 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState22 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState22, fSMState_array21);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState16, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState19, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState22, 0);
    int i26 = fSM25.getPid();
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array28 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState29 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState29, fSMState_array28);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array31 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState32 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b33 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState32, fSMState_array31);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array34 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState35 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState35, fSMState_array34);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM38 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState29, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState32, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState35, 0);
    java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState> set_fSMState39 = fSM38.getAcceptStates();
    int i40 = fSM38.getPid();
    dynoptic.model.automaton.EventTypeEncodings eventTypeEncodings41 = fSM38.getEventTypeEncodings();
    dynoptic.model.automaton.EncodedAutomaton encodedAutomaton42 = fSM25.getEncodedAutomaton(eventTypeEncodings41);
    dynoptic.model.automaton.EncodedAutomaton encodedAutomaton43 = fSM11.getEncodedAutomaton(eventTypeEncodings41);
    dk.brics.automaton.Automaton automaton44 = encodedAutomaton43.getAutomaton();
    dk.brics.automaton.Automaton automaton45 = encodedAutomaton43.getAutomaton();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_fSMState12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_fSMState39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(eventTypeEncodings41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(encodedAutomaton42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(encodedAutomaton43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(automaton44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(automaton45);

  }

  @Test
  public void test325() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test325"); }

    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType1 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState2 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType1);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId3 = immutableMultiChState2.getChannelIds();
    dynoptic.model.fifosys.gfsm.GFSM gFSM4 = new dynoptic.model.fifosys.gfsm.GFSM((int)(byte)1, list_channelId3);
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMState> set_gFSMState5 = gFSM4.getInitStates();
    java.lang.String str6 = gFSM4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_gFSMState5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "GFSM[num-states=0] : "+ "'", str6.equals("GFSM[num-states=0] : "));

  }

  @Test
  public void test326() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test326"); }

    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType1 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState2 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType1);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId3 = immutableMultiChState2.getChannelIds();
    dynoptic.model.fifosys.gfsm.GFSM gFSM4 = new dynoptic.model.fifosys.gfsm.GFSM((int)(byte)1, list_channelId3);
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState5 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelIds(list_channelId3);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType7 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState8 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType7);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId9 = immutableMultiChState8.getChannelIds();
    dynoptic.model.fifosys.gfsm.GFSM gFSM10 = new dynoptic.model.fifosys.gfsm.GFSM((int)(byte)1, list_channelId9);
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMState> set_gFSMState11 = gFSM10.getAcceptStates();
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType13 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState14 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType13);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId15 = immutableMultiChState14.getChannelIds();
    dynoptic.model.fifosys.gfsm.GFSM gFSM16 = new dynoptic.model.fifosys.gfsm.GFSM((int)(byte)1, list_channelId15);
    synoptic.model.channelid.ChannelId[] channelId_array18 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId19 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId19, channelId_array18);
    dynoptic.model.fifosys.cfsm.CFSM cFSM21 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId19);
    mcscm.McScMCExample mcScMCExample22 = new mcscm.McScMCExample((java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId19);
    java.util.List<synoptic.model.event.DistEventType> list_distEventType23 = mcScMCExample22.getEvents();
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMPath> set_gFSMPath25 = gFSM16.getCExamplePaths(mcScMCExample22, 1);
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMPath> set_gFSMPath27 = gFSM10.getCExamplePaths(mcScMCExample22, 100);
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMState> set_gFSMState28 = gFSM10.getAcceptStates();
    boolean b29 = immutableMultiChState5.equals((java.lang.Object)gFSM10);
    synoptic.model.event.DistEventType distEventType30 = null;
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState31 = immutableMultiChState5.getNextChState(distEventType30);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_gFSMState11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_distEventType23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_gFSMPath25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_gFSMPath27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_gFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);

  }

  @Test
  public void test327() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test327"); }

    java.util.List<dynoptic.model.AbsFSMState<dynoptic.model.fifosys.gfsm.GFSMState,synoptic.model.event.DistEventType>> list_absfsmstate_gFSMState_distEventType0 = dynoptic.util.Util.newList();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_absfsmstate_gFSMState_distEventType0);

  }

  @Test
  public void test328() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test328"); }

    dynoptic.model.fifosys.FifoSys<dynoptic.model.fifosys.exec.FifoSysExecState<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState>,dynoptic.model.fifosys.gfsm.observed.ObsDistEventType> fifosys_fifosysexecstate_obsMultFSMState_obsDistEventType0 = null;
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState2 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array4 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId5 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId5, channelId_array4);
    dynoptic.model.fifosys.cfsm.CFSM cFSM7 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId5);
    boolean b8 = obsFSMState2.equals((java.lang.Object)arraylist_channelId5);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState10 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array12 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId13 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId13, channelId_array12);
    dynoptic.model.fifosys.cfsm.CFSM cFSM15 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId13);
    boolean b16 = obsFSMState10.equals((java.lang.Object)arraylist_channelId13);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState17 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath19 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState17, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState20 = gFSMPath19.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState21 = dynoptic.util.Util.newPair(obsFSMState10, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState20);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState23 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState25 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array26 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState2, obsFSMState10, obsFSMState23, obsFSMState25 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState27 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b28 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState27, obsFSMState_array26);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState29 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState27);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType30 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState31 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType30);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId32 = immutableMultiChState31.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState33 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState29, immutableMultiChState31);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState34 = obsFifoSysState33.getFSMStates();
    synoptic.model.channelid.ChannelId[] channelId_array36 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId37 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b38 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId37, channelId_array36);
    dynoptic.model.fifosys.cfsm.CFSM cFSM39 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId37);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId40 = dynoptic.util.Util.newList((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId37);
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState41 = dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds(list_channelId40);
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState42 = mutableMultiChState41.clone();
    dynoptic.model.fifosys.exec.FifoSysExecState<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState> fifosysexecstate_obsMultFSMState43 = new dynoptic.model.fifosys.exec.FifoSysExecState<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState>(obsMultFSMState34, mutableMultiChState41);
    boolean b44 = fifosysexecstate_obsMultFSMState43.isAccept();
    boolean b45 = fifosysexecstate_obsMultFSMState43.isAccept();
    boolean b46 = fifosysexecstate_obsMultFSMState43.isInitial();
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.model.fifosys.exec.FifoSysExecution<dynoptic.model.fifosys.exec.FifoSysExecState<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState>> fifosysexecution_fifosysexecstate_obsMultFSMState47 = new dynoptic.model.fifosys.exec.FifoSysExecution<dynoptic.model.fifosys.exec.FifoSysExecState<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState>>(fifosys_fifosysexecstate_obsMultFSMState_obsDistEventType0, fifosysexecstate_obsMultFSMState43);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableMultiChState41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableMultiChState42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);

  }

  @Test
  public void test329() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test329"); }

    dynoptic.invariants.BinaryInvariant binaryInvariant0 = null;
    dynoptic.invariants.checkers.NFbyChecker nFbyChecker1 = new dynoptic.invariants.checkers.NFbyChecker(binaryInvariant0);
    dynoptic.invariants.checkers.NFbyChecker nFbyChecker2 = nFbyChecker1.getClone();
    boolean b3 = nFbyChecker1.isFail();
    boolean b4 = nFbyChecker1.isFail();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(nFbyChecker2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test330() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test330"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array0 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState1 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState1, fSMState_array0);
    dynoptic.model.fifosys.cfsm.CFSMState cFSMState3 = new dynoptic.model.fifosys.cfsm.CFSMState((java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState1);
    java.lang.String[] str_array18 = new java.lang.String[] { "CExample[\n]", "Part-0-795767496", "ChState]", "Part-0-1970692513", "state 97 :\n", "(_)", "Part-0-1970692513", "Part-0-433783005", "", "Part-0-206672791", "Part-0-879220873", "Part-0-879220873", "(_)", "mcscm.VerifyOutputParseException: Part-0-1970692513" };
    java.util.ArrayList<java.lang.String> arraylist_str19 = new java.util.ArrayList<java.lang.String>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str19, str_array18);
    dynoptic.model.fifosys.cfsm.BadState badState21 = new dynoptic.model.fifosys.cfsm.BadState(cFSMState3, (java.util.List<java.lang.String>)arraylist_str19);
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.model.fifosys.cfsm.fsm.FSMState fSMState23 = cFSMState3.getFSMState((int)(short)10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);

  }

  @Test
  public void test331() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test331"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState fSMState4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 10, 10);

  }

  @Test
  public void test332() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test332"); }

    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array1 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState2 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState2, obsFifoSysState_array1);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState4 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)10, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState2);
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array6 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState7 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState7, obsFifoSysState_array6);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState9 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)10, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState7);
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> set_obsFifoSysState10 = dynoptic.util.Util.newSet((java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState7);
    gFSMState4.addAllObs((java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState7);
    java.util.Set<synoptic.model.event.DistEventType> set_distEventType12 = gFSMState4.getTransitioningEvents();
    java.lang.String str13 = gFSMState4.toLongString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsFifoSysState10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_distEventType12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));

  }

  @Test
  public void test333() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test333"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType33 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState34 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType33);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId35 = immutableMultiChState34.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState36 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState34);
    // The following exception was thrown during execution in test generation
    try {
    boolean b38 = obsMultFSMState28.isInitForPid(10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState36);

  }

  @Test
  public void test334() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test334"); }

    dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType> fsmalphabet_distEventType0 = new dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType>();
    fsmalphabet_distEventType0.clear();
    fsmalphabet_distEventType0.clear();

  }

  @Test
  public void test335() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test335"); }

    synoptic.model.event.DistEventType[] distEventType_array0 = new synoptic.model.event.DistEventType[] {  };
    dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType> fsmalphabet_distEventType1 = new dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<synoptic.model.event.DistEventType>)fsmalphabet_distEventType1, distEventType_array0);
    java.lang.String str3 = fsmalphabet_distEventType1.anyEventScmQRe();
    int i4 = fsmalphabet_distEventType1.size();
    java.lang.String str5 = fsmalphabet_distEventType1.toString();
    synoptic.model.event.DistEventType distEventType6 = null;
    boolean b7 = fsmalphabet_distEventType1.add(distEventType6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(distEventType_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "(_)"+ "'", str3.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);

  }

  @Test
  public void test336() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test336"); }

    synoptic.model.event.DistEventType[] distEventType_array0 = new synoptic.model.event.DistEventType[] {  };
    dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType> fsmalphabet_distEventType1 = new dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<synoptic.model.event.DistEventType>)fsmalphabet_distEventType1, distEventType_array0);
    java.lang.String str3 = fsmalphabet_distEventType1.anyEventScmQRe();
    int i4 = fsmalphabet_distEventType1.size();
    java.lang.String str5 = fsmalphabet_distEventType1.toString();
    fsmalphabet_distEventType1.clear();
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState7 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath9 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState7, (int)(byte)100);
    int i10 = gFSMPath9.getPid();
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState11 = gFSMPath9.getStates();
    boolean b12 = fsmalphabet_distEventType1.remove((java.lang.Object)gFSMPath9);
    java.lang.String str13 = fsmalphabet_distEventType1.anyEventScmQRe();
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array15 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState16 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState16, fSMState_array15);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array18 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState19 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState19, fSMState_array18);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array21 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState22 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState22, fSMState_array21);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState16, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState19, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState22, 0);
    java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState> set_fSMState26 = fSM25.getAcceptStates();
    dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType> fsmalphabet_distEventType27 = fSM25.getAlphabet();
    java.util.Set<java.lang.String> set_str28 = fsmalphabet_distEventType27.getLocalEventScmStrings();
    java.util.Iterator<synoptic.model.event.DistEventType> iterator_distEventType29 = fsmalphabet_distEventType27.iterator();
    java.util.Set<java.lang.String> set_str30 = fsmalphabet_distEventType27.getLocalEventScmStrings();
    boolean b31 = fsmalphabet_distEventType1.addAll((java.util.Collection<synoptic.model.event.DistEventType>)fsmalphabet_distEventType27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(distEventType_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "(_)"+ "'", str3.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[]"+ "'", str5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "(_)"+ "'", str13.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_fSMState26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fsmalphabet_distEventType27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_distEventType29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);

  }

  @Test
  public void test337() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test337"); }

    mcscm.ScmSyntaxException scmSyntaxException1 = new mcscm.ScmSyntaxException("amd64");
    java.lang.Throwable[] throwable_array2 = scmSyntaxException1.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array2);

  }

  @Test
  public void test338() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test338"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.ObsDistEventType> set_obsDistEventType33 = obsFifoSysState32.getTransitioningEvents();
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array34 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState35 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState35, fSMState_array34);
    dynoptic.model.fifosys.cfsm.CFSMState cFSMState37 = new dynoptic.model.fifosys.cfsm.CFSMState((java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState35);
    boolean b38 = obsFifoSysState32.equals((java.lang.Object)cFSMState37);
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.model.fifosys.cfsm.fsm.FSMState fSMState40 = cFSMState37.getFSMState((int)(byte)0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsDistEventType33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);

  }

  @Test
  public void test339() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test339"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array1 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState2 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, fSMState_array1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState5 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, fSMState_array4);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState8 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, fSMState_array7);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM11 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, 0);
    java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState> set_fSMState12 = fSM11.getAcceptStates();
    dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType> fsmalphabet_distEventType13 = fSM11.getAlphabet();
    dynoptic.model.automaton.EventTypeEncodings eventTypeEncodings14 = new dynoptic.model.automaton.EventTypeEncodings((java.util.Set<synoptic.model.event.DistEventType>)fsmalphabet_distEventType13);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState17 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState17, fSMState_array16);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array19 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState20 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState20, fSMState_array19);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array22 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState23 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState23, fSMState_array22);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState17, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState20, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState23, 0);
    java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState> set_fSMState27 = fSM26.getAcceptStates();
    dynoptic.model.automaton.EventTypeEncodings eventTypeEncodings28 = fSM26.getEventTypeEncodings();
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState31 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState31, fSMState_array30);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array33 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState34 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState34, fSMState_array33);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array36 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState37 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b38 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState37, fSMState_array36);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM40 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState31, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState34, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState37, 0);
    int i41 = fSM40.getPid();
    fSM40.minimize();
    dynoptic.model.automaton.EncodedAutomaton encodedAutomaton43 = new dynoptic.model.automaton.EncodedAutomaton(eventTypeEncodings28, fSM40);
    boolean b44 = fsmalphabet_distEventType13.contains((java.lang.Object)eventTypeEncodings28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_fSMState12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fsmalphabet_distEventType13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_fSMState27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(eventTypeEncodings28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);

  }

  @Test
  public void test340() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test340"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array0 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState1 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState1, fSMState_array0);
    dynoptic.model.fifosys.cfsm.CFSMState cFSMState3 = new dynoptic.model.fifosys.cfsm.CFSMState((java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState1);
    java.lang.String[] str_array6 = new java.lang.String[] { "Part-0-1236295470", "Part-0-1870586029" };
    java.util.ArrayList<java.lang.String> arraylist_str7 = new java.util.ArrayList<java.lang.String>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str7, str_array6);
    dynoptic.model.fifosys.cfsm.BadState badState9 = new dynoptic.model.fifosys.cfsm.BadState(cFSMState3, (java.util.List<java.lang.String>)arraylist_str7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test341() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test341"); }

    synoptic.model.channelid.ChannelId[] channelId_array1 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId2 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId2, channelId_array1);
    dynoptic.model.fifosys.cfsm.CFSM cFSM4 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId2);
    boolean b6 = cFSM4.equals((java.lang.Object)'a');
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId7 = cFSM4.getChannelIds();
    dynoptic.invariants.BinaryInvariant binaryInvariant8 = null;
    // The following exception was thrown during execution in test generation
    try {
    cFSM4.augmentWithInvTracing(binaryInvariant8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId7);

  }

  @Test
  public void test342() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test342"); }

    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<dynoptic.model.fifosys.gfsm.observed.ObsDistEventType>> arraylist_chstate_obsDistEventType0 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<dynoptic.model.fifosys.gfsm.observed.ObsDistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState1 = new dynoptic.model.fifosys.channel.channelstate.MutableMultiChState((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<dynoptic.model.fifosys.gfsm.observed.ObsDistEventType>>)arraylist_chstate_obsDistEventType0);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<dynoptic.model.fifosys.gfsm.observed.ObsDistEventType>> arraylist_chstate_obsDistEventType2 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<dynoptic.model.fifosys.gfsm.observed.ObsDistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState3 = new dynoptic.model.fifosys.channel.channelstate.MutableMultiChState((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<dynoptic.model.fifosys.gfsm.observed.ObsDistEventType>>)arraylist_chstate_obsDistEventType2);
    java.util.List<java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<dynoptic.model.fifosys.gfsm.observed.ObsDistEventType>>> list_list_chstate_obsDistEventType4 = dynoptic.util.Util.get2DPermutations((java.lang.Iterable<dynoptic.model.fifosys.channel.channelstate.ChState<dynoptic.model.fifosys.gfsm.observed.ObsDistEventType>>)arraylist_chstate_obsDistEventType0, (java.lang.Iterable<dynoptic.model.fifosys.channel.channelstate.ChState<dynoptic.model.fifosys.gfsm.observed.ObsDistEventType>>)arraylist_chstate_obsDistEventType2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_list_chstate_obsDistEventType4);

  }

  @Test
  public void test343() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test343"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array1 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState2 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, fSMState_array1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState5 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, fSMState_array4);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState8 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, fSMState_array7);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM11 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, 0);
    java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState> set_fSMState12 = fSM11.getStates();
    int i13 = fSM11.getPid();
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array15 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState16 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState16, fSMState_array15);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array18 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState19 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState19, fSMState_array18);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array21 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState22 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState22, fSMState_array21);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState16, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState19, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState22, 0);
    int i26 = fSM25.getPid();
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array28 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState29 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState29, fSMState_array28);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array31 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState32 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b33 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState32, fSMState_array31);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array34 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState35 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState35, fSMState_array34);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM38 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState29, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState32, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState35, 0);
    java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState> set_fSMState39 = fSM38.getAcceptStates();
    int i40 = fSM38.getPid();
    dynoptic.model.automaton.EventTypeEncodings eventTypeEncodings41 = fSM38.getEventTypeEncodings();
    dynoptic.model.automaton.EncodedAutomaton encodedAutomaton42 = fSM25.getEncodedAutomaton(eventTypeEncodings41);
    dynoptic.model.automaton.EncodedAutomaton encodedAutomaton43 = fSM11.getEncodedAutomaton(eventTypeEncodings41);
    boolean b44 = fSM11.isDeterministic();
    int i45 = fSM11.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_fSMState12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_fSMState39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(eventTypeEncodings41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(encodedAutomaton42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(encodedAutomaton43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == (-1));

  }

  @Test
  public void test344() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test344"); }

    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array1 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState2 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState2, obsFifoSysState_array1);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState4 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)10, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState2);
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> set_obsFifoSysState5 = gFSMState4.getTerminalObs();
    java.lang.String str6 = gFSMState4.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath8 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState4, (int)'a');
    boolean b9 = gFSMState4.isAccept();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsFifoSysState5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Part-0-1264871744"+ "'", str6.equals("Part-0-1264871744"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test345() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test345"); }

    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array1 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState2 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, fSMState_array1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState5 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, fSMState_array4);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState8 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, fSMState_array7);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM11 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState2, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState5, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState8, 0);
    java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState> set_fSMState12 = fSM11.getAcceptStates();
    dynoptic.model.automaton.EventTypeEncodings eventTypeEncodings13 = fSM11.getEventTypeEncodings();
    java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState> set_fSMState14 = fSM11.getStates();
    boolean b16 = fSM11.equals((java.lang.Object)"Part-0-433783005");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_fSMState12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(eventTypeEncodings13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_fSMState14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test346() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test346"); }

    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType1 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState2 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType1);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId3 = immutableMultiChState2.getChannelIds();
    dynoptic.model.fifosys.gfsm.GFSM gFSM4 = new dynoptic.model.fifosys.gfsm.GFSM((int)(byte)1, list_channelId3);
    synoptic.model.channelid.ChannelId[] channelId_array6 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId7 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId7, channelId_array6);
    dynoptic.model.fifosys.cfsm.CFSM cFSM9 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId7);
    mcscm.McScMCExample mcScMCExample10 = new mcscm.McScMCExample((java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId7);
    java.util.List<synoptic.model.event.DistEventType> list_distEventType11 = mcScMCExample10.getEvents();
    java.util.Set<dynoptic.model.fifosys.gfsm.GFSMPath> set_gFSMPath13 = gFSM4.getCExamplePaths(mcScMCExample10, (int)' ');
    dynoptic.model.fifosys.cfsm.CFSMExecution cFSMExecution14 = new dynoptic.model.fifosys.cfsm.CFSMExecution(mcScMCExample10);
    // The following exception was thrown during execution in test generation
    try {
    mcScMCExample10.addScmEventStrToPath("digraph {\n");
      org.junit.Assert.fail("Expected exception of type mcscm.VerifyOutputParseException");
    } catch (mcscm.VerifyOutputParseException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_distEventType11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_gFSMPath13);

  }

  @Test
  public void test347() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test347"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState2 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array4 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId5 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId5, channelId_array4);
    dynoptic.model.fifosys.cfsm.CFSM cFSM7 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId5);
    boolean b8 = obsFSMState2.equals((java.lang.Object)arraylist_channelId5);
    synoptic.model.channelid.ChannelId[] channelId_array10 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId11 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId11, channelId_array10);
    dynoptic.model.fifosys.cfsm.CFSM cFSM13 = new dynoptic.model.fifosys.cfsm.CFSM((int)(byte)10, (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId11);
    boolean b14 = obsFSMState2.equals((java.lang.Object)arraylist_channelId11);
    // The following exception was thrown during execution in test generation
    try {
    synoptic.model.event.DistEventType distEventType15 = mcscm.McScMCExample.parseScmEventStr("ObsFifoSysState[FSMStates[i_a0_t, i_a0_t, i_a0_t, i_a0_t]; ChState]]", (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId11);
      org.junit.Assert.fail("Expected exception of type mcscm.VerifyOutputParseException");
    } catch (mcscm.VerifyOutputParseException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test348() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test348"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    int i2 = obsFSMState1.getPid();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode obsDAGNode3 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(obsFSMState1);
    boolean b4 = obsDAGNode3.hasOccurred();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode obsDAGNode5 = obsDAGNode3.getNextState();
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode obsDAGNode6 = obsDAGNode5.getPrevState();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obsDAGNode5);

  }

  @Test
  public void test349() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test349"); }

    synoptic.model.event.DistEventType[] distEventType_array0 = new synoptic.model.event.DistEventType[] {  };
    dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType> fsmalphabet_distEventType1 = new dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<synoptic.model.event.DistEventType>)fsmalphabet_distEventType1, distEventType_array0);
    boolean b3 = fsmalphabet_distEventType1.isEmpty();
    java.util.Set<java.lang.String> set_str4 = fsmalphabet_distEventType1.getLocalEventScmStrings();
    java.util.Iterator<synoptic.model.event.DistEventType> iterator_distEventType5 = fsmalphabet_distEventType1.iterator();
    dynoptic.model.AbsFSM<dynoptic.model.fifosys.cfsm.CFSMState,synoptic.model.event.DistEventType>[] absfsm_cFSMState_distEventType_array6 = null;
    // The following exception was thrown during execution in test generation
    try {
    dynoptic.model.AbsFSM<dynoptic.model.fifosys.cfsm.CFSMState,synoptic.model.event.DistEventType>[] absfsm_cFSMState_distEventType_array7 = fsmalphabet_distEventType1.toArray(absfsm_cFSMState_distEventType_array6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(distEventType_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iterator_distEventType5);

  }

  @Test
  public void test350() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test350"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    boolean b30 = obsMultFSMState28.equals((java.lang.Object)(short)0);
    boolean b31 = obsMultFSMState28.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);

  }

  @Test
  public void test351() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test351"); }

    synoptic.model.event.DistEventType[] distEventType_array0 = new synoptic.model.event.DistEventType[] {  };
    dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType> fsmalphabet_distEventType1 = new dynoptic.model.alphabet.FSMAlphabet<synoptic.model.event.DistEventType>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<synoptic.model.event.DistEventType>)fsmalphabet_distEventType1, distEventType_array0);
    java.lang.String str3 = fsmalphabet_distEventType1.anyEventScmQRe();
    java.lang.String str4 = fsmalphabet_distEventType1.anyEventScmQRe();
    java.lang.Object[] obj_array5 = fsmalphabet_distEventType1.toArray();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array7 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState8 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState8, obsFifoSysState_array7);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState10 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)10, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState8);
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array12 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState13 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState13, obsFifoSysState_array12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState15 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)10, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState13);
    java.util.List<java.util.List<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>> list_list_obsFifoSysState16 = dynoptic.util.Util.get2DPermutations((java.lang.Iterable<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState8, (java.lang.Iterable<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState13);
    boolean b17 = fsmalphabet_distEventType1.removeAll((java.util.Collection<java.util.List<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>>)list_list_obsFifoSysState16);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array19 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState20 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState20, fSMState_array19);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array22 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState23 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState23, fSMState_array22);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState26, fSMState_array25);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM29 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState20, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState23, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState26, 0);
    java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState> set_fSMState30 = fSM29.getStates();
    int i31 = fSM29.getPid();
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array33 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState34 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState34, fSMState_array33);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array36 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState37 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b38 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState37, fSMState_array36);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array39 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState40 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState40, fSMState_array39);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM43 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState34, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState37, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState40, 0);
    int i44 = fSM43.getPid();
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array46 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState47 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState47, fSMState_array46);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array49 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState> linkedhashset_fSMState50 = new java.util.LinkedHashSet<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState50, fSMState_array49);
    dynoptic.model.fifosys.cfsm.fsm.FSMState[] fSMState_array52 = new dynoptic.model.fifosys.cfsm.fsm.FSMState[] {  };
    java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState> arraylist_fSMState53 = new java.util.ArrayList<dynoptic.model.fifosys.cfsm.fsm.FSMState>();
    boolean b54 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState53, fSMState_array52);
    dynoptic.model.fifosys.cfsm.fsm.FSM fSM56 = new dynoptic.model.fifosys.cfsm.fsm.FSM((int)(short)-1, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState47, (java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState>)linkedhashset_fSMState50, (java.util.Collection<dynoptic.model.fifosys.cfsm.fsm.FSMState>)arraylist_fSMState53, 0);
    java.util.Set<dynoptic.model.fifosys.cfsm.fsm.FSMState> set_fSMState57 = fSM56.getAcceptStates();
    int i58 = fSM56.getPid();
    dynoptic.model.automaton.EventTypeEncodings eventTypeEncodings59 = fSM56.getEventTypeEncodings();
    dynoptic.model.automaton.EncodedAutomaton encodedAutomaton60 = fSM43.getEncodedAutomaton(eventTypeEncodings59);
    dynoptic.model.automaton.EncodedAutomaton encodedAutomaton61 = fSM29.getEncodedAutomaton(eventTypeEncodings59);
    boolean b62 = fsmalphabet_distEventType1.remove((java.lang.Object)fSM29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(distEventType_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "(_)"+ "'", str3.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "(_)"+ "'", str4.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_list_obsFifoSysState16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_fSMState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(fSMState_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_fSMState57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(eventTypeEncodings59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(encodedAutomaton60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(encodedAutomaton61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);

  }

  @Test
  public void test352() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test352"); }

    dynoptic.invariants.BinaryInvariant binaryInvariant0 = null;
    dynoptic.invariants.checkers.AFbyChecker aFbyChecker1 = new dynoptic.invariants.checkers.AFbyChecker(binaryInvariant0);
    dynoptic.invariants.checkers.AFbyChecker aFbyChecker2 = aFbyChecker1.getClone();
    dynoptic.invariants.checkers.AFbyChecker aFbyChecker3 = aFbyChecker2.getClone();
    dynoptic.invariants.checkers.AFbyChecker aFbyChecker4 = aFbyChecker2.getClone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(aFbyChecker2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(aFbyChecker3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(aFbyChecker4);

  }

  @Test
  public void test354() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test354"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState33 = obsFifoSysState32.getFSMStates();
    dynoptic.model.fifosys.gfsm.observed.ObsDistEventType obsDistEventType34 = null;
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState35 = obsFifoSysState32.getNextState(obsDistEventType34);
    java.lang.String str36 = obsFifoSysState32.toLongString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "ObsFifoSysState[FSMStates[i_a0_t, i_a0_t, i_a0_t, i_a0_t]; ChState]]"+ "'", str36.equals("ObsFifoSysState[FSMStates[i_a0_t, i_a0_t, i_a0_t, i_a0_t]; ChState]]"));

  }

  @Test
  public void test355() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test355"); }

    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath1 = new dynoptic.model.fifosys.gfsm.GFSMPath((int)(byte)0);
    synoptic.model.event.DistEventType distEventType2 = null;
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array4 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState5 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState5, obsFifoSysState_array4);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState7 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)10, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState5);
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array9 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState10 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState10, obsFifoSysState_array9);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState12 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)10, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState10);
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> set_obsFifoSysState13 = dynoptic.util.Util.newSet((java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState10);
    gFSMState7.addAllObs((java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState10);
    gFSMState7.recreateCachedTransitions();
    java.lang.String str16 = gFSMState7.toIntermediateString();
    gFSMPath1.prefixEventAndState(distEventType2, gFSMState7);
    boolean b18 = gFSMState7.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath20 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState7, 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsFifoSysState13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Part-0-754372896"+ "'", str16.equals("Part-0-754372896"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test356() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test356"); }

    mcscm.ScmSyntaxException scmSyntaxException1 = new mcscm.ScmSyntaxException("Part-0-1714230415");

  }

  @Test
  public void test357() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test357"); }

    synoptic.model.channelid.ChannelId[] channelId_array1 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId2 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId2, channelId_array1);
    dynoptic.model.fifosys.cfsm.CFSM cFSM4 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId2);
    mcscm.McScMCExample mcScMCExample5 = new mcscm.McScMCExample((java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId2);
    dynoptic.model.fifosys.cfsm.CFSMExecution cFSMExecution6 = new dynoptic.model.fifosys.cfsm.CFSMExecution(mcScMCExample5);
    dynoptic.model.fifosys.cfsm.fsm.FSMState fSMState11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, (int)'a', (int)(short)10);
    boolean b12 = fSMState11.isAccept();
    cFSMExecution6.addToPath(fSMState11);
    java.util.List<dynoptic.model.fifosys.cfsm.fsm.FSMState> list_fSMState14 = cFSMExecution6.getFSMPath();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_fSMState14);

  }

  @Test
  public void test358() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test358"); }

    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType1 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState2 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType1);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId3 = immutableMultiChState2.getChannelIds();
    dynoptic.model.fifosys.gfsm.GFSM gFSM4 = new dynoptic.model.fifosys.gfsm.GFSM((int)(byte)1, list_channelId3);
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState5 = dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds(list_channelId3);
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState6 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelIds(list_channelId3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableMultiChState5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState6);

  }

  @Test
  public void test359() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test359"); }

    synoptic.model.channelid.ChannelId[] channelId_array1 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId2 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId2, channelId_array1);
    dynoptic.model.fifosys.cfsm.CFSM cFSM4 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId2);
    int i5 = cFSM4.getNumProcesses();
    int i6 = cFSM4.getNumProcesses();
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath8 = new dynoptic.model.fifosys.gfsm.GFSMPath(10);
    boolean b9 = cFSM4.equals((java.lang.Object)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test360() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test360"); }

    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType1 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState2 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType1);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId3 = immutableMultiChState2.getChannelIds();
    dynoptic.model.fifosys.gfsm.GFSM gFSM4 = new dynoptic.model.fifosys.gfsm.GFSM((int)(byte)1, list_channelId3);
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState5 = dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds(list_channelId3);
    mcscm.McScMCExample mcScMCExample6 = new mcscm.McScMCExample(list_channelId3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableMultiChState5);

  }

  @Test
  public void test361() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test361"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    dynoptic.model.fifosys.gfsm.observed.ObsDistEventType obsDistEventType33 = null;
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> set_obsFifoSysState34 = obsFifoSysState32.getNextStates(obsDistEventType33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsFifoSysState34);

  }

  @Test
  public void test362() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test362"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    synoptic.model.channelid.ChannelId[] channelId_array34 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId35 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId35, channelId_array34);
    dynoptic.model.fifosys.cfsm.CFSM cFSM37 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId35);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId38 = dynoptic.util.Util.newList((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId35);
    boolean b39 = obsMultFSMState28.equals((java.lang.Object)arraylist_channelId35);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType41 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState42 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType41);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId43 = immutableMultiChState42.getChannelIds();
    dynoptic.model.fifosys.gfsm.GFSM gFSM44 = new dynoptic.model.fifosys.gfsm.GFSM((int)(byte)1, list_channelId43);
    dynoptic.model.fifosys.channel.channelstate.MutableMultiChState mutableMultiChState45 = dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds(list_channelId43);
    dynoptic.model.fifosys.exec.FifoSysExecState<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState> fifosysexecstate_obsMultFSMState46 = new dynoptic.model.fifosys.exec.FifoSysExecState<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState>(obsMultFSMState28, mutableMultiChState45);
    boolean b48 = fifosysexecstate_obsMultFSMState46.isInitForPid(0);
    boolean b49 = fifosysexecstate_obsMultFSMState46.isAccept();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableMultiChState45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);

  }

  @Test
  public void test363() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test363"); }

    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array3 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId4 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId4, channelId_array3);
    dynoptic.model.fifosys.cfsm.CFSM cFSM6 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId4);
    boolean b7 = obsFSMState1.equals((java.lang.Object)arraylist_channelId4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array11 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId12 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId12, channelId_array11);
    dynoptic.model.fifosys.cfsm.CFSM cFSM14 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId12);
    boolean b15 = obsFSMState9.equals((java.lang.Object)arraylist_channelId12);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState16 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath18 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState16, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState19 = gFSMPath18.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState20 = dynoptic.util.Util.newPair(obsFSMState9, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState19);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array25 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState1, obsFSMState9, obsFSMState22, obsFSMState24 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState26 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26, obsFSMState_array25);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState28 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState26);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType29 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState30 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType29);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId31 = immutableMultiChState30.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState32 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState30);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType33 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState34 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType33);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId35 = immutableMultiChState34.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState36 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState28, immutableMultiChState34);
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] obsFifoSysState_array38 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState[] {  };
    java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> linkedhashset_obsFifoSysState39 = new java.util.LinkedHashSet<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState39, obsFifoSysState_array38);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState41 = new dynoptic.model.fifosys.gfsm.GFSMState((int)(byte)10, (java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState>)linkedhashset_obsFifoSysState39);
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> set_obsFifoSysState42 = gFSMState41.getTerminalObs();
    java.lang.String str43 = gFSMState41.toIntermediateString();
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> set_obsFifoSysState45 = gFSMState41.getTerminalObsForPid((int)(short)1);
    boolean b47 = gFSMState41.isInitForPid((int)(byte)1);
    boolean b48 = obsMultFSMState28.equals((java.lang.Object)b47);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState50 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array52 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId53 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b54 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId53, channelId_array52);
    dynoptic.model.fifosys.cfsm.CFSM cFSM55 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId53);
    boolean b56 = obsFSMState50.equals((java.lang.Object)arraylist_channelId53);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState58 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    synoptic.model.channelid.ChannelId[] channelId_array60 = new synoptic.model.channelid.ChannelId[] {  };
    java.util.ArrayList<synoptic.model.channelid.ChannelId> arraylist_channelId61 = new java.util.ArrayList<synoptic.model.channelid.ChannelId>();
    boolean b62 = java.util.Collections.addAll((java.util.Collection<synoptic.model.channelid.ChannelId>)arraylist_channelId61, channelId_array60);
    dynoptic.model.fifosys.cfsm.CFSM cFSM63 = new dynoptic.model.fifosys.cfsm.CFSM((int)'#', (java.util.List<synoptic.model.channelid.ChannelId>)arraylist_channelId61);
    boolean b64 = obsFSMState58.equals((java.lang.Object)arraylist_channelId61);
    dynoptic.model.fifosys.gfsm.GFSMState gFSMState65 = null;
    dynoptic.model.fifosys.gfsm.GFSMPath gFSMPath67 = new dynoptic.model.fifosys.gfsm.GFSMPath(gFSMState65, (int)(byte)100);
    java.util.List<dynoptic.model.fifosys.gfsm.GFSMState> list_gFSMState68 = gFSMPath67.getStates();
    synoptic.util.Pair<dynoptic.model.fifosys.gfsm.observed.ObsFSMState,java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>> pair_obsFSMState_collection_gFSMState69 = dynoptic.util.Util.newPair(obsFSMState58, (java.util.Collection<dynoptic.model.fifosys.gfsm.GFSMState>)list_gFSMState68);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState71 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState obsFSMState73 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] obsFSMState_array74 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState[] { obsFSMState50, obsFSMState58, obsFSMState71, obsFSMState73 };
    java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState> arraylist_obsFSMState75 = new java.util.ArrayList<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>();
    boolean b76 = java.util.Collections.addAll((java.util.Collection<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState75, obsFSMState_array74);
    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState obsMultFSMState77 = dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState((java.util.List<dynoptic.model.fifosys.gfsm.observed.ObsFSMState>)arraylist_obsFSMState75);
    java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>> arraylist_chstate_distEventType78 = new java.util.ArrayList<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>();
    dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState immutableMultiChState79 = dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates((java.util.List<dynoptic.model.fifosys.channel.channelstate.ChState<synoptic.model.event.DistEventType>>)arraylist_chstate_distEventType78);
    java.util.List<synoptic.model.channelid.ChannelId> list_channelId80 = immutableMultiChState79.getChannelIds();
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState81 = dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState(obsMultFSMState77, immutableMultiChState79);
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.ObsDistEventType> set_obsDistEventType82 = obsFifoSysState81.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.observed.ObsDistEventType obsDistEventType83 = null;
    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState obsFifoSysState84 = obsFifoSysState81.getNextState(obsDistEventType83);
    int i85 = obsFifoSysState81.getNumProcesses();
    dynoptic.model.fifosys.gfsm.observed.ObsDistEventType obsDistEventType86 = null;
    java.util.Set<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState> set_obsFifoSysState87 = obsFifoSysState81.getNextStates(obsDistEventType86);
    boolean b88 = obsMultFSMState28.equals((java.lang.Object)set_obsFifoSysState87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsFifoSysState42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "Part-0-629798992"+ "'", str43.equals("Part-0-629798992"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsFifoSysState45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(channelId_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_gFSMState68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(pair_obsFSMState_collection_gFSMState69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFSMState_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsMultFSMState77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(immutableMultiChState79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_channelId80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsDistEventType82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obsFifoSysState84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set_obsFifoSysState87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);

  }

}
