dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : $z0 = virtualinvoke r1.<synoptic.model.event.DistEventType: boolean isLocalEvent()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : if $z0 == 0
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : return r0
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : $r5 = r0.<dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: java.util.List channelStates>
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : $r5 = r0.<dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: java.util.List channelStates> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : r2 = staticinvoke <dynoptic.util.Util: java.util.List newList(java.util.Collection)>($r5)
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : r2 = staticinvoke <dynoptic.util.Util: java.util.List newList(java.util.Collection)>($r5) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : $r6 = virtualinvoke r1.<synoptic.model.event.DistEventType: synoptic.model.channelid.ChannelId getChannelId()>()
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : $r6 = virtualinvoke r1.<synoptic.model.event.DistEventType: synoptic.model.channelid.ChannelId getChannelId()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : i0 = virtualinvoke $r6.<synoptic.model.channelid.ChannelId: int getScmId()>()
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : i0 = virtualinvoke $r6.<synoptic.model.channelid.ChannelId: int getScmId()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : $r7 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i0)
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : $r7 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i0) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : $r8 = (dynoptic.model.fifosys.channel.channelstate.ChState) $r7
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : $r8 = (dynoptic.model.fifosys.channel.channelstate.ChState) $r7 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : r3 = virtualinvoke $r8.<dynoptic.model.fifosys.channel.channelstate.ChState: dynoptic.model.fifosys.channel.channelstate.ChState clone()>()
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : r3 = virtualinvoke $r8.<dynoptic.model.fifosys.channel.channelstate.ChState: dynoptic.model.fifosys.channel.channelstate.ChState clone()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : interfaceinvoke r2.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, r3)
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : interfaceinvoke r2.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, r3) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : $z1 = virtualinvoke r1.<synoptic.model.event.DistEventType: boolean isSendEvent()>()
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : $z1 = virtualinvoke r1.<synoptic.model.event.DistEventType: boolean isSendEvent()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : if $z1 == 0
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : if $z1 == 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : virtualinvoke r3.<dynoptic.model.fifosys.channel.channelstate.ChState: void enqueue(synoptic.model.event.IDistEventType)>(r1)
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : if $z1 == 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : $z2 = virtualinvoke r1.<synoptic.model.event.DistEventType: boolean isRecvEvent()>()
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : $z2 = virtualinvoke r1.<synoptic.model.event.DistEventType: boolean isRecvEvent()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : if $z2 == 0
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : if $z2 == 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : $r10 = virtualinvoke r3.<dynoptic.model.fifosys.channel.channelstate.ChState: synoptic.model.event.IDistEventType dequeue()>()
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : if $z2 == 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : $z5 = <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: boolean $assertionsDisabled>
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : $z5 = <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : if $z5 != 0
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : if $z5 != 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : $r14 = new java.lang.AssertionError
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : if $z5 != 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : $r15 = staticinvoke <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState fromChannelStates(java.util.List)>(r2)
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : $r15 = staticinvoke <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState fromChannelStates(java.util.List)>(r2) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : return $r15
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : $r14 = new java.lang.AssertionError >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : specialinvoke $r14.<java.lang.AssertionError: void <init>(java.lang.Object)>("A non-local event is not a send or a receive event.")
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : specialinvoke $r14.<java.lang.AssertionError: void <init>(java.lang.Object)>("A non-local event is not a send or a receive event.") >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : throw $r14
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : $r10 = virtualinvoke r3.<dynoptic.model.fifosys.channel.channelstate.ChState: synoptic.model.event.IDistEventType dequeue()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : r4 = (synoptic.model.event.DistEventType) $r10
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : r4 = (synoptic.model.event.DistEventType) $r10 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : $z3 = <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: boolean $assertionsDisabled>
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : $z3 = <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : if $z3 != 0
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : if $z3 != 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : $r11 = virtualinvoke r1.<synoptic.model.event.DistEventType: java.lang.String getEType()>()
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : if $z3 != 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : goto [?= $r15 = staticinvoke <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState fromChannelStates(java.util.List)>(r2)]
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : goto [?= $r15 = staticinvoke <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState fromChannelStates(java.util.List)>(r2)] >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : $r15 = staticinvoke <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState fromChannelStates(java.util.List)>(r2)
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : $r11 = virtualinvoke r1.<synoptic.model.event.DistEventType: java.lang.String getEType()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : $r12 = virtualinvoke r4.<synoptic.model.event.DistEventType: java.lang.String getEType()>()
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : $r12 = virtualinvoke r4.<synoptic.model.event.DistEventType: java.lang.String getEType()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : $z4 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r12)
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : $z4 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r12) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : if $z4 != 0
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : if $z4 != 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : $r13 = new java.lang.AssertionError
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : if $z4 != 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : goto [?= $r15 = staticinvoke <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState fromChannelStates(java.util.List)>(r2)]
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : $r13 = new java.lang.AssertionError >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : specialinvoke $r13.<java.lang.AssertionError: void <init>()>()
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : specialinvoke $r13.<java.lang.AssertionError: void <init>()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : throw $r13
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : virtualinvoke r3.<dynoptic.model.fifosys.channel.channelstate.ChState: void enqueue(synoptic.model.event.IDistEventType)>(r1) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : goto [?= $r15 = staticinvoke <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState fromChannelStates(java.util.List)>(r2)]
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : goto [?= $r15 = staticinvoke <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState fromChannelStates(java.util.List)>(r2)] >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.getNextChState : $r15 = staticinvoke <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState fromChannelStates(java.util.List)>(r2)
