dynoptic.main.DynopticMain.run : $r2 = new java.lang.StringBuilder >>>>>>>> dynoptic.main.DynopticMain.run : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
dynoptic.main.DynopticMain.run : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.main.DynopticMain.run : $r10 = r0.<dynoptic.main.DynopticMain: dynoptic.main.DynopticOptions opts>
dynoptic.main.DynopticMain.run : $r10 = r0.<dynoptic.main.DynopticMain: dynoptic.main.DynopticOptions opts> >>>>>>>> dynoptic.main.DynopticMain.run : $r11 = $r10.<dynoptic.main.DynopticOptions: java.lang.String outputPathPrefix>
dynoptic.main.DynopticMain.run : $r11 = $r10.<dynoptic.main.DynopticOptions: java.lang.String outputPathPrefix> >>>>>>>> dynoptic.main.DynopticMain.run : $r12 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11)
dynoptic.main.DynopticMain.run : $r12 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11) >>>>>>>> dynoptic.main.DynopticMain.run : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".trace-graph.dot")
dynoptic.main.DynopticMain.run : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".trace-graph.dot") >>>>>>>> dynoptic.main.DynopticMain.run : r3 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.main.DynopticMain.run : r3 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.main.DynopticMain.run : staticinvoke <synoptic.model.export.GraphExporter: void exportGraph(java.lang.String,synoptic.model.interfaces.IGraph,boolean)>(r3, r1, 1)
dynoptic.main.DynopticMain.run : staticinvoke <synoptic.model.export.GraphExporter: void exportGraph(java.lang.String,synoptic.model.interfaces.IGraph,boolean)>(r3, r1, 1) >>>>>>>> dynoptic.main.DynopticMain.run : staticinvoke <synoptic.model.export.GraphExporter: void generatePngFileFromDotFile(java.lang.String)>(r3)
dynoptic.main.DynopticMain.run : staticinvoke <synoptic.model.export.GraphExporter: void generatePngFileFromDotFile(java.lang.String)>(r3) >>>>>>>> dynoptic.main.DynopticMain.run : $r14 = r0.<dynoptic.main.DynopticMain: synoptic.main.SynopticMain synMain>
dynoptic.main.DynopticMain.run : $r14 = r0.<dynoptic.main.DynopticMain: synoptic.main.SynopticMain synMain> >>>>>>>> dynoptic.main.DynopticMain.run : $r15 = r0.<dynoptic.main.DynopticMain: dynoptic.main.DynopticOptions opts>
dynoptic.main.DynopticMain.run : $r15 = r0.<dynoptic.main.DynopticMain: dynoptic.main.DynopticOptions opts> >>>>>>>> dynoptic.main.DynopticMain.run : $z0 = $r15.<dynoptic.main.DynopticOptions: boolean useTransitiveClosureMining>
dynoptic.main.DynopticMain.run : $z0 = $r15.<dynoptic.main.DynopticOptions: boolean useTransitiveClosureMining> >>>>>>>> dynoptic.main.DynopticMain.run : r4 = virtualinvoke $r14.<synoptic.main.SynopticMain: synoptic.invariants.TemporalInvariantSet minePOInvariants(boolean,synoptic.model.DAGsTraceGraph)>($z0, r1)
dynoptic.main.DynopticMain.run : r4 = virtualinvoke $r14.<synoptic.main.SynopticMain: synoptic.invariants.TemporalInvariantSet minePOInvariants(boolean,synoptic.model.DAGsTraceGraph)>($z0, r1) >>>>>>>> dynoptic.main.DynopticMain.run : $r16 = <dynoptic.main.DynopticMain: java.util.logging.Logger logger>
dynoptic.main.DynopticMain.run : $r16 = <dynoptic.main.DynopticMain: java.util.logging.Logger logger> >>>>>>>> dynoptic.main.DynopticMain.run : $r17 = new java.lang.StringBuilder
dynoptic.main.DynopticMain.run : $r17 = new java.lang.StringBuilder >>>>>>>> dynoptic.main.DynopticMain.run : specialinvoke $r17.<java.lang.StringBuilder: void <init>()>()
dynoptic.main.DynopticMain.run : specialinvoke $r17.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.main.DynopticMain.run : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mined ")
dynoptic.main.DynopticMain.run : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mined ") >>>>>>>> dynoptic.main.DynopticMain.run : $i0 = virtualinvoke r4.<synoptic.invariants.TemporalInvariantSet: int numInvariants()>()
dynoptic.main.DynopticMain.run : $i0 = virtualinvoke r4.<synoptic.invariants.TemporalInvariantSet: int numInvariants()>() >>>>>>>> dynoptic.main.DynopticMain.run : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)
dynoptic.main.DynopticMain.run : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) >>>>>>>> dynoptic.main.DynopticMain.run : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" invariants")
dynoptic.main.DynopticMain.run : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" invariants") >>>>>>>> dynoptic.main.DynopticMain.run : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.main.DynopticMain.run : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.main.DynopticMain.run : virtualinvoke $r16.<java.util.logging.Logger: void info(java.lang.String)>($r21)
dynoptic.main.DynopticMain.run : virtualinvoke $r16.<java.util.logging.Logger: void info(java.lang.String)>($r21) >>>>>>>> dynoptic.main.DynopticMain.run : $r22 = r0.<dynoptic.main.DynopticMain: dynoptic.main.DynopticOptions opts>
dynoptic.main.DynopticMain.run : $r22 = r0.<dynoptic.main.DynopticMain: dynoptic.main.DynopticOptions opts> >>>>>>>> dynoptic.main.DynopticMain.run : $z1 = $r22.<dynoptic.main.DynopticOptions: boolean dumpInvariants>
dynoptic.main.DynopticMain.run : $z1 = $r22.<dynoptic.main.DynopticOptions: boolean dumpInvariants> >>>>>>>> dynoptic.main.DynopticMain.run : if $z1 == 0
dynoptic.main.DynopticMain.run : if $z1 == 0 >>>>>>>> dynoptic.main.DynopticMain.run : $r23 = <dynoptic.main.DynopticMain: java.util.logging.Logger logger>
dynoptic.main.DynopticMain.run : if $z1 == 0 >>>>>>>> dynoptic.main.DynopticMain.run : $i1 = virtualinvoke r4.<synoptic.invariants.TemporalInvariantSet: int numInvariants()>()
dynoptic.main.DynopticMain.run : $i1 = virtualinvoke r4.<synoptic.invariants.TemporalInvariantSet: int numInvariants()>() >>>>>>>> dynoptic.main.DynopticMain.run : if $i1 != 0
dynoptic.main.DynopticMain.run : if $i1 != 0 >>>>>>>> dynoptic.main.DynopticMain.run : $r29 = <dynoptic.main.DynopticMain: java.util.logging.Logger logger>
dynoptic.main.DynopticMain.run : if $i1 != 0 >>>>>>>> dynoptic.main.DynopticMain.run : $r30 = <dynoptic.main.DynopticMain: java.util.logging.Logger logger>
dynoptic.main.DynopticMain.run : $r30 = <dynoptic.main.DynopticMain: java.util.logging.Logger logger> >>>>>>>> dynoptic.main.DynopticMain.run : virtualinvoke $r30.<java.util.logging.Logger: void info(java.lang.String)>("Converting Synoptic invariants to Dynoptic invariants...")
dynoptic.main.DynopticMain.run : virtualinvoke $r30.<java.util.logging.Logger: void info(java.lang.String)>("Converting Synoptic invariants to Dynoptic invariants...") >>>>>>>> dynoptic.main.DynopticMain.run : r5 = staticinvoke <dynoptic.main.DynopticMain: java.util.List synInvsToDynInvs(synoptic.invariants.TemporalInvariantSet)>(r4)
dynoptic.main.DynopticMain.run : r5 = staticinvoke <dynoptic.main.DynopticMain: java.util.List synInvsToDynInvs(synoptic.invariants.TemporalInvariantSet)>(r4) >>>>>>>> dynoptic.main.DynopticMain.run : $r31 = <dynoptic.main.DynopticMain: java.util.logging.Logger logger>
dynoptic.main.DynopticMain.run : $r31 = <dynoptic.main.DynopticMain: java.util.logging.Logger logger> >>>>>>>> dynoptic.main.DynopticMain.run : $r32 = new java.lang.StringBuilder
dynoptic.main.DynopticMain.run : $r32 = new java.lang.StringBuilder >>>>>>>> dynoptic.main.DynopticMain.run : specialinvoke $r32.<java.lang.StringBuilder: void <init>()>()
dynoptic.main.DynopticMain.run : specialinvoke $r32.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.main.DynopticMain.run : $i2 = virtualinvoke r4.<synoptic.invariants.TemporalInvariantSet: int numInvariants()>()
dynoptic.main.DynopticMain.run : $i2 = virtualinvoke r4.<synoptic.invariants.TemporalInvariantSet: int numInvariants()>() >>>>>>>> dynoptic.main.DynopticMain.run : $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2)
dynoptic.main.DynopticMain.run : $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2) >>>>>>>> dynoptic.main.DynopticMain.run : $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Synoptic invs --> ")
dynoptic.main.DynopticMain.run : $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Synoptic invs --> ") >>>>>>>> dynoptic.main.DynopticMain.run : $i3 = interfaceinvoke r5.<java.util.List: int size()>()
dynoptic.main.DynopticMain.run : $i3 = interfaceinvoke r5.<java.util.List: int size()>() >>>>>>>> dynoptic.main.DynopticMain.run : $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3)
dynoptic.main.DynopticMain.run : $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3) >>>>>>>> dynoptic.main.DynopticMain.run : $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Dynoptic invs.")
dynoptic.main.DynopticMain.run : $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Dynoptic invs.") >>>>>>>> dynoptic.main.DynopticMain.run : $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.main.DynopticMain.run : $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.main.DynopticMain.run : virtualinvoke $r31.<java.util.logging.Logger: void info(java.lang.String)>($r37)
dynoptic.main.DynopticMain.run : virtualinvoke $r31.<java.util.logging.Logger: void info(java.lang.String)>($r37) >>>>>>>> dynoptic.main.DynopticMain.run : $z2 = interfaceinvoke r5.<java.util.List: boolean isEmpty()>()
dynoptic.main.DynopticMain.run : $z2 = interfaceinvoke r5.<java.util.List: boolean isEmpty()>() >>>>>>>> dynoptic.main.DynopticMain.run : if $z2 == 0
dynoptic.main.DynopticMain.run : if $z2 == 0 >>>>>>>> dynoptic.main.DynopticMain.run : $r38 = <dynoptic.main.DynopticMain: java.util.logging.Logger logger>
dynoptic.main.DynopticMain.run : if $z2 == 0 >>>>>>>> dynoptic.main.DynopticMain.run : $r39 = <dynoptic.main.DynopticMain: java.util.logging.Logger logger>
dynoptic.main.DynopticMain.run : $r39 = <dynoptic.main.DynopticMain: java.util.logging.Logger logger> >>>>>>>> dynoptic.main.DynopticMain.run : virtualinvoke $r39.<java.util.logging.Logger: void info(java.lang.String)>("Generating ObsFifoSys from DAGsTraceGraph...")
dynoptic.main.DynopticMain.run : virtualinvoke $r39.<java.util.logging.Logger: void info(java.lang.String)>("Generating ObsFifoSys from DAGsTraceGraph...") >>>>>>>> dynoptic.main.DynopticMain.run : $i4 = r0.<dynoptic.main.DynopticMain: int numProcesses>
dynoptic.main.DynopticMain.run : $i4 = r0.<dynoptic.main.DynopticMain: int numProcesses> >>>>>>>> dynoptic.main.DynopticMain.run : $r40 = r0.<dynoptic.main.DynopticMain: java.util.List channelIds>
dynoptic.main.DynopticMain.run : $r40 = r0.<dynoptic.main.DynopticMain: java.util.List channelIds> >>>>>>>> dynoptic.main.DynopticMain.run : $r41 = r0.<dynoptic.main.DynopticMain: dynoptic.main.DynopticOptions opts>
dynoptic.main.DynopticMain.run : $r41 = r0.<dynoptic.main.DynopticMain: dynoptic.main.DynopticOptions opts> >>>>>>>> dynoptic.main.DynopticMain.run : $z3 = $r41.<dynoptic.main.DynopticOptions: boolean consistentInitState>
dynoptic.main.DynopticMain.run : $z3 = $r41.<dynoptic.main.DynopticOptions: boolean consistentInitState> >>>>>>>> dynoptic.main.DynopticMain.run : r6 = staticinvoke <dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSys: java.util.List synTraceGraphToDynObsFifoSys(synoptic.model.DAGsTraceGraph,int,java.util.List,boolean)>(r1, $i4, $r40, $z3)
dynoptic.main.DynopticMain.run : r6 = staticinvoke <dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSys: java.util.List synTraceGraphToDynObsFifoSys(synoptic.model.DAGsTraceGraph,int,java.util.List,boolean)>(r1, $i4, $r40, $z3) >>>>>>>> dynoptic.main.DynopticMain.run : $z4 = <dynoptic.main.DynopticMain: boolean $assertionsDisabled>
dynoptic.main.DynopticMain.run : $z4 = <dynoptic.main.DynopticMain: boolean $assertionsDisabled> >>>>>>>> dynoptic.main.DynopticMain.run : if $z4 != 0
dynoptic.main.DynopticMain.run : if $z4 != 0 >>>>>>>> dynoptic.main.DynopticMain.run : $i5 = interfaceinvoke r6.<java.util.List: int size()>()
dynoptic.main.DynopticMain.run : if $z4 != 0 >>>>>>>> dynoptic.main.DynopticMain.run : $r43 = new java.lang.StringBuilder
dynoptic.main.DynopticMain.run : $r43 = new java.lang.StringBuilder >>>>>>>> dynoptic.main.DynopticMain.run : specialinvoke $r43.<java.lang.StringBuilder: void <init>()>()
dynoptic.main.DynopticMain.run : specialinvoke $r43.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.main.DynopticMain.run : $r44 = r0.<dynoptic.main.DynopticMain: dynoptic.main.DynopticOptions opts>
dynoptic.main.DynopticMain.run : $r44 = r0.<dynoptic.main.DynopticMain: dynoptic.main.DynopticOptions opts> >>>>>>>> dynoptic.main.DynopticMain.run : $r45 = $r44.<dynoptic.main.DynopticOptions: java.lang.String outputPathPrefix>
dynoptic.main.DynopticMain.run : $r45 = $r44.<dynoptic.main.DynopticOptions: java.lang.String outputPathPrefix> >>>>>>>> dynoptic.main.DynopticMain.run : $r46 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45)
dynoptic.main.DynopticMain.run : $r46 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45) >>>>>>>> dynoptic.main.DynopticMain.run : $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".obsfifosys.tid1.dot")
dynoptic.main.DynopticMain.run : $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".obsfifosys.tid1.dot") >>>>>>>> dynoptic.main.DynopticMain.run : r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.main.DynopticMain.run : r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.main.DynopticMain.run : $r49 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(0)
dynoptic.main.DynopticMain.run : $r49 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(0) >>>>>>>> dynoptic.main.DynopticMain.run : $r50 = (dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSys) $r49
dynoptic.main.DynopticMain.run : $r50 = (dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSys) $r49 >>>>>>>> dynoptic.main.DynopticMain.run : staticinvoke <dynoptic.model.export.GraphExporter: void exportObsFifoSys(java.lang.String,dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSys)>(r48, $r50)
dynoptic.main.DynopticMain.run : staticinvoke <dynoptic.model.export.GraphExporter: void exportObsFifoSys(java.lang.String,dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSys)>(r48, $r50) >>>>>>>> dynoptic.main.DynopticMain.run : staticinvoke <dynoptic.model.export.GraphExporter: void generatePngFileFromDotFile(java.lang.String)>(r48)
dynoptic.main.DynopticMain.run : staticinvoke <dynoptic.model.export.GraphExporter: void generatePngFileFromDotFile(java.lang.String)>(r48) >>>>>>>> dynoptic.main.DynopticMain.run : $r51 = r0.<dynoptic.main.DynopticMain: dynoptic.main.DynopticOptions opts>
dynoptic.main.DynopticMain.run : $r51 = r0.<dynoptic.main.DynopticMain: dynoptic.main.DynopticOptions opts> >>>>>>>> dynoptic.main.DynopticMain.run : $z5 = $r51.<dynoptic.main.DynopticOptions: boolean consistentInitState>
dynoptic.main.DynopticMain.run : $z5 = $r51.<dynoptic.main.DynopticOptions: boolean consistentInitState> >>>>>>>> dynoptic.main.DynopticMain.run : if $z5 == 0
dynoptic.main.DynopticMain.run : if $z5 == 0 >>>>>>>> dynoptic.main.DynopticMain.run : $z6 = <dynoptic.main.DynopticMain: boolean $assertionsDisabled>
dynoptic.main.DynopticMain.run : if $z5 == 0 >>>>>>>> dynoptic.main.DynopticMain.run : $r67 = <dynoptic.main.DynopticMain: java.util.logging.Logger logger>
dynoptic.main.DynopticMain.run : $r67 = <dynoptic.main.DynopticMain: java.util.logging.Logger logger> >>>>>>>> dynoptic.main.DynopticMain.run : virtualinvoke $r67.<java.util.logging.Logger: void info(java.lang.String)>("Generating the initial partition graph (GFSM)...")
dynoptic.main.DynopticMain.run : virtualinvoke $r67.<java.util.logging.Logger: void info(java.lang.String)>("Generating the initial partition graph (GFSM)...") >>>>>>>> dynoptic.main.DynopticMain.run : $r68 = new dynoptic.model.fifosys.gfsm.GFSM
dynoptic.main.DynopticMain.run : $r68 = new dynoptic.model.fifosys.gfsm.GFSM >>>>>>>> dynoptic.main.DynopticMain.run : specialinvoke $r68.<dynoptic.model.fifosys.gfsm.GFSM: void <init>(java.util.List)>(r6)
dynoptic.main.DynopticMain.run : specialinvoke $r68.<dynoptic.model.fifosys.gfsm.GFSM: void <init>(java.util.List)>(r6) >>>>>>>> dynoptic.main.DynopticMain.run : r69 = $r68
dynoptic.main.DynopticMain.run : r69 = $r68 >>>>>>>> dynoptic.main.DynopticMain.run : virtualinvoke r0.<dynoptic.main.DynopticMain: void checkInvsRefineGFSM(java.util.List,dynoptic.model.fifosys.gfsm.GFSM)>(r5, r69)
dynoptic.main.DynopticMain.run : virtualinvoke r0.<dynoptic.main.DynopticMain: void checkInvsRefineGFSM(java.util.List,dynoptic.model.fifosys.gfsm.GFSM)>(r5, r69) >>>>>>>> dynoptic.main.DynopticMain.run : $r70 = <dynoptic.main.DynopticMain: java.util.logging.Logger logger>
dynoptic.main.DynopticMain.run : $r70 = <dynoptic.main.DynopticMain: java.util.logging.Logger logger> >>>>>>>> dynoptic.main.DynopticMain.run : virtualinvoke $r70.<java.util.logging.Logger: void info(java.lang.String)>("Final scm model:")
dynoptic.main.DynopticMain.run : virtualinvoke $r70.<java.util.logging.Logger: void info(java.lang.String)>("Final scm model:") >>>>>>>> dynoptic.main.DynopticMain.run : $r71 = <dynoptic.main.DynopticMain: java.util.logging.Logger logger>
dynoptic.main.DynopticMain.run : $r71 = <dynoptic.main.DynopticMain: java.util.logging.Logger logger> >>>>>>>> dynoptic.main.DynopticMain.run : $r72 = r0.<dynoptic.main.DynopticMain: dynoptic.main.DynopticOptions opts>
dynoptic.main.DynopticMain.run : $r72 = r0.<dynoptic.main.DynopticMain: dynoptic.main.DynopticOptions opts> >>>>>>>> dynoptic.main.DynopticMain.run : $z9 = $r72.<dynoptic.main.DynopticOptions: boolean minimize>
dynoptic.main.DynopticMain.run : $z9 = $r72.<dynoptic.main.DynopticOptions: boolean minimize> >>>>>>>> dynoptic.main.DynopticMain.run : $r73 = virtualinvoke r69.<dynoptic.model.fifosys.gfsm.GFSM: dynoptic.model.fifosys.cfsm.CFSM getCFSM(boolean)>($z9)
dynoptic.main.DynopticMain.run : $r73 = virtualinvoke r69.<dynoptic.model.fifosys.gfsm.GFSM: dynoptic.model.fifosys.cfsm.CFSM getCFSM(boolean)>($z9) >>>>>>>> dynoptic.main.DynopticMain.run : $r74 = virtualinvoke $r73.<dynoptic.model.fifosys.cfsm.CFSM: java.lang.String toScmString(java.lang.String)>("final model")
dynoptic.main.DynopticMain.run : $r74 = virtualinvoke $r73.<dynoptic.model.fifosys.cfsm.CFSM: java.lang.String toScmString(java.lang.String)>("final model") >>>>>>>> dynoptic.main.DynopticMain.run : virtualinvoke $r71.<java.util.logging.Logger: void info(java.lang.String)>($r74)
dynoptic.main.DynopticMain.run : virtualinvoke $r71.<java.util.logging.Logger: void info(java.lang.String)>($r74) >>>>>>>> dynoptic.main.DynopticMain.run : $r75 = r0.<dynoptic.main.DynopticMain: dynoptic.main.DynopticOptions opts>
dynoptic.main.DynopticMain.run : $r75 = r0.<dynoptic.main.DynopticMain: dynoptic.main.DynopticOptions opts> >>>>>>>> dynoptic.main.DynopticMain.run : $z10 = $r75.<dynoptic.main.DynopticOptions: boolean minimize>
dynoptic.main.DynopticMain.run : $z10 = $r75.<dynoptic.main.DynopticOptions: boolean minimize> >>>>>>>> dynoptic.main.DynopticMain.run : r8 = virtualinvoke r69.<dynoptic.model.fifosys.gfsm.GFSM: dynoptic.model.fifosys.cfsm.CFSM getCFSM(boolean)>($z10)
dynoptic.main.DynopticMain.run : r8 = virtualinvoke r69.<dynoptic.model.fifosys.gfsm.GFSM: dynoptic.model.fifosys.cfsm.CFSM getCFSM(boolean)>($z10) >>>>>>>> dynoptic.main.DynopticMain.run : $r76 = new java.lang.StringBuilder
dynoptic.main.DynopticMain.run : $r76 = new java.lang.StringBuilder >>>>>>>> dynoptic.main.DynopticMain.run : specialinvoke $r76.<java.lang.StringBuilder: void <init>()>()
dynoptic.main.DynopticMain.run : specialinvoke $r76.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.main.DynopticMain.run : $r77 = r0.<dynoptic.main.DynopticMain: dynoptic.main.DynopticOptions opts>
dynoptic.main.DynopticMain.run : $r77 = r0.<dynoptic.main.DynopticMain: dynoptic.main.DynopticOptions opts> >>>>>>>> dynoptic.main.DynopticMain.run : $r78 = $r77.<dynoptic.main.DynopticOptions: java.lang.String outputPathPrefix>
dynoptic.main.DynopticMain.run : $r78 = $r77.<dynoptic.main.DynopticOptions: java.lang.String outputPathPrefix> >>>>>>>> dynoptic.main.DynopticMain.run : $r79 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r78)
dynoptic.main.DynopticMain.run : $r79 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r78) >>>>>>>> dynoptic.main.DynopticMain.run : $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".dot")
dynoptic.main.DynopticMain.run : $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".dot") >>>>>>>> dynoptic.main.DynopticMain.run : r9 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.main.DynopticMain.run : r9 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.main.DynopticMain.run : staticinvoke <dynoptic.model.export.GraphExporter: void exportCFSM(java.lang.String,dynoptic.model.fifosys.cfsm.CFSM)>(r9, r8)
dynoptic.main.DynopticMain.run : staticinvoke <dynoptic.model.export.GraphExporter: void exportCFSM(java.lang.String,dynoptic.model.fifosys.cfsm.CFSM)>(r9, r8) >>>>>>>> dynoptic.main.DynopticMain.run : staticinvoke <dynoptic.model.export.GraphExporter: void generatePngFileFromDotFile(java.lang.String)>(r9)
dynoptic.main.DynopticMain.run : staticinvoke <dynoptic.model.export.GraphExporter: void generatePngFileFromDotFile(java.lang.String)>(r9) >>>>>>>> dynoptic.main.DynopticMain.run : return
dynoptic.main.DynopticMain.run : $z6 = <dynoptic.main.DynopticMain: boolean $assertionsDisabled> >>>>>>>> dynoptic.main.DynopticMain.run : if $z6 != 0
dynoptic.main.DynopticMain.run : if $z6 != 0 >>>>>>>> dynoptic.main.DynopticMain.run : $i6 = interfaceinvoke r6.<java.util.List: int size()>()
dynoptic.main.DynopticMain.run : if $z6 != 0 >>>>>>>> dynoptic.main.DynopticMain.run : $r53 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(0)
dynoptic.main.DynopticMain.run : $r53 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(0) >>>>>>>> dynoptic.main.DynopticMain.run : $r54 = (dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSys) $r53
dynoptic.main.DynopticMain.run : $r54 = (dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSys) $r53 >>>>>>>> dynoptic.main.DynopticMain.run : r7 = virtualinvoke $r54.<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSys: java.util.Set findInvalidatedInvariants(java.util.List)>(r5)
dynoptic.main.DynopticMain.run : r7 = virtualinvoke $r54.<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSys: java.util.Set findInvalidatedInvariants(java.util.List)>(r5) >>>>>>>> dynoptic.main.DynopticMain.run : $z7 = interfaceinvoke r7.<java.util.Set: boolean isEmpty()>()
dynoptic.main.DynopticMain.run : $z7 = interfaceinvoke r7.<java.util.Set: boolean isEmpty()>() >>>>>>>> dynoptic.main.DynopticMain.run : if $z7 != 0
dynoptic.main.DynopticMain.run : if $z7 != 0 >>>>>>>> dynoptic.main.DynopticMain.run : $r55 = <dynoptic.main.DynopticMain: java.util.logging.Logger logger>
dynoptic.main.DynopticMain.run : if $z7 != 0 >>>>>>>> dynoptic.main.DynopticMain.run : $r67 = <dynoptic.main.DynopticMain: java.util.logging.Logger logger>
dynoptic.main.DynopticMain.run : $r55 = <dynoptic.main.DynopticMain: java.util.logging.Logger logger> >>>>>>>> dynoptic.main.DynopticMain.run : $r56 = new java.lang.StringBuilder
dynoptic.main.DynopticMain.run : $r56 = new java.lang.StringBuilder >>>>>>>> dynoptic.main.DynopticMain.run : specialinvoke $r56.<java.lang.StringBuilder: void <init>()>()
dynoptic.main.DynopticMain.run : specialinvoke $r56.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.main.DynopticMain.run : $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Input traces are incomplete --- some mined invariants cannot be satisfied: ")
dynoptic.main.DynopticMain.run : $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Input traces are incomplete --- some mined invariants cannot be satisfied: ") >>>>>>>> dynoptic.main.DynopticMain.run : $r58 = virtualinvoke r7.<java.lang.Object: java.lang.String toString()>()
dynoptic.main.DynopticMain.run : $r58 = virtualinvoke r7.<java.lang.Object: java.lang.String toString()>() >>>>>>>> dynoptic.main.DynopticMain.run : $r59 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r58)
dynoptic.main.DynopticMain.run : $r59 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r58) >>>>>>>> dynoptic.main.DynopticMain.run : $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.main.DynopticMain.run : $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.main.DynopticMain.run : virtualinvoke $r55.<java.util.logging.Logger: void warning(java.lang.String)>($r60)
dynoptic.main.DynopticMain.run : virtualinvoke $r55.<java.util.logging.Logger: void warning(java.lang.String)>($r60) >>>>>>>> dynoptic.main.DynopticMain.run : interfaceinvoke r5.<java.util.List: boolean removeAll(java.util.Collection)>(r7)
dynoptic.main.DynopticMain.run : interfaceinvoke r5.<java.util.List: boolean removeAll(java.util.Collection)>(r7) >>>>>>>> dynoptic.main.DynopticMain.run : $r61 = <dynoptic.main.DynopticMain: java.util.logging.Logger logger>
dynoptic.main.DynopticMain.run : $r61 = <dynoptic.main.DynopticMain: java.util.logging.Logger logger> >>>>>>>> dynoptic.main.DynopticMain.run : $r62 = new java.lang.StringBuilder
dynoptic.main.DynopticMain.run : $r62 = new java.lang.StringBuilder >>>>>>>> dynoptic.main.DynopticMain.run : specialinvoke $r62.<java.lang.StringBuilder: void <init>()>()
dynoptic.main.DynopticMain.run : specialinvoke $r62.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.main.DynopticMain.run : $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring faulty invariant and continuing. New invariants set: ")
dynoptic.main.DynopticMain.run : $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring faulty invariant and continuing. New invariants set: ") >>>>>>>> dynoptic.main.DynopticMain.run : $r64 = virtualinvoke r5.<java.lang.Object: java.lang.String toString()>()
dynoptic.main.DynopticMain.run : $r64 = virtualinvoke r5.<java.lang.Object: java.lang.String toString()>() >>>>>>>> dynoptic.main.DynopticMain.run : $r65 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r64)
dynoptic.main.DynopticMain.run : $r65 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r64) >>>>>>>> dynoptic.main.DynopticMain.run : $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.main.DynopticMain.run : $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.main.DynopticMain.run : virtualinvoke $r61.<java.util.logging.Logger: void info(java.lang.String)>($r66)
dynoptic.main.DynopticMain.run : virtualinvoke $r61.<java.util.logging.Logger: void info(java.lang.String)>($r66) >>>>>>>> dynoptic.main.DynopticMain.run : $r67 = <dynoptic.main.DynopticMain: java.util.logging.Logger logger>
dynoptic.main.DynopticMain.run : $i6 = interfaceinvoke r6.<java.util.List: int size()>() >>>>>>>> dynoptic.main.DynopticMain.run : if $i6 == 1
dynoptic.main.DynopticMain.run : if $i6 == 1 >>>>>>>> dynoptic.main.DynopticMain.run : $r52 = new java.lang.AssertionError
dynoptic.main.DynopticMain.run : if $i6 == 1 >>>>>>>> dynoptic.main.DynopticMain.run : $r53 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(0)
dynoptic.main.DynopticMain.run : $r52 = new java.lang.AssertionError >>>>>>>> dynoptic.main.DynopticMain.run : specialinvoke $r52.<java.lang.AssertionError: void <init>()>()
dynoptic.main.DynopticMain.run : specialinvoke $r52.<java.lang.AssertionError: void <init>()>() >>>>>>>> dynoptic.main.DynopticMain.run : throw $r52
dynoptic.main.DynopticMain.run : $i5 = interfaceinvoke r6.<java.util.List: int size()>() >>>>>>>> dynoptic.main.DynopticMain.run : if $i5 > 0
dynoptic.main.DynopticMain.run : if $i5 > 0 >>>>>>>> dynoptic.main.DynopticMain.run : $r42 = new java.lang.AssertionError
dynoptic.main.DynopticMain.run : if $i5 > 0 >>>>>>>> dynoptic.main.DynopticMain.run : $r43 = new java.lang.StringBuilder
dynoptic.main.DynopticMain.run : $r42 = new java.lang.AssertionError >>>>>>>> dynoptic.main.DynopticMain.run : specialinvoke $r42.<java.lang.AssertionError: void <init>()>()
dynoptic.main.DynopticMain.run : specialinvoke $r42.<java.lang.AssertionError: void <init>()>() >>>>>>>> dynoptic.main.DynopticMain.run : throw $r42
dynoptic.main.DynopticMain.run : $r38 = <dynoptic.main.DynopticMain: java.util.logging.Logger logger> >>>>>>>> dynoptic.main.DynopticMain.run : virtualinvoke $r38.<java.util.logging.Logger: void info(java.lang.String)>("Mined 0 Dynoptic invariants. Stopping.")
dynoptic.main.DynopticMain.run : virtualinvoke $r38.<java.util.logging.Logger: void info(java.lang.String)>("Mined 0 Dynoptic invariants. Stopping.") >>>>>>>> dynoptic.main.DynopticMain.run : return
dynoptic.main.DynopticMain.run : $r29 = <dynoptic.main.DynopticMain: java.util.logging.Logger logger> >>>>>>>> dynoptic.main.DynopticMain.run : virtualinvoke $r29.<java.util.logging.Logger: void info(java.lang.String)>("Mined 0 Synoptic invariants. Stopping.")
dynoptic.main.DynopticMain.run : virtualinvoke $r29.<java.util.logging.Logger: void info(java.lang.String)>("Mined 0 Synoptic invariants. Stopping.") >>>>>>>> dynoptic.main.DynopticMain.run : return
dynoptic.main.DynopticMain.run : $r23 = <dynoptic.main.DynopticMain: java.util.logging.Logger logger> >>>>>>>> dynoptic.main.DynopticMain.run : $r24 = new java.lang.StringBuilder
dynoptic.main.DynopticMain.run : $r24 = new java.lang.StringBuilder >>>>>>>> dynoptic.main.DynopticMain.run : specialinvoke $r24.<java.lang.StringBuilder: void <init>()>()
dynoptic.main.DynopticMain.run : specialinvoke $r24.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.main.DynopticMain.run : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mined invariants:\n")
dynoptic.main.DynopticMain.run : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mined invariants:\n") >>>>>>>> dynoptic.main.DynopticMain.run : $r26 = virtualinvoke r4.<synoptic.invariants.TemporalInvariantSet: java.lang.String toPrettyString()>()
dynoptic.main.DynopticMain.run : $r26 = virtualinvoke r4.<synoptic.invariants.TemporalInvariantSet: java.lang.String toPrettyString()>() >>>>>>>> dynoptic.main.DynopticMain.run : $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26)
dynoptic.main.DynopticMain.run : $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26) >>>>>>>> dynoptic.main.DynopticMain.run : $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.main.DynopticMain.run : $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.main.DynopticMain.run : virtualinvoke $r23.<java.util.logging.Logger: void info(java.lang.String)>($r28)
dynoptic.main.DynopticMain.run : virtualinvoke $r23.<java.util.logging.Logger: void info(java.lang.String)>($r28) >>>>>>>> dynoptic.main.DynopticMain.run : $i1 = virtualinvoke r4.<synoptic.invariants.TemporalInvariantSet: int numInvariants()>()
