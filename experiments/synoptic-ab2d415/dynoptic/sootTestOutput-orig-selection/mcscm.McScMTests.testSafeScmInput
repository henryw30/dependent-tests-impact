dynoptic.DynopticTest.getMcPath : r0 = null >>>>>>>> dynoptic.DynopticTest.getMcPath : $z0 = staticinvoke <mcscm.Os: boolean isLinux()>()
dynoptic.DynopticTest.getMcPath : $z0 = staticinvoke <mcscm.Os: boolean isLinux()>() >>>>>>>> mcscm.Os.isLinux : $r0 = staticinvoke <mcscm.Os: java.lang.String getOsName()>()
mcscm.Os.isLinux : $r0 = staticinvoke <mcscm.Os: java.lang.String getOsName()>() >>>>>>>> mcscm.Os.getOsName : $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("os.name", "unknown")
mcscm.Os.getOsName : $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("os.name", "unknown") >>>>>>>> mcscm.Os.getOsName : return $r0
mcscm.Os.getOsName : return $r0 >>>>>>>> mcscm.Os.isLinux : $r1 = virtualinvoke $r0.<java.lang.String: java.lang.String toLowerCase()>()
mcscm.Os.isLinux : $r1 = virtualinvoke $r0.<java.lang.String: java.lang.String toLowerCase()>() >>>>>>>> mcscm.Os.isLinux : $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>("linux")
mcscm.Os.isLinux : $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>("linux") >>>>>>>> mcscm.Os.isLinux : if $i0 < 0
mcscm.Os.isLinux : if $i0 < 0 >>>>>>>> mcscm.Os.isLinux : $z0 = 1
mcscm.Os.isLinux : $z0 = 1 >>>>>>>> mcscm.Os.isLinux : goto [?= return $z0]
mcscm.Os.isLinux : goto [?= return $z0] >>>>>>>> mcscm.Os.isLinux : return $z0
mcscm.Os.isLinux : return $z0 >>>>>>>> dynoptic.DynopticTest.getMcPath : if $z0 == 0
dynoptic.DynopticTest.getMcPath : if $z0 == 0 >>>>>>>> dynoptic.DynopticTest.getMcPath : r0 = "linux.static"
dynoptic.DynopticTest.getMcPath : r0 = "linux.static" >>>>>>>> dynoptic.DynopticTest.getMcPath : goto [?= $r9 = new java.lang.StringBuilder]
dynoptic.DynopticTest.getMcPath : goto [?= $r9 = new java.lang.StringBuilder] >>>>>>>> dynoptic.DynopticTest.getMcPath : $r9 = new java.lang.StringBuilder
dynoptic.DynopticTest.getMcPath : $r9 = new java.lang.StringBuilder >>>>>>>> dynoptic.DynopticTest.getMcPath : specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()
dynoptic.DynopticTest.getMcPath : specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.DynopticTest.getMcPath : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("../bin/mcscm/verify.native.")
dynoptic.DynopticTest.getMcPath : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("../bin/mcscm/verify.native.") >>>>>>>> dynoptic.DynopticTest.getMcPath : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0)
dynoptic.DynopticTest.getMcPath : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0) >>>>>>>> dynoptic.DynopticTest.getMcPath : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.DynopticTest.getMcPath : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.DynopticTest.getMcPath : return $r12
dynoptic.DynopticTest.getMcPath : return $r12 >>>>>>>> dynoptic.util.Util.newList : $r0 = new java.util.ArrayList
dynoptic.util.Util.newList : $r0 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>()
dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>() >>>>>>>> dynoptic.util.Util.newList : return $r0
dynoptic.util.Util.newList : return $r0 >>>>>>>> mcscm.McScMTests.readScmFile : $r2 = new java.lang.StringBuilder
mcscm.McScMTests.readScmFile : $r2 = new java.lang.StringBuilder >>>>>>>> mcscm.McScMTests.readScmFile : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
mcscm.McScMTests.readScmFile : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> mcscm.McScMTests.readScmFile : $r8 = r0.<mcscm.McScMTests: java.lang.String scmFilePrefix>
mcscm.McScMTests.readScmFile : $r8 = r0.<mcscm.McScMTests: java.lang.String scmFilePrefix> >>>>>>>> mcscm.McScMTests.readScmFile : $r9 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)
mcscm.McScMTests.readScmFile : $r9 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) >>>>>>>> mcscm.McScMTests.readScmFile : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
mcscm.McScMTests.readScmFile : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> mcscm.McScMTests.readScmFile : r3 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()
mcscm.McScMTests.readScmFile : r3 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> mcscm.McScMTests.readScmFile : $r11 = new java.io.BufferedReader
mcscm.McScMTests.readScmFile : $r11 = new java.io.BufferedReader >>>>>>>> mcscm.McScMTests.readScmFile : $r4 = new java.io.FileReader
mcscm.McScMTests.readScmFile : $r4 = new java.io.FileReader >>>>>>>> mcscm.McScMTests.readScmFile : specialinvoke $r4.<java.io.FileReader: void <init>(java.lang.String)>(r3)
mcscm.McScMTests.readScmFile : specialinvoke $r4.<java.io.FileReader: void <init>(java.lang.String)>(r3) >>>>>>>> mcscm.McScMTests.readScmFile : specialinvoke $r11.<java.io.BufferedReader: void <init>(java.io.Reader)>($r4)
mcscm.McScMTests.readScmFile : specialinvoke $r11.<java.io.BufferedReader: void <init>(java.io.Reader)>($r4) >>>>>>>> mcscm.McScMTests.readScmFile : r5 = $r11
mcscm.McScMTests.readScmFile : r5 = $r11 >>>>>>>> mcscm.McScMTests.readScmFile : $r12 = new java.lang.StringBuilder
mcscm.McScMTests.readScmFile : $r12 = new java.lang.StringBuilder >>>>>>>> mcscm.McScMTests.readScmFile : specialinvoke $r12.<java.lang.StringBuilder: void <init>()>()
mcscm.McScMTests.readScmFile : specialinvoke $r12.<java.lang.StringBuilder: void <init>()>() >>>>>>>> mcscm.McScMTests.readScmFile : r6 = $r12
mcscm.McScMTests.readScmFile : r6 = $r12 >>>>>>>> mcscm.McScMTests.readScmFile : $r13 = virtualinvoke r5.<java.io.BufferedReader: java.lang.String readLine()>()
mcscm.McScMTests.readScmFile : $r13 = virtualinvoke r5.<java.io.BufferedReader: java.lang.String readLine()>() >>>>>>>> mcscm.McScMTests.readScmFile : r7 = $r13
mcscm.McScMTests.readScmFile : r7 = $r13 >>>>>>>> mcscm.McScMTests.readScmFile : if $r13 == null
mcscm.McScMTests.readScmFile : if $r13 == null >>>>>>>> mcscm.McScMTests.readScmFile : virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7)
mcscm.McScMTests.readScmFile : virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7) >>>>>>>> mcscm.McScMTests.readScmFile : virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n")
mcscm.McScMTests.readScmFile : virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n") >>>>>>>> mcscm.McScMTests.readScmFile : goto [?= $r13 = virtualinvoke r5.<java.io.BufferedReader: java.lang.String readLine()>()]
mcscm.McScMTests.readScmFile : goto [?= $r13 = virtualinvoke r5.<java.io.BufferedReader: java.lang.String readLine()>()] >>>>>>>> mcscm.McScMTests.readScmFile : $r16 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.String toString()>()
mcscm.McScMTests.readScmFile : $r16 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> mcscm.McScMTests.readScmFile : return $r16
mcscm.McScMTests.readScmFile : return $r16 >>>>>>>> mcscm.McScM.verify : $r2 = new java.io.File
mcscm.McScM.verify : $r2 = new java.io.File >>>>>>>> mcscm.McScM.verify : specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(".")
mcscm.McScM.verify : specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(".") >>>>>>>> mcscm.McScM.verify : r3 = $r2
mcscm.McScM.verify : r3 = $r2 >>>>>>>> mcscm.McScM.verify : $r4 = newarray (java.lang.String)[3]
mcscm.McScM.verify : $r4 = newarray (java.lang.String)[3] >>>>>>>> mcscm.McScM.verify : $r5 = r0.<mcscm.McScM: java.lang.String verifyPath>
mcscm.McScM.verify : $r5 = r0.<mcscm.McScM: java.lang.String verifyPath> >>>>>>>> mcscm.McScM.verify : $r4[0] = $r5
mcscm.McScM.verify : $r4[0] = $r5 >>>>>>>> mcscm.McScM.verify : $r4[1] = "-no-validation"
mcscm.McScM.verify : $r4[1] = "-no-validation" >>>>>>>> mcscm.McScM.verify : $r4[2] = "-quiet"
mcscm.McScM.verify : $r4[2] = "-quiet" >>>>>>>> mcscm.McScM.verify : $r6 = staticinvoke <mcscm.ProcessUtil: java.lang.Process runVerifyProcess(java.lang.String[],java.lang.String,java.io.File,int)>($r4, r1, r3, i0)
mcscm.McScM.verify : $r6 = staticinvoke <mcscm.ProcessUtil: java.lang.Process runVerifyProcess(java.lang.String[],java.lang.String,java.io.File,int)>($r4, r1, r3, i0) >>>>>>>> mcscm.ProcessUtil.runVerifyProcess : $r3 = new java.lang.ProcessBuilder
mcscm.ProcessUtil.runVerifyProcess : $r3 = new java.lang.ProcessBuilder >>>>>>>> mcscm.ProcessUtil.runVerifyProcess : specialinvoke $r3.<java.lang.ProcessBuilder: void <init>(java.lang.String[])>(r0)
mcscm.ProcessUtil.runVerifyProcess : specialinvoke $r3.<java.lang.ProcessBuilder: void <init>(java.lang.String[])>(r0) >>>>>>>> mcscm.ProcessUtil.runVerifyProcess : r4 = $r3
mcscm.ProcessUtil.runVerifyProcess : r4 = $r3 >>>>>>>> mcscm.ProcessUtil.runVerifyProcess : virtualinvoke r4.<java.lang.ProcessBuilder: java.lang.ProcessBuilder directory(java.io.File)>(r2)
mcscm.ProcessUtil.runVerifyProcess : virtualinvoke r4.<java.lang.ProcessBuilder: java.lang.ProcessBuilder directory(java.io.File)>(r2) >>>>>>>> mcscm.ProcessUtil.runVerifyProcess : n0 = null
mcscm.ProcessUtil.runVerifyProcess : n0 = null >>>>>>>> mcscm.ProcessUtil.runVerifyProcess : r9 = virtualinvoke r4.<java.lang.ProcessBuilder: java.lang.Process start()>()
mcscm.ProcessUtil.runVerifyProcess : r9 = virtualinvoke r4.<java.lang.ProcessBuilder: java.lang.Process start()>() >>>>>>>> mcscm.ProcessUtil.runVerifyProcess : r5 = virtualinvoke r9.<java.lang.Process: java.io.OutputStream getOutputStream()>()
mcscm.ProcessUtil.runVerifyProcess : r5 = virtualinvoke r9.<java.lang.Process: java.io.OutputStream getOutputStream()>() >>>>>>>> mcscm.ProcessUtil.runVerifyProcess : $r10 = virtualinvoke r1.<java.lang.String: byte[] getBytes()>()
mcscm.ProcessUtil.runVerifyProcess : $r10 = virtualinvoke r1.<java.lang.String: byte[] getBytes()>() >>>>>>>> mcscm.ProcessUtil.runVerifyProcess : virtualinvoke r5.<java.io.OutputStream: void write(byte[])>($r10)
mcscm.ProcessUtil.runVerifyProcess : virtualinvoke r5.<java.io.OutputStream: void write(byte[])>($r10) >>>>>>>> mcscm.ProcessUtil.runVerifyProcess : virtualinvoke r5.<java.io.OutputStream: void close()>()
mcscm.ProcessUtil.runVerifyProcess : virtualinvoke r5.<java.io.OutputStream: void close()>() >>>>>>>> mcscm.ProcessUtil.runVerifyProcess : $r11 = new mcscm.ProcessKillTimer
mcscm.ProcessUtil.runVerifyProcess : $r11 = new mcscm.ProcessKillTimer >>>>>>>> mcscm.ProcessUtil.runVerifyProcess : specialinvoke $r11.<mcscm.ProcessKillTimer: void <init>(java.lang.Process,int)>(r9, i0)
mcscm.ProcessUtil.runVerifyProcess : specialinvoke $r11.<mcscm.ProcessKillTimer: void <init>(java.lang.Process,int)>(r9, i0) >>>>>>>> mcscm.ProcessUtil.runVerifyProcess : r6 = $r11
mcscm.ProcessUtil.runVerifyProcess : r6 = $r11 >>>>>>>> mcscm.ProcessUtil.runVerifyProcess : $r12 = new java.lang.Thread
mcscm.ProcessUtil.runVerifyProcess : $r12 = new java.lang.Thread >>>>>>>> mcscm.ProcessUtil.runVerifyProcess : specialinvoke $r12.<java.lang.Thread: void <init>(java.lang.Runnable)>(r6)
mcscm.ProcessUtil.runVerifyProcess : specialinvoke $r12.<java.lang.Thread: void <init>(java.lang.Runnable)>(r6) >>>>>>>> mcscm.ProcessUtil.runVerifyProcess : r7 = $r12
mcscm.ProcessUtil.runVerifyProcess : r7 = $r12 >>>>>>>> mcscm.ProcessUtil.runVerifyProcess : virtualinvoke r7.<java.lang.Thread: void start()>()
mcscm.ProcessUtil.runVerifyProcess : virtualinvoke r7.<java.lang.Thread: void start()>() >>>>>>>> mcscm.ProcessUtil.runVerifyProcess : virtualinvoke r9.<java.lang.Process: int waitFor()>()
mcscm.ProcessUtil.runVerifyProcess : virtualinvoke r9.<java.lang.Process: int waitFor()>() >>>>>>>> mcscm.ProcessKillTimer.run : r2 = r0
mcscm.ProcessKillTimer.run : r2 = r0 >>>>>>>> mcscm.ProcessKillTimer.run : entermonitor r0
mcscm.ProcessKillTimer.run : entermonitor r0 >>>>>>>> mcscm.ProcessKillTimer.run : $i0 = r0.<mcscm.ProcessKillTimer: int timeout>
mcscm.ProcessKillTimer.run : $i0 = r0.<mcscm.ProcessKillTimer: int timeout> >>>>>>>> mcscm.ProcessKillTimer.run : $l1 = (long) $i0
mcscm.ProcessKillTimer.run : $l1 = (long) $i0 >>>>>>>> mcscm.ProcessKillTimer.run : $l2 = $l1 * 1000L
mcscm.ProcessKillTimer.run : $l2 = $l1 * 1000L >>>>>>>> mcscm.ProcessKillTimer.run : virtualinvoke r0.<java.lang.Object: void wait(long)>($l2)
mcscm.ProcessKillTimer.run : virtualinvoke r0.<java.lang.Object: void wait(long)>($l2) >>>>>>>> mcscm.ProcessUtil.runVerifyProcess : $z0 = r6.<mcscm.ProcessKillTimer: boolean killed>
mcscm.ProcessUtil.runVerifyProcess : $z0 = r6.<mcscm.ProcessKillTimer: boolean killed> >>>>>>>> mcscm.ProcessUtil.runVerifyProcess : if $z0 != 0
mcscm.ProcessUtil.runVerifyProcess : if $z0 != 0 >>>>>>>> mcscm.ProcessUtil.runVerifyProcess : virtualinvoke r7.<java.lang.Thread: void interrupt()>()
mcscm.ProcessUtil.runVerifyProcess : virtualinvoke r7.<java.lang.Thread: void interrupt()>() >>>>>>>> mcscm.ProcessUtil.runVerifyProcess : goto [?= return r9]
mcscm.ProcessUtil.runVerifyProcess : goto [?= return r9] >>>>>>>> mcscm.ProcessUtil.runVerifyProcess : return r9
mcscm.ProcessUtil.runVerifyProcess : return r9 >>>>>>>> mcscm.McScM.verify : r0.<mcscm.McScM: java.lang.Process verifyProcess> = $r6
mcscm.McScM.verify : r0.<mcscm.McScM: java.lang.Process verifyProcess> = $r6 >>>>>>>> mcscm.McScM.getVerifyResult : $r5 = r0.<mcscm.McScM: java.lang.Process verifyProcess>
mcscm.McScM.getVerifyResult : $r5 = r0.<mcscm.McScM: java.lang.Process verifyProcess> >>>>>>>> mcscm.McScM.getVerifyResult : $r6 = virtualinvoke $r5.<java.lang.Process: java.io.InputStream getInputStream()>()
mcscm.McScM.getVerifyResult : $r6 = virtualinvoke $r5.<java.lang.Process: java.io.InputStream getInputStream()>() >>>>>>>> mcscm.McScM.getVerifyResult : r2 = staticinvoke <mcscm.ProcessUtil: java.util.List getInputStreamContent(java.io.InputStream)>($r6)
mcscm.McScM.getVerifyResult : r2 = staticinvoke <mcscm.ProcessUtil: java.util.List getInputStreamContent(java.io.InputStream)>($r6) >>>>>>>> mcscm.ProcessUtil.getInputStreamContent : $r1 = new java.io.BufferedReader
mcscm.ProcessUtil.getInputStreamContent : $r1 = new java.io.BufferedReader >>>>>>>> mcscm.ProcessUtil.getInputStreamContent : $r2 = new java.io.InputStreamReader
mcscm.ProcessUtil.getInputStreamContent : $r2 = new java.io.InputStreamReader >>>>>>>> mcscm.ProcessUtil.getInputStreamContent : specialinvoke $r2.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r0)
mcscm.ProcessUtil.getInputStreamContent : specialinvoke $r2.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r0) >>>>>>>> mcscm.ProcessUtil.getInputStreamContent : specialinvoke $r1.<java.io.BufferedReader: void <init>(java.io.Reader)>($r2)
mcscm.ProcessUtil.getInputStreamContent : specialinvoke $r1.<java.io.BufferedReader: void <init>(java.io.Reader)>($r2) >>>>>>>> mcscm.ProcessUtil.getInputStreamContent : r3 = $r1
mcscm.ProcessUtil.getInputStreamContent : r3 = $r1 >>>>>>>> mcscm.ProcessUtil.getInputStreamContent : r4 = staticinvoke <dynoptic.util.Util: java.util.List newList()>()
mcscm.ProcessUtil.getInputStreamContent : r4 = staticinvoke <dynoptic.util.Util: java.util.List newList()>() >>>>>>>> mcscm.ProcessUtil.getInputStreamContent : $r6 = virtualinvoke r3.<java.io.BufferedReader: java.lang.String readLine()>()
mcscm.ProcessUtil.getInputStreamContent : $r6 = virtualinvoke r3.<java.io.BufferedReader: java.lang.String readLine()>() >>>>>>>> mcscm.ProcessUtil.getInputStreamContent : r5 = $r6
mcscm.ProcessUtil.getInputStreamContent : r5 = $r6 >>>>>>>> mcscm.ProcessUtil.getInputStreamContent : if $r6 == null
mcscm.ProcessUtil.getInputStreamContent : if $r6 == null >>>>>>>> mcscm.ProcessUtil.getInputStreamContent : interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r5)
mcscm.ProcessUtil.getInputStreamContent : interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r5) >>>>>>>> mcscm.ProcessUtil.getInputStreamContent : goto [?= $r6 = virtualinvoke r3.<java.io.BufferedReader: java.lang.String readLine()>()]
mcscm.ProcessUtil.getInputStreamContent : goto [?= $r6 = virtualinvoke r3.<java.io.BufferedReader: java.lang.String readLine()>()] >>>>>>>> mcscm.ProcessKillTimer.run : r3 = $r4
mcscm.ProcessKillTimer.run : r3 = $r4 >>>>>>>> mcscm.ProcessKillTimer.run : exitmonitor r2
mcscm.ProcessKillTimer.run : exitmonitor r2 >>>>>>>> mcscm.ProcessKillTimer.run : throw r3
mcscm.ProcessKillTimer.run : throw r3 >>>>>>>> mcscm.ProcessUtil.getInputStreamContent : return r4
mcscm.ProcessUtil.getInputStreamContent : return r4 >>>>>>>> mcscm.ProcessKillTimer.run : r6 = $r5
mcscm.ProcessKillTimer.run : r6 = $r5 >>>>>>>> mcscm.McScM.getVerifyResult : $r7 = <mcscm.McScM: java.util.logging.Logger logger>
mcscm.McScM.getVerifyResult : $r7 = <mcscm.McScM: java.util.logging.Logger logger> >>>>>>>> mcscm.McScM.getVerifyResult : $r3 = new java.lang.StringBuilder
mcscm.McScM.getVerifyResult : $r3 = new java.lang.StringBuilder >>>>>>>> mcscm.McScM.getVerifyResult : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
mcscm.McScM.getVerifyResult : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> mcscm.McScM.getVerifyResult : $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Verify returned: ")
mcscm.McScM.getVerifyResult : $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Verify returned: ") >>>>>>>> mcscm.McScM.getVerifyResult : $r9 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>()
mcscm.McScM.getVerifyResult : $r9 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() >>>>>>>> mcscm.McScM.getVerifyResult : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9)
mcscm.McScM.getVerifyResult : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9) >>>>>>>> mcscm.McScM.getVerifyResult : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()
mcscm.McScM.getVerifyResult : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> mcscm.McScM.getVerifyResult : virtualinvoke $r7.<java.util.logging.Logger: void info(java.lang.String)>($r11)
mcscm.McScM.getVerifyResult : virtualinvoke $r7.<java.util.logging.Logger: void info(java.lang.String)>($r11) >>>>>>>> mcscm.McScM.getVerifyResult : $r12 = new mcscm.VerifyResult
mcscm.McScM.getVerifyResult : $r12 = new mcscm.VerifyResult >>>>>>>> mcscm.McScM.getVerifyResult : specialinvoke $r12.<mcscm.VerifyResult: void <init>(java.util.List,java.util.List)>(r2, r1)
mcscm.McScM.getVerifyResult : specialinvoke $r12.<mcscm.VerifyResult: void <init>(java.util.List,java.util.List)>(r2, r1) >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : z0 = 0
mcscm.VerifyResult.parseVerifyOutput : z0 = 0 >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : i0 = 0
mcscm.VerifyResult.parseVerifyOutput : i0 = 0 >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()
mcscm.VerifyResult.parseVerifyOutput : r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
mcscm.VerifyResult.parseVerifyOutput : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : if $z1 == 0
mcscm.VerifyResult.parseVerifyOutput : if $z1 == 0 >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
mcscm.VerifyResult.parseVerifyOutput : $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : r3 = (java.lang.String) $r5
mcscm.VerifyResult.parseVerifyOutput : r3 = (java.lang.String) $r5 >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : $r4 = <mcscm.VerifyResult: java.lang.String syntaxErrRe>
mcscm.VerifyResult.parseVerifyOutput : $r4 = <mcscm.VerifyResult: java.lang.String syntaxErrRe> >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : $z2 = virtualinvoke r3.<java.lang.String: boolean matches(java.lang.String)>($r4)
mcscm.VerifyResult.parseVerifyOutput : $z2 = virtualinvoke r3.<java.lang.String: boolean matches(java.lang.String)>($r4) >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : if $z2 == 0
mcscm.VerifyResult.parseVerifyOutput : if $z2 == 0 >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : $r7 = <mcscm.VerifyResult: java.lang.String safeRe>
mcscm.VerifyResult.parseVerifyOutput : $r7 = <mcscm.VerifyResult: java.lang.String safeRe> >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : $z3 = virtualinvoke r3.<java.lang.String: boolean matches(java.lang.String)>($r7)
mcscm.VerifyResult.parseVerifyOutput : $z3 = virtualinvoke r3.<java.lang.String: boolean matches(java.lang.String)>($r7) >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : if $z3 == 0
mcscm.VerifyResult.parseVerifyOutput : if $z3 == 0 >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : $r8 = <mcscm.VerifyResult: java.lang.String unsafeRe>
mcscm.VerifyResult.parseVerifyOutput : $r8 = <mcscm.VerifyResult: java.lang.String unsafeRe> >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : $z4 = virtualinvoke r3.<java.lang.String: boolean matches(java.lang.String)>($r8)
mcscm.VerifyResult.parseVerifyOutput : $z4 = virtualinvoke r3.<java.lang.String: boolean matches(java.lang.String)>($r8) >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : if $z4 == 0
mcscm.VerifyResult.parseVerifyOutput : if $z4 == 0 >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : $r9 = <mcscm.VerifyResult: java.lang.String counterExRe>
mcscm.VerifyResult.parseVerifyOutput : $r9 = <mcscm.VerifyResult: java.lang.String counterExRe> >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : $z5 = virtualinvoke r3.<java.lang.String: boolean matches(java.lang.String)>($r9)
mcscm.VerifyResult.parseVerifyOutput : $z5 = virtualinvoke r3.<java.lang.String: boolean matches(java.lang.String)>($r9) >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : if $z5 == 0
mcscm.VerifyResult.parseVerifyOutput : if $z5 == 0 >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : i0 = i0 + 1
mcscm.VerifyResult.parseVerifyOutput : i0 = i0 + 1 >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : goto [?= $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
mcscm.VerifyResult.parseVerifyOutput : goto [?= $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : r0.<mcscm.VerifyResult: boolean modelIsSafe> = 1
mcscm.VerifyResult.parseVerifyOutput : r0.<mcscm.VerifyResult: boolean modelIsSafe> = 1 >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : z0 = 1
mcscm.VerifyResult.parseVerifyOutput : z0 = 1 >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : if z0 != 0
mcscm.VerifyResult.parseVerifyOutput : if z0 != 0 >>>>>>>> mcscm.McScM.getVerifyResult : r4 = $r12
mcscm.McScM.getVerifyResult : r4 = $r12 >>>>>>>> mcscm.McScM.getVerifyResult : return r4
mcscm.McScM.getVerifyResult : return r4 >>>>>>>> mcscm.VerifyResult.modelIsSafe : $z0 = r0.<mcscm.VerifyResult: boolean modelIsSafe>
mcscm.VerifyResult.modelIsSafe : $z0 = r0.<mcscm.VerifyResult: boolean modelIsSafe> >>>>>>>> mcscm.VerifyResult.modelIsSafe : return $z0
