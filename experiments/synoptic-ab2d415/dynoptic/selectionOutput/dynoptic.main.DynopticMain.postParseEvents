dynoptic.main.DynopticMain.postParseEvents : $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>() >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : if $z0 == 0
dynoptic.main.DynopticMain.postParseEvents : if $z0 == 0 >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : $r9 = new dynoptic.main.OptionException
dynoptic.main.DynopticMain.postParseEvents : if $z0 == 0 >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : r2 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.main.DynopticMain.postParseEvents : r2 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : r3 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.main.DynopticMain.postParseEvents : r3 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : r4 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()
dynoptic.main.DynopticMain.postParseEvents : r4 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
dynoptic.main.DynopticMain.postParseEvents : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : if $z1 == 0
dynoptic.main.DynopticMain.postParseEvents : if $z1 == 0 >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
dynoptic.main.DynopticMain.postParseEvents : if $z1 == 0 >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : $i1 = interfaceinvoke r2.<java.util.Set: int size()>()
dynoptic.main.DynopticMain.postParseEvents : $i1 = interfaceinvoke r2.<java.util.Set: int size()>() >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : $r21 = r0.<dynoptic.main.DynopticMain: java.util.List channelIds>
dynoptic.main.DynopticMain.postParseEvents : $r21 = r0.<dynoptic.main.DynopticMain: java.util.List channelIds> >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : $i2 = interfaceinvoke $r21.<java.util.List: int size()>()
dynoptic.main.DynopticMain.postParseEvents : $i2 = interfaceinvoke $r21.<java.util.List: int size()>() >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : if $i1 == $i2
dynoptic.main.DynopticMain.postParseEvents : if $i1 == $i2 >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : $r22 = new dynoptic.main.OptionException
dynoptic.main.DynopticMain.postParseEvents : if $i1 == $i2 >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : i3 = 0
dynoptic.main.DynopticMain.postParseEvents : i3 = 0 >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : i4 = 0
dynoptic.main.DynopticMain.postParseEvents : i4 = 0 >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : r23 = interfaceinvoke r3.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.main.DynopticMain.postParseEvents : r23 = interfaceinvoke r3.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : $z6 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>()
dynoptic.main.DynopticMain.postParseEvents : $z6 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : if $z6 == 0
dynoptic.main.DynopticMain.postParseEvents : if $z6 == 0 >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : $r24 = interfaceinvoke r23.<java.util.Iterator: java.lang.Object next()>()
dynoptic.main.DynopticMain.postParseEvents : if $z6 == 0 >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : $i7 = i3 + 1
dynoptic.main.DynopticMain.postParseEvents : $i7 = i3 + 1 >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : r0.<dynoptic.main.DynopticMain: int numProcesses> = $i7
dynoptic.main.DynopticMain.postParseEvents : r0.<dynoptic.main.DynopticMain: int numProcesses> = $i7 >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : $i8 = i3 + 1
dynoptic.main.DynopticMain.postParseEvents : $i8 = i3 + 1 >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : $i9 = i3 * $i8
dynoptic.main.DynopticMain.postParseEvents : $i9 = i3 * $i8 >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : $i10 = $i9 / 2
dynoptic.main.DynopticMain.postParseEvents : $i10 = $i9 / 2 >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : if i4 != $i10
dynoptic.main.DynopticMain.postParseEvents : if i4 != $i10 >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)
dynoptic.main.DynopticMain.postParseEvents : if i4 != $i10 >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : $r27 = new dynoptic.main.OptionException
dynoptic.main.DynopticMain.postParseEvents : $r27 = new dynoptic.main.OptionException >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : $r28 = new java.lang.StringBuilder
dynoptic.main.DynopticMain.postParseEvents : $r28 = new java.lang.StringBuilder >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : specialinvoke $r28.<java.lang.StringBuilder: void <init>()>()
dynoptic.main.DynopticMain.postParseEvents : specialinvoke $r28.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Process ID range for the log has gaps: ")
dynoptic.main.DynopticMain.postParseEvents : $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Process ID range for the log has gaps: ") >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : $r30 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>()
dynoptic.main.DynopticMain.postParseEvents : $r30 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30)
dynoptic.main.DynopticMain.postParseEvents : $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30) >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.main.DynopticMain.postParseEvents : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : specialinvoke $r27.<dynoptic.main.OptionException: void <init>(java.lang.String)>($r32)
dynoptic.main.DynopticMain.postParseEvents : specialinvoke $r27.<dynoptic.main.OptionException: void <init>(java.lang.String)>($r32) >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : throw $r27
dynoptic.main.DynopticMain.postParseEvents : $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0) >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : $z7 = interfaceinvoke r3.<java.util.Set: boolean contains(java.lang.Object)>($r26)
dynoptic.main.DynopticMain.postParseEvents : $z7 = interfaceinvoke r3.<java.util.Set: boolean contains(java.lang.Object)>($r26) >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : if $z7 != 0
dynoptic.main.DynopticMain.postParseEvents : if $z7 != 0 >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : $r27 = new dynoptic.main.OptionException
dynoptic.main.DynopticMain.postParseEvents : if $z7 != 0 >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : return
dynoptic.main.DynopticMain.postParseEvents : $r24 = interfaceinvoke r23.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : r25 = (java.lang.Integer) $r24
dynoptic.main.DynopticMain.postParseEvents : r25 = (java.lang.Integer) $r24 >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : $i5 = virtualinvoke r25.<java.lang.Integer: int intValue()>()
dynoptic.main.DynopticMain.postParseEvents : $i5 = virtualinvoke r25.<java.lang.Integer: int intValue()>() >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : i4 = i4 + $i5
dynoptic.main.DynopticMain.postParseEvents : i4 = i4 + $i5 >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : $i6 = virtualinvoke r25.<java.lang.Integer: int intValue()>()
dynoptic.main.DynopticMain.postParseEvents : $i6 = virtualinvoke r25.<java.lang.Integer: int intValue()>() >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : if i3 >= $i6
dynoptic.main.DynopticMain.postParseEvents : if i3 >= $i6 >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : i3 = virtualinvoke r25.<java.lang.Integer: int intValue()>()
dynoptic.main.DynopticMain.postParseEvents : if i3 >= $i6 >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : goto [?= $z6 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>()]
dynoptic.main.DynopticMain.postParseEvents : goto [?= $z6 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : $z6 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>()
dynoptic.main.DynopticMain.postParseEvents : i3 = virtualinvoke r25.<java.lang.Integer: int intValue()>() >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : goto [?= $z6 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>()]
dynoptic.main.DynopticMain.postParseEvents : $r22 = new dynoptic.main.OptionException >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : specialinvoke $r22.<dynoptic.main.OptionException: void <init>(java.lang.String)>("Some specified channelIds are not referenced in the log.")
dynoptic.main.DynopticMain.postParseEvents : specialinvoke $r22.<dynoptic.main.OptionException: void <init>(java.lang.String)>("Some specified channelIds are not referenced in the log.") >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : throw $r22
dynoptic.main.DynopticMain.postParseEvents : $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : r5 = (synoptic.model.EventNode) $r10
dynoptic.main.DynopticMain.postParseEvents : r5 = (synoptic.model.EventNode) $r10 >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : r6 = virtualinvoke r5.<synoptic.model.EventNode: synoptic.model.event.EventType getEType()>()
dynoptic.main.DynopticMain.postParseEvents : r6 = virtualinvoke r5.<synoptic.model.EventNode: synoptic.model.event.EventType getEType()>() >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : $z2 = r6 instanceof synoptic.model.event.DistEventType
dynoptic.main.DynopticMain.postParseEvents : $z2 = r6 instanceof synoptic.model.event.DistEventType >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : if $z2 != 0
dynoptic.main.DynopticMain.postParseEvents : if $z2 != 0 >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : $r11 = new synoptic.util.InternalSynopticException
dynoptic.main.DynopticMain.postParseEvents : if $z2 != 0 >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : r7 = (synoptic.model.event.DistEventType) r6
dynoptic.main.DynopticMain.postParseEvents : r7 = (synoptic.model.event.DistEventType) r6 >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : $r17 = r0.<dynoptic.main.DynopticMain: java.util.List channelIds>
dynoptic.main.DynopticMain.postParseEvents : $r17 = r0.<dynoptic.main.DynopticMain: java.util.List channelIds> >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : r8 = virtualinvoke r7.<synoptic.model.event.DistEventType: java.lang.String interpretEType(java.util.List)>($r17)
dynoptic.main.DynopticMain.postParseEvents : r8 = virtualinvoke r7.<synoptic.model.event.DistEventType: java.lang.String interpretEType(java.util.List)>($r17) >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : if r8 == null
dynoptic.main.DynopticMain.postParseEvents : if r8 == null >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : $r18 = new dynoptic.main.OptionException
dynoptic.main.DynopticMain.postParseEvents : if r8 == null >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : $i0 = virtualinvoke r7.<synoptic.model.event.DistEventType: int getPid()>()
dynoptic.main.DynopticMain.postParseEvents : $i0 = virtualinvoke r7.<synoptic.model.event.DistEventType: int getPid()>() >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)
dynoptic.main.DynopticMain.postParseEvents : $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>($r19)
dynoptic.main.DynopticMain.postParseEvents : interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>($r19) >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : $z4 = virtualinvoke r7.<synoptic.model.event.DistEventType: boolean isCommEvent()>()
dynoptic.main.DynopticMain.postParseEvents : $z4 = virtualinvoke r7.<synoptic.model.event.DistEventType: boolean isCommEvent()>() >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : if $z4 == 0
dynoptic.main.DynopticMain.postParseEvents : if $z4 == 0 >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : $r20 = virtualinvoke r7.<synoptic.model.event.DistEventType: synoptic.model.channelid.ChannelId getChannelId()>()
dynoptic.main.DynopticMain.postParseEvents : if $z4 == 0 >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
dynoptic.main.DynopticMain.postParseEvents : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
dynoptic.main.DynopticMain.postParseEvents : $r20 = virtualinvoke r7.<synoptic.model.event.DistEventType: synoptic.model.channelid.ChannelId getChannelId()>() >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r20)
dynoptic.main.DynopticMain.postParseEvents : interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r20) >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
dynoptic.main.DynopticMain.postParseEvents : $r18 = new dynoptic.main.OptionException >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : specialinvoke $r18.<dynoptic.main.OptionException: void <init>(java.lang.String)>(r8)
dynoptic.main.DynopticMain.postParseEvents : specialinvoke $r18.<dynoptic.main.OptionException: void <init>(java.lang.String)>(r8) >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : throw $r18
dynoptic.main.DynopticMain.postParseEvents : $r11 = new synoptic.util.InternalSynopticException >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : $r12 = new java.lang.StringBuilder
dynoptic.main.DynopticMain.postParseEvents : $r12 = new java.lang.StringBuilder >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : specialinvoke $r12.<java.lang.StringBuilder: void <init>()>()
dynoptic.main.DynopticMain.postParseEvents : specialinvoke $r12.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected a DistEvenType, instead got ")
dynoptic.main.DynopticMain.postParseEvents : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected a DistEvenType, instead got ") >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : $r14 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>()
dynoptic.main.DynopticMain.postParseEvents : $r14 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14)
dynoptic.main.DynopticMain.postParseEvents : $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14) >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.main.DynopticMain.postParseEvents : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : specialinvoke $r11.<synoptic.util.InternalSynopticException: void <init>(java.lang.String)>($r16)
dynoptic.main.DynopticMain.postParseEvents : specialinvoke $r11.<synoptic.util.InternalSynopticException: void <init>(java.lang.String)>($r16) >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : throw $r11
dynoptic.main.DynopticMain.postParseEvents : $r9 = new dynoptic.main.OptionException >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : specialinvoke $r9.<dynoptic.main.OptionException: void <init>(java.lang.String)>("Did not parse any events from the input log files. Stopping.")
dynoptic.main.DynopticMain.postParseEvents : specialinvoke $r9.<dynoptic.main.OptionException: void <init>(java.lang.String)>("Did not parse any events from the input log files. Stopping.") >>>>>>>> dynoptic.main.DynopticMain.postParseEvents : throw $r9
