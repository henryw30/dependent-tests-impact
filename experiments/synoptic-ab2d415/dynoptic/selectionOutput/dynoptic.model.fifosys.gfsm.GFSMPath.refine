dynoptic.model.fifosys.gfsm.GFSMPath.refine : $r2 = r0.<dynoptic.model.fifosys.gfsm.GFSMPath: java.util.List states> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMPath.refine : $i1 = interfaceinvoke $r2.<java.util.List: int size()>()
dynoptic.model.fifosys.gfsm.GFSMPath.refine : $i1 = interfaceinvoke $r2.<java.util.List: int size()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMPath.refine : if $i1 != 1
dynoptic.model.fifosys.gfsm.GFSMPath.refine : if $i1 != 1 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMPath.refine : return 0
dynoptic.model.fifosys.gfsm.GFSMPath.refine : if $i1 != 1 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMPath.refine : i0 = specialinvoke r0.<dynoptic.model.fifosys.gfsm.GFSMPath: int findMaxStitchPartIndex(int)>(0)
dynoptic.model.fifosys.gfsm.GFSMPath.refine : i0 = specialinvoke r0.<dynoptic.model.fifosys.gfsm.GFSMPath: int findMaxStitchPartIndex(int)>(0) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMPath.refine : if i0 != -1
dynoptic.model.fifosys.gfsm.GFSMPath.refine : if i0 != -1 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMPath.refine : return 0
dynoptic.model.fifosys.gfsm.GFSMPath.refine : if i0 != -1 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMPath.refine : virtualinvoke r0.<dynoptic.model.fifosys.gfsm.GFSMPath: void refinePartition(dynoptic.model.fifosys.gfsm.GFSM,int)>(r1, i0)
dynoptic.model.fifosys.gfsm.GFSMPath.refine : virtualinvoke r0.<dynoptic.model.fifosys.gfsm.GFSMPath: void refinePartition(dynoptic.model.fifosys.gfsm.GFSM,int)>(r1, i0) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMPath.refine : return 1
