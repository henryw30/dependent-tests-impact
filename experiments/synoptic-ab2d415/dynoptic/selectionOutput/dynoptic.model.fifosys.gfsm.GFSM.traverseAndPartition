dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : $r5 = virtualinvoke r1.<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: java.util.Set getNextStates()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : r3 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : r3 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : if $z0 == 0
dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : return
dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : r4 = (dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState) $r6
dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : r4 = (dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState) $r6 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : specialinvoke r0.<dynoptic.model.fifosys.gfsm.GFSM: void addToMap(java.util.Map,dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState)>(r2, r4)
dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : specialinvoke r0.<dynoptic.model.fifosys.gfsm.GFSM: void addToMap(java.util.Map,dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState)>(r2, r4) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : specialinvoke r0.<dynoptic.model.fifosys.gfsm.GFSM: void traverseAndPartition(dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState,java.util.Map)>(r4, r2)
dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : specialinvoke r0.<dynoptic.model.fifosys.gfsm.GFSM: void traverseAndPartition(dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState,java.util.Map)>(r4, r2) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
