dynoptic.model.fifosys.gfsm.GFSM.addToMap : $r4 = virtualinvoke r2.<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState getChannelStates()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.addToMap : i0 = virtualinvoke $r4.<dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: int topOfQueuesHash()>()
dynoptic.model.fifosys.gfsm.GFSM.addToMap : i0 = virtualinvoke $r4.<dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: int topOfQueuesHash()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.addToMap : $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
dynoptic.model.fifosys.gfsm.GFSM.addToMap : $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.addToMap : $z0 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r5)
dynoptic.model.fifosys.gfsm.GFSM.addToMap : $z0 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r5) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.addToMap : if $z0 != 0
dynoptic.model.fifosys.gfsm.GFSM.addToMap : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.addToMap : r3 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.model.fifosys.gfsm.GFSM.addToMap : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.addToMap : $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
dynoptic.model.fifosys.gfsm.GFSM.addToMap : $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.addToMap : $r9 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8)
dynoptic.model.fifosys.gfsm.GFSM.addToMap : $r9 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.addToMap : $r10 = (java.util.Set) $r9
dynoptic.model.fifosys.gfsm.GFSM.addToMap : $r10 = (java.util.Set) $r9 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.addToMap : interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>(r2)
dynoptic.model.fifosys.gfsm.GFSM.addToMap : interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>(r2) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.addToMap : return
dynoptic.model.fifosys.gfsm.GFSM.addToMap : r3 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.addToMap : $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
dynoptic.model.fifosys.gfsm.GFSM.addToMap : $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.addToMap : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r3)
dynoptic.model.fifosys.gfsm.GFSM.addToMap : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r3) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.addToMap : $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
