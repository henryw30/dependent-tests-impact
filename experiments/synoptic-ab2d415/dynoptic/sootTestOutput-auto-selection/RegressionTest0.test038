dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet >>>>>>>> dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>()
dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> dynoptic.util.Util.newSet : return $r0
dynoptic.util.Util.newSet : return $r0 >>>>>>>> dynoptic.util.Util.newList : $r0 = new java.util.ArrayList
dynoptic.util.Util.newList : $r0 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>()
dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>() >>>>>>>> dynoptic.util.Util.newList : return $r0
dynoptic.util.Util.newList : return $r0 >>>>>>>> dynoptic.util.Util.newList : $r1 = new java.util.ArrayList
dynoptic.util.Util.newList : $r1 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0)
dynoptic.util.Util.newList : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0) >>>>>>>> dynoptic.util.Util.newList : return $r1
dynoptic.util.Util.newList : return $r1 >>>>>>>> mcscm.McScMCExample.getEvents : $r1 = r0.<mcscm.McScMCExample: java.util.List events>
mcscm.McScMCExample.getEvents : $r1 = r0.<mcscm.McScMCExample: java.util.List events> >>>>>>>> mcscm.McScMCExample.getEvents : return $r1
mcscm.McScMCExample.getEvents : return $r1 >>>>>>>> mcscm.McScMCExample.addScmEventStrToPath : $r3 = r0.<mcscm.McScMCExample: java.util.List cids>
mcscm.McScMCExample.addScmEventStrToPath : $r3 = r0.<mcscm.McScMCExample: java.util.List cids> >>>>>>>> mcscm.McScMCExample.addScmEventStrToPath : r2 = staticinvoke <mcscm.McScMCExample: synoptic.model.event.DistEventType parseScmEventStr(java.lang.String,java.util.List)>(r1, $r3)
mcscm.McScMCExample.addScmEventStrToPath : r2 = staticinvoke <mcscm.McScMCExample: synoptic.model.event.DistEventType parseScmEventStr(java.lang.String,java.util.List)>(r1, $r3) >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $r2 = <mcscm.McScMCExample: java.util.regex.Pattern eventTypeRecvPat>
mcscm.McScMCExample.parseScmEventStr : $r2 = <mcscm.McScMCExample: java.util.regex.Pattern eventTypeRecvPat> >>>>>>>> mcscm.McScMCExample.parseScmEventStr : r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0)
mcscm.McScMCExample.parseScmEventStr : r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0) >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $z0 = virtualinvoke r3.<java.util.regex.Matcher: boolean find()>()
mcscm.McScMCExample.parseScmEventStr : $z0 = virtualinvoke r3.<java.util.regex.Matcher: boolean find()>() >>>>>>>> mcscm.McScMCExample.parseScmEventStr : if $z0 == 0
mcscm.McScMCExample.parseScmEventStr : if $z0 == 0 >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $r12 = <mcscm.McScMCExample: java.util.regex.Pattern eventTypeSendPat>
mcscm.McScMCExample.parseScmEventStr : $r12 = <mcscm.McScMCExample: java.util.regex.Pattern eventTypeSendPat> >>>>>>>> mcscm.McScMCExample.parseScmEventStr : r13 = virtualinvoke $r12.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0)
mcscm.McScMCExample.parseScmEventStr : r13 = virtualinvoke $r12.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0) >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $z3 = virtualinvoke r13.<java.util.regex.Matcher: boolean find()>()
mcscm.McScMCExample.parseScmEventStr : $z3 = virtualinvoke r13.<java.util.regex.Matcher: boolean find()>() >>>>>>>> mcscm.McScMCExample.parseScmEventStr : if $z3 != 0
mcscm.McScMCExample.parseScmEventStr : if $z3 != 0 >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $r14 = new mcscm.VerifyOutputParseException
mcscm.McScMCExample.parseScmEventStr : $r14 = new mcscm.VerifyOutputParseException >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $r5 = new java.lang.StringBuilder
mcscm.McScMCExample.parseScmEventStr : $r5 = new java.lang.StringBuilder >>>>>>>> mcscm.McScMCExample.parseScmEventStr : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()
mcscm.McScMCExample.parseScmEventStr : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $r15 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not parse event in an McScm counter-example: ")
mcscm.McScMCExample.parseScmEventStr : $r15 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not parse event in an McScm counter-example: ") >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0)
mcscm.McScMCExample.parseScmEventStr : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0) >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>()
mcscm.McScMCExample.parseScmEventStr : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> mcscm.McScMCExample.parseScmEventStr : specialinvoke $r14.<mcscm.VerifyOutputParseException: void <init>(java.lang.String)>($r17)
mcscm.McScMCExample.parseScmEventStr : specialinvoke $r14.<mcscm.VerifyOutputParseException: void <init>(java.lang.String)>($r17) >>>>>>>> mcscm.McScMCExample.parseScmEventStr : throw $r14
