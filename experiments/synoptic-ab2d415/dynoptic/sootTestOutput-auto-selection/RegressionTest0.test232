dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet >>>>>>>> dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>()
dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> dynoptic.util.Util.newSet : return $r0
dynoptic.util.Util.newSet : return $r0 >>>>>>>> dynoptic.util.Util.newList : $r0 = new java.util.ArrayList
dynoptic.util.Util.newList : $r0 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>()
dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>() >>>>>>>> dynoptic.util.Util.newList : return $r0
dynoptic.util.Util.newList : return $r0 >>>>>>>> dynoptic.util.Util.newList : $r1 = new java.util.ArrayList
dynoptic.util.Util.newList : $r1 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0)
dynoptic.util.Util.newList : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0) >>>>>>>> dynoptic.util.Util.newList : return $r1
dynoptic.util.Util.newList : return $r1 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds : r1 = staticinvoke <dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List chStatesFromChIds(java.util.List)>(r0)
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds : r1 = staticinvoke <dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List chStatesFromChIds(java.util.List)>(r0) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $z0 = <dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: boolean $assertionsDisabled>
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $z0 = <dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : if $z0 != 0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $i0 = interfaceinvoke r0.<java.util.List: int size()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $i0 = interfaceinvoke r0.<java.util.List: int size()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : r1 = staticinvoke <dynoptic.util.Util: java.util.List newList(int)>($i0)
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : r1 = staticinvoke <dynoptic.util.Util: java.util.List newList(int)>($i0) >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(i0)
dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(i0) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : if $z1 == 0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : if $z1 == 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : return r1
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : return r1 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds : $r2 = new dynoptic.model.fifosys.channel.channelstate.MutableMultiChState
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds : $r2 = new dynoptic.model.fifosys.channel.channelstate.MutableMultiChState >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds : specialinvoke $r2.<dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: void <init>(java.util.List)>(r1)
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds : specialinvoke $r2.<dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: void <init>(java.util.List)>(r1) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds : return $r2
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds : return $r2 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.clone : $r4 = r0.<dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: java.util.List channelStates>
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.clone : $r4 = r0.<dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: java.util.List channelStates> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.clone : $i0 = interfaceinvoke $r4.<java.util.List: int size()>()
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.clone : $i0 = interfaceinvoke $r4.<java.util.List: int size()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.clone : r1 = staticinvoke <dynoptic.util.Util: java.util.List newList(int)>($i0)
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.clone : r1 = staticinvoke <dynoptic.util.Util: java.util.List newList(int)>($i0) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.clone : $r5 = r0.<dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: java.util.List channelStates>
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.clone : $r5 = r0.<dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: java.util.List channelStates> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.clone : r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>()
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.clone : r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.clone : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.clone : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.clone : if $z0 == 0
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.clone : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.clone : $r8 = new dynoptic.model.fifosys.channel.channelstate.MutableMultiChState
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.clone : $r8 = new dynoptic.model.fifosys.channel.channelstate.MutableMultiChState >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.clone : specialinvoke $r8.<dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: void <init>(java.util.List)>(r1)
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.clone : specialinvoke $r8.<dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: void <init>(java.util.List)>(r1) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.clone : return $r8
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.clone : return $r8 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.peek : $z0 = <dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: boolean $assertionsDisabled>
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.peek : $z0 = <dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.peek : if $z0 != 0
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.peek : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.peek : $r4 = r0.<dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: java.util.List channelStates>
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.peek : $r4 = r0.<dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: java.util.List channelStates> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.peek : $i2 = virtualinvoke r1.<synoptic.model.channelid.ChannelId: int getScmId()>()
