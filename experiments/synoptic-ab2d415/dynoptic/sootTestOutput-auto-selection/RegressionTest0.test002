mcscm.McScMCExample.parseScmEventStr : $r2 = <mcscm.McScMCExample: java.util.regex.Pattern eventTypeRecvPat> >>>>>>>> mcscm.McScMCExample.parseScmEventStr : r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0)
mcscm.McScMCExample.parseScmEventStr : r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0) >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $z0 = virtualinvoke r3.<java.util.regex.Matcher: boolean find()>()
mcscm.McScMCExample.parseScmEventStr : $z0 = virtualinvoke r3.<java.util.regex.Matcher: boolean find()>() >>>>>>>> mcscm.McScMCExample.parseScmEventStr : if $z0 == 0
mcscm.McScMCExample.parseScmEventStr : if $z0 == 0 >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $r12 = <mcscm.McScMCExample: java.util.regex.Pattern eventTypeSendPat>
mcscm.McScMCExample.parseScmEventStr : $r12 = <mcscm.McScMCExample: java.util.regex.Pattern eventTypeSendPat> >>>>>>>> mcscm.McScMCExample.parseScmEventStr : r13 = virtualinvoke $r12.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0)
mcscm.McScMCExample.parseScmEventStr : r13 = virtualinvoke $r12.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0) >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $z3 = virtualinvoke r13.<java.util.regex.Matcher: boolean find()>()
mcscm.McScMCExample.parseScmEventStr : $z3 = virtualinvoke r13.<java.util.regex.Matcher: boolean find()>() >>>>>>>> mcscm.McScMCExample.parseScmEventStr : if $z3 != 0
mcscm.McScMCExample.parseScmEventStr : if $z3 != 0 >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $r14 = new mcscm.VerifyOutputParseException
mcscm.McScMCExample.parseScmEventStr : $r14 = new mcscm.VerifyOutputParseException >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $r5 = new java.lang.StringBuilder
mcscm.McScMCExample.parseScmEventStr : $r5 = new java.lang.StringBuilder >>>>>>>> mcscm.McScMCExample.parseScmEventStr : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()
mcscm.McScMCExample.parseScmEventStr : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $r15 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not parse event in an McScm counter-example: ")
mcscm.McScMCExample.parseScmEventStr : $r15 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not parse event in an McScm counter-example: ") >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0)
mcscm.McScMCExample.parseScmEventStr : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0) >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>()
mcscm.McScMCExample.parseScmEventStr : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> mcscm.McScMCExample.parseScmEventStr : specialinvoke $r14.<mcscm.VerifyOutputParseException: void <init>(java.lang.String)>($r17)
mcscm.McScMCExample.parseScmEventStr : specialinvoke $r14.<mcscm.VerifyOutputParseException: void <init>(java.lang.String)>($r17) >>>>>>>> mcscm.McScMCExample.parseScmEventStr : throw $r14
