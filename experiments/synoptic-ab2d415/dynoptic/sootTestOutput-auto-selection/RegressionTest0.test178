dynoptic.model.fifosys.cfsm.CFSMState.isAccept : $r2 = r0.<dynoptic.model.fifosys.cfsm.CFSMState: java.util.List fsmStates> >>>>>>>> dynoptic.model.fifosys.cfsm.CFSMState.isAccept : $r1 = <dynoptic.model.fifosys.cfsm.CFSMState: dynoptic.model.AbsFSMState$IStateToBooleanFn fnIsAcceptState>
dynoptic.model.fifosys.cfsm.CFSMState.isAccept : $r1 = <dynoptic.model.fifosys.cfsm.CFSMState: dynoptic.model.AbsFSMState$IStateToBooleanFn fnIsAcceptState> >>>>>>>> dynoptic.model.fifosys.cfsm.CFSMState.isAccept : $z0 = staticinvoke <dynoptic.model.fifosys.cfsm.CFSMState: boolean statesEvalToTrue(java.util.Collection,dynoptic.model.AbsFSMState$IStateToBooleanFn)>($r2, $r1)
dynoptic.model.fifosys.cfsm.CFSMState.isAccept : $z0 = staticinvoke <dynoptic.model.fifosys.cfsm.CFSMState: boolean statesEvalToTrue(java.util.Collection,dynoptic.model.AbsFSMState$IStateToBooleanFn)>($r2, $r1) >>>>>>>> dynoptic.model.AbsFSMState.statesEvalToTrue : r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>()
dynoptic.model.AbsFSMState.statesEvalToTrue : r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.AbsFSMState.statesEvalToTrue : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.AbsFSMState.statesEvalToTrue : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.AbsFSMState.statesEvalToTrue : if $z0 == 0
dynoptic.model.AbsFSMState.statesEvalToTrue : if $z0 == 0 >>>>>>>> dynoptic.model.AbsFSMState.statesEvalToTrue : return 1
dynoptic.model.AbsFSMState.statesEvalToTrue : return 1 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSMState.isAccept : return $z0
