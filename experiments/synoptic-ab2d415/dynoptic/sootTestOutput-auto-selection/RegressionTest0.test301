dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet >>>>>>>> dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>()
dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> dynoptic.util.Util.newSet : return $r0
dynoptic.util.Util.newSet : return $r0 >>>>>>>> dynoptic.util.Util.newList : $r0 = new java.util.ArrayList
dynoptic.util.Util.newList : $r0 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>()
dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>() >>>>>>>> dynoptic.util.Util.newList : return $r0
dynoptic.util.Util.newList : return $r0 >>>>>>>> dynoptic.util.Util.newList : $r1 = new java.util.ArrayList
dynoptic.util.Util.newList : $r1 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0)
dynoptic.util.Util.newList : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0) >>>>>>>> dynoptic.util.Util.newList : return $r1
dynoptic.util.Util.newList : return $r1 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelIds : r1 = staticinvoke <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: java.util.List chStatesFromChIds(java.util.List)>(r0)
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelIds : r1 = staticinvoke <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: java.util.List chStatesFromChIds(java.util.List)>(r0) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $z0 = <dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: boolean $assertionsDisabled>
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $z0 = <dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : if $z0 != 0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $i0 = interfaceinvoke r0.<java.util.List: int size()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $i0 = interfaceinvoke r0.<java.util.List: int size()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : r1 = staticinvoke <dynoptic.util.Util: java.util.List newList(int)>($i0)
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : r1 = staticinvoke <dynoptic.util.Util: java.util.List newList(int)>($i0) >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(i0)
dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(i0) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : if $z1 == 0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : if $z1 == 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : return r1
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : return r1 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelIds : $r2 = staticinvoke <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState fromChannelStates(java.util.List)>(r1)
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelIds : $r2 = staticinvoke <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState fromChannelStates(java.util.List)>(r1) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $r1 = <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: java.util.Map chCache>
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $r1 = <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: java.util.Map chCache> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r0)
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r0) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : if $z0 == 0
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $r3 = <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: java.util.Map chCache>
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $r3 = <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: java.util.Map chCache> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : r2 = (dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState) $r4
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : r2 = (dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState) $r4 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : goto [?= return r2]
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : goto [?= return r2] >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : return r2
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : return r2 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelIds : return $r2
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelIds : return $r2 >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : z0 = 0
mcscm.VerifyResult.parseVerifyOutput : z0 = 0 >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : i0 = 0
mcscm.VerifyResult.parseVerifyOutput : i0 = 0 >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()
mcscm.VerifyResult.parseVerifyOutput : r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
mcscm.VerifyResult.parseVerifyOutput : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : if $z1 == 0
mcscm.VerifyResult.parseVerifyOutput : if $z1 == 0 >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
mcscm.VerifyResult.parseVerifyOutput : $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : r3 = (java.lang.String) $r5
mcscm.VerifyResult.parseVerifyOutput : r3 = (java.lang.String) $r5 >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : $r4 = <mcscm.VerifyResult: java.lang.String syntaxErrRe>
mcscm.VerifyResult.parseVerifyOutput : $r4 = <mcscm.VerifyResult: java.lang.String syntaxErrRe> >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : $z2 = virtualinvoke r3.<java.lang.String: boolean matches(java.lang.String)>($r4)
mcscm.VerifyResult.parseVerifyOutput : $z2 = virtualinvoke r3.<java.lang.String: boolean matches(java.lang.String)>($r4) >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : if $z2 == 0
mcscm.VerifyResult.parseVerifyOutput : if $z2 == 0 >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : $r7 = <mcscm.VerifyResult: java.lang.String safeRe>
mcscm.VerifyResult.parseVerifyOutput : $r7 = <mcscm.VerifyResult: java.lang.String safeRe> >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : $z3 = virtualinvoke r3.<java.lang.String: boolean matches(java.lang.String)>($r7)
mcscm.VerifyResult.parseVerifyOutput : $z3 = virtualinvoke r3.<java.lang.String: boolean matches(java.lang.String)>($r7) >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : if $z3 == 0
mcscm.VerifyResult.parseVerifyOutput : if $z3 == 0 >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : $r8 = <mcscm.VerifyResult: java.lang.String unsafeRe>
mcscm.VerifyResult.parseVerifyOutput : $r8 = <mcscm.VerifyResult: java.lang.String unsafeRe> >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : $z4 = virtualinvoke r3.<java.lang.String: boolean matches(java.lang.String)>($r8)
mcscm.VerifyResult.parseVerifyOutput : $z4 = virtualinvoke r3.<java.lang.String: boolean matches(java.lang.String)>($r8) >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : if $z4 == 0
mcscm.VerifyResult.parseVerifyOutput : if $z4 == 0 >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : $r9 = <mcscm.VerifyResult: java.lang.String counterExRe>
mcscm.VerifyResult.parseVerifyOutput : $r9 = <mcscm.VerifyResult: java.lang.String counterExRe> >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : $z5 = virtualinvoke r3.<java.lang.String: boolean matches(java.lang.String)>($r9)
mcscm.VerifyResult.parseVerifyOutput : $z5 = virtualinvoke r3.<java.lang.String: boolean matches(java.lang.String)>($r9) >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : if $z5 == 0
mcscm.VerifyResult.parseVerifyOutput : if $z5 == 0 >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : i0 = i0 + 1
mcscm.VerifyResult.parseVerifyOutput : i0 = i0 + 1 >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : goto [?= $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
mcscm.VerifyResult.parseVerifyOutput : goto [?= $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : if z0 != 0
mcscm.VerifyResult.parseVerifyOutput : if z0 != 0 >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : $r10 = new mcscm.VerifyOutputParseException
mcscm.VerifyResult.parseVerifyOutput : $r10 = new mcscm.VerifyOutputParseException >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : specialinvoke $r10.<mcscm.VerifyOutputParseException: void <init>(java.lang.String)>("Unable to parse verify result: cannot determine model safety")
mcscm.VerifyResult.parseVerifyOutput : specialinvoke $r10.<mcscm.VerifyOutputParseException: void <init>(java.lang.String)>("Unable to parse verify result: cannot determine model safety") >>>>>>>> mcscm.VerifyResult.parseVerifyOutput : throw $r10
