dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet >>>>>>>> dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>()
dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> dynoptic.util.Util.newSet : return $r0
dynoptic.util.Util.newSet : return $r0 >>>>>>>> dynoptic.util.Util.newList : $r0 = new java.util.ArrayList
dynoptic.util.Util.newList : $r0 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>()
dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>() >>>>>>>> dynoptic.util.Util.newList : return $r0
dynoptic.util.Util.newList : return $r0 >>>>>>>> dynoptic.util.Util.newList : $r1 = new java.util.ArrayList
dynoptic.util.Util.newList : $r1 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0)
dynoptic.util.Util.newList : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0) >>>>>>>> dynoptic.util.Util.newList : return $r1
dynoptic.util.Util.newList : return $r1 >>>>>>>> dynoptic.model.fifosys.FifoSys.getNumProcesses : $i0 = r0.<dynoptic.model.fifosys.FifoSys: int numProcesses>
dynoptic.model.fifosys.FifoSys.getNumProcesses : $i0 = r0.<dynoptic.model.fifosys.FifoSys: int numProcesses> >>>>>>>> dynoptic.model.fifosys.FifoSys.getNumProcesses : return $i0
dynoptic.model.fifosys.FifoSys.getNumProcesses : return $i0 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.getBadStates : $z0 = <dynoptic.model.fifosys.cfsm.CFSM: boolean $assertionsDisabled>
dynoptic.model.fifosys.cfsm.CFSM.getBadStates : $z0 = <dynoptic.model.fifosys.cfsm.CFSM: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.getBadStates : if $z0 != 0
dynoptic.model.fifosys.cfsm.CFSM.getBadStates : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.getBadStates : r1 = staticinvoke <dynoptic.util.Util: java.util.List newList()>()
dynoptic.model.fifosys.cfsm.CFSM.getBadStates : r1 = staticinvoke <dynoptic.util.Util: java.util.List newList()>() >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.getBadStates : $r6 = r0.<dynoptic.model.fifosys.cfsm.CFSM: java.util.List invs>
dynoptic.model.fifosys.cfsm.CFSM.getBadStates : $r6 = r0.<dynoptic.model.fifosys.cfsm.CFSM: java.util.List invs> >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.getBadStates : r2 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>()
dynoptic.model.fifosys.cfsm.CFSM.getBadStates : r2 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.getBadStates : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.cfsm.CFSM.getBadStates : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.getBadStates : if $z1 == 0
dynoptic.model.fifosys.cfsm.CFSM.getBadStates : if $z1 == 0 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.getBadStates : return r1
