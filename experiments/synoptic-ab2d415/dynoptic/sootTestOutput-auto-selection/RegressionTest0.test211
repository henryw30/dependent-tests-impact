dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $r1 = <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: java.util.Map chCache> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r0)
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r0) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : if $z0 == 0
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $r3 = <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: java.util.Map chCache>
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $r3 = <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: java.util.Map chCache> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : r2 = (dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState) $r4
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : r2 = (dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState) $r4 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : goto [?= return r2]
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : goto [?= return r2] >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : return r2
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : return r2 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : $r4 = r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List channelStates>
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : $r4 = r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List channelStates> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : $i0 = interfaceinvoke $r4.<java.util.List: int size()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : $i0 = interfaceinvoke $r4.<java.util.List: int size()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : r1 = staticinvoke <dynoptic.util.Util: java.util.List newList(int)>($i0)
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : r1 = staticinvoke <dynoptic.util.Util: java.util.List newList(int)>($i0) >>>>>>>> dynoptic.util.Util.newList : $r0 = new java.util.ArrayList
dynoptic.util.Util.newList : $r0 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(i0)
dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(i0) >>>>>>>> dynoptic.util.Util.newList : return $r0
dynoptic.util.Util.newList : return $r0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : $r5 = r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List channelStates>
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : $r5 = r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List channelStates> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : if $z0 == 0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : return r1
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : return r1 >>>>>>>> dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet
dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet >>>>>>>> dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>()
dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> dynoptic.util.Util.newSet : return $r0
dynoptic.util.Util.newSet : return $r0 >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>()
dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getAcceptStates : r1 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.model.fifosys.gfsm.GFSM.getAcceptStates : r1 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getAcceptStates : $r4 = r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.Set states>
dynoptic.model.fifosys.gfsm.GFSM.getAcceptStates : $r4 = r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.Set states> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getAcceptStates : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.fifosys.gfsm.GFSM.getAcceptStates : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getAcceptStates : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.gfsm.GFSM.getAcceptStates : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getAcceptStates : if $z0 == 0
dynoptic.model.fifosys.gfsm.GFSM.getAcceptStates : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getAcceptStates : return r1
dynoptic.model.fifosys.gfsm.GFSM.getAcceptStates : return r1 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.toString : $r1 = new java.lang.StringBuilder
dynoptic.model.fifosys.gfsm.GFSM.toString : $r1 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.toString : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.fifosys.gfsm.GFSM.toString : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.toString : $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("GFSM[num-states=")
dynoptic.model.fifosys.gfsm.GFSM.toString : $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("GFSM[num-states=") >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.toString : $r6 = r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.Set states>
dynoptic.model.fifosys.gfsm.GFSM.toString : $r6 = r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.Set states> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.toString : $i0 = interfaceinvoke $r6.<java.util.Set: int size()>()
dynoptic.model.fifosys.gfsm.GFSM.toString : $i0 = interfaceinvoke $r6.<java.util.Set: int size()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.toString : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)
dynoptic.model.fifosys.gfsm.GFSM.toString : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.toString : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] : ")
dynoptic.model.fifosys.gfsm.GFSM.toString : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] : ") >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.toString : r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.fifosys.gfsm.GFSM.toString : r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.toString : $r9 = r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.Set states>
dynoptic.model.fifosys.gfsm.GFSM.toString : $r9 = r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.Set states> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.toString : r3 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.fifosys.gfsm.GFSM.toString : r3 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.toString : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.gfsm.GFSM.toString : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.toString : if $z0 == 0
dynoptic.model.fifosys.gfsm.GFSM.toString : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.toString : return r2
