dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $r1 = <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: java.util.Map chCache> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r0)
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r0) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : if $z0 == 0
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $r3 = <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: java.util.Map chCache>
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $r3 = <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: java.util.Map chCache> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : r2 = (dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState) $r4
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : r2 = (dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState) $r4 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : goto [?= return r2]
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : goto [?= return r2] >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : return r2
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : return r2 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : $r4 = r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List channelStates>
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : $r4 = r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List channelStates> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : $i0 = interfaceinvoke $r4.<java.util.List: int size()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : $i0 = interfaceinvoke $r4.<java.util.List: int size()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : r1 = staticinvoke <dynoptic.util.Util: java.util.List newList(int)>($i0)
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : r1 = staticinvoke <dynoptic.util.Util: java.util.List newList(int)>($i0) >>>>>>>> dynoptic.util.Util.newList : $r0 = new java.util.ArrayList
dynoptic.util.Util.newList : $r0 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(i0)
dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(i0) >>>>>>>> dynoptic.util.Util.newList : return $r0
dynoptic.util.Util.newList : return $r0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : $r5 = r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List channelStates>
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : $r5 = r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List channelStates> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : if $z0 == 0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : return r1
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : return r1 >>>>>>>> dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet
dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet >>>>>>>> dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>()
dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> dynoptic.util.Util.newSet : return $r0
dynoptic.util.Util.newSet : return $r0 >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>()
dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r1 = new dynoptic.model.fifosys.cfsm.CFSM
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r1 = new dynoptic.model.fifosys.cfsm.CFSM >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $i1 = r0.<dynoptic.model.fifosys.gfsm.GFSM: int numProcesses>
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $i1 = r0.<dynoptic.model.fifosys.gfsm.GFSM: int numProcesses> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r20 = r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.List channelIds>
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r20 = r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.List channelIds> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : specialinvoke $r1.<dynoptic.model.fifosys.cfsm.CFSM: void <init>(int,java.util.List)>($i1, $r20)
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : specialinvoke $r1.<dynoptic.model.fifosys.cfsm.CFSM: void <init>(int,java.util.List)>($i1, $r20) >>>>>>>> dynoptic.util.Util.newList : $r1 = new java.util.ArrayList
dynoptic.util.Util.newList : $r1 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0)
dynoptic.util.Util.newList : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0) >>>>>>>> dynoptic.util.Util.newList : return $r1
dynoptic.util.Util.newList : return $r1 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : r2 = $r1
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : r2 = $r1 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r21 = <dynoptic.model.fifosys.gfsm.GFSM: java.util.logging.Logger logger>
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r21 = <dynoptic.model.fifosys.gfsm.GFSM: java.util.logging.Logger logger> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r22 = new java.lang.StringBuilder
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r22 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : specialinvoke $r22.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : specialinvoke $r22.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("GFSM -> CFSM: ")
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("GFSM -> CFSM: ") >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r24 = virtualinvoke r0.<dynoptic.model.fifosys.gfsm.GFSM: java.lang.String toString()>()
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r24 = virtualinvoke r0.<dynoptic.model.fifosys.gfsm.GFSM: java.lang.String toString()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.toString : $r1 = new java.lang.StringBuilder
dynoptic.model.fifosys.gfsm.GFSM.toString : $r1 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.toString : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.fifosys.gfsm.GFSM.toString : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.toString : $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("GFSM[num-states=")
dynoptic.model.fifosys.gfsm.GFSM.toString : $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("GFSM[num-states=") >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.toString : $r6 = r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.Set states>
dynoptic.model.fifosys.gfsm.GFSM.toString : $r6 = r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.Set states> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.toString : $i0 = interfaceinvoke $r6.<java.util.Set: int size()>()
dynoptic.model.fifosys.gfsm.GFSM.toString : $i0 = interfaceinvoke $r6.<java.util.Set: int size()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.toString : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)
dynoptic.model.fifosys.gfsm.GFSM.toString : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.toString : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] : ")
dynoptic.model.fifosys.gfsm.GFSM.toString : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] : ") >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.toString : r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.fifosys.gfsm.GFSM.toString : r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.toString : $r9 = r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.Set states>
dynoptic.model.fifosys.gfsm.GFSM.toString : $r9 = r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.Set states> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.toString : r3 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.fifosys.gfsm.GFSM.toString : r3 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.toString : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.gfsm.GFSM.toString : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.toString : if $z0 == 0
dynoptic.model.fifosys.gfsm.GFSM.toString : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.toString : return r2
dynoptic.model.fifosys.gfsm.GFSM.toString : return r2 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24)
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n")
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n") >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : virtualinvoke $r21.<java.util.logging.Logger: void info(java.lang.String)>($r27)
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : virtualinvoke $r21.<java.util.logging.Logger: void info(java.lang.String)>($r27) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : r3 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : r3 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : r4 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : r4 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : r5 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : r5 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : r6 = staticinvoke <dynoptic.util.Util: java.util.Map newMap()>()
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : r6 = staticinvoke <dynoptic.util.Util: java.util.Map newMap()>() >>>>>>>> dynoptic.util.Util.newMap : $r0 = new java.util.LinkedHashMap
dynoptic.util.Util.newMap : $r0 = new java.util.LinkedHashMap >>>>>>>> dynoptic.util.Util.newMap : specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>()
dynoptic.util.Util.newMap : specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>() >>>>>>>> dynoptic.util.Util.newMap : return $r0
dynoptic.util.Util.newMap : return $r0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : r7 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : r7 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : r8 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : r8 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : r9 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : r9 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : i0 = 0
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : i0 = 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $i2 = r0.<dynoptic.model.fifosys.gfsm.GFSM: int numProcesses>
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $i2 = r0.<dynoptic.model.fifosys.gfsm.GFSM: int numProcesses> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : if i0 >= $i2
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : if i0 >= $i2 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r28 = <dynoptic.model.fifosys.gfsm.GFSM: java.util.logging.Logger logger>
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r28 = <dynoptic.model.fifosys.gfsm.GFSM: java.util.logging.Logger logger> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r29 = new java.lang.StringBuilder
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r29 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : specialinvoke $r29.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : specialinvoke $r29.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Building FSM for pid ")
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Building FSM for pid ") >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : virtualinvoke $r28.<java.util.logging.Logger: void info(java.lang.String)>($r32)
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : virtualinvoke $r28.<java.util.logging.Logger: void info(java.lang.String)>($r32) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : r0.<dynoptic.model.fifosys.gfsm.GFSM: int nextScmId> = 0
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : r0.<dynoptic.model.fifosys.gfsm.GFSM: int nextScmId> = 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r33 = r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.Set states>
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r33 = r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.Set states> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : r10 = interfaceinvoke $r33.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : r10 = interfaceinvoke $r33.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $z1 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $z1 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : if $z1 == 0
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : if $z1 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r38 = <dynoptic.model.fifosys.gfsm.GFSM: java.util.logging.Logger logger>
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r38 = <dynoptic.model.fifosys.gfsm.GFSM: java.util.logging.Logger logger> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r39 = new java.lang.StringBuilder
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r39 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : specialinvoke $r39.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : specialinvoke $r39.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("GFSMState->FSMState[pid=")
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("GFSMState->FSMState[pid=") >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] stateMap : ")
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] stateMap : ") >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r43 = virtualinvoke r6.<java.lang.Object: java.lang.String toString()>()
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r43 = virtualinvoke r6.<java.lang.Object: java.lang.String toString()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r44 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43)
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r44 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : virtualinvoke $r38.<java.util.logging.Logger: void info(java.lang.String)>($r45)
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : virtualinvoke $r38.<java.util.logging.Logger: void info(java.lang.String)>($r45) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r46 = r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.Set states>
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r46 = r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.Set states> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : r47 = interfaceinvoke $r46.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : r47 = interfaceinvoke $r46.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $z6 = interfaceinvoke r47.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $z6 = interfaceinvoke r47.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : if $z6 == 0
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : if $z6 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : r58 = interfaceinvoke r3.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : r58 = interfaceinvoke r3.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $z13 = interfaceinvoke r58.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $z13 = interfaceinvoke r58.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : if $z13 == 0
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : if $z13 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : r61 = interfaceinvoke r6.<java.util.Map: java.util.Set keySet()>()
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : r61 = interfaceinvoke r6.<java.util.Map: java.util.Set keySet()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : r62 = interfaceinvoke r61.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : r62 = interfaceinvoke r61.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $z14 = interfaceinvoke r62.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $z14 = interfaceinvoke r62.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : if $z14 == 0
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : if $z14 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : z18 = 0
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : z18 = 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : z19 = 0
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : z19 = 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : r67 = interfaceinvoke r6.<java.util.Map: java.util.Set keySet()>()
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : r67 = interfaceinvoke r6.<java.util.Map: java.util.Set keySet()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : r68 = interfaceinvoke r67.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : r68 = interfaceinvoke r67.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $z20 = interfaceinvoke r68.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $z20 = interfaceinvoke r68.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : if $z20 == 0
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : if $z20 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : if z19 != 0
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : if z19 != 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $z23 = <dynoptic.model.fifosys.gfsm.GFSM: boolean $assertionsDisabled>
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $z23 = <dynoptic.model.fifosys.gfsm.GFSM: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : if $z23 != 0
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : if $z23 != 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $z25 = <dynoptic.model.fifosys.gfsm.GFSM: boolean $assertionsDisabled>
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $z25 = <dynoptic.model.fifosys.gfsm.GFSM: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : if $z25 != 0
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : if $z25 != 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r78 = new dynoptic.model.fifosys.cfsm.fsm.FSM
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r78 = new dynoptic.model.fifosys.cfsm.fsm.FSM >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r79 = interfaceinvoke r6.<java.util.Map: java.util.Collection values()>()
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $r79 = interfaceinvoke r6.<java.util.Map: java.util.Collection values()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $i7 = r0.<dynoptic.model.fifosys.gfsm.GFSM: int nextScmId>
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $i7 = r0.<dynoptic.model.fifosys.gfsm.GFSM: int nextScmId> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : specialinvoke $r78.<dynoptic.model.fifosys.cfsm.fsm.FSM: void <init>(int,java.util.Set,java.util.Set,java.util.Collection,int)>(i0, r3, r4, $r79, $i7)
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : specialinvoke $r78.<dynoptic.model.fifosys.cfsm.fsm.FSM: void <init>(int,java.util.Set,java.util.Set,java.util.Collection,int)>(i0, r3, r4, $r79, $i7) >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : $r4 = r0.<dynoptic.model.AbsFSM: dynoptic.model.alphabet.FSMAlphabet alphabet>
dynoptic.model.AbsFSM.recomputeAlphabet : $r4 = r0.<dynoptic.model.AbsFSM: dynoptic.model.alphabet.FSMAlphabet alphabet> >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : virtualinvoke $r4.<dynoptic.model.alphabet.FSMAlphabet: void clear()>()
dynoptic.model.AbsFSM.recomputeAlphabet : virtualinvoke $r4.<dynoptic.model.alphabet.FSMAlphabet: void clear()>() >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.clear : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events>
dynoptic.model.alphabet.FSMAlphabet.clear : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events> >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.clear : interfaceinvoke $r1.<java.util.Set: void clear()>()
dynoptic.model.alphabet.FSMAlphabet.clear : interfaceinvoke $r1.<java.util.Set: void clear()>() >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : $r5 = r0.<dynoptic.model.AbsFSM: java.util.Set states>
dynoptic.model.AbsFSM.recomputeAlphabet : $r5 = r0.<dynoptic.model.AbsFSM: java.util.Set states> >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : r1 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.AbsFSM.recomputeAlphabet : r1 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.AbsFSM.recomputeAlphabet : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : if $z0 == 0
dynoptic.model.AbsFSM.recomputeAlphabet : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : r80 = $r78
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : r80 = $r78 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : if z0 == 0
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : if z0 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $z27 = virtualinvoke r80.<dynoptic.model.fifosys.cfsm.fsm.FSM: boolean isDeterministic()>()
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : $z27 = virtualinvoke r80.<dynoptic.model.fifosys.cfsm.fsm.FSM: boolean isDeterministic()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : $r6 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: java.util.Set initStates>
dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : $r6 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: java.util.Set initStates> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : $i0 = interfaceinvoke $r6.<java.util.Set: int size()>()
dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : $i0 = interfaceinvoke $r6.<java.util.Set: int size()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : if $i0 <= 1
dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : if $i0 <= 1 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : $r7 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: java.util.Set states>
dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : $r7 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: java.util.Set states> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : r1 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : r1 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : if $z0 == 0
dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : return 1
dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : return 1 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : if $z27 == 0
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : if $z27 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : virtualinvoke r80.<dynoptic.model.fifosys.cfsm.fsm.FSM: void minimize()>()
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : virtualinvoke r80.<dynoptic.model.fifosys.cfsm.fsm.FSM: void minimize()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : r1 = virtualinvoke r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: dynoptic.model.automaton.EventTypeEncodings getEventTypeEncodings()>()
dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : r1 = virtualinvoke r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: dynoptic.model.automaton.EventTypeEncodings getEventTypeEncodings()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.getEventTypeEncodings : virtualinvoke r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: void recomputeAlphabet()>()
dynoptic.model.fifosys.cfsm.fsm.FSM.getEventTypeEncodings : virtualinvoke r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: void recomputeAlphabet()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.getEventTypeEncodings : $r1 = new dynoptic.model.automaton.EventTypeEncodings
dynoptic.model.fifosys.cfsm.fsm.FSM.getEventTypeEncodings : $r1 = new dynoptic.model.automaton.EventTypeEncodings >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.getEventTypeEncodings : $r2 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: dynoptic.model.alphabet.FSMAlphabet alphabet>
dynoptic.model.fifosys.cfsm.fsm.FSM.getEventTypeEncodings : $r2 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: dynoptic.model.alphabet.FSMAlphabet alphabet> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.getEventTypeEncodings : specialinvoke $r1.<dynoptic.model.automaton.EventTypeEncodings: void <init>(java.util.Set)>($r2)
dynoptic.model.fifosys.cfsm.fsm.FSM.getEventTypeEncodings : specialinvoke $r1.<dynoptic.model.automaton.EventTypeEncodings: void <init>(java.util.Set)>($r2) >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.toArray : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events>
dynoptic.model.alphabet.FSMAlphabet.toArray : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events> >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.toArray : $r2 = interfaceinvoke $r1.<java.util.Set: java.lang.Object[] toArray()>()
dynoptic.model.alphabet.FSMAlphabet.toArray : $r2 = interfaceinvoke $r1.<java.util.Set: java.lang.Object[] toArray()>() >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.toArray : return $r2
dynoptic.model.alphabet.FSMAlphabet.toArray : return $r2 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.getEventTypeEncodings : return $r1
dynoptic.model.fifosys.cfsm.fsm.FSM.getEventTypeEncodings : return $r1 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : r2 = virtualinvoke r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: dynoptic.model.automaton.EncodedAutomaton getEncodedAutomaton(dynoptic.model.automaton.EventTypeEncodings)>(r1)
dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : r2 = virtualinvoke r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: dynoptic.model.automaton.EncodedAutomaton getEncodedAutomaton(dynoptic.model.automaton.EventTypeEncodings)>(r1) >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.getEncodedAutomaton : $r2 = new dynoptic.model.automaton.EncodedAutomaton
dynoptic.model.fifosys.cfsm.fsm.FSM.getEncodedAutomaton : $r2 = new dynoptic.model.automaton.EncodedAutomaton >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.getEncodedAutomaton : specialinvoke $r2.<dynoptic.model.automaton.EncodedAutomaton: void <init>(dynoptic.model.automaton.EventTypeEncodings,dynoptic.model.fifosys.cfsm.fsm.FSM)>(r1, r0)
dynoptic.model.fifosys.cfsm.fsm.FSM.getEncodedAutomaton : specialinvoke $r2.<dynoptic.model.automaton.EncodedAutomaton: void <init>(dynoptic.model.automaton.EventTypeEncodings,dynoptic.model.fifosys.cfsm.fsm.FSM)>(r1, r0) >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : $r2 = new dk.brics.automaton.State
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : $r2 = new dk.brics.automaton.State >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : specialinvoke $r2.<dk.brics.automaton.State: void <init>()>()
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : specialinvoke $r2.<dk.brics.automaton.State: void <init>()>() >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : r3 = $r2
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : r3 = $r2 >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : r4 = staticinvoke <dynoptic.util.Util: java.util.Map newMap()>()
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : r4 = staticinvoke <dynoptic.util.Util: java.util.Map newMap()>() >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : r5 = virtualinvoke r1.<dynoptic.model.fifosys.cfsm.fsm.FSM: java.util.Set getInitStates()>()
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : r5 = virtualinvoke r1.<dynoptic.model.fifosys.cfsm.fsm.FSM: java.util.Set getInitStates()>() >>>>>>>> dynoptic.model.AbsFSM.getInitStates : $r1 = r0.<dynoptic.model.AbsFSM: java.util.Set initStates>
dynoptic.model.AbsFSM.getInitStates : $r1 = r0.<dynoptic.model.AbsFSM: java.util.Set initStates> >>>>>>>> dynoptic.model.AbsFSM.getInitStates : return $r1
dynoptic.model.AbsFSM.getInitStates : return $r1 >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : r6 = interfaceinvoke r5.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : r6 = interfaceinvoke r5.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : if $z0 == 0
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : if $z0 == 0 >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : $r9 = r0.<dynoptic.model.automaton.EncodedAutomaton: dk.brics.automaton.Automaton model>
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : $r9 = r0.<dynoptic.model.automaton.EncodedAutomaton: dk.brics.automaton.Automaton model> >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : virtualinvoke $r9.<dk.brics.automaton.Automaton: void setInitialState(dk.brics.automaton.State)>(r3)
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : virtualinvoke $r9.<dk.brics.automaton.Automaton: void setInitialState(dk.brics.automaton.State)>(r3) >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : $r10 = r0.<dynoptic.model.automaton.EncodedAutomaton: dk.brics.automaton.Automaton model>
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : $r10 = r0.<dynoptic.model.automaton.EncodedAutomaton: dk.brics.automaton.Automaton model> >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : virtualinvoke $r10.<dk.brics.automaton.Automaton: void setDeterministic(boolean)>(0)
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : virtualinvoke $r10.<dk.brics.automaton.Automaton: void setDeterministic(boolean)>(0) >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : $r11 = r0.<dynoptic.model.automaton.EncodedAutomaton: dk.brics.automaton.Automaton model>
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : $r11 = r0.<dynoptic.model.automaton.EncodedAutomaton: dk.brics.automaton.Automaton model> >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : virtualinvoke $r11.<dk.brics.automaton.Automaton: void restoreInvariant()>()
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : virtualinvoke $r11.<dk.brics.automaton.Automaton: void restoreInvariant()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.getEncodedAutomaton : return $r2
dynoptic.model.fifosys.cfsm.fsm.FSM.getEncodedAutomaton : return $r2 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : virtualinvoke r2.<dynoptic.model.automaton.EncodedAutomaton: void minimize()>()
dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : virtualinvoke r2.<dynoptic.model.automaton.EncodedAutomaton: void minimize()>() >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.minimize : $r1 = r0.<dynoptic.model.automaton.EncodedAutomaton: dk.brics.automaton.Automaton model>
dynoptic.model.automaton.EncodedAutomaton.minimize : $r1 = r0.<dynoptic.model.automaton.EncodedAutomaton: dk.brics.automaton.Automaton model> >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.minimize : staticinvoke <dk.brics.automaton.MinimizationOperations: void minimizeHopcroft(dk.brics.automaton.Automaton)>($r1)
dynoptic.model.automaton.EncodedAutomaton.minimize : staticinvoke <dk.brics.automaton.MinimizationOperations: void minimizeHopcroft(dk.brics.automaton.Automaton)>($r1) >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : r3 = virtualinvoke r2.<dynoptic.model.automaton.EncodedAutomaton: dk.brics.automaton.Automaton getAutomaton()>()
dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : r3 = virtualinvoke r2.<dynoptic.model.automaton.EncodedAutomaton: dk.brics.automaton.Automaton getAutomaton()>() >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.getAutomaton : $r1 = r0.<dynoptic.model.automaton.EncodedAutomaton: dk.brics.automaton.Automaton model>
dynoptic.model.automaton.EncodedAutomaton.getAutomaton : $r1 = r0.<dynoptic.model.automaton.EncodedAutomaton: dk.brics.automaton.Automaton model> >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.getAutomaton : return $r1
dynoptic.model.automaton.EncodedAutomaton.getAutomaton : return $r1 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : $r7 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: java.util.Set states>
dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : $r7 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: java.util.Set states> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : interfaceinvoke $r7.<java.util.Set: void clear()>()
dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : interfaceinvoke $r7.<java.util.Set: void clear()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : $r8 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: java.util.Set initStates>
dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : $r8 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: java.util.Set initStates> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : interfaceinvoke $r8.<java.util.Set: void clear()>()
dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : interfaceinvoke $r8.<java.util.Set: void clear()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : $r9 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: java.util.Set acceptStates>
dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : $r9 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: java.util.Set acceptStates> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : interfaceinvoke $r9.<java.util.Set: void clear()>()
dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : interfaceinvoke $r9.<java.util.Set: void clear()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : r4 = virtualinvoke r3.<dk.brics.automaton.Automaton: dk.brics.automaton.State getInitialState()>()
dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : r4 = virtualinvoke r3.<dk.brics.automaton.Automaton: dk.brics.automaton.State getInitialState()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : $r10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState
dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : $r10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : $z0 = virtualinvoke r4.<dk.brics.automaton.State: boolean isAccept()>()
dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : $z0 = virtualinvoke r4.<dk.brics.automaton.State: boolean isAccept()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : $i0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: int pid>
dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : $i0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: int pid> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : specialinvoke $r10.<dynoptic.model.fifosys.cfsm.fsm.FSMState: void <init>(boolean,boolean,int,int)>($z0, 1, $i0, 0)
dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : specialinvoke $r10.<dynoptic.model.fifosys.cfsm.fsm.FSMState: void <init>(boolean,boolean,int,int)>($z0, 1, $i0, 0) >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : r5 = $r10
dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : r5 = $r10 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : $r11 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: java.util.Set states>
dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : $r11 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: java.util.Set states> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : interfaceinvoke $r11.<java.util.Set: boolean add(java.lang.Object)>(r5)
dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : interfaceinvoke $r11.<java.util.Set: boolean add(java.lang.Object)>(r5) >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : b0 = 31
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : b0 = 31 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i1 = b0 * 31
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i1 = b0 * 31 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $z0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isAccept>
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $z0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isAccept> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : if $z0 == 0
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $b2 = 0
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $b2 = 0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i3 = $i1 + $b2
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i3 = $i1 + $b2 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i4 = i3 * 31
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i4 = i3 * 31 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $z1 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isInitial>
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $z1 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isInitial> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : if $z1 == 0
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : if $z1 == 0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $b5 = 1
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $b5 = 1 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : goto [?= i6 = $i4 + $b5]
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : goto [?= i6 = $i4 + $b5] >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i6 = $i4 + $b5
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i6 = $i4 + $b5 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i7 = i6 * 31
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i7 = i6 * 31 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i8 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: int pid>
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i8 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: int pid> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i9 = $i7 + $i8
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i9 = $i7 + $i8 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i10 = i9 * 31
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i10 = i9 * 31 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i11 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: int scmId>
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i11 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: int scmId> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i12 = $i10 + $i11
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i12 = $i10 + $i11 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : return 1
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : return 1 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : $r12 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: java.util.Set initStates>
dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : $r12 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: java.util.Set initStates> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : interfaceinvoke $r12.<java.util.Set: boolean add(java.lang.Object)>(r5)
dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : interfaceinvoke $r12.<java.util.Set: boolean add(java.lang.Object)>(r5) >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : $z3 = virtualinvoke r4.<dk.brics.automaton.State: boolean isAccept()>()
dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : $z3 = virtualinvoke r4.<dk.brics.automaton.State: boolean isAccept()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : if $z3 == 0
dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : if $z3 == 0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : $r14 = new java.util.LinkedHashMap
dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : $r14 = new java.util.LinkedHashMap >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : specialinvoke $r14.<java.util.LinkedHashMap: void <init>()>()
dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : specialinvoke $r14.<java.util.LinkedHashMap: void <init>()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : r6 = $r14
dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : r6 = $r14 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : specialinvoke r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: void DFS(dk.brics.automaton.State,dynoptic.model.fifosys.cfsm.fsm.FSMState,java.util.Map,dynoptic.model.automaton.EventTypeEncodings)>(r4, r5, r6, r1)
dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : specialinvoke r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: void DFS(dk.brics.automaton.State,dynoptic.model.fifosys.cfsm.fsm.FSMState,java.util.Map,dynoptic.model.automaton.EventTypeEncodings)>(r4, r5, r6, r1) >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.DFS : interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
dynoptic.model.fifosys.cfsm.fsm.FSM.DFS : interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.DFS : r5 = virtualinvoke r1.<dk.brics.automaton.State: java.util.Set getTransitions()>()
dynoptic.model.fifosys.cfsm.fsm.FSM.DFS : r5 = virtualinvoke r1.<dk.brics.automaton.State: java.util.Set getTransitions()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.DFS : r6 = interfaceinvoke r5.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.fifosys.cfsm.fsm.FSM.DFS : r6 = interfaceinvoke r5.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.DFS : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.cfsm.fsm.FSM.DFS : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.DFS : if $z0 == 0
dynoptic.model.fifosys.cfsm.fsm.FSM.DFS : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : virtualinvoke r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: void recomputeAlphabet()>()
dynoptic.model.fifosys.cfsm.fsm.FSM.minimize : virtualinvoke r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: void recomputeAlphabet()>() >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()
dynoptic.model.AbsFSM.recomputeAlphabet : $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : r2 = (dynoptic.model.AbsFSMState) $r6
dynoptic.model.AbsFSM.recomputeAlphabet : r2 = (dynoptic.model.AbsFSMState) $r6 >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : r3 = virtualinvoke r2.<dynoptic.model.AbsFSMState: java.util.Set getTransitioningEvents()>()
dynoptic.model.AbsFSM.recomputeAlphabet : r3 = virtualinvoke r2.<dynoptic.model.AbsFSMState: java.util.Set getTransitioningEvents()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : $r1 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: java.util.Map transitions>
dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : $r1 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: java.util.Map transitions> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>()
dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : return $r2
dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : return $r2 >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : $i0 = interfaceinvoke r3.<java.util.Set: int size()>()
dynoptic.model.AbsFSM.recomputeAlphabet : $i0 = interfaceinvoke r3.<java.util.Set: int size()>() >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : if $i0 == 0
dynoptic.model.AbsFSM.recomputeAlphabet : if $i0 == 0 >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
dynoptic.model.AbsFSM.recomputeAlphabet : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : virtualinvoke r2.<dynoptic.model.fifosys.cfsm.CFSM: void addFSM(dynoptic.model.fifosys.cfsm.fsm.FSM)>(r80)
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : virtualinvoke r2.<dynoptic.model.fifosys.cfsm.CFSM: void addFSM(dynoptic.model.fifosys.cfsm.fsm.FSM)>(r80) >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.addFSM : $z0 = <dynoptic.model.fifosys.cfsm.CFSM: boolean $assertionsDisabled>
dynoptic.model.fifosys.cfsm.CFSM.addFSM : $z0 = <dynoptic.model.fifosys.cfsm.CFSM: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.addFSM : if $z0 != 0
dynoptic.model.fifosys.cfsm.CFSM.addFSM : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.addFSM : $z1 = <dynoptic.model.fifosys.cfsm.CFSM: boolean $assertionsDisabled>
dynoptic.model.fifosys.cfsm.CFSM.addFSM : $z1 = <dynoptic.model.fifosys.cfsm.CFSM: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.addFSM : if $z1 != 0
dynoptic.model.fifosys.cfsm.CFSM.addFSM : if $z1 != 0 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.addFSM : i0 = virtualinvoke r1.<dynoptic.model.fifosys.cfsm.fsm.FSM: int getPid()>()
dynoptic.model.fifosys.cfsm.CFSM.addFSM : i0 = virtualinvoke r1.<dynoptic.model.fifosys.cfsm.fsm.FSM: int getPid()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.getPid : $i0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: int pid>
dynoptic.model.fifosys.cfsm.fsm.FSM.getPid : $i0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: int pid> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.getPid : return $i0
dynoptic.model.fifosys.cfsm.fsm.FSM.getPid : return $i0 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.addFSM : $z2 = <dynoptic.main.DynopticMain: boolean assertsOn>
dynoptic.model.fifosys.cfsm.CFSM.addFSM : $z2 = <dynoptic.main.DynopticMain: boolean assertsOn> >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.addFSM : if $z2 == 0
dynoptic.model.fifosys.cfsm.CFSM.addFSM : if $z2 == 0 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.addFSM : $r17 = r0.<dynoptic.model.fifosys.cfsm.CFSM: java.util.List fsms>
dynoptic.model.fifosys.cfsm.CFSM.addFSM : $r17 = r0.<dynoptic.model.fifosys.cfsm.CFSM: java.util.List fsms> >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.addFSM : interfaceinvoke $r17.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, r1)
dynoptic.model.fifosys.cfsm.CFSM.addFSM : interfaceinvoke $r17.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, r1) >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.addFSM : $r19 = r0.<dynoptic.model.fifosys.cfsm.CFSM: dynoptic.model.alphabet.FSMAlphabet alphabet>
dynoptic.model.fifosys.cfsm.CFSM.addFSM : $r19 = r0.<dynoptic.model.fifosys.cfsm.CFSM: dynoptic.model.alphabet.FSMAlphabet alphabet> >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.addFSM : $r20 = virtualinvoke r1.<dynoptic.model.fifosys.cfsm.fsm.FSM: dynoptic.model.alphabet.FSMAlphabet getAlphabet()>()
dynoptic.model.fifosys.cfsm.CFSM.addFSM : $r20 = virtualinvoke r1.<dynoptic.model.fifosys.cfsm.fsm.FSM: dynoptic.model.alphabet.FSMAlphabet getAlphabet()>() >>>>>>>> dynoptic.model.AbsFSM.getAlphabet : $r1 = r0.<dynoptic.model.AbsFSM: dynoptic.model.alphabet.FSMAlphabet alphabet>
dynoptic.model.AbsFSM.getAlphabet : $r1 = r0.<dynoptic.model.AbsFSM: dynoptic.model.alphabet.FSMAlphabet alphabet> >>>>>>>> dynoptic.model.AbsFSM.getAlphabet : return $r1
dynoptic.model.AbsFSM.getAlphabet : return $r1 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.addFSM : virtualinvoke $r19.<dynoptic.model.alphabet.FSMAlphabet: boolean addAll(java.util.Collection)>($r20)
dynoptic.model.fifosys.cfsm.CFSM.addFSM : virtualinvoke $r19.<dynoptic.model.alphabet.FSMAlphabet: boolean addAll(java.util.Collection)>($r20) >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.addAll : $r2 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events>
dynoptic.model.alphabet.FSMAlphabet.addAll : $r2 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events> >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.addAll : $z0 = interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>(r1)
dynoptic.model.alphabet.FSMAlphabet.addAll : $z0 = interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>(r1) >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.iterator : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events>
dynoptic.model.alphabet.FSMAlphabet.iterator : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events> >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.iterator : $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.alphabet.FSMAlphabet.iterator : $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.iterator : return $r2
dynoptic.model.alphabet.FSMAlphabet.iterator : return $r2 >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.addAll : return $z0
dynoptic.model.alphabet.FSMAlphabet.addAll : return $z0 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.addFSM : $i9 = r0.<dynoptic.model.fifosys.cfsm.CFSM: int unSpecifiedPids>
dynoptic.model.fifosys.cfsm.CFSM.addFSM : $i9 = r0.<dynoptic.model.fifosys.cfsm.CFSM: int unSpecifiedPids> >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.addFSM : $i10 = $i9 - 1
dynoptic.model.fifosys.cfsm.CFSM.addFSM : $i10 = $i9 - 1 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.addFSM : r0.<dynoptic.model.fifosys.cfsm.CFSM: int unSpecifiedPids> = $i10
dynoptic.model.fifosys.cfsm.CFSM.addFSM : r0.<dynoptic.model.fifosys.cfsm.CFSM: int unSpecifiedPids> = $i10 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : interfaceinvoke r6.<java.util.Map: void clear()>()
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : interfaceinvoke r6.<java.util.Map: void clear()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : interfaceinvoke r3.<java.util.Set: void clear()>()
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : interfaceinvoke r3.<java.util.Set: void clear()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : interfaceinvoke r4.<java.util.Set: void clear()>()
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : interfaceinvoke r4.<java.util.Set: void clear()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : interfaceinvoke r8.<java.util.Set: void clear()>()
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : interfaceinvoke r8.<java.util.Set: void clear()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : i0 = i0 + 1
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : i0 = i0 + 1 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : goto [?= $i2 = r0.<dynoptic.model.fifosys.gfsm.GFSM: int numProcesses>]
dynoptic.model.fifosys.gfsm.GFSM.getCFSM : goto [?= $i2 = r0.<dynoptic.model.fifosys.gfsm.GFSM: int numProcesses>] >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCFSM : return r2
