dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState : $r0 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.util.Map initialProcessStatesMap> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState : $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState : $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState : $z0 = interfaceinvoke $r0.<java.util.Map: boolean containsKey(java.lang.Object)>($r3)
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState : $z0 = interfaceinvoke $r0.<java.util.Map: boolean containsKey(java.lang.Object)>($r3) >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState : if $z0 == 0
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState : $r4 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.util.Map initialProcessStatesMap>
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState : $r4 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.util.Map initialProcessStatesMap> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState : $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState : $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState : $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5)
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState : $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5) >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState : $r7 = (dynoptic.model.fifosys.gfsm.observed.ObsFSMState) $r6
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState : $r7 = (dynoptic.model.fifosys.gfsm.observed.ObsFSMState) $r6 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState : return $r7
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState : return $r7 >>>>>>>> dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet
dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet >>>>>>>> dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>()
dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> dynoptic.util.Util.newSet : return $r0
dynoptic.util.Util.newSet : return $r0 >>>>>>>> dynoptic.util.Util.newList : $r0 = new java.util.ArrayList
dynoptic.util.Util.newList : $r0 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>()
dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>() >>>>>>>> dynoptic.util.Util.newList : return $r0
dynoptic.util.Util.newList : return $r0 >>>>>>>> dynoptic.util.Util.newList : $r1 = new java.util.ArrayList
dynoptic.util.Util.newList : $r1 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0)
dynoptic.util.Util.newList : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0) >>>>>>>> dynoptic.util.Util.newList : return $r1
dynoptic.util.Util.newList : return $r1 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.equals : if r1 != null
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.equals : if r1 != null >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.equals : if r0 != r1
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.equals : if r0 != r1 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.equals : $z0 = r1 instanceof dynoptic.model.fifosys.gfsm.observed.ObsFSMState
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.equals : $z0 = r1 instanceof dynoptic.model.fifosys.gfsm.observed.ObsFSMState >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.equals : if $z0 != 0
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.equals : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.equals : return 0
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.equals : return 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $r1 = <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: java.util.Map chCache>
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $r1 = <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: java.util.Map chCache> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r0)
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r0) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : if $z0 == 0
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $r3 = <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: java.util.Map chCache>
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $r3 = <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: java.util.Map chCache> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : r2 = (dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState) $r4
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : r2 = (dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState) $r4 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : goto [?= return r2]
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : goto [?= return r2] >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : return r2
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : return r2 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : $r4 = r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List channelStates>
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : $r4 = r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List channelStates> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : $i0 = interfaceinvoke $r4.<java.util.List: int size()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : $i0 = interfaceinvoke $r4.<java.util.List: int size()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : r1 = staticinvoke <dynoptic.util.Util: java.util.List newList(int)>($i0)
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : r1 = staticinvoke <dynoptic.util.Util: java.util.List newList(int)>($i0) >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(i0)
dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(i0) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : $r5 = r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List channelStates>
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : $r5 = r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List channelStates> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : if $z0 == 0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : return r1
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : return r1 >>>>>>>> dynoptic.util.Util.get2DPermutations : $r2 = new java.util.ArrayList
dynoptic.util.Util.get2DPermutations : $r2 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.get2DPermutations : specialinvoke $r2.<java.util.ArrayList: void <init>()>()
dynoptic.util.Util.get2DPermutations : specialinvoke $r2.<java.util.ArrayList: void <init>()>() >>>>>>>> dynoptic.util.Util.get2DPermutations : r3 = $r2
dynoptic.util.Util.get2DPermutations : r3 = $r2 >>>>>>>> dynoptic.util.Util.get2DPermutations : r4 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>()
dynoptic.util.Util.get2DPermutations : r4 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() >>>>>>>> dynoptic.util.Util.get2DPermutations : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
dynoptic.util.Util.get2DPermutations : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.util.Util.get2DPermutations : if $z0 == 0
dynoptic.util.Util.get2DPermutations : if $z0 == 0 >>>>>>>> dynoptic.util.Util.get2DPermutations : return r3
dynoptic.util.Util.get2DPermutations : return r3 >>>>>>>> mcscm.McScM.getVerifyResult : $r5 = r0.<mcscm.McScM: java.lang.Process verifyProcess>
mcscm.McScM.getVerifyResult : $r5 = r0.<mcscm.McScM: java.lang.Process verifyProcess> >>>>>>>> mcscm.McScM.getVerifyResult : $r6 = virtualinvoke $r5.<java.lang.Process: java.io.InputStream getInputStream()>()
