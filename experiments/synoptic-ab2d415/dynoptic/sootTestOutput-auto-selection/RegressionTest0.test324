dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet >>>>>>>> dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>()
dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> dynoptic.util.Util.newSet : return $r0
dynoptic.util.Util.newSet : return $r0 >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : $r4 = r0.<dynoptic.model.AbsFSM: dynoptic.model.alphabet.FSMAlphabet alphabet>
dynoptic.model.AbsFSM.recomputeAlphabet : $r4 = r0.<dynoptic.model.AbsFSM: dynoptic.model.alphabet.FSMAlphabet alphabet> >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : virtualinvoke $r4.<dynoptic.model.alphabet.FSMAlphabet: void clear()>()
dynoptic.model.AbsFSM.recomputeAlphabet : virtualinvoke $r4.<dynoptic.model.alphabet.FSMAlphabet: void clear()>() >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.clear : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events>
dynoptic.model.alphabet.FSMAlphabet.clear : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events> >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.clear : interfaceinvoke $r1.<java.util.Set: void clear()>()
dynoptic.model.alphabet.FSMAlphabet.clear : interfaceinvoke $r1.<java.util.Set: void clear()>() >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : $r5 = r0.<dynoptic.model.AbsFSM: java.util.Set states>
dynoptic.model.AbsFSM.recomputeAlphabet : $r5 = r0.<dynoptic.model.AbsFSM: java.util.Set states> >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : r1 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.AbsFSM.recomputeAlphabet : r1 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.AbsFSM.recomputeAlphabet : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : if $z0 == 0
dynoptic.model.AbsFSM.recomputeAlphabet : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.getStates : $r1 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: java.util.Set states>
dynoptic.model.fifosys.cfsm.fsm.FSM.getStates : $r1 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: java.util.Set states> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.getStates : return $r1
dynoptic.model.fifosys.cfsm.fsm.FSM.getStates : return $r1 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.getPid : $i0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: int pid>
dynoptic.model.fifosys.cfsm.fsm.FSM.getPid : $i0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: int pid> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.getPid : return $i0
dynoptic.model.fifosys.cfsm.fsm.FSM.getPid : return $i0 >>>>>>>> dynoptic.model.AbsFSM.getAcceptStates : $r1 = r0.<dynoptic.model.AbsFSM: java.util.Set acceptStates>
dynoptic.model.AbsFSM.getAcceptStates : $r1 = r0.<dynoptic.model.AbsFSM: java.util.Set acceptStates> >>>>>>>> dynoptic.model.AbsFSM.getAcceptStates : return $r1
dynoptic.model.AbsFSM.getAcceptStates : return $r1 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.getEventTypeEncodings : virtualinvoke r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: void recomputeAlphabet()>()
dynoptic.model.fifosys.cfsm.fsm.FSM.getEventTypeEncodings : virtualinvoke r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: void recomputeAlphabet()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.getEventTypeEncodings : $r1 = new dynoptic.model.automaton.EventTypeEncodings
dynoptic.model.fifosys.cfsm.fsm.FSM.getEventTypeEncodings : $r1 = new dynoptic.model.automaton.EventTypeEncodings >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.getEventTypeEncodings : $r2 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: dynoptic.model.alphabet.FSMAlphabet alphabet>
dynoptic.model.fifosys.cfsm.fsm.FSM.getEventTypeEncodings : $r2 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: dynoptic.model.alphabet.FSMAlphabet alphabet> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.getEventTypeEncodings : specialinvoke $r1.<dynoptic.model.automaton.EventTypeEncodings: void <init>(java.util.Set)>($r2)
dynoptic.model.fifosys.cfsm.fsm.FSM.getEventTypeEncodings : specialinvoke $r1.<dynoptic.model.automaton.EventTypeEncodings: void <init>(java.util.Set)>($r2) >>>>>>>> dynoptic.util.Util.newMap : $r0 = new java.util.LinkedHashMap
dynoptic.util.Util.newMap : $r0 = new java.util.LinkedHashMap >>>>>>>> dynoptic.util.Util.newMap : specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>()
dynoptic.util.Util.newMap : specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>() >>>>>>>> dynoptic.util.Util.newMap : return $r0
dynoptic.util.Util.newMap : return $r0 >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.toArray : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events>
dynoptic.model.alphabet.FSMAlphabet.toArray : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events> >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.toArray : $r2 = interfaceinvoke $r1.<java.util.Set: java.lang.Object[] toArray()>()
dynoptic.model.alphabet.FSMAlphabet.toArray : $r2 = interfaceinvoke $r1.<java.util.Set: java.lang.Object[] toArray()>() >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.toArray : return $r2
dynoptic.model.alphabet.FSMAlphabet.toArray : return $r2 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.getEventTypeEncodings : return $r1
dynoptic.model.fifosys.cfsm.fsm.FSM.getEventTypeEncodings : return $r1 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.getEncodedAutomaton : $r2 = new dynoptic.model.automaton.EncodedAutomaton
dynoptic.model.fifosys.cfsm.fsm.FSM.getEncodedAutomaton : $r2 = new dynoptic.model.automaton.EncodedAutomaton >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.getEncodedAutomaton : specialinvoke $r2.<dynoptic.model.automaton.EncodedAutomaton: void <init>(dynoptic.model.automaton.EventTypeEncodings,dynoptic.model.fifosys.cfsm.fsm.FSM)>(r1, r0)
dynoptic.model.fifosys.cfsm.fsm.FSM.getEncodedAutomaton : specialinvoke $r2.<dynoptic.model.automaton.EncodedAutomaton: void <init>(dynoptic.model.automaton.EventTypeEncodings,dynoptic.model.fifosys.cfsm.fsm.FSM)>(r1, r0) >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : $r2 = new dk.brics.automaton.State
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : $r2 = new dk.brics.automaton.State >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : specialinvoke $r2.<dk.brics.automaton.State: void <init>()>()
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : specialinvoke $r2.<dk.brics.automaton.State: void <init>()>() >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : r3 = $r2
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : r3 = $r2 >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : r4 = staticinvoke <dynoptic.util.Util: java.util.Map newMap()>()
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : r4 = staticinvoke <dynoptic.util.Util: java.util.Map newMap()>() >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : r5 = virtualinvoke r1.<dynoptic.model.fifosys.cfsm.fsm.FSM: java.util.Set getInitStates()>()
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : r5 = virtualinvoke r1.<dynoptic.model.fifosys.cfsm.fsm.FSM: java.util.Set getInitStates()>() >>>>>>>> dynoptic.model.AbsFSM.getInitStates : $r1 = r0.<dynoptic.model.AbsFSM: java.util.Set initStates>
dynoptic.model.AbsFSM.getInitStates : $r1 = r0.<dynoptic.model.AbsFSM: java.util.Set initStates> >>>>>>>> dynoptic.model.AbsFSM.getInitStates : return $r1
dynoptic.model.AbsFSM.getInitStates : return $r1 >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : r6 = interfaceinvoke r5.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : r6 = interfaceinvoke r5.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : if $z0 == 0
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : if $z0 == 0 >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : $r9 = r0.<dynoptic.model.automaton.EncodedAutomaton: dk.brics.automaton.Automaton model>
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : $r9 = r0.<dynoptic.model.automaton.EncodedAutomaton: dk.brics.automaton.Automaton model> >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : virtualinvoke $r9.<dk.brics.automaton.Automaton: void setInitialState(dk.brics.automaton.State)>(r3)
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : virtualinvoke $r9.<dk.brics.automaton.Automaton: void setInitialState(dk.brics.automaton.State)>(r3) >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : $r10 = r0.<dynoptic.model.automaton.EncodedAutomaton: dk.brics.automaton.Automaton model>
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : $r10 = r0.<dynoptic.model.automaton.EncodedAutomaton: dk.brics.automaton.Automaton model> >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : virtualinvoke $r10.<dk.brics.automaton.Automaton: void setDeterministic(boolean)>(0)
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : virtualinvoke $r10.<dk.brics.automaton.Automaton: void setDeterministic(boolean)>(0) >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : $r11 = r0.<dynoptic.model.automaton.EncodedAutomaton: dk.brics.automaton.Automaton model>
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : $r11 = r0.<dynoptic.model.automaton.EncodedAutomaton: dk.brics.automaton.Automaton model> >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : virtualinvoke $r11.<dk.brics.automaton.Automaton: void restoreInvariant()>()
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : virtualinvoke $r11.<dk.brics.automaton.Automaton: void restoreInvariant()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.getEncodedAutomaton : return $r2
dynoptic.model.fifosys.cfsm.fsm.FSM.getEncodedAutomaton : return $r2 >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.getAutomaton : $r1 = r0.<dynoptic.model.automaton.EncodedAutomaton: dk.brics.automaton.Automaton model>
dynoptic.model.automaton.EncodedAutomaton.getAutomaton : $r1 = r0.<dynoptic.model.automaton.EncodedAutomaton: dk.brics.automaton.Automaton model> >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.getAutomaton : return $r1
