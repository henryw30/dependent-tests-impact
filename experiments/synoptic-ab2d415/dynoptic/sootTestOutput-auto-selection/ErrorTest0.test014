dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet >>>>>>>> dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>()
dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> dynoptic.util.Util.newSet : return $r0
dynoptic.util.Util.newSet : return $r0 >>>>>>>> dynoptic.util.Util.newList : $r0 = new java.util.ArrayList
dynoptic.util.Util.newList : $r0 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>()
dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>() >>>>>>>> dynoptic.util.Util.newList : return $r0
dynoptic.util.Util.newList : return $r0 >>>>>>>> dynoptic.util.Util.newList : $r1 = new java.util.ArrayList
dynoptic.util.Util.newList : $r1 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0)
dynoptic.util.Util.newList : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0) >>>>>>>> dynoptic.util.Util.newList : return $r1
dynoptic.util.Util.newList : return $r1 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.getInitStates : $z0 = <dynoptic.model.fifosys.cfsm.CFSM: boolean $assertionsDisabled>
dynoptic.model.fifosys.cfsm.CFSM.getInitStates : $z0 = <dynoptic.model.fifosys.cfsm.CFSM: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.getInitStates : if $z0 != 0
dynoptic.model.fifosys.cfsm.CFSM.getInitStates : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.getInitStates : $r2 = <dynoptic.model.fifosys.cfsm.CFSM: dynoptic.model.fifosys.cfsm.CFSM$IFSMToStateSetFn fnGetInitialStates>
dynoptic.model.fifosys.cfsm.CFSM.getInitStates : $r2 = <dynoptic.model.fifosys.cfsm.CFSM: dynoptic.model.fifosys.cfsm.CFSM$IFSMToStateSetFn fnGetInitialStates> >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.getInitStates : $r3 = specialinvoke r0.<dynoptic.model.fifosys.cfsm.CFSM: java.util.Set deriveAllPermsOfStates(dynoptic.model.fifosys.cfsm.CFSM$IFSMToStateSetFn)>($r2)
dynoptic.model.fifosys.cfsm.CFSM.getInitStates : $r3 = specialinvoke r0.<dynoptic.model.fifosys.cfsm.CFSM: java.util.Set deriveAllPermsOfStates(dynoptic.model.fifosys.cfsm.CFSM$IFSMToStateSetFn)>($r2) >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $i0 = r0.<dynoptic.model.fifosys.cfsm.CFSM: int numProcesses>
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $i0 = r0.<dynoptic.model.fifosys.cfsm.CFSM: int numProcesses> >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : if $i0 != 1
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : if $i0 != 1 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $z2 = <dynoptic.model.fifosys.cfsm.CFSM: boolean $assertionsDisabled>
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $z2 = <dynoptic.model.fifosys.cfsm.CFSM: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : if $z2 != 0
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : if $z2 != 0 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r12 = r0.<dynoptic.model.fifosys.cfsm.CFSM: java.util.List fsms>
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r12 = r0.<dynoptic.model.fifosys.cfsm.CFSM: java.util.List fsms> >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(0)
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(0) >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r14 = (dynoptic.model.AbsFSM) $r13
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r14 = (dynoptic.model.AbsFSM) $r13 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r15 = interfaceinvoke r1.<dynoptic.model.fifosys.cfsm.CFSM$IFSMToStateSetFn: java.util.Set eval(dynoptic.model.AbsFSM)>($r14)
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r15 = interfaceinvoke r1.<dynoptic.model.fifosys.cfsm.CFSM$IFSMToStateSetFn: java.util.Set eval(dynoptic.model.AbsFSM)>($r14) >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM$1.eval : $r2 = virtualinvoke r1.<dynoptic.model.AbsFSM: java.util.Set getInitStates()>()
