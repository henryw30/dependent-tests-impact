dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet >>>>>>>> dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>()
dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> dynoptic.util.Util.newSet : return $r0
dynoptic.util.Util.newSet : return $r0 >>>>>>>> dynoptic.util.Util.newList : $r0 = new java.util.ArrayList
dynoptic.util.Util.newList : $r0 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>()
dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>() >>>>>>>> dynoptic.util.Util.newList : return $r0
dynoptic.util.Util.newList : return $r0 >>>>>>>> dynoptic.util.Util.newList : $r1 = new java.util.ArrayList
dynoptic.util.Util.newList : $r1 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0)
dynoptic.util.Util.newList : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0) >>>>>>>> dynoptic.util.Util.newList : return $r1
dynoptic.util.Util.newList : return $r1 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.equals : $z0 = specialinvoke r0.<dynoptic.model.fifosys.FifoSys: boolean equals(java.lang.Object)>(r1)
dynoptic.model.fifosys.cfsm.CFSM.equals : $z0 = specialinvoke r0.<dynoptic.model.fifosys.FifoSys: boolean equals(java.lang.Object)>(r1) >>>>>>>> dynoptic.model.fifosys.FifoSys.equals : if r1 != null
dynoptic.model.fifosys.FifoSys.equals : if r1 != null >>>>>>>> dynoptic.model.fifosys.FifoSys.equals : if r0 != r1
dynoptic.model.fifosys.FifoSys.equals : if r0 != r1 >>>>>>>> dynoptic.model.fifosys.FifoSys.equals : $z0 = r1 instanceof dynoptic.model.fifosys.FifoSys
dynoptic.model.fifosys.FifoSys.equals : $z0 = r1 instanceof dynoptic.model.fifosys.FifoSys >>>>>>>> dynoptic.model.fifosys.FifoSys.equals : if $z0 != 0
dynoptic.model.fifosys.FifoSys.equals : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.FifoSys.equals : return 0
dynoptic.model.fifosys.FifoSys.equals : return 0 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.equals : if $z0 != 0
dynoptic.model.fifosys.cfsm.CFSM.equals : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.equals : return 0
dynoptic.model.fifosys.cfsm.CFSM.equals : return 0 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.augmentWithInvTracing : $z0 = r1 instanceof dynoptic.invariants.EventuallyHappens
dynoptic.model.fifosys.cfsm.CFSM.augmentWithInvTracing : $z0 = r1 instanceof dynoptic.invariants.EventuallyHappens >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.augmentWithInvTracing : if $z0 == 0
dynoptic.model.fifosys.cfsm.CFSM.augmentWithInvTracing : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.augmentWithInvTracing : $z1 = r1 instanceof dynoptic.invariants.AlwaysPrecedes
dynoptic.model.fifosys.cfsm.CFSM.augmentWithInvTracing : $z1 = r1 instanceof dynoptic.invariants.AlwaysPrecedes >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.augmentWithInvTracing : if $z1 != 0
dynoptic.model.fifosys.cfsm.CFSM.augmentWithInvTracing : if $z1 != 0 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.augmentWithInvTracing : $z2 = r1 instanceof dynoptic.invariants.AlwaysFollowedBy
dynoptic.model.fifosys.cfsm.CFSM.augmentWithInvTracing : $z2 = r1 instanceof dynoptic.invariants.AlwaysFollowedBy >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.augmentWithInvTracing : if $z2 != 0
dynoptic.model.fifosys.cfsm.CFSM.augmentWithInvTracing : if $z2 != 0 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.augmentWithInvTracing : $z3 = r1 instanceof dynoptic.invariants.NeverFollowedBy
dynoptic.model.fifosys.cfsm.CFSM.augmentWithInvTracing : $z3 = r1 instanceof dynoptic.invariants.NeverFollowedBy >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.augmentWithInvTracing : if $z3 == 0
dynoptic.model.fifosys.cfsm.CFSM.augmentWithInvTracing : if $z3 == 0 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.augmentWithInvTracing : $r4 = new java.lang.Exception
dynoptic.model.fifosys.cfsm.CFSM.augmentWithInvTracing : $r4 = new java.lang.Exception >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.augmentWithInvTracing : $r2 = new java.lang.StringBuilder
dynoptic.model.fifosys.cfsm.CFSM.augmentWithInvTracing : $r2 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.augmentWithInvTracing : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.fifosys.cfsm.CFSM.augmentWithInvTracing : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.augmentWithInvTracing : $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized binary invarianr type: ")
dynoptic.model.fifosys.cfsm.CFSM.augmentWithInvTracing : $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized binary invarianr type: ") >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.augmentWithInvTracing : $r6 = virtualinvoke r1.<dynoptic.invariants.BinaryInvariant: java.lang.String toString()>()
