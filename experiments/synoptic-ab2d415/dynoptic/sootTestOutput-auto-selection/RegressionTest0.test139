dynoptic.model.export.DotExportFormatter.endGraphString : return "} // digraph {\n" >>>>>>>> dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet
dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet >>>>>>>> dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>()
dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> dynoptic.util.Util.newSet : return $r0
dynoptic.util.Util.newSet : return $r0 >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.isEmpty : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events>
dynoptic.model.alphabet.FSMAlphabet.isEmpty : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events> >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.isEmpty : $z0 = interfaceinvoke $r1.<java.util.Set: boolean isEmpty()>()
dynoptic.model.alphabet.FSMAlphabet.isEmpty : $z0 = interfaceinvoke $r1.<java.util.Set: boolean isEmpty()>() >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.isEmpty : return $z0
dynoptic.model.alphabet.FSMAlphabet.isEmpty : return $z0 >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : r1 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : r1 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : $r4 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events>
dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : $r4 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events> >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : if $z0 == 0
dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : if $z0 == 0 >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : return r1
dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : return r1 >>>>>>>> dynoptic.util.Util.newSet : $r1 = new java.util.LinkedHashSet
dynoptic.util.Util.newSet : $r1 = new java.util.LinkedHashSet >>>>>>>> dynoptic.util.Util.newSet : specialinvoke $r1.<java.util.LinkedHashSet: void <init>(java.util.Collection)>(r0)
dynoptic.util.Util.newSet : specialinvoke $r1.<java.util.LinkedHashSet: void <init>(java.util.Collection)>(r0) >>>>>>>> dynoptic.util.Util.newSet : return $r1
dynoptic.util.Util.newSet : return $r1 >>>>>>>> dynoptic.model.export.DotExportFormatter.edgeToStringWithDistEvent : $r3 = new java.lang.StringBuilder
dynoptic.model.export.DotExportFormatter.edgeToStringWithDistEvent : $r3 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.export.DotExportFormatter.edgeToStringWithDistEvent : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.export.DotExportFormatter.edgeToStringWithDistEvent : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.export.DotExportFormatter.edgeToStringWithDistEvent : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("label=\"")
dynoptic.model.export.DotExportFormatter.edgeToStringWithDistEvent : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("label=\"") >>>>>>>> dynoptic.model.export.DotExportFormatter.edgeToStringWithDistEvent : $r6 = interfaceinvoke r1.<synoptic.model.event.IDistEventType: java.lang.String toDotString()>()
