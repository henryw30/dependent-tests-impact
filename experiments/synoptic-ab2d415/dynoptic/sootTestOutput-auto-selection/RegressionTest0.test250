dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet >>>>>>>> dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>()
dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> dynoptic.util.Util.newSet : return $r0
dynoptic.util.Util.newSet : return $r0 >>>>>>>> dynoptic.util.Util.newList : $r0 = new java.util.ArrayList
dynoptic.util.Util.newList : $r0 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>()
dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>() >>>>>>>> dynoptic.util.Util.newList : return $r0
dynoptic.util.Util.newList : return $r0 >>>>>>>> dynoptic.util.Util.newList : $r1 = new java.util.ArrayList
dynoptic.util.Util.newList : $r1 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0)
dynoptic.util.Util.newList : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0) >>>>>>>> dynoptic.util.Util.newList : return $r1
dynoptic.util.Util.newList : return $r1 >>>>>>>> mcscm.McScMCExample.toString : r1 = "CExample[\n"
mcscm.McScMCExample.toString : r1 = "CExample[\n" >>>>>>>> mcscm.McScMCExample.toString : $r4 = r0.<mcscm.McScMCExample: java.util.List events>
mcscm.McScMCExample.toString : $r4 = r0.<mcscm.McScMCExample: java.util.List events> >>>>>>>> mcscm.McScMCExample.toString : r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>()
mcscm.McScMCExample.toString : r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> mcscm.McScMCExample.toString : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
mcscm.McScMCExample.toString : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> mcscm.McScMCExample.toString : if $z0 == 0
mcscm.McScMCExample.toString : if $z0 == 0 >>>>>>>> mcscm.McScMCExample.toString : $r12 = new java.lang.StringBuilder
mcscm.McScMCExample.toString : $r12 = new java.lang.StringBuilder >>>>>>>> mcscm.McScMCExample.toString : specialinvoke $r12.<java.lang.StringBuilder: void <init>()>()
mcscm.McScMCExample.toString : specialinvoke $r12.<java.lang.StringBuilder: void <init>()>() >>>>>>>> mcscm.McScMCExample.toString : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
mcscm.McScMCExample.toString : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> mcscm.McScMCExample.toString : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]")
mcscm.McScMCExample.toString : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]") >>>>>>>> mcscm.McScMCExample.toString : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>()
mcscm.McScMCExample.toString : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> mcscm.McScMCExample.toString : return $r15
mcscm.McScMCExample.toString : return $r15 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSMExecution.getFSMPath : $r1 = r0.<dynoptic.model.fifosys.cfsm.CFSMExecution: java.util.List fsmPath>
dynoptic.model.fifosys.cfsm.CFSMExecution.getFSMPath : $r1 = r0.<dynoptic.model.fifosys.cfsm.CFSMExecution: java.util.List fsmPath> >>>>>>>> dynoptic.model.fifosys.cfsm.CFSMExecution.getFSMPath : return $r1
