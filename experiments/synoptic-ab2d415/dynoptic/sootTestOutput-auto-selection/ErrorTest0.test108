dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet >>>>>>>> dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>()
dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> dynoptic.util.Util.newSet : return $r0
dynoptic.util.Util.newSet : return $r0 >>>>>>>> dynoptic.util.Util.newList : $r0 = new java.util.ArrayList
dynoptic.util.Util.newList : $r0 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>()
dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>() >>>>>>>> dynoptic.util.Util.newList : return $r0
dynoptic.util.Util.newList : return $r0 >>>>>>>> dynoptic.util.Util.newList : $r1 = new java.util.ArrayList
dynoptic.util.Util.newList : $r1 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0)
dynoptic.util.Util.newList : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0) >>>>>>>> dynoptic.util.Util.newList : return $r1
dynoptic.util.Util.newList : return $r1 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.equals : $z0 = specialinvoke r0.<dynoptic.model.fifosys.FifoSys: boolean equals(java.lang.Object)>(r1)
dynoptic.model.fifosys.cfsm.CFSM.equals : $z0 = specialinvoke r0.<dynoptic.model.fifosys.FifoSys: boolean equals(java.lang.Object)>(r1) >>>>>>>> dynoptic.model.fifosys.FifoSys.equals : if r1 != null
dynoptic.model.fifosys.FifoSys.equals : if r1 != null >>>>>>>> dynoptic.model.fifosys.FifoSys.equals : if r0 != r1
dynoptic.model.fifosys.FifoSys.equals : if r0 != r1 >>>>>>>> dynoptic.model.fifosys.FifoSys.equals : $z0 = r1 instanceof dynoptic.model.fifosys.FifoSys
dynoptic.model.fifosys.FifoSys.equals : $z0 = r1 instanceof dynoptic.model.fifosys.FifoSys >>>>>>>> dynoptic.model.fifosys.FifoSys.equals : if $z0 != 0
dynoptic.model.fifosys.FifoSys.equals : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.FifoSys.equals : return 0
dynoptic.model.fifosys.FifoSys.equals : return 0 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.equals : if $z0 != 0
dynoptic.model.fifosys.cfsm.CFSM.equals : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.equals : return 0
dynoptic.model.fifosys.cfsm.CFSM.equals : return 0 >>>>>>>> dynoptic.model.fifosys.FifoSys.getChannelIds : $r1 = r0.<dynoptic.model.fifosys.FifoSys: java.util.List channelIds>
dynoptic.model.fifosys.FifoSys.getChannelIds : $r1 = r0.<dynoptic.model.fifosys.FifoSys: java.util.List channelIds> >>>>>>>> dynoptic.model.fifosys.FifoSys.getChannelIds : return $r1
dynoptic.model.fifosys.FifoSys.getChannelIds : return $r1 >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : $r2 = new java.io.File
dynoptic.model.export.GraphExporter.exportCFSM : $r2 = new java.io.File >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(r0)
dynoptic.model.export.GraphExporter.exportCFSM : specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(r0) >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : r3 = $r2
dynoptic.model.export.GraphExporter.exportCFSM : r3 = $r2 >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : $r6 = <dynoptic.model.export.GraphExporter: java.util.logging.Logger logger>
dynoptic.model.export.GraphExporter.exportCFSM : $r6 = <dynoptic.model.export.GraphExporter: java.util.logging.Logger logger> >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : $r7 = new java.lang.StringBuilder
dynoptic.model.export.GraphExporter.exportCFSM : $r7 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.export.GraphExporter.exportCFSM : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exporting CFSM to: ")
dynoptic.model.export.GraphExporter.exportCFSM : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exporting CFSM to: ") >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0)
dynoptic.model.export.GraphExporter.exportCFSM : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0) >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.export.GraphExporter.exportCFSM : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : virtualinvoke $r6.<java.util.logging.Logger: void info(java.lang.String)>($r10)
dynoptic.model.export.GraphExporter.exportCFSM : virtualinvoke $r6.<java.util.logging.Logger: void info(java.lang.String)>($r10) >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : $r11 = new java.io.PrintWriter
dynoptic.model.export.GraphExporter.exportCFSM : $r11 = new java.io.PrintWriter >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : specialinvoke $r11.<java.io.PrintWriter: void <init>(java.io.File)>(r3)
dynoptic.model.export.GraphExporter.exportCFSM : specialinvoke $r11.<java.io.PrintWriter: void <init>(java.io.File)>(r3) >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : r4 = $r11
dynoptic.model.export.GraphExporter.exportCFSM : r4 = $r11 >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : goto [?= staticinvoke <dynoptic.model.export.GraphExporter: void exportCFSM(java.io.Writer,dynoptic.model.fifosys.cfsm.CFSM)>(r4, r1)]
dynoptic.model.export.GraphExporter.exportCFSM : goto [?= staticinvoke <dynoptic.model.export.GraphExporter: void exportCFSM(java.io.Writer,dynoptic.model.fifosys.cfsm.CFSM)>(r4, r1)] >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : staticinvoke <dynoptic.model.export.GraphExporter: void exportCFSM(java.io.Writer,dynoptic.model.fifosys.cfsm.CFSM)>(r4, r1)
dynoptic.model.export.GraphExporter.exportCFSM : staticinvoke <dynoptic.model.export.GraphExporter: void exportCFSM(java.io.Writer,dynoptic.model.fifosys.cfsm.CFSM)>(r4, r1) >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : $r5 = virtualinvoke r1.<dynoptic.model.fifosys.cfsm.CFSM: java.util.List getFSMs()>()
dynoptic.model.export.GraphExporter.exportCFSM : $r5 = virtualinvoke r1.<dynoptic.model.fifosys.cfsm.CFSM: java.util.List getFSMs()>() >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.getFSMs : $r1 = r0.<dynoptic.model.fifosys.cfsm.CFSM: java.util.List fsms>
dynoptic.model.fifosys.cfsm.CFSM.getFSMs : $r1 = r0.<dynoptic.model.fifosys.cfsm.CFSM: java.util.List fsms> >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.getFSMs : return $r1
dynoptic.model.fifosys.cfsm.CFSM.getFSMs : return $r1 >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>()
dynoptic.model.export.GraphExporter.exportCFSM : r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.export.GraphExporter.exportCFSM : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : if $z0 == 0
dynoptic.model.export.GraphExporter.exportCFSM : if $z0 == 0 >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
dynoptic.model.export.GraphExporter.exportCFSM : $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : r3 = (dynoptic.model.fifosys.cfsm.fsm.FSM) $r6
dynoptic.model.export.GraphExporter.exportCFSM : r3 = (dynoptic.model.fifosys.cfsm.fsm.FSM) $r6 >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : $r4 = new java.lang.StringBuilder
dynoptic.model.export.GraphExporter.exportCFSM : $r4 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.export.GraphExporter.exportCFSM : specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pid ")
dynoptic.model.export.GraphExporter.exportCFSM : $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pid ") >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : $i0 = virtualinvoke r3.<dynoptic.model.fifosys.cfsm.fsm.FSM: int getPid()>()
