dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet >>>>>>>> dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>()
dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> dynoptic.util.Util.newSet : return $r0
dynoptic.util.Util.newSet : return $r0 >>>>>>>> dynoptic.util.Util.newList : $r0 = new java.util.ArrayList
dynoptic.util.Util.newList : $r0 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>()
dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>() >>>>>>>> dynoptic.util.Util.newList : return $r0
dynoptic.util.Util.newList : return $r0 >>>>>>>> dynoptic.util.Util.newList : $r1 = new java.util.ArrayList
dynoptic.util.Util.newList : $r1 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0)
dynoptic.util.Util.newList : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0) >>>>>>>> dynoptic.util.Util.newList : return $r1
dynoptic.util.Util.newList : return $r1 >>>>>>>> dynoptic.model.fifosys.FifoSys.getNumProcesses : $i0 = r0.<dynoptic.model.fifosys.FifoSys: int numProcesses>
dynoptic.model.fifosys.FifoSys.getNumProcesses : $i0 = r0.<dynoptic.model.fifosys.FifoSys: int numProcesses> >>>>>>>> dynoptic.model.fifosys.FifoSys.getNumProcesses : return $i0
dynoptic.model.fifosys.FifoSys.getNumProcesses : return $i0 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.toString : r1 = "CFSM: \n"
dynoptic.model.fifosys.cfsm.CFSM.toString : r1 = "CFSM: \n" >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.toString : $r4 = r0.<dynoptic.model.fifosys.cfsm.CFSM: java.util.List fsms>
dynoptic.model.fifosys.cfsm.CFSM.toString : $r4 = r0.<dynoptic.model.fifosys.cfsm.CFSM: java.util.List fsms> >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.toString : r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>()
dynoptic.model.fifosys.cfsm.CFSM.toString : r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.toString : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.cfsm.CFSM.toString : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.toString : if $z0 == 0
dynoptic.model.fifosys.cfsm.CFSM.toString : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.toString : $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
dynoptic.model.fifosys.cfsm.CFSM.toString : $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.toString : r3 = (dynoptic.model.fifosys.cfsm.fsm.FSM) $r5
dynoptic.model.fifosys.cfsm.CFSM.toString : r3 = (dynoptic.model.fifosys.cfsm.fsm.FSM) $r5 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.toString : $r6 = new java.lang.StringBuilder
dynoptic.model.fifosys.cfsm.CFSM.toString : $r6 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.toString : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.fifosys.cfsm.CFSM.toString : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.toString : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
dynoptic.model.fifosys.cfsm.CFSM.toString : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.toString : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t")
dynoptic.model.fifosys.cfsm.CFSM.toString : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t") >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.toString : $r9 = virtualinvoke r3.<dynoptic.model.fifosys.cfsm.fsm.FSM: java.lang.String toString()>()
