dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $r1 = <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: java.util.Map chCache> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r0)
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r0) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : if $z0 == 0
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $r3 = <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: java.util.Map chCache>
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $r3 = <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: java.util.Map chCache> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : r2 = (dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState) $r4
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : r2 = (dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState) $r4 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : goto [?= return r2]
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : goto [?= return r2] >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : return r2
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : return r2 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : $r4 = r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List channelStates>
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : $r4 = r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List channelStates> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : $i0 = interfaceinvoke $r4.<java.util.List: int size()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : $i0 = interfaceinvoke $r4.<java.util.List: int size()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : r1 = staticinvoke <dynoptic.util.Util: java.util.List newList(int)>($i0)
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : r1 = staticinvoke <dynoptic.util.Util: java.util.List newList(int)>($i0) >>>>>>>> dynoptic.util.Util.newList : $r0 = new java.util.ArrayList
dynoptic.util.Util.newList : $r0 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(i0)
dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(i0) >>>>>>>> dynoptic.util.Util.newList : return $r0
dynoptic.util.Util.newList : return $r0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : $r5 = r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List channelStates>
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : $r5 = r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List channelStates> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : if $z0 == 0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : return r1
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : return r1 >>>>>>>> dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet
dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet >>>>>>>> dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>()
dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> dynoptic.util.Util.newSet : return $r0
dynoptic.util.Util.newSet : return $r0 >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>()
dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getAcceptStates : r1 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.model.fifosys.gfsm.GFSM.getAcceptStates : r1 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getAcceptStates : $r4 = r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.Set states>
dynoptic.model.fifosys.gfsm.GFSM.getAcceptStates : $r4 = r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.Set states> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getAcceptStates : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.fifosys.gfsm.GFSM.getAcceptStates : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getAcceptStates : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.gfsm.GFSM.getAcceptStates : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getAcceptStates : if $z0 == 0
dynoptic.model.fifosys.gfsm.GFSM.getAcceptStates : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getAcceptStates : return r1
dynoptic.model.fifosys.gfsm.GFSM.getAcceptStates : return r1 >>>>>>>> dynoptic.util.Util.newList : $r1 = new java.util.ArrayList
dynoptic.util.Util.newList : $r1 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0)
dynoptic.util.Util.newList : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0) >>>>>>>> dynoptic.util.Util.newList : return $r1
dynoptic.util.Util.newList : return $r1 >>>>>>>> mcscm.McScMCExample.getEvents : $r1 = r0.<mcscm.McScMCExample: java.util.List events>
mcscm.McScMCExample.getEvents : $r1 = r0.<mcscm.McScMCExample: java.util.List events> >>>>>>>> mcscm.McScMCExample.getEvents : return $r1
mcscm.McScMCExample.getEvents : return $r1 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : r2 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : r2 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : $r15 = virtualinvoke r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.Set getInitStates()>()
dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : $r15 = virtualinvoke r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.Set getInitStates()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getInitStates : r1 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.model.fifosys.gfsm.GFSM.getInitStates : r1 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getInitStates : $r4 = r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.Set states>
dynoptic.model.fifosys.gfsm.GFSM.getInitStates : $r4 = r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.Set states> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getInitStates : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.fifosys.gfsm.GFSM.getInitStates : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getInitStates : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.gfsm.GFSM.getInitStates : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getInitStates : if $z0 == 0
dynoptic.model.fifosys.gfsm.GFSM.getInitStates : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getInitStates : return r1
dynoptic.model.fifosys.gfsm.GFSM.getInitStates : return r1 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : r3 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : r3 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : if $z0 == 0
dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : r17 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : r17 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : n0 = null
dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : n0 = null >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : r6 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : r6 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : $r18 = virtualinvoke r1.<mcscm.McScMCExample: java.util.List getEvents()>()
dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : $r18 = virtualinvoke r1.<mcscm.McScMCExample: java.util.List getEvents()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : r7 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>()
dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : r7 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : $z2 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : $z2 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : if $z2 == 0
dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : if $z2 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : return r2
dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : return r2 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getAcceptStatesForPid : r1 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.model.fifosys.gfsm.GFSM.getAcceptStatesForPid : r1 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getAcceptStatesForPid : $r4 = r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.Set states>
dynoptic.model.fifosys.gfsm.GFSM.getAcceptStatesForPid : $r4 = r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.Set states> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getAcceptStatesForPid : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.fifosys.gfsm.GFSM.getAcceptStatesForPid : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getAcceptStatesForPid : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.gfsm.GFSM.getAcceptStatesForPid : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getAcceptStatesForPid : if $z0 == 0
dynoptic.model.fifosys.gfsm.GFSM.getAcceptStatesForPid : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getAcceptStatesForPid : return r1
dynoptic.model.fifosys.gfsm.GFSM.getAcceptStatesForPid : return r1 >>>>>>>> dynoptic.util.Util.newMap : $r0 = new java.util.LinkedHashMap
dynoptic.util.Util.newMap : $r0 = new java.util.LinkedHashMap >>>>>>>> dynoptic.util.Util.newMap : specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>()
dynoptic.util.Util.newMap : specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>() >>>>>>>> dynoptic.util.Util.newMap : return $r0
dynoptic.util.Util.newMap : return $r0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getTerminalObs : r1 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.model.fifosys.gfsm.GFSMState.getTerminalObs : r1 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getTerminalObs : $r4 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates>
dynoptic.model.fifosys.gfsm.GFSMState.getTerminalObs : $r4 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getTerminalObs : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.fifosys.gfsm.GFSMState.getTerminalObs : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getTerminalObs : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.gfsm.GFSMState.getTerminalObs : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getTerminalObs : if $z0 == 0
dynoptic.model.fifosys.gfsm.GFSMState.getTerminalObs : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getTerminalObs : return r1
dynoptic.model.fifosys.gfsm.GFSMState.getTerminalObs : return r1 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getTerminalObsForPid : r1 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.model.fifosys.gfsm.GFSMState.getTerminalObsForPid : r1 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getTerminalObsForPid : $r4 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates>
dynoptic.model.fifosys.gfsm.GFSMState.getTerminalObsForPid : $r4 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getTerminalObsForPid : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.fifosys.gfsm.GFSMState.getTerminalObsForPid : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getTerminalObsForPid : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.gfsm.GFSMState.getTerminalObsForPid : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getTerminalObsForPid : if $z0 == 0
dynoptic.model.fifosys.gfsm.GFSMState.getTerminalObsForPid : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getTerminalObsForPid : return r1
dynoptic.model.fifosys.gfsm.GFSMState.getTerminalObsForPid : return r1 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $r1 = new java.lang.StringBuilder
dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $r1 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Part-")
dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Part-") >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $r3 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates>
dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $r3 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $i0 = interfaceinvoke $r3.<java.util.Set: int size()>()
dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $i0 = interfaceinvoke $r3.<java.util.Set: int size()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)
dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-")
dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-") >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $i1 = virtualinvoke r0.<java.lang.Object: int hashCode()>()
dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $i1 = virtualinvoke r0.<java.lang.Object: int hashCode()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)
dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : return $r7
dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : return $r7 >>>>>>>> dynoptic.util.Util.newSet : $r1 = new java.util.LinkedHashSet
dynoptic.util.Util.newSet : $r1 = new java.util.LinkedHashSet >>>>>>>> dynoptic.util.Util.newSet : specialinvoke $r1.<java.util.LinkedHashSet: void <init>(java.util.Collection)>(r0)
dynoptic.util.Util.newSet : specialinvoke $r1.<java.util.LinkedHashSet: void <init>(java.util.Collection)>(r0) >>>>>>>> dynoptic.util.Util.newSet : return $r1
dynoptic.util.Util.newSet : return $r1 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.addAllObs : r2 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.fifosys.gfsm.GFSMState.addAllObs : r2 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.addAllObs : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.gfsm.GFSMState.addAllObs : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.addAllObs : if $z0 == 0
dynoptic.model.fifosys.gfsm.GFSMState.addAllObs : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refineWithRandNonRelevantObsAssignment : $z0 = <dynoptic.model.fifosys.gfsm.GFSM: boolean $assertionsDisabled>
dynoptic.model.fifosys.gfsm.GFSM.refineWithRandNonRelevantObsAssignment : $z0 = <dynoptic.model.fifosys.gfsm.GFSM: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refineWithRandNonRelevantObsAssignment : if $z0 != 0
dynoptic.model.fifosys.gfsm.GFSM.refineWithRandNonRelevantObsAssignment : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refineWithRandNonRelevantObsAssignment : $z1 = <dynoptic.model.fifosys.gfsm.GFSM: boolean $assertionsDisabled>
dynoptic.model.fifosys.gfsm.GFSM.refineWithRandNonRelevantObsAssignment : $z1 = <dynoptic.model.fifosys.gfsm.GFSM: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refineWithRandNonRelevantObsAssignment : if $z1 != 0
dynoptic.model.fifosys.gfsm.GFSM.refineWithRandNonRelevantObsAssignment : if $z1 != 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refineWithRandNonRelevantObsAssignment : $r9 = new java.util.Random
dynoptic.model.fifosys.gfsm.GFSM.refineWithRandNonRelevantObsAssignment : $r9 = new java.util.Random >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refineWithRandNonRelevantObsAssignment : specialinvoke $r9.<java.util.Random: void <init>()>()
dynoptic.model.fifosys.gfsm.GFSM.refineWithRandNonRelevantObsAssignment : specialinvoke $r9.<java.util.Random: void <init>()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refineWithRandNonRelevantObsAssignment : r4 = $r9
dynoptic.model.fifosys.gfsm.GFSM.refineWithRandNonRelevantObsAssignment : r4 = $r9 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refineWithRandNonRelevantObsAssignment : $r10 = virtualinvoke r1.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set getObservedStates()>()
dynoptic.model.fifosys.gfsm.GFSM.refineWithRandNonRelevantObsAssignment : $r10 = virtualinvoke r1.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set getObservedStates()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getObservedStates : $r1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates>
dynoptic.model.fifosys.gfsm.GFSMState.getObservedStates : $r1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getObservedStates : return $r1
dynoptic.model.fifosys.gfsm.GFSMState.getObservedStates : return $r1 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refineWithRandNonRelevantObsAssignment : r5 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.fifosys.gfsm.GFSM.refineWithRandNonRelevantObsAssignment : r5 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refineWithRandNonRelevantObsAssignment : $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.gfsm.GFSM.refineWithRandNonRelevantObsAssignment : $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refineWithRandNonRelevantObsAssignment : if $z2 == 0
dynoptic.model.fifosys.gfsm.GFSM.refineWithRandNonRelevantObsAssignment : if $z2 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refineWithRandNonRelevantObsAssignment : specialinvoke r0.<dynoptic.model.fifosys.gfsm.GFSM: void refine(dynoptic.model.fifosys.gfsm.GFSMState,java.util.Set)>(r1, r3)
dynoptic.model.fifosys.gfsm.GFSM.refineWithRandNonRelevantObsAssignment : specialinvoke r0.<dynoptic.model.fifosys.gfsm.GFSM: void refine(dynoptic.model.fifosys.gfsm.GFSMState,java.util.Set)>(r1, r3) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : $z0 = <dynoptic.model.fifosys.gfsm.GFSM: boolean $assertionsDisabled>
dynoptic.model.fifosys.gfsm.GFSM.refine : $z0 = <dynoptic.model.fifosys.gfsm.GFSM: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : if $z0 != 0
dynoptic.model.fifosys.gfsm.GFSM.refine : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : $z2 = <dynoptic.model.fifosys.gfsm.GFSM: boolean $assertionsDisabled>
dynoptic.model.fifosys.gfsm.GFSM.refine : $z2 = <dynoptic.model.fifosys.gfsm.GFSM: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : if $z2 != 0
dynoptic.model.fifosys.gfsm.GFSM.refine : if $z2 != 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : r3 = null
dynoptic.model.fifosys.gfsm.GFSM.refine : r3 = null >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : $z3 = <dynoptic.main.DynopticMain: boolean assertsOn>
dynoptic.model.fifosys.gfsm.GFSM.refine : $z3 = <dynoptic.main.DynopticMain: boolean assertsOn> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : if $z3 == 0
dynoptic.model.fifosys.gfsm.GFSM.refine : if $z3 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : virtualinvoke r1.<dynoptic.model.fifosys.gfsm.GFSMState: void removeAllObs(java.util.Set)>(r2)
dynoptic.model.fifosys.gfsm.GFSM.refine : virtualinvoke r1.<dynoptic.model.fifosys.gfsm.GFSMState: void removeAllObs(java.util.Set)>(r2) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.removeAllObs : $z0 = <dynoptic.model.fifosys.gfsm.GFSMState: boolean $assertionsDisabled>
dynoptic.model.fifosys.gfsm.GFSMState.removeAllObs : $z0 = <dynoptic.model.fifosys.gfsm.GFSMState: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.removeAllObs : if $z0 != 0
dynoptic.model.fifosys.gfsm.GFSMState.removeAllObs : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.removeAllObs : r2 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.fifosys.gfsm.GFSMState.removeAllObs : r2 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.removeAllObs : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.gfsm.GFSMState.removeAllObs : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.removeAllObs : if $z1 == 0
dynoptic.model.fifosys.gfsm.GFSMState.removeAllObs : if $z1 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : $r9 = r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.Set states>
dynoptic.model.fifosys.gfsm.GFSM.refine : $r9 = r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.Set states> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : $r10 = new dynoptic.model.fifosys.gfsm.GFSMState
dynoptic.model.fifosys.gfsm.GFSM.refine : $r10 = new dynoptic.model.fifosys.gfsm.GFSMState >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : $i1 = r0.<dynoptic.model.fifosys.gfsm.GFSM: int numProcesses>
dynoptic.model.fifosys.gfsm.GFSM.refine : $i1 = r0.<dynoptic.model.fifosys.gfsm.GFSM: int numProcesses> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : specialinvoke $r10.<dynoptic.model.fifosys.gfsm.GFSMState: void <init>(int,java.util.Set)>($i1, r2)
dynoptic.model.fifosys.gfsm.GFSM.refine : specialinvoke $r10.<dynoptic.model.fifosys.gfsm.GFSMState: void <init>(int,java.util.Set)>($i1, r2) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : interfaceinvoke $r9.<java.util.Set: boolean add(java.lang.Object)>($r10)
dynoptic.model.fifosys.gfsm.GFSM.refine : interfaceinvoke $r9.<java.util.Set: boolean add(java.lang.Object)>($r10) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : virtualinvoke r1.<dynoptic.model.fifosys.gfsm.GFSMState: void recreateCachedTransitions()>()
dynoptic.model.fifosys.gfsm.GFSM.refine : virtualinvoke r1.<dynoptic.model.fifosys.gfsm.GFSMState: void recreateCachedTransitions()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : $r3 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Map transitions>
dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : $r3 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Map transitions> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : interfaceinvoke $r3.<java.util.Map: void clear()>()
dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : interfaceinvoke $r3.<java.util.Map: void clear()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : $r4 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates>
dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : $r4 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : if $z0 == 0
dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : $r11 = r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.Set states>
dynoptic.model.fifosys.gfsm.GFSM.refine : $r11 = r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.Set states> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : r4 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.fifosys.gfsm.GFSM.refine : r4 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : $z5 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.gfsm.GFSM.refine : $z5 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : if $z5 == 0
dynoptic.model.fifosys.gfsm.GFSM.refine : if $z5 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
dynoptic.model.fifosys.gfsm.GFSM.refine : $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : r5 = (dynoptic.model.fifosys.gfsm.GFSMState) $r12
dynoptic.model.fifosys.gfsm.GFSM.refine : r5 = (dynoptic.model.fifosys.gfsm.GFSMState) $r12 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : if r5 == r1
dynoptic.model.fifosys.gfsm.GFSM.refine : if r5 == r1 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : $r13 = virtualinvoke r5.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set getNextStates()>()
dynoptic.model.fifosys.gfsm.GFSM.refine : $r13 = virtualinvoke r5.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set getNextStates()>() >>>>>>>> dynoptic.model.AbsFSMState.getNextStates : r1 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.model.AbsFSMState.getNextStates : r1 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.model.AbsFSMState.getNextStates : $r4 = virtualinvoke r0.<dynoptic.model.AbsFSMState: java.util.Set getTransitioningEvents()>()
dynoptic.model.AbsFSMState.getNextStates : $r4 = virtualinvoke r0.<dynoptic.model.AbsFSMState: java.util.Set getTransitioningEvents()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : $r1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Map transitions>
dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : $r1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Map transitions> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : $i0 = interfaceinvoke $r1.<java.util.Map: int size()>()
dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : $i0 = interfaceinvoke $r1.<java.util.Map: int size()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : if $i0 != 0
dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : if $i0 != 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : virtualinvoke r0.<dynoptic.model.fifosys.gfsm.GFSMState: void recreateCachedTransitions()>()
dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : virtualinvoke r0.<dynoptic.model.fifosys.gfsm.GFSMState: void recreateCachedTransitions()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : $r2 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Map transitions>
dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : $r2 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Map transitions> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>()
dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : return $r3
dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : return $r3 >>>>>>>> dynoptic.model.AbsFSMState.getNextStates : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.AbsFSMState.getNextStates : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.AbsFSMState.getNextStates : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.AbsFSMState.getNextStates : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.AbsFSMState.getNextStates : if $z0 == 0
dynoptic.model.AbsFSMState.getNextStates : if $z0 == 0 >>>>>>>> dynoptic.model.AbsFSMState.getNextStates : return r1
dynoptic.model.AbsFSMState.getNextStates : return r1 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : $z6 = interfaceinvoke $r13.<java.util.Set: boolean contains(java.lang.Object)>(r1)
dynoptic.model.fifosys.gfsm.GFSM.refine : $z6 = interfaceinvoke $r13.<java.util.Set: boolean contains(java.lang.Object)>(r1) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : if $z6 == 0
dynoptic.model.fifosys.gfsm.GFSM.refine : if $z6 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : goto [?= $z5 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
dynoptic.model.fifosys.gfsm.GFSM.refine : goto [?= $z5 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : $z7 = <dynoptic.main.DynopticMain: boolean assertsOn>
dynoptic.model.fifosys.gfsm.GFSM.refine : $z7 = <dynoptic.main.DynopticMain: boolean assertsOn> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : if $z7 == 0
