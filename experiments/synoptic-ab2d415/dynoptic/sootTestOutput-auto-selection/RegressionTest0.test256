dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet >>>>>>>> dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>()
dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> dynoptic.util.Util.newSet : return $r0
dynoptic.util.Util.newSet : return $r0 >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : $r4 = r0.<dynoptic.model.AbsFSM: dynoptic.model.alphabet.FSMAlphabet alphabet>
dynoptic.model.AbsFSM.recomputeAlphabet : $r4 = r0.<dynoptic.model.AbsFSM: dynoptic.model.alphabet.FSMAlphabet alphabet> >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : virtualinvoke $r4.<dynoptic.model.alphabet.FSMAlphabet: void clear()>()
dynoptic.model.AbsFSM.recomputeAlphabet : virtualinvoke $r4.<dynoptic.model.alphabet.FSMAlphabet: void clear()>() >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.clear : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events>
dynoptic.model.alphabet.FSMAlphabet.clear : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events> >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.clear : interfaceinvoke $r1.<java.util.Set: void clear()>()
dynoptic.model.alphabet.FSMAlphabet.clear : interfaceinvoke $r1.<java.util.Set: void clear()>() >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : $r5 = r0.<dynoptic.model.AbsFSM: java.util.Set states>
dynoptic.model.AbsFSM.recomputeAlphabet : $r5 = r0.<dynoptic.model.AbsFSM: java.util.Set states> >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : r1 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.AbsFSM.recomputeAlphabet : r1 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.AbsFSM.recomputeAlphabet : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : if $z0 == 0
dynoptic.model.AbsFSM.recomputeAlphabet : if $z0 == 0 >>>>>>>> dynoptic.model.AbsFSM.getAcceptStates : $r1 = r0.<dynoptic.model.AbsFSM: java.util.Set acceptStates>
dynoptic.model.AbsFSM.getAcceptStates : $r1 = r0.<dynoptic.model.AbsFSM: java.util.Set acceptStates> >>>>>>>> dynoptic.model.AbsFSM.getAcceptStates : return $r1
dynoptic.model.AbsFSM.getAcceptStates : return $r1 >>>>>>>> dynoptic.model.AbsFSM.getAlphabet : $r1 = r0.<dynoptic.model.AbsFSM: dynoptic.model.alphabet.FSMAlphabet alphabet>
dynoptic.model.AbsFSM.getAlphabet : $r1 = r0.<dynoptic.model.AbsFSM: dynoptic.model.alphabet.FSMAlphabet alphabet> >>>>>>>> dynoptic.model.AbsFSM.getAlphabet : return $r1
dynoptic.model.AbsFSM.getAlphabet : return $r1 >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : r1 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : r1 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : $r4 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events>
dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : $r4 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events> >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : if $z0 == 0
dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : if $z0 == 0 >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : return r1
dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : return r1 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSMState.CFSMStatesFromFSMListLists : r1 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.model.fifosys.cfsm.CFSMState.CFSMStatesFromFSMListLists : r1 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.model.fifosys.cfsm.CFSMState.CFSMStatesFromFSMListLists : r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>()
dynoptic.model.fifosys.cfsm.CFSMState.CFSMStatesFromFSMListLists : r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.cfsm.CFSMState.CFSMStatesFromFSMListLists : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.cfsm.CFSMState.CFSMStatesFromFSMListLists : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.cfsm.CFSMState.CFSMStatesFromFSMListLists : if $z0 == 0
dynoptic.model.fifosys.cfsm.CFSMState.CFSMStatesFromFSMListLists : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSMState.CFSMStatesFromFSMListLists : $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
dynoptic.model.fifosys.cfsm.CFSMState.CFSMStatesFromFSMListLists : $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> dynoptic.model.fifosys.cfsm.CFSMState.CFSMStatesFromFSMListLists : r3 = (java.util.List) $r5
dynoptic.model.fifosys.cfsm.CFSMState.CFSMStatesFromFSMListLists : r3 = (java.util.List) $r5 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSMState.CFSMStatesFromFSMListLists : $r4 = new dynoptic.model.fifosys.cfsm.CFSMState
dynoptic.model.fifosys.cfsm.CFSMState.CFSMStatesFromFSMListLists : $r4 = new dynoptic.model.fifosys.cfsm.CFSMState >>>>>>>> dynoptic.model.fifosys.cfsm.CFSMState.CFSMStatesFromFSMListLists : specialinvoke $r4.<dynoptic.model.fifosys.cfsm.CFSMState: void <init>(java.util.List)>(r3)
dynoptic.model.fifosys.cfsm.CFSMState.CFSMStatesFromFSMListLists : specialinvoke $r4.<dynoptic.model.fifosys.cfsm.CFSMState: void <init>(java.util.List)>(r3) >>>>>>>> dynoptic.model.fifosys.cfsm.CFSMState.CFSMStatesFromFSMListLists : interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>($r4)
dynoptic.model.fifosys.cfsm.CFSMState.CFSMStatesFromFSMListLists : interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>($r4) >>>>>>>> dynoptic.model.fifosys.cfsm.CFSMState.CFSMStatesFromFSMListLists : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
dynoptic.model.fifosys.cfsm.CFSMState.CFSMStatesFromFSMListLists : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> dynoptic.model.fifosys.cfsm.CFSMState.CFSMStatesFromFSMListLists : return r1
dynoptic.model.fifosys.cfsm.CFSMState.CFSMStatesFromFSMListLists : return r1 >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.removeAll : $r2 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events>
dynoptic.model.alphabet.FSMAlphabet.removeAll : $r2 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events> >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.removeAll : $z0 = interfaceinvoke $r2.<java.util.Set: boolean removeAll(java.util.Collection)>(r1)
dynoptic.model.alphabet.FSMAlphabet.removeAll : $z0 = interfaceinvoke $r2.<java.util.Set: boolean removeAll(java.util.Collection)>(r1) >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.removeAll : return $z0
