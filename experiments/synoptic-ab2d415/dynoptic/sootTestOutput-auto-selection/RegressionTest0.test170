dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $r1 = <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: java.util.Map chCache> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r0)
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r0) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : if $z0 == 0
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $r3 = <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: java.util.Map chCache>
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $r3 = <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: java.util.Map chCache> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : r2 = (dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState) $r4
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : r2 = (dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState) $r4 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : goto [?= return r2]
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : goto [?= return r2] >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : return r2
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : return r2 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : $r4 = r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List channelStates>
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : $r4 = r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List channelStates> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : $i0 = interfaceinvoke $r4.<java.util.List: int size()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : $i0 = interfaceinvoke $r4.<java.util.List: int size()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : r1 = staticinvoke <dynoptic.util.Util: java.util.List newList(int)>($i0)
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : r1 = staticinvoke <dynoptic.util.Util: java.util.List newList(int)>($i0) >>>>>>>> dynoptic.util.Util.newList : $r0 = new java.util.ArrayList
dynoptic.util.Util.newList : $r0 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(i0)
dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(i0) >>>>>>>> dynoptic.util.Util.newList : return $r0
dynoptic.util.Util.newList : return $r0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : $r5 = r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List channelStates>
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : $r5 = r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List channelStates> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : if $z0 == 0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : return r1
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.getChannelIds : return r1 >>>>>>>> dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet
dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet >>>>>>>> dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>()
dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> dynoptic.util.Util.newSet : return $r0
dynoptic.util.Util.newSet : return $r0 >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>()
dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getAcceptStates : r1 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.model.fifosys.gfsm.GFSM.getAcceptStates : r1 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getAcceptStates : $r4 = r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.Set states>
dynoptic.model.fifosys.gfsm.GFSM.getAcceptStates : $r4 = r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.Set states> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getAcceptStates : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.fifosys.gfsm.GFSM.getAcceptStates : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getAcceptStates : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.gfsm.GFSM.getAcceptStates : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getAcceptStates : if $z0 == 0
dynoptic.model.fifosys.gfsm.GFSM.getAcceptStates : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getAcceptStates : return r1
dynoptic.model.fifosys.gfsm.GFSM.getAcceptStates : return r1 >>>>>>>> dynoptic.util.Util.newList : $r1 = new java.util.ArrayList
dynoptic.util.Util.newList : $r1 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0)
dynoptic.util.Util.newList : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0) >>>>>>>> dynoptic.util.Util.newList : return $r1
dynoptic.util.Util.newList : return $r1 >>>>>>>> mcscm.McScMCExample.getEvents : $r1 = r0.<mcscm.McScMCExample: java.util.List events>
mcscm.McScMCExample.getEvents : $r1 = r0.<mcscm.McScMCExample: java.util.List events> >>>>>>>> mcscm.McScMCExample.getEvents : return $r1
mcscm.McScMCExample.getEvents : return $r1 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : r2 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : r2 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : $r15 = virtualinvoke r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.Set getInitStates()>()
dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : $r15 = virtualinvoke r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.Set getInitStates()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getInitStates : r1 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.model.fifosys.gfsm.GFSM.getInitStates : r1 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getInitStates : $r4 = r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.Set states>
dynoptic.model.fifosys.gfsm.GFSM.getInitStates : $r4 = r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.Set states> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getInitStates : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.fifosys.gfsm.GFSM.getInitStates : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getInitStates : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.gfsm.GFSM.getInitStates : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getInitStates : if $z0 == 0
dynoptic.model.fifosys.gfsm.GFSM.getInitStates : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getInitStates : return r1
dynoptic.model.fifosys.gfsm.GFSM.getInitStates : return r1 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : r3 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : r3 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : if $z0 == 0
dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : r17 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : r17 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : n0 = null
dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : n0 = null >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : r6 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : r6 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : $r18 = virtualinvoke r1.<mcscm.McScMCExample: java.util.List getEvents()>()
dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : $r18 = virtualinvoke r1.<mcscm.McScMCExample: java.util.List getEvents()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : r7 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>()
dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : r7 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : $z2 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : $z2 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : if $z2 == 0
dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : if $z2 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : return r2
dynoptic.model.fifosys.gfsm.GFSM.getCExamplePaths : return r2 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getAcceptStatesForPid : r1 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.model.fifosys.gfsm.GFSM.getAcceptStatesForPid : r1 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getAcceptStatesForPid : $r4 = r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.Set states>
dynoptic.model.fifosys.gfsm.GFSM.getAcceptStatesForPid : $r4 = r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.Set states> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getAcceptStatesForPid : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.fifosys.gfsm.GFSM.getAcceptStatesForPid : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getAcceptStatesForPid : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.gfsm.GFSM.getAcceptStatesForPid : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getAcceptStatesForPid : if $z0 == 0
dynoptic.model.fifosys.gfsm.GFSM.getAcceptStatesForPid : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.getAcceptStatesForPid : return r1
dynoptic.model.fifosys.gfsm.GFSM.getAcceptStatesForPid : return r1 >>>>>>>> dynoptic.model.export.GraphExporter.exportGFSM : $r2 = new java.io.File
dynoptic.model.export.GraphExporter.exportGFSM : $r2 = new java.io.File >>>>>>>> dynoptic.model.export.GraphExporter.exportGFSM : specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(r0)
dynoptic.model.export.GraphExporter.exportGFSM : specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(r0) >>>>>>>> dynoptic.model.export.GraphExporter.exportGFSM : r3 = $r2
dynoptic.model.export.GraphExporter.exportGFSM : r3 = $r2 >>>>>>>> dynoptic.model.export.GraphExporter.exportGFSM : $r6 = <dynoptic.model.export.GraphExporter: java.util.logging.Logger logger>
dynoptic.model.export.GraphExporter.exportGFSM : $r6 = <dynoptic.model.export.GraphExporter: java.util.logging.Logger logger> >>>>>>>> dynoptic.model.export.GraphExporter.exportGFSM : $r7 = new java.lang.StringBuilder
dynoptic.model.export.GraphExporter.exportGFSM : $r7 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.export.GraphExporter.exportGFSM : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.export.GraphExporter.exportGFSM : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.export.GraphExporter.exportGFSM : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exporting GFSM to: ")
dynoptic.model.export.GraphExporter.exportGFSM : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exporting GFSM to: ") >>>>>>>> dynoptic.model.export.GraphExporter.exportGFSM : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0)
dynoptic.model.export.GraphExporter.exportGFSM : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0) >>>>>>>> dynoptic.model.export.GraphExporter.exportGFSM : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.export.GraphExporter.exportGFSM : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.export.GraphExporter.exportGFSM : virtualinvoke $r6.<java.util.logging.Logger: void info(java.lang.String)>($r10)
dynoptic.model.export.GraphExporter.exportGFSM : virtualinvoke $r6.<java.util.logging.Logger: void info(java.lang.String)>($r10) >>>>>>>> dynoptic.model.export.GraphExporter.exportGFSM : $r11 = new java.io.PrintWriter
dynoptic.model.export.GraphExporter.exportGFSM : $r11 = new java.io.PrintWriter >>>>>>>> dynoptic.model.export.GraphExporter.exportGFSM : specialinvoke $r11.<java.io.PrintWriter: void <init>(java.io.File)>(r3)
dynoptic.model.export.GraphExporter.exportGFSM : specialinvoke $r11.<java.io.PrintWriter: void <init>(java.io.File)>(r3) >>>>>>>> dynoptic.model.export.GraphExporter.exportGFSM : r4 = $r11
dynoptic.model.export.GraphExporter.exportGFSM : r4 = $r11 >>>>>>>> dynoptic.model.export.GraphExporter.exportGFSM : goto [?= $r19 = new java.lang.StringBuilder]
dynoptic.model.export.GraphExporter.exportGFSM : goto [?= $r19 = new java.lang.StringBuilder] >>>>>>>> dynoptic.model.export.GraphExporter.exportGFSM : $r19 = new java.lang.StringBuilder
dynoptic.model.export.GraphExporter.exportGFSM : $r19 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.export.GraphExporter.exportGFSM : specialinvoke $r19.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.export.GraphExporter.exportGFSM : specialinvoke $r19.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.export.GraphExporter.exportGFSM : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("gfsm [pnum=")
dynoptic.model.export.GraphExporter.exportGFSM : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("gfsm [pnum=") >>>>>>>> dynoptic.model.export.GraphExporter.exportGFSM : $i0 = virtualinvoke r1.<dynoptic.model.fifosys.gfsm.GFSM: int getNumProcesses()>()
dynoptic.model.export.GraphExporter.exportGFSM : $i0 = virtualinvoke r1.<dynoptic.model.fifosys.gfsm.GFSM: int getNumProcesses()>() >>>>>>>> dynoptic.model.fifosys.FifoSys.getNumProcesses : $i0 = r0.<dynoptic.model.fifosys.FifoSys: int numProcesses>
dynoptic.model.fifosys.FifoSys.getNumProcesses : $i0 = r0.<dynoptic.model.fifosys.FifoSys: int numProcesses> >>>>>>>> dynoptic.model.fifosys.FifoSys.getNumProcesses : return $i0
dynoptic.model.fifosys.FifoSys.getNumProcesses : return $i0 >>>>>>>> dynoptic.model.export.GraphExporter.exportGFSM : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)
dynoptic.model.export.GraphExporter.exportGFSM : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) >>>>>>>> dynoptic.model.export.GraphExporter.exportGFSM : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]")
dynoptic.model.export.GraphExporter.exportGFSM : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]") >>>>>>>> dynoptic.model.export.GraphExporter.exportGFSM : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.export.GraphExporter.exportGFSM : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.export.GraphExporter.exportGFSM : staticinvoke <dynoptic.model.export.GraphExporter: void exportAbsFSM(java.io.Writer,dynoptic.model.AbsFSM,java.lang.String)>(r4, r1, $r23)
dynoptic.model.export.GraphExporter.exportGFSM : staticinvoke <dynoptic.model.export.GraphExporter: void exportAbsFSM(java.io.Writer,dynoptic.model.AbsFSM,java.lang.String)>(r4, r1, $r23) >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : $r3 = new dynoptic.model.export.DotExportFormatter
dynoptic.model.export.GraphExporter.exportAbsFSM : $r3 = new dynoptic.model.export.DotExportFormatter >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : specialinvoke $r3.<dynoptic.model.export.DotExportFormatter: void <init>()>()
dynoptic.model.export.GraphExporter.exportAbsFSM : specialinvoke $r3.<dynoptic.model.export.DotExportFormatter: void <init>()>() >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : r4 = $r3
dynoptic.model.export.GraphExporter.exportAbsFSM : r4 = $r3 >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : $r16 = virtualinvoke r4.<dynoptic.model.export.GraphExportFormatter: java.lang.String beginGraphString()>()
dynoptic.model.export.GraphExporter.exportAbsFSM : $r16 = virtualinvoke r4.<dynoptic.model.export.GraphExportFormatter: java.lang.String beginGraphString()>() >>>>>>>> dynoptic.model.export.DotExportFormatter.beginGraphString : return "digraph {\n"
dynoptic.model.export.DotExportFormatter.beginGraphString : return "digraph {\n" >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>($r16)
dynoptic.model.export.GraphExporter.exportAbsFSM : virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>($r16) >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : r5 = staticinvoke <dynoptic.util.Util: java.util.Map newMap()>()
dynoptic.model.export.GraphExporter.exportAbsFSM : r5 = staticinvoke <dynoptic.util.Util: java.util.Map newMap()>() >>>>>>>> dynoptic.util.Util.newMap : $r0 = new java.util.LinkedHashMap
dynoptic.util.Util.newMap : $r0 = new java.util.LinkedHashMap >>>>>>>> dynoptic.util.Util.newMap : specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>()
dynoptic.util.Util.newMap : specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>() >>>>>>>> dynoptic.util.Util.newMap : return $r0
dynoptic.util.Util.newMap : return $r0 >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : i0 = 0
dynoptic.model.export.GraphExporter.exportAbsFSM : i0 = 0 >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : $r17 = virtualinvoke r1.<dynoptic.model.AbsFSM: java.util.Set getStates()>()
dynoptic.model.export.GraphExporter.exportAbsFSM : $r17 = virtualinvoke r1.<dynoptic.model.AbsFSM: java.util.Set getStates()>() >>>>>>>> dynoptic.model.AbsFSM.getStates : $r1 = r0.<dynoptic.model.AbsFSM: java.util.Set states>
dynoptic.model.AbsFSM.getStates : $r1 = r0.<dynoptic.model.AbsFSM: java.util.Set states> >>>>>>>> dynoptic.model.AbsFSM.getStates : return $r1
dynoptic.model.AbsFSM.getStates : return $r1 >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : r6 = staticinvoke <dynoptic.util.Util: java.util.Set newSet(java.util.Set)>($r17)
dynoptic.model.export.GraphExporter.exportAbsFSM : r6 = staticinvoke <dynoptic.util.Util: java.util.Set newSet(java.util.Set)>($r17) >>>>>>>> dynoptic.util.Util.newSet : $r1 = new java.util.LinkedHashSet
dynoptic.util.Util.newSet : $r1 = new java.util.LinkedHashSet >>>>>>>> dynoptic.util.Util.newSet : specialinvoke $r1.<java.util.LinkedHashSet: void <init>(java.util.Collection)>(r0)
dynoptic.util.Util.newSet : specialinvoke $r1.<java.util.LinkedHashSet: void <init>(java.util.Collection)>(r0) >>>>>>>> dynoptic.util.Util.newSet : return $r1
dynoptic.util.Util.newSet : return $r1 >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : r7 = interfaceinvoke r6.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.export.GraphExporter.exportAbsFSM : r7 = interfaceinvoke r6.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.export.GraphExporter.exportAbsFSM : $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : if $z0 == 0
dynoptic.model.export.GraphExporter.exportAbsFSM : if $z0 == 0 >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : $r22 = new java.lang.StringBuilder
dynoptic.model.export.GraphExporter.exportAbsFSM : $r22 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : specialinvoke $r22.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.export.GraphExporter.exportAbsFSM : specialinvoke $r22.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("title_node [label=\"")
dynoptic.model.export.GraphExporter.exportAbsFSM : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("title_node [label=\"") >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
dynoptic.model.export.GraphExporter.exportAbsFSM : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\",shape=box, style=rounded];")
dynoptic.model.export.GraphExporter.exportAbsFSM : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\",shape=box, style=rounded];") >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.export.GraphExporter.exportAbsFSM : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>($r26)
dynoptic.model.export.GraphExporter.exportAbsFSM : virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>($r26) >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : r27 = interfaceinvoke r6.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.export.GraphExporter.exportAbsFSM : r27 = interfaceinvoke r6.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : $z3 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.export.GraphExporter.exportAbsFSM : $z3 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : if $z3 == 0
dynoptic.model.export.GraphExporter.exportAbsFSM : if $z3 == 0 >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : $r37 = virtualinvoke r4.<dynoptic.model.export.GraphExportFormatter: java.lang.String endGraphString()>()
dynoptic.model.export.GraphExporter.exportAbsFSM : $r37 = virtualinvoke r4.<dynoptic.model.export.GraphExportFormatter: java.lang.String endGraphString()>() >>>>>>>> dynoptic.model.export.DotExportFormatter.endGraphString : return "} // digraph {\n"
dynoptic.model.export.DotExportFormatter.endGraphString : return "} // digraph {\n" >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>($r37)
dynoptic.model.export.GraphExporter.exportAbsFSM : virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>($r37) >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : goto [?= return]
dynoptic.model.export.GraphExporter.exportAbsFSM : goto [?= return] >>>>>>>> dynoptic.model.export.GraphExporter.exportGFSM : virtualinvoke r4.<java.io.PrintWriter: void close()>()
dynoptic.model.export.GraphExporter.exportGFSM : virtualinvoke r4.<java.io.PrintWriter: void close()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.toString : $r1 = new java.lang.StringBuilder
dynoptic.model.fifosys.gfsm.GFSM.toString : $r1 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.toString : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.fifosys.gfsm.GFSM.toString : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.toString : $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("GFSM[num-states=")
dynoptic.model.fifosys.gfsm.GFSM.toString : $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("GFSM[num-states=") >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.toString : $r6 = r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.Set states>
dynoptic.model.fifosys.gfsm.GFSM.toString : $r6 = r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.Set states> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.toString : $i0 = interfaceinvoke $r6.<java.util.Set: int size()>()
dynoptic.model.fifosys.gfsm.GFSM.toString : $i0 = interfaceinvoke $r6.<java.util.Set: int size()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.toString : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)
dynoptic.model.fifosys.gfsm.GFSM.toString : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.toString : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] : ")
dynoptic.model.fifosys.gfsm.GFSM.toString : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] : ") >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.toString : r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.fifosys.gfsm.GFSM.toString : r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.toString : $r9 = r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.Set states>
dynoptic.model.fifosys.gfsm.GFSM.toString : $r9 = r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.Set states> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.toString : r3 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.fifosys.gfsm.GFSM.toString : r3 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.toString : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.gfsm.GFSM.toString : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.toString : if $z0 == 0
dynoptic.model.fifosys.gfsm.GFSM.toString : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.toString : return r2
