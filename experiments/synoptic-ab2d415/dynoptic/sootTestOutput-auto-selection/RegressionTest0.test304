dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState : $r0 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.util.Map initialProcessStatesMap> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState : $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState : $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState : $z0 = interfaceinvoke $r0.<java.util.Map: boolean containsKey(java.lang.Object)>($r3)
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState : $z0 = interfaceinvoke $r0.<java.util.Map: boolean containsKey(java.lang.Object)>($r3) >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState : if $z0 == 0
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState : $r4 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.util.Map initialProcessStatesMap>
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState : $r4 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.util.Map initialProcessStatesMap> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState : $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState : $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState : $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5)
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState : $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5) >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState : $r7 = (dynoptic.model.fifosys.gfsm.observed.ObsFSMState) $r6
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState : $r7 = (dynoptic.model.fifosys.gfsm.observed.ObsFSMState) $r6 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState : return $r7
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState : return $r7 >>>>>>>> dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet
dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet >>>>>>>> dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>()
dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> dynoptic.util.Util.newSet : return $r0
dynoptic.util.Util.newSet : return $r0 >>>>>>>> dynoptic.util.Util.newList : $r0 = new java.util.ArrayList
dynoptic.util.Util.newList : $r0 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>()
dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>() >>>>>>>> dynoptic.util.Util.newList : return $r0
dynoptic.util.Util.newList : return $r0 >>>>>>>> dynoptic.util.Util.newList : $r1 = new java.util.ArrayList
dynoptic.util.Util.newList : $r1 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0)
dynoptic.util.Util.newList : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0) >>>>>>>> dynoptic.util.Util.newList : return $r1
dynoptic.util.Util.newList : return $r1 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.equals : if r1 != null
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.equals : if r1 != null >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.equals : if r0 != r1
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.equals : if r0 != r1 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.equals : $z0 = r1 instanceof dynoptic.model.fifosys.gfsm.observed.ObsFSMState
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.equals : $z0 = r1 instanceof dynoptic.model.fifosys.gfsm.observed.ObsFSMState >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.equals : if $z0 != 0
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.equals : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.equals : return 0
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.equals : return 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMPath.getStates : $r1 = r0.<dynoptic.model.fifosys.gfsm.GFSMPath: java.util.List states>
dynoptic.model.fifosys.gfsm.GFSMPath.getStates : $r1 = r0.<dynoptic.model.fifosys.gfsm.GFSMPath: java.util.List states> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMPath.getStates : return $r1
dynoptic.model.fifosys.gfsm.GFSMPath.getStates : return $r1 >>>>>>>> dynoptic.util.Util.newPair : $r2 = new synoptic.util.Pair
dynoptic.util.Util.newPair : $r2 = new synoptic.util.Pair >>>>>>>> dynoptic.util.Util.newPair : specialinvoke $r2.<synoptic.util.Pair: void <init>(java.lang.Object,java.lang.Object)>(r0, r1)
dynoptic.util.Util.newPair : specialinvoke $r2.<synoptic.util.Pair: void <init>(java.lang.Object,java.lang.Object)>(r0, r1) >>>>>>>> dynoptic.util.Util.newPair : return $r2
dynoptic.util.Util.newPair : return $r2 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState : $r1 = <dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState: java.util.Map cache>
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState : $r1 = <dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState: java.util.Map cache> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState : $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r0)
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState : $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r0) >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : b0 = 17
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : b0 = 17 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $i1 = 31 * b0
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $i1 = 31 * b0 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $z0 = r0.<dynoptic.model.fifosys.gfsm.observed.ObsFSMState: boolean isInitial>
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $z0 = r0.<dynoptic.model.fifosys.gfsm.observed.ObsFSMState: boolean isInitial> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : if $z0 == 0
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $s2 = 1231
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $s2 = 1231 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : goto [?= i3 = $i1 + $s2]
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : goto [?= i3 = $i1 + $s2] >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : i3 = $i1 + $s2
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : i3 = $i1 + $s2 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $i4 = 31 * i3
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $i4 = 31 * i3 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $z1 = r0.<dynoptic.model.fifosys.gfsm.observed.ObsFSMState: boolean isTerminal>
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $z1 = r0.<dynoptic.model.fifosys.gfsm.observed.ObsFSMState: boolean isTerminal> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : if $z1 == 0
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : if $z1 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $s5 = 1231
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $s5 = 1231 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : goto [?= i6 = $i4 + $s5]
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : goto [?= i6 = $i4 + $s5] >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : i6 = $i4 + $s5
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : i6 = $i4 + $s5 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $i7 = 31 * i6
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $i7 = 31 * i6 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $i8 = r0.<dynoptic.model.fifosys.gfsm.observed.ObsFSMState: int pid>
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $i8 = r0.<dynoptic.model.fifosys.gfsm.observed.ObsFSMState: int pid> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : i9 = $i7 + $i8
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : i9 = $i7 + $i8 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $i10 = 31 * i9
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $i10 = 31 * i9 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $r1 = r0.<dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.lang.String name>
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $r1 = r0.<dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.lang.String name> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $i11 = virtualinvoke $r1.<java.lang.String: int hashCode()>()
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $i11 = virtualinvoke $r1.<java.lang.String: int hashCode()>() >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : i12 = $i10 + $i11
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : i12 = $i10 + $i11 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : return i12
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : return i12 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.equals : return 1
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.equals : return 1 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState : if $z0 == 0
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState : $r3 = <dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState: java.util.Map cache>
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState : $r3 = <dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState: java.util.Map cache> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState : $r5 = (dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState) $r4
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState : $r5 = (dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState) $r4 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState : return $r5
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState : return $r5 >>>>>>>> dynoptic.invariants.checkers.EventuallyChecker.getClone : $r1 = new dynoptic.invariants.checkers.EventuallyChecker
dynoptic.invariants.checkers.EventuallyChecker.getClone : $r1 = new dynoptic.invariants.checkers.EventuallyChecker >>>>>>>> dynoptic.invariants.checkers.EventuallyChecker.getClone : $r3 = r0.<dynoptic.invariants.checkers.EventuallyChecker: dynoptic.invariants.BinaryInvariant inv>
dynoptic.invariants.checkers.EventuallyChecker.getClone : $r3 = r0.<dynoptic.invariants.checkers.EventuallyChecker: dynoptic.invariants.BinaryInvariant inv> >>>>>>>> dynoptic.invariants.checkers.EventuallyChecker.getClone : specialinvoke $r1.<dynoptic.invariants.checkers.EventuallyChecker: void <init>(dynoptic.invariants.BinaryInvariant)>($r3)
dynoptic.invariants.checkers.EventuallyChecker.getClone : specialinvoke $r1.<dynoptic.invariants.checkers.EventuallyChecker: void <init>(dynoptic.invariants.BinaryInvariant)>($r3) >>>>>>>> dynoptic.invariants.checkers.EventuallyChecker.getClone : r2 = $r1
dynoptic.invariants.checkers.EventuallyChecker.getClone : r2 = $r1 >>>>>>>> dynoptic.invariants.checkers.EventuallyChecker.getClone : $r4 = r0.<dynoptic.invariants.checkers.EventuallyChecker: java.lang.Object s>
dynoptic.invariants.checkers.EventuallyChecker.getClone : $r4 = r0.<dynoptic.invariants.checkers.EventuallyChecker: java.lang.Object s> >>>>>>>> dynoptic.invariants.checkers.EventuallyChecker.getClone : r2.<dynoptic.invariants.checkers.EventuallyChecker: java.lang.Object s> = $r4
dynoptic.invariants.checkers.EventuallyChecker.getClone : r2.<dynoptic.invariants.checkers.EventuallyChecker: java.lang.Object s> = $r4 >>>>>>>> dynoptic.invariants.checkers.EventuallyChecker.getClone : return r2
dynoptic.invariants.checkers.EventuallyChecker.getClone : return r2 >>>>>>>> dynoptic.invariants.checkers.EventuallyChecker.isFail : $r2 = r0.<dynoptic.invariants.checkers.EventuallyChecker: java.lang.Object s>
dynoptic.invariants.checkers.EventuallyChecker.isFail : $r2 = r0.<dynoptic.invariants.checkers.EventuallyChecker: java.lang.Object s> >>>>>>>> dynoptic.invariants.checkers.EventuallyChecker.isFail : $r1 = <dynoptic.invariants.checkers.EventuallyState: dynoptic.invariants.checkers.EventuallyState INITIAL>
dynoptic.invariants.checkers.EventuallyChecker.isFail : $r1 = <dynoptic.invariants.checkers.EventuallyState: dynoptic.invariants.checkers.EventuallyState INITIAL> >>>>>>>> dynoptic.invariants.checkers.EventuallyChecker.isFail : if $r2 != $r1
dynoptic.invariants.checkers.EventuallyChecker.isFail : if $r2 != $r1 >>>>>>>> dynoptic.invariants.checkers.EventuallyChecker.isFail : $z0 = 1
dynoptic.invariants.checkers.EventuallyChecker.isFail : $z0 = 1 >>>>>>>> dynoptic.invariants.checkers.EventuallyChecker.isFail : goto [?= return $z0]
dynoptic.invariants.checkers.EventuallyChecker.isFail : goto [?= return $z0] >>>>>>>> dynoptic.invariants.checkers.EventuallyChecker.isFail : return $z0
dynoptic.invariants.checkers.EventuallyChecker.isFail : return $z0 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.equals : if r1 != null
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.equals : if r1 != null >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.equals : if r0 != r1
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.equals : if r0 != r1 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.equals : $z0 = r1 instanceof dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.equals : $z0 = r1 instanceof dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.equals : if $z0 != 0
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.equals : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.equals : return 0
