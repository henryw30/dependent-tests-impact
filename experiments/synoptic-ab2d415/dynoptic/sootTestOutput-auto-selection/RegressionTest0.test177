dynoptic.util.Util.newMap : $r0 = new java.util.LinkedHashMap >>>>>>>> dynoptic.util.Util.newMap : specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>()
dynoptic.util.Util.newMap : specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>() >>>>>>>> dynoptic.util.Util.newMap : return $r0
dynoptic.util.Util.newMap : return $r0 >>>>>>>> dynoptic.util.Util.get2DPermutations : $r2 = new java.util.ArrayList
dynoptic.util.Util.get2DPermutations : $r2 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.get2DPermutations : specialinvoke $r2.<java.util.ArrayList: void <init>()>()
dynoptic.util.Util.get2DPermutations : specialinvoke $r2.<java.util.ArrayList: void <init>()>() >>>>>>>> dynoptic.util.Util.get2DPermutations : r3 = $r2
dynoptic.util.Util.get2DPermutations : r3 = $r2 >>>>>>>> dynoptic.util.Util.get2DPermutations : r4 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>()
dynoptic.util.Util.get2DPermutations : r4 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>() >>>>>>>> dynoptic.util.Util.get2DPermutations : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
dynoptic.util.Util.get2DPermutations : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.util.Util.get2DPermutations : if $z0 == 0
dynoptic.util.Util.get2DPermutations : if $z0 == 0 >>>>>>>> dynoptic.util.Util.get2DPermutations : return r3
dynoptic.util.Util.get2DPermutations : return r3 >>>>>>>> dynoptic.util.Util.newList : $r1 = new java.util.ArrayList
dynoptic.util.Util.newList : $r1 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0)
dynoptic.util.Util.newList : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0) >>>>>>>> dynoptic.util.Util.newList : return $r1
