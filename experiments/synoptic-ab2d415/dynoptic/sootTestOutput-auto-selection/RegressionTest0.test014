dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet >>>>>>>> dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>()
dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> dynoptic.util.Util.newSet : return $r0
dynoptic.util.Util.newSet : return $r0 >>>>>>>> dynoptic.util.Util.newList : $r0 = new java.util.ArrayList
dynoptic.util.Util.newList : $r0 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>()
dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>() >>>>>>>> dynoptic.util.Util.newList : return $r0
dynoptic.util.Util.newList : return $r0 >>>>>>>> dynoptic.util.Util.newList : $r1 = new java.util.ArrayList
dynoptic.util.Util.newList : $r1 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0)
dynoptic.util.Util.newList : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0) >>>>>>>> dynoptic.util.Util.newList : return $r1
dynoptic.util.Util.newList : return $r1 >>>>>>>> dynoptic.util.Util.get2DPermutations : $r2 = new java.util.ArrayList
dynoptic.util.Util.get2DPermutations : $r2 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.get2DPermutations : specialinvoke $r2.<java.util.ArrayList: void <init>()>()
dynoptic.util.Util.get2DPermutations : specialinvoke $r2.<java.util.ArrayList: void <init>()>() >>>>>>>> dynoptic.util.Util.get2DPermutations : r3 = $r2
dynoptic.util.Util.get2DPermutations : r3 = $r2 >>>>>>>> dynoptic.util.Util.get2DPermutations : r4 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>()
