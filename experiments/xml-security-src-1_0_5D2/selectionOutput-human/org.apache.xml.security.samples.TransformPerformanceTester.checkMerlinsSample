org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : r0 = staticinvoke <javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance()>() >>>>>>>> org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : virtualinvoke r0.<javax.xml.parsers.DocumentBuilderFactory: void setNamespaceAware(boolean)>(1)
org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : virtualinvoke r0.<javax.xml.parsers.DocumentBuilderFactory: void setNamespaceAware(boolean)>(1) >>>>>>>> org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : r1 = virtualinvoke r0.<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilder newDocumentBuilder()>()
org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : r1 = virtualinvoke r0.<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilder newDocumentBuilder()>() >>>>>>>> org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : $r5 = new java.io.File
org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : $r5 = new java.io.File >>>>>>>> org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>("data/ie/baltimore/merlin-examples/merlin-xmldsig-filter2-one/sign-xfdl.xml")
org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>("data/ie/baltimore/merlin-examples/merlin-xmldsig-filter2-one/sign-xfdl.xml") >>>>>>>> org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : r2 = $r5
org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : r2 = $r5 >>>>>>>> org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : $r6 = new java.io.FileInputStream
org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : $r6 = new java.io.FileInputStream >>>>>>>> org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : specialinvoke $r6.<java.io.FileInputStream: void <init>(java.io.File)>(r2)
org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : specialinvoke $r6.<java.io.FileInputStream: void <init>(java.io.File)>(r2) >>>>>>>> org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : r3 = virtualinvoke r1.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(java.io.InputStream)>($r6)
org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : r3 = virtualinvoke r1.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(java.io.InputStream)>($r6) >>>>>>>> org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : $r7 = new org.apache.xml.security.signature.XMLSignature
org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : $r7 = new org.apache.xml.security.signature.XMLSignature >>>>>>>> org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : $r8 = interfaceinvoke r3.<org.w3c.dom.Document: org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String,java.lang.String)>("http://www.w3.org/2000/09/xmldsig#", "Signature")
org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : $r8 = interfaceinvoke r3.<org.w3c.dom.Document: org.w3c.dom.NodeList getElementsByTagNameNS(java.lang.String,java.lang.String)>("http://www.w3.org/2000/09/xmldsig#", "Signature") >>>>>>>> org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : $r9 = interfaceinvoke $r8.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0)
org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : $r9 = interfaceinvoke $r8.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0) >>>>>>>> org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : $r10 = (org.w3c.dom.Element) $r9
org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : $r10 = (org.w3c.dom.Element) $r9 >>>>>>>> org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : $r11 = virtualinvoke r2.<java.io.File: java.net.URL toURL()>()
org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : $r11 = virtualinvoke r2.<java.io.File: java.net.URL toURL()>() >>>>>>>> org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : $r12 = virtualinvoke $r11.<java.net.URL: java.lang.String toString()>()
org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : $r12 = virtualinvoke $r11.<java.net.URL: java.lang.String toString()>() >>>>>>>> org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : specialinvoke $r7.<org.apache.xml.security.signature.XMLSignature: void <init>(org.w3c.dom.Element,java.lang.String)>($r10, $r12)
org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : specialinvoke $r7.<org.apache.xml.security.signature.XMLSignature: void <init>(org.w3c.dom.Element,java.lang.String)>($r10, $r12) >>>>>>>> org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : r4 = $r7
org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : r4 = $r7 >>>>>>>> org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : $r13 = <java.lang.System: java.io.PrintStream out>
org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : $r13 = <java.lang.System: java.io.PrintStream out> >>>>>>>> org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>("Signature erzeugt")
org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>("Signature erzeugt") >>>>>>>> org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : $r14 = virtualinvoke r4.<org.apache.xml.security.signature.XMLSignature: org.apache.xml.security.keys.KeyInfo getKeyInfo()>()
org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : $r14 = virtualinvoke r4.<org.apache.xml.security.signature.XMLSignature: org.apache.xml.security.keys.KeyInfo getKeyInfo()>() >>>>>>>> org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : $r15 = virtualinvoke $r14.<org.apache.xml.security.keys.KeyInfo: java.security.PublicKey getPublicKey()>()
org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : $r15 = virtualinvoke $r14.<org.apache.xml.security.keys.KeyInfo: java.security.PublicKey getPublicKey()>() >>>>>>>> org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : z0 = virtualinvoke r4.<org.apache.xml.security.signature.XMLSignature: boolean checkSignatureValue(java.security.Key)>($r15)
org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : z0 = virtualinvoke r4.<org.apache.xml.security.signature.XMLSignature: boolean checkSignatureValue(java.security.Key)>($r15) >>>>>>>> org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : $r16 = <java.lang.System: java.io.PrintStream out>
org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : $r16 = <java.lang.System: java.io.PrintStream out> >>>>>>>> org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : $r17 = new java.lang.StringBuilder
org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : $r17 = new java.lang.StringBuilder >>>>>>>> org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : specialinvoke $r17.<java.lang.StringBuilder: void <init>()>()
org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : specialinvoke $r17.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Merlin: ")
org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Merlin: ") >>>>>>>> org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0)
org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0) >>>>>>>> org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>($r20)
org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>($r20) >>>>>>>> org.apache.xml.security.samples.TransformPerformanceTester.checkMerlinsSample : return
