org.jfree.data.KeyToGroupMap.getGroup : if r1 != null >>>>>>>> org.jfree.data.KeyToGroupMap.getGroup : r2 = r0.<org.jfree.data.KeyToGroupMap: java.lang.Comparable defaultGroup>
org.jfree.data.KeyToGroupMap.getGroup : r2 = r0.<org.jfree.data.KeyToGroupMap: java.lang.Comparable defaultGroup> >>>>>>>> org.jfree.data.KeyToGroupMap.getGroup : $r5 = r0.<org.jfree.data.KeyToGroupMap: java.util.Map keyToGroupMap>
org.jfree.data.KeyToGroupMap.getGroup : $r5 = r0.<org.jfree.data.KeyToGroupMap: java.util.Map keyToGroupMap> >>>>>>>> org.jfree.data.KeyToGroupMap.getGroup : $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.jfree.data.KeyToGroupMap.getGroup : $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.jfree.data.KeyToGroupMap.getGroup : r3 = (java.lang.Comparable) $r6
org.jfree.data.KeyToGroupMap.getGroup : r3 = (java.lang.Comparable) $r6 >>>>>>>> org.jfree.data.KeyToGroupMap.getGroup : if r3 == null
org.jfree.data.KeyToGroupMap.getGroup : if r3 == null >>>>>>>> org.jfree.data.KeyToGroupMap.getGroup : return r2
org.jfree.data.KeyToGroupMap.getGroup : return r2 >>>>>>>> org.jfree.data.KeyToGroupMap.mapKeyToGroup : if r1 != null
org.jfree.data.KeyToGroupMap.mapKeyToGroup : if r1 != null >>>>>>>> org.jfree.data.KeyToGroupMap.mapKeyToGroup : r3 = virtualinvoke r0.<org.jfree.data.KeyToGroupMap: java.lang.Comparable getGroup(java.lang.Comparable)>(r1)
org.jfree.data.KeyToGroupMap.mapKeyToGroup : r3 = virtualinvoke r0.<org.jfree.data.KeyToGroupMap: java.lang.Comparable getGroup(java.lang.Comparable)>(r1) >>>>>>>> org.jfree.data.KeyToGroupMap.mapKeyToGroup : $r5 = r0.<org.jfree.data.KeyToGroupMap: java.lang.Comparable defaultGroup>
org.jfree.data.KeyToGroupMap.mapKeyToGroup : $r5 = r0.<org.jfree.data.KeyToGroupMap: java.lang.Comparable defaultGroup> >>>>>>>> org.jfree.data.KeyToGroupMap.mapKeyToGroup : $z0 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>($r5)
org.jfree.data.KeyToGroupMap.mapKeyToGroup : $z0 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>($r5) >>>>>>>> org.jfree.data.KeyToGroupMap.mapKeyToGroup : if $z0 != 0
org.jfree.data.KeyToGroupMap.mapKeyToGroup : if $z0 != 0 >>>>>>>> org.jfree.data.KeyToGroupMap.mapKeyToGroup : if r2 != null
org.jfree.data.KeyToGroupMap.mapKeyToGroup : if r2 != null >>>>>>>> org.jfree.data.KeyToGroupMap.mapKeyToGroup : $r9 = r0.<org.jfree.data.KeyToGroupMap: java.util.List groups>
org.jfree.data.KeyToGroupMap.mapKeyToGroup : $r9 = r0.<org.jfree.data.KeyToGroupMap: java.util.List groups> >>>>>>>> org.jfree.data.KeyToGroupMap.mapKeyToGroup : $z3 = interfaceinvoke $r9.<java.util.List: boolean contains(java.lang.Object)>(r2)
org.jfree.data.KeyToGroupMap.mapKeyToGroup : $z3 = interfaceinvoke $r9.<java.util.List: boolean contains(java.lang.Object)>(r2) >>>>>>>> org.jfree.data.KeyToGroupMap.mapKeyToGroup : if $z3 != 0
org.jfree.data.KeyToGroupMap.mapKeyToGroup : if $z3 != 0 >>>>>>>> org.jfree.data.KeyToGroupMap.mapKeyToGroup : $r10 = r0.<org.jfree.data.KeyToGroupMap: java.lang.Comparable defaultGroup>
org.jfree.data.KeyToGroupMap.mapKeyToGroup : $r10 = r0.<org.jfree.data.KeyToGroupMap: java.lang.Comparable defaultGroup> >>>>>>>> org.jfree.data.KeyToGroupMap.mapKeyToGroup : $z4 = virtualinvoke $r10.<java.lang.Object: boolean equals(java.lang.Object)>(r2)
org.jfree.data.KeyToGroupMap.mapKeyToGroup : $z4 = virtualinvoke $r10.<java.lang.Object: boolean equals(java.lang.Object)>(r2) >>>>>>>> org.jfree.data.KeyToGroupMap.mapKeyToGroup : if $z4 != 0
org.jfree.data.KeyToGroupMap.mapKeyToGroup : if $z4 != 0 >>>>>>>> org.jfree.data.KeyToGroupMap.mapKeyToGroup : $r11 = r0.<org.jfree.data.KeyToGroupMap: java.util.List groups>
org.jfree.data.KeyToGroupMap.mapKeyToGroup : $r11 = r0.<org.jfree.data.KeyToGroupMap: java.util.List groups> >>>>>>>> org.jfree.data.KeyToGroupMap.mapKeyToGroup : interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>(r2)
org.jfree.data.KeyToGroupMap.mapKeyToGroup : interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>(r2) >>>>>>>> org.jfree.data.KeyToGroupMap.mapKeyToGroup : $r12 = r0.<org.jfree.data.KeyToGroupMap: java.util.Map keyToGroupMap>
org.jfree.data.KeyToGroupMap.mapKeyToGroup : $r12 = r0.<org.jfree.data.KeyToGroupMap: java.util.Map keyToGroupMap> >>>>>>>> org.jfree.data.KeyToGroupMap.mapKeyToGroup : interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
org.jfree.data.KeyToGroupMap.mapKeyToGroup : interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> org.jfree.data.KeyToGroupMap.getGroup : r2 = r3
org.jfree.data.KeyToGroupMap.getGroup : r2 = r3 >>>>>>>> org.jfree.data.KeyToGroupMap.mapKeyToGroup : $z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r2)
org.jfree.data.KeyToGroupMap.mapKeyToGroup : $z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r2) >>>>>>>> org.jfree.data.KeyToGroupMap.mapKeyToGroup : if $z1 != 0
org.jfree.data.KeyToGroupMap.mapKeyToGroup : if $z1 != 0 >>>>>>>> org.jfree.data.KeyToGroupMap.mapKeyToGroup : i0 = virtualinvoke r0.<org.jfree.data.KeyToGroupMap: int getKeyCount(java.lang.Comparable)>(r3)
org.jfree.data.KeyToGroupMap.mapKeyToGroup : i0 = virtualinvoke r0.<org.jfree.data.KeyToGroupMap: int getKeyCount(java.lang.Comparable)>(r3) >>>>>>>> org.jfree.data.KeyToGroupMap.getKeyCount : if r1 != null
org.jfree.data.KeyToGroupMap.getKeyCount : if r1 != null >>>>>>>> org.jfree.data.KeyToGroupMap.getKeyCount : i0 = 0
org.jfree.data.KeyToGroupMap.getKeyCount : i0 = 0 >>>>>>>> org.jfree.data.KeyToGroupMap.getKeyCount : $r5 = r0.<org.jfree.data.KeyToGroupMap: java.util.Map keyToGroupMap>
org.jfree.data.KeyToGroupMap.getKeyCount : $r5 = r0.<org.jfree.data.KeyToGroupMap: java.util.Map keyToGroupMap> >>>>>>>> org.jfree.data.KeyToGroupMap.getKeyCount : $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Collection values()>()
org.jfree.data.KeyToGroupMap.getKeyCount : $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.jfree.data.KeyToGroupMap.getKeyCount : r2 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>()
org.jfree.data.KeyToGroupMap.getKeyCount : r2 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.jfree.data.KeyToGroupMap.getKeyCount : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.jfree.data.KeyToGroupMap.getKeyCount : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.jfree.data.KeyToGroupMap.getKeyCount : if $z0 == 0
org.jfree.data.KeyToGroupMap.getKeyCount : if $z0 == 0 >>>>>>>> org.jfree.data.KeyToGroupMap.getKeyCount : $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.jfree.data.KeyToGroupMap.getKeyCount : $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.jfree.data.KeyToGroupMap.getKeyCount : r3 = (java.lang.Comparable) $r7
org.jfree.data.KeyToGroupMap.getKeyCount : r3 = (java.lang.Comparable) $r7 >>>>>>>> org.jfree.data.KeyToGroupMap.getKeyCount : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r3)
org.jfree.data.KeyToGroupMap.getKeyCount : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r3) >>>>>>>> org.jfree.data.KeyToGroupMap.getKeyCount : if $z1 == 0
org.jfree.data.KeyToGroupMap.getKeyCount : if $z1 == 0 >>>>>>>> org.jfree.data.KeyToGroupMap.getKeyCount : i0 = i0 + 1
org.jfree.data.KeyToGroupMap.getKeyCount : i0 = i0 + 1 >>>>>>>> org.jfree.data.KeyToGroupMap.getKeyCount : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.jfree.data.KeyToGroupMap.getKeyCount : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.jfree.data.KeyToGroupMap.getKeyCount : return i0
org.jfree.data.KeyToGroupMap.getKeyCount : return i0 >>>>>>>> org.jfree.data.KeyToGroupMap.mapKeyToGroup : if i0 != 1
org.jfree.data.KeyToGroupMap.mapKeyToGroup : if i0 != 1 >>>>>>>> org.jfree.data.KeyToGroupMap.mapKeyToGroup : $r6 = r0.<org.jfree.data.KeyToGroupMap: java.util.List groups>
org.jfree.data.KeyToGroupMap.mapKeyToGroup : $r6 = r0.<org.jfree.data.KeyToGroupMap: java.util.List groups> >>>>>>>> org.jfree.data.KeyToGroupMap.mapKeyToGroup : interfaceinvoke $r6.<java.util.List: boolean remove(java.lang.Object)>(r3)
org.jfree.data.KeyToGroupMap.mapKeyToGroup : interfaceinvoke $r6.<java.util.List: boolean remove(java.lang.Object)>(r3) >>>>>>>> org.jfree.data.KeyToGroupMap.mapKeyToGroup : $r7 = r0.<org.jfree.data.KeyToGroupMap: java.util.Map keyToGroupMap>
org.jfree.data.KeyToGroupMap.mapKeyToGroup : $r7 = r0.<org.jfree.data.KeyToGroupMap: java.util.Map keyToGroupMap> >>>>>>>> org.jfree.data.KeyToGroupMap.mapKeyToGroup : interfaceinvoke $r7.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1)
org.jfree.data.KeyToGroupMap.mapKeyToGroup : interfaceinvoke $r7.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) >>>>>>>> org.jfree.data.KeyToGroupMap.mapKeyToGroup : goto [?= return]
org.jfree.data.KeyToGroupMap.mapKeyToGroup : goto [?= return] >>>>>>>> org.jfree.data.KeyToGroupMap.getGroup : $r4 = new java.lang.IllegalArgumentException
org.jfree.data.KeyToGroupMap.getGroup : $r4 = new java.lang.IllegalArgumentException >>>>>>>> org.jfree.data.KeyToGroupMap.getGroup : specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null \'key\' argument.")
org.jfree.data.KeyToGroupMap.getGroup : specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null \'key\' argument.") >>>>>>>> org.jfree.data.KeyToGroupMap.getGroup : throw $r4
