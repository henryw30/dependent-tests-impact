org.jfree.data.KeyToGroupMap.getKeyCount : if r1 != null >>>>>>>> org.jfree.data.KeyToGroupMap.getKeyCount : $r4 = new java.lang.IllegalArgumentException
org.jfree.data.KeyToGroupMap.getKeyCount : if r1 != null >>>>>>>> org.jfree.data.KeyToGroupMap.getKeyCount : i0 = 0
org.jfree.data.KeyToGroupMap.getKeyCount : i0 = 0 >>>>>>>> org.jfree.data.KeyToGroupMap.getKeyCount : $r5 = r0.<org.jfree.data.KeyToGroupMap: java.util.Map keyToGroupMap>
org.jfree.data.KeyToGroupMap.getKeyCount : $r5 = r0.<org.jfree.data.KeyToGroupMap: java.util.Map keyToGroupMap> >>>>>>>> org.jfree.data.KeyToGroupMap.getKeyCount : $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Collection values()>()
org.jfree.data.KeyToGroupMap.getKeyCount : $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.jfree.data.KeyToGroupMap.getKeyCount : r2 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>()
org.jfree.data.KeyToGroupMap.getKeyCount : r2 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.jfree.data.KeyToGroupMap.getKeyCount : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.jfree.data.KeyToGroupMap.getKeyCount : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.jfree.data.KeyToGroupMap.getKeyCount : if $z0 == 0
org.jfree.data.KeyToGroupMap.getKeyCount : if $z0 == 0 >>>>>>>> org.jfree.data.KeyToGroupMap.getKeyCount : $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.jfree.data.KeyToGroupMap.getKeyCount : if $z0 == 0 >>>>>>>> org.jfree.data.KeyToGroupMap.getKeyCount : return i0
org.jfree.data.KeyToGroupMap.getKeyCount : $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.jfree.data.KeyToGroupMap.getKeyCount : r3 = (java.lang.Comparable) $r7
org.jfree.data.KeyToGroupMap.getKeyCount : r3 = (java.lang.Comparable) $r7 >>>>>>>> org.jfree.data.KeyToGroupMap.getKeyCount : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r3)
org.jfree.data.KeyToGroupMap.getKeyCount : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r3) >>>>>>>> org.jfree.data.KeyToGroupMap.getKeyCount : if $z1 == 0
org.jfree.data.KeyToGroupMap.getKeyCount : if $z1 == 0 >>>>>>>> org.jfree.data.KeyToGroupMap.getKeyCount : i0 = i0 + 1
org.jfree.data.KeyToGroupMap.getKeyCount : if $z1 == 0 >>>>>>>> org.jfree.data.KeyToGroupMap.getKeyCount : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.jfree.data.KeyToGroupMap.getKeyCount : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.jfree.data.KeyToGroupMap.getKeyCount : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.jfree.data.KeyToGroupMap.getKeyCount : i0 = i0 + 1 >>>>>>>> org.jfree.data.KeyToGroupMap.getKeyCount : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.jfree.data.KeyToGroupMap.getKeyCount : $r4 = new java.lang.IllegalArgumentException >>>>>>>> org.jfree.data.KeyToGroupMap.getKeyCount : specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null \'group\' argument.")
org.jfree.data.KeyToGroupMap.getKeyCount : specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null \'group\' argument.") >>>>>>>> org.jfree.data.KeyToGroupMap.getKeyCount : throw $r4
