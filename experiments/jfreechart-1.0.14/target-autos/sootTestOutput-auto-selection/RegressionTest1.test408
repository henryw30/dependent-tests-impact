org.jfree.data.Range.shift : if r0 != null >>>>>>>> org.jfree.data.Range.shift : if z0 == 0
org.jfree.data.Range.shift : if z0 == 0 >>>>>>>> org.jfree.data.Range.shift : $r3 = new org.jfree.data.Range
org.jfree.data.Range.shift : $r3 = new org.jfree.data.Range >>>>>>>> org.jfree.data.Range.shift : $d5 = virtualinvoke r0.<org.jfree.data.Range: double getLowerBound()>()
org.jfree.data.Range.shift : $d5 = virtualinvoke r0.<org.jfree.data.Range: double getLowerBound()>() >>>>>>>> org.jfree.data.Range.getLowerBound : $d0 = r0.<org.jfree.data.Range: double lower>
org.jfree.data.Range.getLowerBound : $d0 = r0.<org.jfree.data.Range: double lower> >>>>>>>> org.jfree.data.Range.getLowerBound : return $d0
org.jfree.data.Range.getLowerBound : return $d0 >>>>>>>> org.jfree.data.Range.shift : $d6 = staticinvoke <org.jfree.data.Range: double shiftWithNoZeroCrossing(double,double)>($d5, d0)
org.jfree.data.Range.shift : $d6 = staticinvoke <org.jfree.data.Range: double shiftWithNoZeroCrossing(double,double)>($d5, d0) >>>>>>>> org.jfree.data.Range.shiftWithNoZeroCrossing : $b0 = d0 cmpl 0.0
org.jfree.data.Range.shiftWithNoZeroCrossing : $b0 = d0 cmpl 0.0 >>>>>>>> org.jfree.data.Range.shiftWithNoZeroCrossing : if $b0 <= 0
org.jfree.data.Range.shiftWithNoZeroCrossing : if $b0 <= 0 >>>>>>>> org.jfree.data.Range.shiftWithNoZeroCrossing : $b1 = d0 cmpg 0.0
org.jfree.data.Range.shiftWithNoZeroCrossing : $b1 = d0 cmpg 0.0 >>>>>>>> org.jfree.data.Range.shiftWithNoZeroCrossing : if $b1 >= 0
org.jfree.data.Range.shiftWithNoZeroCrossing : if $b1 >= 0 >>>>>>>> org.jfree.data.Range.shiftWithNoZeroCrossing : $d6 = d0 + d1
org.jfree.data.Range.shiftWithNoZeroCrossing : $d6 = d0 + d1 >>>>>>>> org.jfree.data.Range.shiftWithNoZeroCrossing : return $d6
org.jfree.data.Range.shiftWithNoZeroCrossing : return $d6 >>>>>>>> org.jfree.data.Range.shift : $d7 = virtualinvoke r0.<org.jfree.data.Range: double getUpperBound()>()
org.jfree.data.Range.shift : $d7 = virtualinvoke r0.<org.jfree.data.Range: double getUpperBound()>() >>>>>>>> org.jfree.data.Range.getUpperBound : $d0 = r0.<org.jfree.data.Range: double upper>
org.jfree.data.Range.getUpperBound : $d0 = r0.<org.jfree.data.Range: double upper> >>>>>>>> org.jfree.data.Range.getUpperBound : return $d0
org.jfree.data.Range.getUpperBound : return $d0 >>>>>>>> org.jfree.data.Range.shift : $d8 = staticinvoke <org.jfree.data.Range: double shiftWithNoZeroCrossing(double,double)>($d7, d0)
org.jfree.data.Range.shift : $d8 = staticinvoke <org.jfree.data.Range: double shiftWithNoZeroCrossing(double,double)>($d7, d0) >>>>>>>> org.jfree.data.Range.shiftWithNoZeroCrossing : $d2 = d0 + d1
org.jfree.data.Range.shiftWithNoZeroCrossing : $d2 = d0 + d1 >>>>>>>> org.jfree.data.Range.shiftWithNoZeroCrossing : $d3 = staticinvoke <java.lang.Math: double max(double,double)>($d2, 0.0)
org.jfree.data.Range.shiftWithNoZeroCrossing : $d3 = staticinvoke <java.lang.Math: double max(double,double)>($d2, 0.0) >>>>>>>> org.jfree.data.Range.shiftWithNoZeroCrossing : return $d3
org.jfree.data.Range.shiftWithNoZeroCrossing : return $d3 >>>>>>>> org.jfree.data.Range.shift : specialinvoke $r3.<org.jfree.data.Range: void <init>(double,double)>($d6, $d8)
org.jfree.data.Range.shift : specialinvoke $r3.<org.jfree.data.Range: void <init>(double,double)>($d6, $d8) >>>>>>>> org.jfree.data.Range.shift : return $r3
