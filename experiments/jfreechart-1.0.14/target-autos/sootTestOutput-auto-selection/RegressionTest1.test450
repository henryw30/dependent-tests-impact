org.jfree.data.general.Series.addChangeListener : $r3 = r0.<org.jfree.data.general.Series: javax.swing.event.EventListenerList listeners> >>>>>>>> org.jfree.data.general.Series.addChangeListener : $r2 = <org.jfree.data.general.Series: java.lang.Class class$org$jfree$data$general$SeriesChangeListener>
org.jfree.data.general.Series.addChangeListener : $r2 = <org.jfree.data.general.Series: java.lang.Class class$org$jfree$data$general$SeriesChangeListener> >>>>>>>> org.jfree.data.general.Series.addChangeListener : if $r2 != null
org.jfree.data.general.Series.addChangeListener : if $r2 != null >>>>>>>> org.jfree.data.general.Series.addChangeListener : $r4 = <org.jfree.data.general.Series: java.lang.Class class$org$jfree$data$general$SeriesChangeListener>
org.jfree.data.general.Series.addChangeListener : $r4 = <org.jfree.data.general.Series: java.lang.Class class$org$jfree$data$general$SeriesChangeListener> >>>>>>>> org.jfree.data.general.Series.addChangeListener : virtualinvoke $r3.<javax.swing.event.EventListenerList: void add(java.lang.Class,java.util.EventListener)>($r4, r1)
org.jfree.data.general.Series.addChangeListener : virtualinvoke $r3.<javax.swing.event.EventListenerList: void add(java.lang.Class,java.util.EventListener)>($r4, r1) >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getDomainBounds : r1 = null
org.jfree.data.time.TimeSeriesCollection.getDomainBounds : r1 = null >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getDomainBounds : $r7 = r0.<org.jfree.data.time.TimeSeriesCollection: java.util.List data>
org.jfree.data.time.TimeSeriesCollection.getDomainBounds : $r7 = r0.<org.jfree.data.time.TimeSeriesCollection: java.util.List data> >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getDomainBounds : r2 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>()
org.jfree.data.time.TimeSeriesCollection.getDomainBounds : r2 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getDomainBounds : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.jfree.data.time.TimeSeriesCollection.getDomainBounds : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getDomainBounds : if $z1 == 0
org.jfree.data.time.TimeSeriesCollection.getDomainBounds : if $z1 == 0 >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getDomainBounds : $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.jfree.data.time.TimeSeriesCollection.getDomainBounds : $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getDomainBounds : r3 = (org.jfree.data.time.TimeSeries) $r8
org.jfree.data.time.TimeSeriesCollection.getDomainBounds : r3 = (org.jfree.data.time.TimeSeries) $r8 >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getDomainBounds : i0 = virtualinvoke r3.<org.jfree.data.time.TimeSeries: int getItemCount()>()
org.jfree.data.time.TimeSeriesCollection.getDomainBounds : i0 = virtualinvoke r3.<org.jfree.data.time.TimeSeries: int getItemCount()>() >>>>>>>> org.jfree.data.time.TimeSeries.getItemCount : $r1 = r0.<org.jfree.data.time.TimeSeries: java.util.List data>
org.jfree.data.time.TimeSeries.getItemCount : $r1 = r0.<org.jfree.data.time.TimeSeries: java.util.List data> >>>>>>>> org.jfree.data.time.TimeSeries.getItemCount : $i0 = interfaceinvoke $r1.<java.util.List: int size()>()
org.jfree.data.time.TimeSeries.getItemCount : $i0 = interfaceinvoke $r1.<java.util.List: int size()>() >>>>>>>> org.jfree.data.time.TimeSeries.getItemCount : return $i0
org.jfree.data.time.TimeSeries.getItemCount : return $i0 >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getDomainBounds : if i0 <= 0
org.jfree.data.time.TimeSeriesCollection.getDomainBounds : if i0 <= 0 >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getDomainBounds : goto [?= $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.jfree.data.time.TimeSeriesCollection.getDomainBounds : goto [?= $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getDomainBounds : return r1
org.jfree.data.time.TimeSeriesCollection.getDomainBounds : return r1 >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getItemCount : $r1 = virtualinvoke r0.<org.jfree.data.time.TimeSeriesCollection: org.jfree.data.time.TimeSeries getSeries(int)>(i0)
org.jfree.data.time.TimeSeriesCollection.getItemCount : $r1 = virtualinvoke r0.<org.jfree.data.time.TimeSeriesCollection: org.jfree.data.time.TimeSeries getSeries(int)>(i0) >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getSeries : if i0 < 0
org.jfree.data.time.TimeSeriesCollection.getSeries : if i0 < 0 >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getSeries : $i1 = virtualinvoke r0.<org.jfree.data.time.TimeSeriesCollection: int getSeriesCount()>()
org.jfree.data.time.TimeSeriesCollection.getSeries : $i1 = virtualinvoke r0.<org.jfree.data.time.TimeSeriesCollection: int getSeriesCount()>() >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getSeriesCount : $r1 = r0.<org.jfree.data.time.TimeSeriesCollection: java.util.List data>
org.jfree.data.time.TimeSeriesCollection.getSeriesCount : $r1 = r0.<org.jfree.data.time.TimeSeriesCollection: java.util.List data> >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getSeriesCount : $i0 = interfaceinvoke $r1.<java.util.List: int size()>()
org.jfree.data.time.TimeSeriesCollection.getSeriesCount : $i0 = interfaceinvoke $r1.<java.util.List: int size()>() >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getSeriesCount : return $i0
org.jfree.data.time.TimeSeriesCollection.getSeriesCount : return $i0 >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getSeries : if i0 < $i1
org.jfree.data.time.TimeSeriesCollection.getSeries : if i0 < $i1 >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getSeries : $r2 = new java.lang.IllegalArgumentException
org.jfree.data.time.TimeSeriesCollection.getSeries : $r2 = new java.lang.IllegalArgumentException >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getSeries : $r1 = new java.lang.StringBuffer
org.jfree.data.time.TimeSeriesCollection.getSeries : $r1 = new java.lang.StringBuffer >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getSeries : specialinvoke $r1.<java.lang.StringBuffer: void <init>()>()
org.jfree.data.time.TimeSeriesCollection.getSeries : specialinvoke $r1.<java.lang.StringBuffer: void <init>()>() >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getSeries : $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The \'series\' argument is out of bounds (")
org.jfree.data.time.TimeSeriesCollection.getSeries : $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The \'series\' argument is out of bounds (") >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getSeries : $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0)
org.jfree.data.time.TimeSeriesCollection.getSeries : $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0) >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getSeries : $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(").")
org.jfree.data.time.TimeSeriesCollection.getSeries : $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(").") >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getSeries : $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>()
org.jfree.data.time.TimeSeriesCollection.getSeries : $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getSeries : specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6)
org.jfree.data.time.TimeSeriesCollection.getSeries : specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6) >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getSeries : throw $r2
