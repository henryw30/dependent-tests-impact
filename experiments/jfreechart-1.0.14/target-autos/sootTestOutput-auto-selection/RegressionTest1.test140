org.jfree.data.general.Series.addVetoableChangeListener : $r2 = r0.<org.jfree.data.general.Series: java.beans.VetoableChangeSupport vetoableChangeSupport> >>>>>>>> org.jfree.data.general.Series.addVetoableChangeListener : virtualinvoke $r2.<java.beans.VetoableChangeSupport: void addVetoableChangeListener(java.beans.VetoableChangeListener)>(r1)
org.jfree.data.general.Series.addVetoableChangeListener : virtualinvoke $r2.<java.beans.VetoableChangeSupport: void addVetoableChangeListener(java.beans.VetoableChangeListener)>(r1) >>>>>>>> org.jfree.data.time.TimeSeriesCollection.removeSeries : if r1 != null
org.jfree.data.time.TimeSeriesCollection.removeSeries : if r1 != null >>>>>>>> org.jfree.data.time.TimeSeriesCollection.removeSeries : $r3 = r0.<org.jfree.data.time.TimeSeriesCollection: java.util.List data>
org.jfree.data.time.TimeSeriesCollection.removeSeries : $r3 = r0.<org.jfree.data.time.TimeSeriesCollection: java.util.List data> >>>>>>>> org.jfree.data.time.TimeSeriesCollection.removeSeries : interfaceinvoke $r3.<java.util.List: boolean remove(java.lang.Object)>(r1)
org.jfree.data.time.TimeSeriesCollection.removeSeries : interfaceinvoke $r3.<java.util.List: boolean remove(java.lang.Object)>(r1) >>>>>>>> org.jfree.data.time.TimeSeriesCollection.removeSeries : virtualinvoke r1.<org.jfree.data.time.TimeSeries: void removeChangeListener(org.jfree.data.general.SeriesChangeListener)>(r0)
org.jfree.data.time.TimeSeriesCollection.removeSeries : virtualinvoke r1.<org.jfree.data.time.TimeSeries: void removeChangeListener(org.jfree.data.general.SeriesChangeListener)>(r0) >>>>>>>> org.jfree.data.general.Series.removeChangeListener : $r3 = r0.<org.jfree.data.general.Series: javax.swing.event.EventListenerList listeners>
org.jfree.data.general.Series.removeChangeListener : $r3 = r0.<org.jfree.data.general.Series: javax.swing.event.EventListenerList listeners> >>>>>>>> org.jfree.data.general.Series.removeChangeListener : $r2 = <org.jfree.data.general.Series: java.lang.Class class$org$jfree$data$general$SeriesChangeListener>
org.jfree.data.general.Series.removeChangeListener : $r2 = <org.jfree.data.general.Series: java.lang.Class class$org$jfree$data$general$SeriesChangeListener> >>>>>>>> org.jfree.data.general.Series.removeChangeListener : if $r2 != null
org.jfree.data.general.Series.removeChangeListener : if $r2 != null >>>>>>>> org.jfree.data.general.Series.removeChangeListener : $r4 = <org.jfree.data.general.Series: java.lang.Class class$org$jfree$data$general$SeriesChangeListener>
org.jfree.data.general.Series.removeChangeListener : $r4 = <org.jfree.data.general.Series: java.lang.Class class$org$jfree$data$general$SeriesChangeListener> >>>>>>>> org.jfree.data.general.Series.removeChangeListener : virtualinvoke $r3.<javax.swing.event.EventListenerList: void remove(java.lang.Class,java.util.EventListener)>($r4, r1)
org.jfree.data.general.Series.removeChangeListener : virtualinvoke $r3.<javax.swing.event.EventListenerList: void remove(java.lang.Class,java.util.EventListener)>($r4, r1) >>>>>>>> org.jfree.data.time.TimeSeriesCollection.removeSeries : virtualinvoke r0.<org.jfree.data.time.TimeSeriesCollection: void fireDatasetChanged()>()
org.jfree.data.time.TimeSeriesCollection.removeSeries : virtualinvoke r0.<org.jfree.data.time.TimeSeriesCollection: void fireDatasetChanged()>() >>>>>>>> org.jfree.data.general.AbstractDataset.fireDatasetChanged : $r1 = new org.jfree.data.general.DatasetChangeEvent
org.jfree.data.general.AbstractDataset.fireDatasetChanged : $r1 = new org.jfree.data.general.DatasetChangeEvent >>>>>>>> org.jfree.data.general.AbstractDataset.fireDatasetChanged : specialinvoke $r1.<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>(r0, r0)
org.jfree.data.general.AbstractDataset.fireDatasetChanged : specialinvoke $r1.<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>(r0, r0) >>>>>>>> org.jfree.data.general.AbstractDataset.fireDatasetChanged : virtualinvoke r0.<org.jfree.data.general.AbstractDataset: void notifyListeners(org.jfree.data.general.DatasetChangeEvent)>($r1)
org.jfree.data.general.AbstractDataset.fireDatasetChanged : virtualinvoke r0.<org.jfree.data.general.AbstractDataset: void notifyListeners(org.jfree.data.general.DatasetChangeEvent)>($r1) >>>>>>>> org.jfree.data.general.AbstractDataset.notifyListeners : $r3 = r0.<org.jfree.data.general.AbstractDataset: javax.swing.event.EventListenerList listenerList>
org.jfree.data.general.AbstractDataset.notifyListeners : $r3 = r0.<org.jfree.data.general.AbstractDataset: javax.swing.event.EventListenerList listenerList> >>>>>>>> org.jfree.data.general.AbstractDataset.notifyListeners : r2 = virtualinvoke $r3.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>()
org.jfree.data.general.AbstractDataset.notifyListeners : r2 = virtualinvoke $r3.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>() >>>>>>>> org.jfree.data.general.AbstractDataset.notifyListeners : $i1 = lengthof r2
org.jfree.data.general.AbstractDataset.notifyListeners : $i1 = lengthof r2 >>>>>>>> org.jfree.data.general.AbstractDataset.notifyListeners : i0 = $i1 - 2
org.jfree.data.general.AbstractDataset.notifyListeners : i0 = $i1 - 2 >>>>>>>> org.jfree.data.general.AbstractDataset.notifyListeners : if i0 < 0
org.jfree.data.general.AbstractDataset.notifyListeners : if i0 < 0 >>>>>>>> org.jfree.data.time.TimeSeries.createCopy : if r1 != null
org.jfree.data.time.TimeSeries.createCopy : if r1 != null >>>>>>>> org.jfree.data.time.TimeSeries.createCopy : $r4 = new java.lang.IllegalArgumentException
org.jfree.data.time.TimeSeries.createCopy : $r4 = new java.lang.IllegalArgumentException >>>>>>>> org.jfree.data.time.TimeSeries.createCopy : specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null \'start\' argument.")
org.jfree.data.time.TimeSeries.createCopy : specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null \'start\' argument.") >>>>>>>> org.jfree.data.time.TimeSeries.createCopy : throw $r4
