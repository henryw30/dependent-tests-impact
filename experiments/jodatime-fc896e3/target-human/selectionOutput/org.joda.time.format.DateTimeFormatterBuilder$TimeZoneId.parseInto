org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.parseInto : r3 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>(i0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.parseInto : $r6 = <org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: java.util.Set ALL_IDS>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.parseInto : $r6 = <org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: java.util.Set ALL_IDS> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.parseInto : r4 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.parseInto : r4 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.parseInto : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.parseInto : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.parseInto : if $z0 == 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.parseInto : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.parseInto : $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.parseInto : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.parseInto : $i3 = i0 ^ -1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.parseInto : $i3 = i0 ^ -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.parseInto : return $i3
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.parseInto : $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.parseInto : r5 = (java.lang.String) $r7
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.parseInto : r5 = (java.lang.String) $r7 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.parseInto : $z1 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>(r5)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.parseInto : $z1 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>(r5) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.parseInto : if $z1 == 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.parseInto : if $z1 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.parseInto : $r8 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>(r5)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.parseInto : if $z1 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.parseInto : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.parseInto : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.parseInto : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.parseInto : $r8 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>(r5) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.parseInto : virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: void setZone(org.joda.time.DateTimeZone)>($r8)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.parseInto : virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: void setZone(org.joda.time.DateTimeZone)>($r8) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.parseInto : $i1 = virtualinvoke r5.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.parseInto : $i1 = virtualinvoke r5.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.parseInto : $i2 = i0 + $i1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.parseInto : $i2 = i0 + $i1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.parseInto : return $i2
