org.joda.time.DateTimeZone.forID : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.forID : $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("UTC")
org.joda.time.DateTimeZone.forID : $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("UTC") >>>>>>>> org.joda.time.DateTimeZone.forID : if $z0 == 0
org.joda.time.DateTimeZone.forID : if $z0 == 0 >>>>>>>> org.joda.time.DateTimeZone.forID : $r4 = <org.joda.time.DateTimeZone: org.joda.time.tz.Provider cProvider>
org.joda.time.DateTimeZone.forID : $r4 = <org.joda.time.DateTimeZone: org.joda.time.tz.Provider cProvider> >>>>>>>> org.joda.time.DateTimeZone.forID : r1 = interfaceinvoke $r4.<org.joda.time.tz.Provider: org.joda.time.DateTimeZone getZone(java.lang.String)>(r0)
org.joda.time.DateTimeZone.forID : r1 = interfaceinvoke $r4.<org.joda.time.tz.Provider: org.joda.time.DateTimeZone getZone(java.lang.String)>(r0) >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : if r1 != null
org.joda.time.tz.ZoneInfoProvider.getZone : if r1 != null >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : $r5 = r0.<org.joda.time.tz.ZoneInfoProvider: java.util.Map iZoneInfoMap>
org.joda.time.tz.ZoneInfoProvider.getZone : $r5 = r0.<org.joda.time.tz.ZoneInfoProvider: java.util.Map iZoneInfoMap> >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : r2 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.joda.time.tz.ZoneInfoProvider.getZone : r2 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : if r2 != null
org.joda.time.tz.ZoneInfoProvider.getZone : if r2 != null >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r2)
org.joda.time.tz.ZoneInfoProvider.getZone : $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r2) >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : if $z0 == 0
org.joda.time.tz.ZoneInfoProvider.getZone : if $z0 == 0 >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : $z1 = r2 instanceof java.lang.ref.SoftReference
org.joda.time.tz.ZoneInfoProvider.getZone : $z1 = r2 instanceof java.lang.ref.SoftReference >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : if $z1 == 0
org.joda.time.tz.ZoneInfoProvider.getZone : if $z1 == 0 >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : r3 = (java.lang.ref.SoftReference) r2
org.joda.time.tz.ZoneInfoProvider.getZone : r3 = (java.lang.ref.SoftReference) r2 >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : $r7 = virtualinvoke r3.<java.lang.ref.SoftReference: java.lang.Object get()>()
org.joda.time.tz.ZoneInfoProvider.getZone : $r7 = virtualinvoke r3.<java.lang.ref.SoftReference: java.lang.Object get()>() >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : r4 = (org.joda.time.DateTimeZone) $r7
org.joda.time.tz.ZoneInfoProvider.getZone : r4 = (org.joda.time.DateTimeZone) $r7 >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : if r4 == null
org.joda.time.tz.ZoneInfoProvider.getZone : if r4 == null >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : return r4
org.joda.time.tz.ZoneInfoProvider.getZone : return r4 >>>>>>>> org.joda.time.DateTimeZone.forID : if r1 == null
org.joda.time.DateTimeZone.forID : if r1 == null >>>>>>>> org.joda.time.DateTimeZone.forID : return r1
org.joda.time.DateTimeZone.forID : return r1 >>>>>>>> org.joda.time.format.ISOPeriodFormat.standard : $r0 = <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter cStandard>
org.joda.time.format.ISOPeriodFormat.standard : $r0 = <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter cStandard> >>>>>>>> org.joda.time.format.ISOPeriodFormat.standard : if $r0 != null
org.joda.time.format.ISOPeriodFormat.standard : if $r0 != null >>>>>>>> org.joda.time.format.ISOPeriodFormat.standard : $r19 = <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter cStandard>
org.joda.time.format.ISOPeriodFormat.standard : $r19 = <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter cStandard> >>>>>>>> org.joda.time.format.ISOPeriodFormat.standard : return $r19
org.joda.time.format.ISOPeriodFormat.standard : return $r19 >>>>>>>> org.joda.time.PeriodType.years : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cYears>
org.joda.time.PeriodType.years : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cYears> >>>>>>>> org.joda.time.PeriodType.years : if r0 != null
org.joda.time.PeriodType.years : if r0 != null >>>>>>>> org.joda.time.PeriodType.years : $r2 = new org.joda.time.PeriodType
org.joda.time.PeriodType.years : $r2 = new org.joda.time.PeriodType >>>>>>>> org.joda.time.PeriodType.years : $r3 = newarray (org.joda.time.DurationFieldType)[1]
org.joda.time.PeriodType.years : $r3 = newarray (org.joda.time.DurationFieldType)[1] >>>>>>>> org.joda.time.PeriodType.years : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>()
org.joda.time.PeriodType.years : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>() >>>>>>>> org.joda.time.DurationFieldType.years : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType YEARS_TYPE>
org.joda.time.DurationFieldType.years : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType YEARS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.years : return $r0
org.joda.time.DurationFieldType.years : return $r0 >>>>>>>> org.joda.time.PeriodType.years : $r3[0] = $r1
org.joda.time.PeriodType.years : $r3[0] = $r1 >>>>>>>> org.joda.time.PeriodType.years : $r4 = newarray (int)[8]
org.joda.time.PeriodType.years : $r4 = newarray (int)[8] >>>>>>>> org.joda.time.PeriodType.years : $r4[0] = 0
org.joda.time.PeriodType.years : $r4[0] = 0 >>>>>>>> org.joda.time.PeriodType.years : $r4[1] = -1
org.joda.time.PeriodType.years : $r4[1] = -1 >>>>>>>> org.joda.time.PeriodType.years : $r4[2] = -1
org.joda.time.PeriodType.years : $r4[2] = -1 >>>>>>>> org.joda.time.PeriodType.years : $r4[3] = -1
org.joda.time.PeriodType.years : $r4[3] = -1 >>>>>>>> org.joda.time.PeriodType.years : $r4[4] = -1
org.joda.time.PeriodType.years : $r4[4] = -1 >>>>>>>> org.joda.time.PeriodType.years : $r4[5] = -1
org.joda.time.PeriodType.years : $r4[5] = -1 >>>>>>>> org.joda.time.PeriodType.years : $r4[6] = -1
org.joda.time.PeriodType.years : $r4[6] = -1 >>>>>>>> org.joda.time.PeriodType.years : $r4[7] = -1
org.joda.time.PeriodType.years : $r4[7] = -1 >>>>>>>> org.joda.time.PeriodType.years : specialinvoke $r2.<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>("Years", $r3, $r4)
org.joda.time.PeriodType.years : specialinvoke $r2.<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>("Years", $r3, $r4) >>>>>>>> org.joda.time.PeriodType.years : r0 = $r2
org.joda.time.PeriodType.years : r0 = $r2 >>>>>>>> org.joda.time.PeriodType.years : <org.joda.time.PeriodType: org.joda.time.PeriodType cYears> = r0
org.joda.time.PeriodType.years : <org.joda.time.PeriodType: org.joda.time.PeriodType cYears> = r0 >>>>>>>> org.joda.time.PeriodType.years : return r0
org.joda.time.PeriodType.years : return r0 >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : $r2 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.PeriodType iParseType>
org.joda.time.format.PeriodFormatter.withParseType : $r2 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.PeriodType iParseType> >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : if r1 != $r2
org.joda.time.format.PeriodFormatter.withParseType : if r1 != $r2 >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : $r3 = new org.joda.time.format.PeriodFormatter
org.joda.time.format.PeriodFormatter.withParseType : $r3 = new org.joda.time.format.PeriodFormatter >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : $r4 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter iPrinter>
org.joda.time.format.PeriodFormatter.withParseType : $r4 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter iPrinter> >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : $r5 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser iParser>
org.joda.time.format.PeriodFormatter.withParseType : $r5 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser iParser> >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : $r6 = r0.<org.joda.time.format.PeriodFormatter: java.util.Locale iLocale>
org.joda.time.format.PeriodFormatter.withParseType : $r6 = r0.<org.joda.time.format.PeriodFormatter: java.util.Locale iLocale> >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : specialinvoke $r3.<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,java.util.Locale,org.joda.time.PeriodType)>($r4, $r5, $r6, r1)
org.joda.time.format.PeriodFormatter.withParseType : specialinvoke $r3.<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,java.util.Locale,org.joda.time.PeriodType)>($r4, $r5, $r6, r1) >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : return $r3
org.joda.time.format.PeriodFormatter.withParseType : return $r3 >>>>>>>> org.joda.time.Years.years : lookupswitch(i0) {     case -2147483648:
org.joda.time.Years.years : lookupswitch(i0) {     case -2147483648: >>>>>>>> org.joda.time.Years.years : $r6 = new org.joda.time.Years
org.joda.time.Years.years : $r6 = new org.joda.time.Years >>>>>>>> org.joda.time.Years.years : specialinvoke $r6.<org.joda.time.Years: void <init>(int)>(i0)
org.joda.time.Years.years : specialinvoke $r6.<org.joda.time.Years: void <init>(int)>(i0) >>>>>>>> org.joda.time.Years.years : return $r6
org.joda.time.Years.years : return $r6 >>>>>>>> org.joda.time.Years.toString : $r1 = new java.lang.StringBuilder
org.joda.time.Years.toString : $r1 = new java.lang.StringBuilder >>>>>>>> org.joda.time.Years.toString : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
org.joda.time.Years.toString : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.Years.toString : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("P")
org.joda.time.Years.toString : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("P") >>>>>>>> org.joda.time.Years.toString : $i0 = virtualinvoke r0.<org.joda.time.Years: int getValue()>()
org.joda.time.Years.toString : $i0 = virtualinvoke r0.<org.joda.time.Years: int getValue()>() >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.getValue : $i0 = r0.<org.joda.time.base.BaseSingleFieldPeriod: int iPeriod>
org.joda.time.base.BaseSingleFieldPeriod.getValue : $i0 = r0.<org.joda.time.base.BaseSingleFieldPeriod: int iPeriod> >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.getValue : return $i0
org.joda.time.base.BaseSingleFieldPeriod.getValue : return $i0 >>>>>>>> org.joda.time.Years.toString : $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0)
org.joda.time.Years.toString : $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0) >>>>>>>> org.joda.time.Years.toString : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3)
org.joda.time.Years.toString : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) >>>>>>>> org.joda.time.Years.toString : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Y")
org.joda.time.Years.toString : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Y") >>>>>>>> org.joda.time.Years.toString : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.Years.toString : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.Years.toString : return $r6
