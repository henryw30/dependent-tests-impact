
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test001"); }

    org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long)(short)10);
    org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
    org.joda.time.LocalDateTime.Property property3 = localDateTime1.secondOfMinute();
    org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy(1496721418392L);
    org.joda.time.LocalDateTime localDateTime7 = property3.addToCopy(6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime7);

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test002"); }

    org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.hourOfHalfday();
    org.joda.time.Chronology chronology2 = null;
    org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(chronology2);
    java.util.GregorianCalendar gregorianCalendar4 = mutableDateTime3.toGregorianCalendar();
    mutableDateTime3.addMinutes((int)(byte)1);
    org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone7);
    int i10 = dateTimeZone7.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone7);
    org.joda.time.DateTime dateTime13 = dateTime11.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property14 = dateTime11.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType15 = property14.getFieldType();
    mutableDateTime3.set(dateTimeFieldType15, (int)(byte)10);
    org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField18 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField1, dateTimeFieldType15);
    int i19 = zeroIsMaxDateTimeField18.getMaximumValue();
    org.joda.time.DateTimeZone dateTimeZone21 = null;
    org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone21);
    org.joda.time.LocalDateTime.Property property23 = localDateTime22.monthOfYear();
    org.joda.time.DateTimeZone dateTimeZone25 = null;
    org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone25);
    boolean b27 = localDateTime22.isAfter((org.joda.time.ReadablePartial)localDateTime26);
    org.joda.time.DateTimeZone dateTimeZone29 = null;
    org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone29);
    org.joda.time.DurationField durationField31 = copticChronology30.days();
    org.joda.time.DateTimeZone dateTimeZone33 = null;
    org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone33);
    org.joda.time.LocalDateTime.Property property35 = localDateTime34.monthOfYear();
    org.joda.time.DateTimeZone dateTimeZone37 = null;
    org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone37);
    boolean b39 = localDateTime34.isAfter((org.joda.time.ReadablePartial)localDateTime38);
    org.joda.time.DateTimeZone dateTimeZone41 = null;
    org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone41);
    org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withMillisOfDay((int)(short)0);
    org.joda.time.LocalDateTime.Property property45 = localDateTime44.dayOfYear();
    org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.dayTime();
    org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadablePartial)localDateTime34, (org.joda.time.ReadablePartial)localDateTime44, periodType46);
    int[] i_array49 = copticChronology30.get((org.joda.time.ReadablePartial)localDateTime34, 1496646000000L);
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array51 = zeroIsMaxDateTimeField18.addWrapField((org.joda.time.ReadablePartial)localDateTime22, 429, i_array49, 810);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianCalendar4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array49);

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test003"); }

    org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
    org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusSeconds(0);
    org.joda.time.LocalDateTime.Property property3 = localDateTime0.dayOfMonth();
    org.joda.time.LocalDateTime localDateTime5 = localDateTime0.minusDays(535);
    org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withWeekOfWeekyear((int)(byte)10);
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((java.lang.Object)localDateTime0);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime7);

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test004"); }

    org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.localDateOptionalTimeParser();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter0);

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test005"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
    org.joda.time.DateMidnight.Property property2 = dateMidnight1.centuryOfEra();
    org.joda.time.DateMidnight dateMidnight4 = property2.addWrapFieldToCopy((int)(short)100);
    org.joda.time.DateMidnight.Property property5 = dateMidnight4.dayOfYear();
    org.joda.time.Chronology chronology6 = null;
    org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(chronology6);
    org.joda.time.Instant instant8 = mutableDateTime7.toInstant();
    org.joda.time.ReadableInstant readableInstant9 = null;
    boolean b10 = mutableDateTime7.isEqual(readableInstant9);
    org.joda.time.DateTime dateTime11 = mutableDateTime7.toDateTime();
    org.joda.time.DateTime.Property property12 = dateTime11.yearOfCentury();
    boolean b13 = dateMidnight4.isEqual((org.joda.time.ReadableInstant)dateTime11);
    org.joda.time.DateTime.Property property14 = dateTime11.secondOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property14);

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test006"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
    org.joda.time.Duration duration4 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.DateMidnight dateMidnight5 = dateMidnight1.minus((org.joda.time.ReadableDuration)duration4);
    org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone6);
    org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.Chronology)iSOChronology7);
    org.joda.time.DateTimeZone dateTimeZone9 = null;
    org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone9);
    org.joda.time.Chronology chronology11 = copticChronology10.withUTC();
    org.joda.time.DateTime dateTime12 = dateTime8.withChronology(chronology11);
    org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadableDuration)duration4, (org.joda.time.ReadableInstant)dateTime8);
    org.joda.time.Chronology chronology14 = null;
    org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
    org.joda.time.Instant instant16 = mutableDateTime15.toInstant();
    org.joda.time.ReadableInstant readableInstant17 = null;
    boolean b18 = mutableDateTime15.isEqual(readableInstant17);
    org.joda.time.DateTime dateTime19 = mutableDateTime15.toDateTime();
    org.joda.time.DateTime.Property property20 = dateTime19.yearOfCentury();
    java.util.Locale locale22 = null;
    org.joda.time.DateTime dateTime23 = property20.setCopy("26", locale22);
    org.joda.time.Seconds seconds24 = org.joda.time.Seconds.TWO;
    org.joda.time.DateTime dateTime26 = dateTime23.withPeriodAdded((org.joda.time.ReadablePeriod)seconds24, 5);
    org.joda.time.DateTimeZone dateTimeZone27 = null;
    org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(dateTimeZone27);
    org.joda.time.Duration duration31 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.DateMidnight dateMidnight32 = dateMidnight28.minus((org.joda.time.ReadableDuration)duration31);
    org.joda.time.DateTime dateTime33 = dateTime23.plus((org.joda.time.ReadableDuration)duration31);
    org.joda.time.DateTimeZone dateTimeZone35 = null;
    org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone35);
    org.joda.time.DateTime dateTime37 = dateTime23.withFields((org.joda.time.ReadablePartial)localDateTime36);
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.Interval interval38 = duration4.toIntervalFrom((org.joda.time.ReadableInstant)dateTime37);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(seconds24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime37);

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test007"); }

    org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
    org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays((-1));
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.Duration duration3 = new org.joda.time.Duration((java.lang.Object)localDateTime0);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime2);

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test008"); }

    org.joda.time.Months months0 = org.joda.time.Months.MIN_VALUE;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(months0);

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test009"); }

    org.joda.time.Chronology chronology0 = null;
    org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
    int[] i_array2 = partial1.getValues();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str4 = partial1.toString("T03:56:41");
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array2);

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test010"); }

    org.joda.time.ReadableInstant readableInstant2 = null;
    org.joda.time.ReadableDuration readableDuration3 = null;
    org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(readableInstant2, readableDuration3);
    org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = org.joda.time.format.DateTimeFormat.fullDate();
    org.joda.time.Chronology chronology6 = null;
    org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(chronology6);
    int i10 = dateTimeFormatter5.parseInto((org.joda.time.ReadWritableInstant)mutableDateTime7, "secondOfMinute", 100);
    org.joda.time.DateTimeZone dateTimeZone11 = null;
    org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(dateTimeZone11);
    long long13 = dateMidnight12.getMillis();
    org.joda.time.DateMidnight dateMidnight15 = dateMidnight12.plusDays(24);
    mutablePeriod4.setPeriod((org.joda.time.ReadableInstant)mutableDateTime7, (org.joda.time.ReadableInstant)dateMidnight15);
    org.joda.time.DateTimeZone dateTimeZone18 = null;
    org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone18);
    java.lang.String str20 = copticChronology19.toString();
    mutablePeriod4.setPeriod(0L, (org.joda.time.Chronology)copticChronology19);
    org.joda.time.DurationField durationField22 = copticChronology19.hours();
    java.lang.String str23 = copticChronology19.toString();
    org.joda.time.TimeOfDay timeOfDay24 = new org.joda.time.TimeOfDay(0L, (org.joda.time.Chronology)copticChronology19);
    java.util.Locale locale25 = null;
    org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long)(short)10, (org.joda.time.Chronology)copticChronology19, locale25, (java.lang.Integer)14, (int)(short)1);
    org.joda.time.DateTimeZone dateTimeZone29 = null;
    org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone29);
    java.lang.String str31 = copticChronology30.toString();
    org.joda.time.DateTimeField dateTimeField32 = copticChronology30.centuryOfEra();
    org.joda.time.DateTimeZone dateTimeZone34 = null;
    org.joda.time.chrono.CopticChronology copticChronology35 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone34);
    java.lang.String str36 = copticChronology35.toString();
    org.joda.time.TimeOfDay timeOfDay37 = org.joda.time.TimeOfDay.fromMillisOfDay(0L, (org.joda.time.Chronology)copticChronology35);
    org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology39 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone38);
    int i41 = dateTimeZone38.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone38);
    org.joda.time.DateTime dateTime44 = dateTime42.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property45 = dateTime42.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType46 = property45.getFieldType();
    org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology48 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone47);
    int i50 = dateTimeZone47.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone47);
    org.joda.time.DateTime dateTime53 = dateTime51.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property54 = dateTime51.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType55 = property54.getFieldType();
    org.joda.time.DateTimeComparator dateTimeComparator56 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType46, dateTimeFieldType55);
    int i57 = timeOfDay37.indexOf(dateTimeFieldType55);
    org.joda.time.field.OffsetDateTimeField offsetDateTimeField61 = new org.joda.time.field.OffsetDateTimeField(dateTimeField32, dateTimeFieldType55, 10, 1000, 628);
    java.util.Locale locale63 = null;
    dateTimeParserBucket28.saveField(dateTimeFieldType55, "T03:56:32", locale63);
    java.lang.Integer i65 = dateTimeParserBucket28.getPivotYear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-101));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 1496707200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "CopticChronology[UTC]"+ "'", str20.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "CopticChronology[UTC]"+ "'", str23.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "CopticChronology[UTC]"+ "'", str31.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "CopticChronology[UTC]"+ "'", str36.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i65 + "' != '" + 14+ "'", i65.equals(14));

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test011"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
    org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusDays((int)(byte)10);
    org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusDays((-97));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonthDay3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonthDay5);

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test012"); }

    int i0 = org.joda.time.YearMonthDay.DAY_OF_MONTH;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i0 == 2);

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test013"); }

    org.joda.time.DateTimeZone dateTimeZone2 = null;
    org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(dateTimeZone2);
    org.joda.time.DateTimeZone dateTimeZone4 = null;
    org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(dateTimeZone4);
    org.joda.time.DateMidnight.Property property6 = dateMidnight5.centuryOfEra();
    org.joda.time.DateMidnight.Property property7 = dateMidnight5.dayOfYear();
    org.joda.time.DateMidnight dateMidnight8 = property7.roundHalfFloorCopy();
    org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.plus((long)(-1));
    org.joda.time.DateTime dateTime11 = dateMidnight8.toDateTime();
    org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant)dateMidnight3, (org.joda.time.ReadableInstant)dateMidnight8);
    java.lang.Object obj13 = mutableInterval12.clone();
    org.joda.time.Chronology chronology14 = mutableInterval12.getChronology();
    org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 1L, chronology14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology14);

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test014"); }

    org.joda.time.Seconds seconds0 = org.joda.time.Seconds.ONE;
    int i1 = seconds0.getSeconds();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(seconds0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 1);

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test015"); }

    org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone0);
    org.joda.time.DateTimeField dateTimeField2 = iSOChronology1.minuteOfDay();
    org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone3);
    int i6 = dateTimeZone3.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone3);
    org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property10 = dateTime7.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType11 = property10.getFieldType();
    org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone12);
    int i15 = dateTimeZone12.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone12);
    org.joda.time.DateTime dateTime18 = dateTime16.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property19 = dateTime16.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType20 = property19.getFieldType();
    org.joda.time.DateTimeComparator dateTimeComparator21 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType11, dateTimeFieldType20);
    org.joda.time.Partial partial23 = new org.joda.time.Partial(dateTimeFieldType11, (int)(byte)1);
    org.joda.time.field.OffsetDateTimeField offsetDateTimeField27 = new org.joda.time.field.OffsetDateTimeField(dateTimeField2, dateTimeFieldType11, 14, 628, 1034);
    java.util.Locale locale28 = null;
    int i29 = offsetDateTimeField27.getMaximumShortTextLength(locale28);
    long long32 = offsetDateTimeField27.getDifferenceAsLong((long)37, (long)17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long32 == 0L);

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test016"); }

    int i0 = org.joda.time.DateTimeConstants.SECONDS_PER_DAY;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i0 == 86400);

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test017"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
    org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth((org.joda.time.Chronology)copticChronology1);
    org.joda.time.YearMonth yearMonth4 = yearMonth2.minusYears((int)'a');
    org.joda.time.YearMonth yearMonth6 = yearMonth2.minusYears((-1));
    org.joda.time.YearMonth yearMonth8 = yearMonth6.withYear((int)' ');
    org.joda.time.YearMonth.Property property9 = yearMonth8.year();
    int i10 = yearMonth8.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonth4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonth6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonth8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test018"); }

    org.joda.time.ReadableInstant readableInstant0 = null;
    org.joda.time.ReadableDuration readableDuration1 = null;
    org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
    org.joda.time.chrono.GregorianChronology gregorianChronology4 = org.joda.time.chrono.GregorianChronology.getInstance();
    mutablePeriod2.setPeriod((long)100, (org.joda.time.Chronology)gregorianChronology4);
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(dateTimeZone6);
    int i8 = dateMidnight7.getDayOfWeek();
    org.joda.time.Chronology chronology9 = null;
    org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
    java.util.GregorianCalendar gregorianCalendar11 = mutableDateTime10.toGregorianCalendar();
    org.joda.time.chrono.LimitChronology limitChronology12 = org.joda.time.chrono.LimitChronology.getInstance((org.joda.time.Chronology)gregorianChronology4, (org.joda.time.ReadableDateTime)dateMidnight7, (org.joda.time.ReadableDateTime)mutableDateTime10);
    org.joda.time.DateTime dateTime13 = limitChronology12.getUpperLimit();
    org.joda.time.DateTimeZone dateTimeZone16 = null;
    org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone16);
    org.joda.time.LocalDateTime.Property property18 = localDateTime17.monthOfYear();
    org.joda.time.DateTimeZone dateTimeZone20 = null;
    org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone20);
    boolean b22 = localDateTime17.isAfter((org.joda.time.ReadablePartial)localDateTime21);
    org.joda.time.DateTimeZone dateTimeZone24 = null;
    org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone24);
    org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withMillisOfDay((int)(short)0);
    org.joda.time.LocalDateTime.Property property28 = localDateTime27.dayOfYear();
    org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.dayTime();
    org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadablePartial)localDateTime17, (org.joda.time.ReadablePartial)localDateTime27, periodType29);
    org.joda.time.PeriodType periodType31 = periodType29.withSecondsRemoved();
    org.joda.time.PeriodType periodType32 = org.joda.time.DateTimeUtils.getPeriodType(periodType31);
    org.joda.time.Chronology chronology33 = null;
    org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology33);
    org.joda.time.PeriodType periodType35 = null;
    org.joda.time.chrono.GregorianChronology gregorianChronology36 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((java.lang.Object)chronology33, periodType35, (org.joda.time.Chronology)gregorianChronology36);
    org.joda.time.DateTimeField dateTimeField38 = gregorianChronology36.hourOfDay();
    org.joda.time.DurationField durationField39 = gregorianChronology36.minutes();
    org.joda.time.Period period40 = new org.joda.time.Period((long)37, periodType31, (org.joda.time.Chronology)gregorianChronology36);
    boolean b41 = limitChronology12.equals((java.lang.Object)gregorianChronology36);
    org.joda.time.DurationField durationField42 = limitChronology12.minutes();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianCalendar11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(limitChronology12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField42);

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test019"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
    org.joda.time.DurationField durationField2 = copticChronology1.days();
    org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology)copticChronology1);
    org.joda.time.DateTimeField dateTimeField4 = copticChronology1.millisOfSecond();
    org.joda.time.DateTimeZone dateTimeZone5 = null;
    org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone5);
    org.joda.time.DurationField durationField7 = copticChronology6.days();
    org.joda.time.DateTimeZone dateTimeZone9 = null;
    org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone9);
    org.joda.time.LocalDateTime.Property property11 = localDateTime10.monthOfYear();
    org.joda.time.DateTimeZone dateTimeZone13 = null;
    org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone13);
    boolean b15 = localDateTime10.isAfter((org.joda.time.ReadablePartial)localDateTime14);
    org.joda.time.DateTimeZone dateTimeZone17 = null;
    org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone17);
    org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withMillisOfDay((int)(short)0);
    org.joda.time.LocalDateTime.Property property21 = localDateTime20.dayOfYear();
    org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.dayTime();
    org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadablePartial)localDateTime10, (org.joda.time.ReadablePartial)localDateTime20, periodType22);
    int[] i_array25 = copticChronology6.get((org.joda.time.ReadablePartial)localDateTime10, 1496646000000L);
    int[] i_array27 = copticChronology1.get((org.joda.time.ReadablePartial)localDateTime10, 1496707200000L);
    org.joda.time.DurationField durationField28 = copticChronology1.weekyears();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableDateTime3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField28);

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test020"); }

    org.joda.time.Duration duration2 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.Duration duration5 = duration2.withDurationAdded((long)28, (int)' ');
    org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long)'#');
    org.joda.time.DateTime.Property property8 = dateTime7.millisOfSecond();
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableDuration)duration2, (org.joda.time.ReadableInstant)dateTime7);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(duration5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property8);

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test021"); }

    org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.hourOfHalfday();
    org.joda.time.Chronology chronology2 = null;
    org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(chronology2);
    java.util.GregorianCalendar gregorianCalendar4 = mutableDateTime3.toGregorianCalendar();
    mutableDateTime3.addMinutes((int)(byte)1);
    org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone7);
    int i10 = dateTimeZone7.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone7);
    org.joda.time.DateTime dateTime13 = dateTime11.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property14 = dateTime11.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType15 = property14.getFieldType();
    mutableDateTime3.set(dateTimeFieldType15, (int)(byte)10);
    org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField18 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField1, dateTimeFieldType15);
    int i19 = zeroIsMaxDateTimeField18.getMaximumValue();
    int i21 = zeroIsMaxDateTimeField18.getMaximumValue(0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianCalendar4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 12);

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test022"); }

    int i0 = org.joda.time.DateTimeConstants.MONDAY;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i0 == 1);

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test023"); }

    org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long)10);
    org.joda.time.LocalDate.Property property2 = localDate1.weekyear();
    boolean b3 = property2.isLeap();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test024"); }

    org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long)10);
    org.joda.time.LocalDate.Property property2 = localDate1.weekyear();
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.Instant instant3 = new org.joda.time.Instant((java.lang.Object)property2);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property2);

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test025"); }

    int i0 = org.joda.time.DateTimeConstants.APRIL;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i0 == 4);

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test026"); }

    org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
    org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusSeconds(0);
    org.joda.time.LocalDateTime.Property property3 = localDateTime0.dayOfMonth();
    org.joda.time.LocalDateTime localDateTime5 = localDateTime0.minusDays(535);
    org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withWeekOfWeekyear((int)(byte)10);
    java.lang.String str8 = localDateTime7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "2017-03-07T03:57:11.601"+ "'", str8.equals("2017-03-07T03:57:11.601"));

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test027"); }

    java.io.Writer writer0 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.format.FormatUtils.writeUnpaddedInteger(writer0, (long)843);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test028"); }

    org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
    org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusSeconds(0);
    org.joda.time.LocalDateTime.Property property3 = localDateTime0.dayOfMonth();
    org.joda.time.LocalDateTime localDateTime5 = localDateTime0.minusDays(535);
    org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withWeekOfWeekyear((int)(byte)10);
    org.joda.time.ReadableInstant readableInstant9 = null;
    org.joda.time.ReadableDuration readableDuration10 = null;
    org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(readableInstant9, readableDuration10);
    org.joda.time.ReadableDuration readableDuration12 = null;
    org.joda.time.Chronology chronology13 = null;
    org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
    org.joda.time.PeriodType periodType15 = null;
    org.joda.time.chrono.GregorianChronology gregorianChronology16 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((java.lang.Object)chronology13, periodType15, (org.joda.time.Chronology)gregorianChronology16);
    mutablePeriod11.setPeriod(readableDuration12, chronology13);
    org.joda.time.DateTimeZone dateTimeZone20 = null;
    org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone20);
    org.joda.time.DurationField durationField22 = copticChronology21.days();
    org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology)copticChronology21);
    org.joda.time.DateTimeField dateTimeField24 = copticChronology21.millisOfSecond();
    mutablePeriod11.setPeriod((long)(short)1, (org.joda.time.Chronology)copticChronology21);
    org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long)330, (org.joda.time.Chronology)copticChronology21);
    org.joda.time.LocalTime localTime28 = localTime26.minusMillis(1);
    // The following exception was thrown during execution in test generation
    try {
    boolean b29 = localDateTime0.isBefore((org.joda.time.ReadablePartial)localTime26);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableDateTime23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localTime28);

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test029"); }

    int i0 = org.joda.time.DateTimeConstants.MILLIS_PER_WEEK;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i0 == 604800000);

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test030"); }

    org.joda.time.chrono.JulianChronology julianChronology0 = org.joda.time.chrono.JulianChronology.getInstance();
    org.joda.time.DateTimeZone dateTimeZone1 = julianChronology0.getZone();
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, 1496721400817L, 458);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(julianChronology0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone1);

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test031"); }

    org.joda.time.Chronology chronology0 = null;
    org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
    org.joda.time.Instant instant2 = mutableDateTime1.toInstant();
    mutableDateTime1.addWeekyears((int)(short)-1);
    org.joda.time.DateTimeZone dateTimeZone5 = null;
    org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
    long long7 = dateMidnight6.getMillis();
    org.joda.time.DateMidnight dateMidnight9 = dateMidnight6.plusDays(24);
    org.joda.time.Minutes minutes10 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant)mutableDateTime1, (org.joda.time.ReadableInstant)dateMidnight9);
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.withYearOfCentury(236);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 1496707200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(minutes10);

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test032"); }

    org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone0);
    int i3 = dateTimeZone0.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone0);
    org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property7 = dateTime4.millisOfDay();
    org.joda.time.DateTime dateTime9 = property7.addToCopy(0);
    org.joda.time.DateTime dateTime10 = property7.withMaximumValue();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime10);

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test033"); }

    org.joda.time.DateTimeZone dateTimeZone1 = null;
    org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone1);
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone3);
    org.joda.time.DurationField durationField5 = copticChronology4.days();
    boolean b6 = org.joda.time.field.FieldUtils.equals((java.lang.Object)localDateTime2, (java.lang.Object)durationField5);
    long long9 = durationField5.subtract((long)42, 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long9 == (-259199958L));

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test034"); }

    org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateTimeParser();
    java.lang.Appendable appendable1 = null;
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone3);
    org.joda.time.Chronology chronology5 = copticChronology4.withUTC();
    org.joda.time.MonthDay monthDay6 = new org.joda.time.MonthDay((long)'a', (org.joda.time.Chronology)copticChronology4);
    // The following exception was thrown during execution in test generation
    try {
    dateTimeFormatter0.printTo(appendable1, (org.joda.time.ReadablePartial)monthDay6);
      org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology5);

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test035"); }

    org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearDay();
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.DurationFieldType durationFieldType2 = periodType0.getFieldType(10080);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType0);

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test036"); }

    org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateHourMinuteSecondFraction();
    org.joda.time.Chronology chronology1 = null;
    org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone3);
    java.lang.String str5 = copticChronology4.toString();
    org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone6);
    org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay(dateTimeZone6);
    org.joda.time.Chronology chronology9 = copticChronology4.withZone(dateTimeZone6);
    org.joda.time.DateTime dateTime10 = mutableDateTime2.toDateTime(dateTimeZone6);
    java.lang.String str11 = dateTimeFormatter0.print((org.joda.time.ReadableInstant)mutableDateTime2);
    java.lang.Object obj12 = mutableDateTime2.clone();
    org.joda.time.MutableDateTime.Property property13 = mutableDateTime2.dayOfYear();
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.MutableDateTime mutableDateTime15 = property13.set((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "CopticChronology[UTC]"+ "'", str5.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "2017-06-06T03:57:11.979"+ "'", str11.equals("2017-06-06T03:57:11.979"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property13);

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test037"); }

    org.joda.time.Chronology chronology1 = null;
    java.util.Locale locale2 = null;
    org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long)'4', chronology1, locale2, (java.lang.Integer)1, (int)'a');
    dateTimeParserBucket5.setOffset((java.lang.Integer)(-1));
    org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
    dateTimeParserBucket5.setZone(dateTimeZone8);
    org.joda.time.LocalDateTime localDateTime10 = null;
    boolean b11 = dateTimeZone8.isLocalDateTimeGap(localDateTime10);
    org.joda.time.chrono.IslamicChronology islamicChronology12 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone8);
    org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology12);

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test038"); }

    org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone0);
    int i3 = dateTimeZone0.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone0);
    org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property7 = dateTime4.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType8 = property7.getFieldType();
    org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone9);
    int i12 = dateTimeZone9.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone9);
    org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property16 = dateTime13.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType17 = property16.getFieldType();
    org.joda.time.DateTimeComparator dateTimeComparator18 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType8, dateTimeFieldType17);
    org.joda.time.Partial partial20 = new org.joda.time.Partial(dateTimeFieldType8, (int)(byte)1);
    int i22 = partial20.getValue((int)(short)0);
    java.util.Locale locale24 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str25 = partial20.toString("", locale24);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 1);

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test039"); }

    org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
    org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusSeconds(0);
    org.joda.time.LocalDateTime.Property property3 = localDateTime0.dayOfMonth();
    int i4 = localDateTime0.getMillisOfSecond();
    org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withMillisOfSecond(4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime6);

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test040"); }

    org.joda.time.Chronology chronology0 = null;
    org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
    org.joda.time.Instant instant2 = mutableDateTime1.toInstant();
    org.joda.time.ReadableInstant readableInstant3 = null;
    boolean b4 = mutableDateTime1.isEqual(readableInstant3);
    org.joda.time.DateTime dateTime5 = mutableDateTime1.toDateTime();
    org.joda.time.DateTime.Property property6 = dateTime5.yearOfCentury();
    java.util.Locale locale8 = null;
    org.joda.time.DateTime dateTime9 = property6.setCopy("26", locale8);
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.DateTime dateTime11 = dateTime9.withYearOfCentury((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime9);

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test041"); }

    org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
    org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusSeconds(0);
    org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withMinuteOfHour((int)(byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime4);

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test042"); }

    org.joda.time.Duration duration2 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone3);
    org.joda.time.DateMidnight.Property property5 = dateMidnight4.centuryOfEra();
    org.joda.time.DateMidnight.Property property6 = dateMidnight4.dayOfYear();
    org.joda.time.DateMidnight dateMidnight7 = property6.roundHalfFloorCopy();
    org.joda.time.PeriodType periodType8 = null;
    org.joda.time.Period period9 = duration2.toPeriodFrom((org.joda.time.ReadableInstant)dateMidnight7, periodType8);
    org.joda.time.DateMidnight dateMidnight11 = dateMidnight7.withMillis((long)(-97));
    org.joda.time.Chronology chronology12 = null;
    org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
    org.joda.time.Instant instant14 = mutableDateTime13.toInstant();
    mutableDateTime13.addWeekyears((int)(short)-1);
    org.joda.time.DateTimeZone dateTimeZone17 = null;
    org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(dateTimeZone17);
    long long19 = dateMidnight18.getMillis();
    org.joda.time.DateMidnight dateMidnight21 = dateMidnight18.plusDays(24);
    org.joda.time.Minutes minutes22 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant)mutableDateTime13, (org.joda.time.ReadableInstant)dateMidnight21);
    org.joda.time.DateMidnight dateMidnight24 = dateMidnight21.withDayOfYear(100);
    org.joda.time.DateTimeZone dateTimeZone26 = null;
    org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone26);
    org.joda.time.LocalDateTime.Property property28 = localDateTime27.monthOfYear();
    org.joda.time.DateTimeZone dateTimeZone30 = null;
    org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone30);
    boolean b32 = localDateTime27.isAfter((org.joda.time.ReadablePartial)localDateTime31);
    org.joda.time.DateTimeZone dateTimeZone34 = null;
    org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone34);
    org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withMillisOfDay((int)(short)0);
    org.joda.time.LocalDateTime.Property property38 = localDateTime37.dayOfYear();
    org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.dayTime();
    org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadablePartial)localDateTime27, (org.joda.time.ReadablePartial)localDateTime37, periodType39);
    org.joda.time.PeriodType periodType41 = periodType39.withSecondsRemoved();
    org.joda.time.PeriodType periodType42 = org.joda.time.DateTimeUtils.getPeriodType(periodType41);
    org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant)dateMidnight11, (org.joda.time.ReadableInstant)dateMidnight24, periodType42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long19 == 1496707200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(minutes22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType42);

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test043"); }

    org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDate();
    int i1 = dateTimeFormatter0.getDefaultYear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 2000);

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test044"); }

    org.joda.time.IllegalFieldValueException illegalFieldValueException4 = new org.joda.time.IllegalFieldValueException("", (java.lang.Number)47, (java.lang.Number)(byte)-1, (java.lang.Number)10080);
    java.lang.Throwable[] throwable_array5 = illegalFieldValueException4.getSuppressed();
    org.joda.time.IllegalFieldValueException illegalFieldValueException10 = new org.joda.time.IllegalFieldValueException("", (java.lang.Number)47, (java.lang.Number)(byte)-1, (java.lang.Number)10080);
    illegalFieldValueException10.prependMessage("T03:56:29");
    illegalFieldValueException4.addSuppressed((java.lang.Throwable)illegalFieldValueException10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array5);

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test045"); }

    org.joda.time.Chronology chronology0 = null;
    org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
    java.util.GregorianCalendar gregorianCalendar2 = mutableDateTime1.toGregorianCalendar();
    mutableDateTime1.addMinutes((int)(byte)1);
    org.joda.time.Chronology chronology5 = mutableDateTime1.getChronology();
    // The following exception was thrown during execution in test generation
    try {
    mutableDateTime1.setDayOfWeek(1969);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianCalendar2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology5);

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test046"); }

    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.Duration duration1 = org.joda.time.Duration.parse("JulianChronology[UTC]");
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test047"); }

    org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
    org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusSeconds(0);
    org.joda.time.LocalDateTime.Property property3 = localDateTime0.dayOfMonth();
    org.joda.time.Interval interval4 = property3.toInterval();
    org.joda.time.Minutes minutes5 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval)interval4);
    org.joda.time.Duration duration8 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone9);
    int i12 = dateTimeZone9.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone9);
    org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)duration8, (org.joda.time.ReadableInstant)dateTime13);
    boolean b15 = interval4.isAfter((org.joda.time.ReadableInstant)dateTime13);
    boolean b17 = interval4.contains((long)235);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(interval4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(minutes5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test048"); }

    org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicTTimeNoMillis();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter0);

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test049"); }

    org.joda.time.Chronology chronology0 = null;
    org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
    org.joda.time.Instant instant2 = mutableDateTime1.toInstant();
    org.joda.time.ReadableInstant readableInstant3 = null;
    boolean b4 = mutableDateTime1.isEqual(readableInstant3);
    org.joda.time.DateTime dateTime5 = mutableDateTime1.toDateTime();
    org.joda.time.DateTime.Property property6 = dateTime5.yearOfCentury();
    java.util.Locale locale8 = null;
    org.joda.time.DateTime dateTime9 = property6.setCopy("26", locale8);
    org.joda.time.Seconds seconds10 = org.joda.time.Seconds.TWO;
    org.joda.time.DateTime dateTime12 = dateTime9.withPeriodAdded((org.joda.time.ReadablePeriod)seconds10, 5);
    org.joda.time.DateTimeZone dateTimeZone13 = null;
    org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(dateTimeZone13);
    org.joda.time.Duration duration17 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.DateMidnight dateMidnight18 = dateMidnight14.minus((org.joda.time.ReadableDuration)duration17);
    org.joda.time.DateTime dateTime19 = dateTime9.plus((org.joda.time.ReadableDuration)duration17);
    org.joda.time.DateTimeZone dateTimeZone21 = null;
    org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone21);
    org.joda.time.DateTime dateTime23 = dateTime9.withFields((org.joda.time.ReadablePartial)localDateTime22);
    org.joda.time.DateTime dateTime25 = dateTime9.minusMinutes(54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(seconds10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime25);

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test050"); }

    org.joda.time.Chronology chronology0 = null;
    org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
    org.joda.time.Instant instant2 = mutableDateTime1.toInstant();
    org.joda.time.ReadableInstant readableInstant3 = null;
    boolean b4 = mutableDateTime1.isEqual(readableInstant3);
    org.joda.time.DateTime dateTime5 = mutableDateTime1.toDateTime();
    // The following exception was thrown during execution in test generation
    try {
    mutableDateTime1.setDateTime(999, 235, 1969, 28, 0, (int)(short)10, 330);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime5);

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test051"); }

    org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
    org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusSeconds(0);
    org.joda.time.LocalDateTime.Property property3 = localDateTime0.dayOfMonth();
    org.joda.time.Interval interval4 = property3.toInterval();
    org.joda.time.Minutes minutes5 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval)interval4);
    org.joda.time.Duration duration6 = minutes5.toStandardDuration();
    int i7 = minutes5.getMinutes();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(interval4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(minutes5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(duration6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1440);

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test052"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
    org.joda.time.Duration duration4 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.DateTimeZone dateTimeZone5 = null;
    org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
    org.joda.time.DateMidnight.Property property7 = dateMidnight6.centuryOfEra();
    org.joda.time.DateMidnight.Property property8 = dateMidnight6.dayOfYear();
    org.joda.time.DateMidnight dateMidnight9 = property8.roundHalfFloorCopy();
    org.joda.time.PeriodType periodType10 = null;
    org.joda.time.Period period11 = duration4.toPeriodFrom((org.joda.time.ReadableInstant)dateMidnight9, periodType10);
    org.joda.time.DateMidnight dateMidnight13 = dateMidnight1.withPeriodAdded((org.joda.time.ReadablePeriod)period11, 100);
    org.joda.time.DateMidnight.Property property14 = dateMidnight13.centuryOfEra();
    org.joda.time.DateMidnight dateMidnight16 = property14.addToCopy((long)12);
    org.joda.time.DateMidnight.Property property17 = dateMidnight16.weekOfWeekyear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property17);

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test053"); }

    org.joda.time.Chronology chronology0 = null;
    org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
    org.joda.time.Instant instant2 = mutableDateTime1.toInstant();
    org.joda.time.ReadableInstant readableInstant3 = null;
    boolean b4 = mutableDateTime1.isEqual(readableInstant3);
    org.joda.time.DateTime dateTime5 = mutableDateTime1.toDateTime();
    org.joda.time.DateTime.Property property6 = dateTime5.yearOfCentury();
    java.util.Locale locale8 = null;
    org.joda.time.DateTime dateTime9 = property6.setCopy("26", locale8);
    org.joda.time.Seconds seconds10 = org.joda.time.Seconds.TWO;
    org.joda.time.DateTime dateTime12 = dateTime9.withPeriodAdded((org.joda.time.ReadablePeriod)seconds10, 5);
    org.joda.time.DateTimeZone dateTimeZone13 = null;
    org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(dateTimeZone13);
    org.joda.time.Duration duration17 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.DateMidnight dateMidnight18 = dateMidnight14.minus((org.joda.time.ReadableDuration)duration17);
    org.joda.time.DateTime dateTime19 = dateTime9.plus((org.joda.time.ReadableDuration)duration17);
    int i20 = dateTime19.getMillisOfSecond();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(seconds10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 459);

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test054"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
    org.joda.time.ReadableDuration readableDuration2 = null;
    org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant)dateMidnight1, readableDuration2);
    org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone4);
    int i7 = dateTimeZone4.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone4);
    org.joda.time.Duration duration11 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.Duration duration14 = duration11.withDurationAdded((long)28, (int)' ');
    org.joda.time.DateTimeZone dateTimeZone15 = null;
    org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(dateTimeZone15);
    org.joda.time.DateMidnight.Property property17 = dateMidnight16.centuryOfEra();
    org.joda.time.PeriodType periodType18 = null;
    org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)duration14, (org.joda.time.ReadableInstant)dateMidnight16, periodType18);
    org.joda.time.DateTime dateTime21 = dateTime8.withDurationAdded((org.joda.time.ReadableDuration)duration14, 5);
    mutableInterval3.setDurationAfterStart((org.joda.time.ReadableDuration)duration14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(duration14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime21);

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test055"); }

    org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(10L);
    int i2 = monthDay1.getDayOfMonth();
    org.joda.time.DurationFieldType durationFieldType3 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.MonthDay monthDay5 = monthDay1.withFieldAdded(durationFieldType3, 365);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test056"); }

    org.joda.time.DateTimeZone dateTimeZone1 = null;
    org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone1);
    org.joda.time.DurationField durationField3 = copticChronology2.days();
    java.util.Locale locale4 = null;
    org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long)8, (org.joda.time.Chronology)copticChronology2, locale4);
    org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period11 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology10);
    org.joda.time.DateTimeZone dateTimeZone12 = gregorianChronology10.getZone();
    org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((int)(byte)1, 6, 8, (org.joda.time.Chronology)gregorianChronology10);
    org.joda.time.DateTimeField dateTimeField14 = gregorianChronology10.dayOfWeek();
    org.joda.time.field.SkipDateTimeField skipDateTimeField15 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)copticChronology2, dateTimeField14);
    int i17 = skipDateTimeField15.getMinimumValue((long)236);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test057"); }

    java.lang.Object obj0 = null;
    org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
    int i4 = dateTimeZone1.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone1);
    org.joda.time.chrono.GregorianChronology gregorianChronology8 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period9 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology8);
    org.joda.time.DateTimeZone dateTimeZone10 = gregorianChronology8.getZone();
    org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long)1, dateTimeZone10);
    org.joda.time.DateMidnight dateMidnight12 = org.joda.time.DateMidnight.now(dateTimeZone10);
    org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now(dateTimeZone10);
    long long15 = dateTimeZone1.getMillisKeepLocal(dateTimeZone10, (long)27);
    org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(obj0, dateTimeZone1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == 27L);

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test058"); }

    org.joda.time.chrono.GregorianChronology gregorianChronology2 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period3 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology2);
    org.joda.time.DateTimeZone dateTimeZone4 = gregorianChronology2.getZone();
    org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long)1, dateTimeZone4);
    org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone4);
    org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone7 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone4);
    org.joda.time.DateTimeZone dateTimeZone8 = cachedDateTimeZone7.getUncachedZone();
    org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cachedDateTimeZone7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology9);

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test059"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
    org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth((org.joda.time.Chronology)copticChronology1);
    org.joda.time.YearMonth yearMonth4 = yearMonth2.minusYears((int)'a');
    org.joda.time.YearMonth yearMonth6 = yearMonth2.minusYears((-1));
    org.joda.time.YearMonth yearMonth8 = yearMonth6.withYear((int)' ');
    org.joda.time.DateTimeFieldType[] dateTimeFieldType_array9 = yearMonth6.getFieldTypes();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonth4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonth6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonth8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType_array9);

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test060"); }

    org.joda.time.chrono.JulianChronology julianChronology0 = org.joda.time.chrono.JulianChronology.getInstance();
    // The following exception was thrown during execution in test generation
    try {
    long long8 = julianChronology0.getDateTimeMillis((int)(short)1, 42, (int)'#', (-1), 1440, 5, 235);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(julianChronology0);

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test061"); }

    org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone0);
    int i3 = dateTimeZone0.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone0);
    org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property7 = dateTime4.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType8 = property7.getFieldType();
    org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone9);
    int i12 = dateTimeZone9.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone9);
    org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property16 = dateTime13.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType17 = property16.getFieldType();
    org.joda.time.DateTimeComparator dateTimeComparator18 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType8, dateTimeFieldType17);
    org.joda.time.Partial partial20 = new org.joda.time.Partial(dateTimeFieldType8, (int)(byte)1);
    org.joda.time.DateTimeFieldType[] dateTimeFieldType_array21 = partial20.getFieldTypes();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType_array21);

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test062"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
    org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.plusDays((int)(short)100);
    org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay3.withMonthOfYear(10);
    org.joda.time.Interval interval6 = yearMonthDay3.toInterval();
    java.lang.String str7 = interval6.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonthDay3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonthDay5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(interval6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "2017-09-14T00:00:00.000/2017-09-15T00:00:00.000"+ "'", str7.equals("2017-09-14T00:00:00.000/2017-09-15T00:00:00.000"));

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test063"); }

    org.joda.time.Chronology chronology0 = null;
    org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
    org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.hourOfDay();
    org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.dayOfYear();
    org.joda.time.MutableDateTime mutableDateTime5 = property3.add((int)(byte)10);
    java.lang.Object obj6 = mutableDateTime5.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableDateTime5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj6);

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test064"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
    org.joda.time.DateMidnight.Property property2 = dateMidnight1.centuryOfEra();
    org.joda.time.DateMidnight.Property property3 = dateMidnight1.dayOfYear();
    org.joda.time.DateMidnight.Property property4 = dateMidnight1.yearOfCentury();
    org.joda.time.DateTimeZone dateTimeZone5 = null;
    org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay(dateTimeZone5);
    org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusSeconds((int)(short)0);
    org.joda.time.TimeOfDay.Property property9 = timeOfDay6.secondOfMinute();
    org.joda.time.DateTimeZone dateTimeZone10 = null;
    org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(dateTimeZone10);
    boolean b12 = timeOfDay6.isBefore((org.joda.time.ReadablePartial)timeOfDay11);
    org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone13);
    int i16 = dateTimeZone13.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone13);
    org.joda.time.DateTime dateTime19 = dateTime17.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property20 = dateTime17.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType21 = property20.getFieldType();
    org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone22);
    int i25 = dateTimeZone22.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone22);
    org.joda.time.DateTime dateTime28 = dateTime26.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property29 = dateTime26.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType30 = property29.getFieldType();
    org.joda.time.DateTimeComparator dateTimeComparator31 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType21, dateTimeFieldType30);
    org.joda.time.DateTimeZone dateTimeZone32 = null;
    org.joda.time.TimeOfDay timeOfDay33 = new org.joda.time.TimeOfDay(dateTimeZone32);
    org.joda.time.TimeOfDay timeOfDay35 = timeOfDay33.minusSeconds((int)(short)0);
    org.joda.time.TimeOfDay.Property property36 = timeOfDay33.secondOfMinute();
    org.joda.time.TimeOfDay.Property property37 = timeOfDay33.millisOfSecond();
    java.util.Locale locale38 = null;
    int i39 = property37.getMaximumTextLength(locale38);
    org.joda.time.DateTimeFieldType dateTimeFieldType40 = property37.getFieldType();
    org.joda.time.DateTimeComparator dateTimeComparator41 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType30, dateTimeFieldType40);
    org.joda.time.TimeOfDay.Property property42 = timeOfDay11.property(dateTimeFieldType40);
    org.joda.time.DateMidnight dateMidnight43 = dateMidnight1.withFields((org.joda.time.ReadablePartial)timeOfDay11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight43);

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test065"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
    org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth((org.joda.time.Chronology)copticChronology1);
    org.joda.time.YearMonth yearMonth4 = yearMonth2.minusYears((int)'a');
    org.joda.time.YearMonth yearMonth6 = yearMonth2.minusYears((-1));
    java.lang.String str8 = yearMonth2.toString("32");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonth4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonth6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "32"+ "'", str8.equals("32"));

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test066"); }

    org.joda.time.Chronology chronology0 = null;
    org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
    java.lang.Object obj2 = mutableDateTime1.clone();
    mutableDateTime1.addYears(12);
    java.lang.Object obj5 = mutableDateTime1.clone();
    mutableDateTime1.addSeconds(8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj5);

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test067"); }

    org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
    org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusSeconds(0);
    org.joda.time.LocalDateTime.Property property3 = localDateTime0.dayOfMonth();
    org.joda.time.Interval interval4 = property3.toInterval();
    org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
    org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusSeconds(0);
    org.joda.time.LocalDateTime.Property property8 = localDateTime5.dayOfMonth();
    org.joda.time.Interval interval9 = property8.toInterval();
    boolean b10 = interval9.containsNow();
    boolean b11 = interval4.abuts((org.joda.time.ReadableInterval)interval9);
    org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
    org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusSeconds(0);
    org.joda.time.LocalDateTime.Property property15 = localDateTime12.dayOfMonth();
    org.joda.time.Interval interval16 = property15.toInterval();
    org.joda.time.Minutes minutes17 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval)interval16);
    org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone18);
    int i21 = dateTimeZone18.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone18);
    org.joda.time.DateTime dateTime24 = dateTime22.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property25 = dateTime22.millisOfDay();
    org.joda.time.Interval interval26 = property25.toInterval();
    org.joda.time.Interval interval27 = interval16.overlap((org.joda.time.ReadableInterval)interval26);
    boolean b28 = interval9.contains((org.joda.time.ReadableInterval)interval26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(interval4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(interval9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(interval16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(minutes17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(interval26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(interval27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test068"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(dateTimeZone0);
    org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusSeconds((int)(short)0);
    org.joda.time.TimeOfDay.Property property4 = timeOfDay1.secondOfMinute();
    org.joda.time.TimeOfDay.Property property5 = timeOfDay1.millisOfSecond();
    org.joda.time.TimeOfDay timeOfDay7 = timeOfDay1.minusSeconds((int)(byte)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay7);

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test069"); }

    org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekyearWeekDay();
    int i1 = dateTimeFormatter0.getDefaultYear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 2000);

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test070"); }

    org.joda.time.DateTimeZone dateTimeZone1 = null;
    org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone1);
    org.joda.time.DurationField durationField3 = copticChronology2.days();
    java.util.Locale locale4 = null;
    org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long)8, (org.joda.time.Chronology)copticChronology2, locale4);
    org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period11 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology10);
    org.joda.time.DateTimeZone dateTimeZone12 = gregorianChronology10.getZone();
    org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((int)(byte)1, 6, 8, (org.joda.time.Chronology)gregorianChronology10);
    org.joda.time.DateTimeField dateTimeField14 = gregorianChronology10.dayOfWeek();
    org.joda.time.field.SkipDateTimeField skipDateTimeField15 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)copticChronology2, dateTimeField14);
    org.joda.time.DurationField durationField16 = skipDateTimeField15.getLeapDurationField();
    org.joda.time.DurationField durationField17 = skipDateTimeField15.getDurationField();
    org.joda.time.DateTimeZone dateTimeZone19 = null;
    org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone19);
    org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withMillisOfDay((int)(short)0);
    org.joda.time.DateTimeZone dateTimeZone23 = null;
    org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(dateTimeZone23);
    org.joda.time.ReadableDuration readableDuration25 = null;
    org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant)dateMidnight24, readableDuration25);
    org.joda.time.Years years28 = org.joda.time.Years.years(0);
    org.joda.time.Years years30 = years28.minus((int)(byte)-1);
    mutableInterval26.setPeriodAfterStart((org.joda.time.ReadablePeriod)years30);
    org.joda.time.LocalDateTime localDateTime33 = localDateTime22.withPeriodAdded((org.joda.time.ReadablePeriod)years30, (int)'a');
    org.joda.time.LocalDateTime localDateTime35 = localDateTime22.minusMonths(0);
    org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusDays((int)'#');
    java.util.Locale locale39 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str40 = skipDateTimeField15.getAsText((org.joda.time.ReadablePartial)localDateTime37, 12, locale39);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(durationField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(years28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(years30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime37);

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test071"); }

    org.joda.time.DateTimeComparator dateTimeComparator0 = org.joda.time.DateTimeComparator.getTimeOnlyInstance();
    org.joda.time.DateTimeFieldType dateTimeFieldType1 = dateTimeComparator0.getLowerLimit();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dateTimeFieldType1);

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test072"); }

    org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(10L);
    int i2 = monthDay1.getDayOfMonth();
    org.joda.time.Period period7 = new org.joda.time.Period((int)(short)0, (int)'4', 1, 0);
    org.joda.time.PeriodType periodType8 = null;
    org.joda.time.Period period9 = period7.withPeriodType(periodType8);
    org.joda.time.Period period11 = period9.minusHours(10);
    org.joda.time.Period period12 = period11.toPeriod();
    org.joda.time.Period period14 = period12.minusMonths((int)(short)100);
    org.joda.time.Minutes minutes15 = period12.toStandardMinutes();
    org.joda.time.Minutes minutes17 = minutes15.minus((int)(short)1);
    org.joda.time.MonthDay monthDay18 = monthDay1.plus((org.joda.time.ReadablePeriod)minutes17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(minutes15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(minutes17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(monthDay18);

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test073"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(dateTimeZone0);
    org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusSeconds((int)(short)0);
    org.joda.time.TimeOfDay.Property property4 = timeOfDay1.secondOfMinute();
    java.lang.String str5 = property4.toString();
    java.lang.String str6 = property4.getName();
    java.util.Locale locale8 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.TimeOfDay timeOfDay9 = property4.setCopy("167", locale8);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Property[secondOfMinute]"+ "'", str5.equals("Property[secondOfMinute]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "secondOfMinute"+ "'", str6.equals("secondOfMinute"));

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test074"); }

    org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long)10080);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(duration1);

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test075"); }

    org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long)(-101));

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test076"); }

    org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long)10);
    java.lang.String str2 = localDate1.toString();
    org.joda.time.LocalDate localDate4 = localDate1.withDayOfMonth(3);
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone6);
    org.joda.time.LocalDateTime.Property property8 = localDateTime7.monthOfYear();
    org.joda.time.DateTimeZone dateTimeZone10 = null;
    org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone10);
    boolean b12 = localDateTime7.isAfter((org.joda.time.ReadablePartial)localDateTime11);
    org.joda.time.DateTimeZone dateTimeZone14 = null;
    org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone14);
    org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMillisOfDay((int)(short)0);
    org.joda.time.LocalDateTime.Property property18 = localDateTime17.dayOfYear();
    org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.dayTime();
    org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadablePartial)localDateTime7, (org.joda.time.ReadablePartial)localDateTime17, periodType19);
    org.joda.time.PeriodType periodType21 = periodType19.withSecondsRemoved();
    org.joda.time.PeriodType periodType22 = org.joda.time.DateTimeUtils.getPeriodType(periodType21);
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((java.lang.Object)localDate1, periodType21);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "1970-01-01"+ "'", str2.equals("1970-01-01"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType22);

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test077"); }

    org.joda.time.Duration duration2 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone3);
    org.joda.time.DateMidnight.Property property5 = dateMidnight4.centuryOfEra();
    org.joda.time.DateMidnight.Property property6 = dateMidnight4.dayOfYear();
    org.joda.time.DateMidnight dateMidnight7 = property6.roundHalfFloorCopy();
    org.joda.time.PeriodType periodType8 = null;
    org.joda.time.Period period9 = duration2.toPeriodFrom((org.joda.time.ReadableInstant)dateMidnight7, periodType8);
    org.joda.time.DateMidnight.Property property10 = dateMidnight7.year();
    org.joda.time.DateMidnight.Property property11 = dateMidnight7.dayOfYear();
    boolean b12 = property11.isLeap();
    org.joda.time.DateMidnight dateMidnight14 = property11.addToCopy((long)298);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight14);

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test078"); }

    org.joda.time.YearMonth yearMonth1 = org.joda.time.YearMonth.parse("1970-01-01");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonth1);

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test079"); }

    org.joda.time.chrono.GregorianChronology gregorianChronology2 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period3 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology2);
    org.joda.time.DateTimeZone dateTimeZone4 = gregorianChronology2.getZone();
    org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long)1, dateTimeZone4);
    org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone4);
    org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone7 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone4);
    org.joda.time.DateTimeZone dateTimeZone8 = cachedDateTimeZone7.getUncachedZone();
    org.joda.time.DateMidnight dateMidnight9 = org.joda.time.DateMidnight.now((org.joda.time.DateTimeZone)cachedDateTimeZone7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cachedDateTimeZone7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight9);

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test080"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(dateTimeZone0);
    org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusSeconds((int)(short)0);
    org.joda.time.TimeOfDay.Property property4 = timeOfDay1.secondOfMinute();
    org.joda.time.TimeOfDay.Property property5 = timeOfDay1.millisOfSecond();
    org.joda.time.ReadablePeriod readablePeriod6 = null;
    org.joda.time.TimeOfDay timeOfDay8 = timeOfDay1.withPeriodAdded(readablePeriod6, 330);
    org.joda.time.LocalTime localTime9 = timeOfDay1.toLocalTime();
    boolean b10 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial)localTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test081"); }

    org.joda.time.Chronology chronology0 = null;
    org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
    org.joda.time.DateTimeZone dateTimeZone2 = null;
    org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone2);
    java.lang.String str4 = copticChronology3.toString();
    org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone5);
    org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(dateTimeZone5);
    org.joda.time.Chronology chronology8 = copticChronology3.withZone(dateTimeZone5);
    org.joda.time.DateTime dateTime9 = mutableDateTime1.toDateTime(dateTimeZone5);
    org.joda.time.Duration duration12 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.Duration duration14 = duration12.minus((long)10080);
    org.joda.time.Chronology chronology15 = null;
    org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
    org.joda.time.Instant instant17 = mutableDateTime16.toInstant();
    org.joda.time.ReadableInstant readableInstant18 = null;
    boolean b19 = mutableDateTime16.isEqual(readableInstant18);
    org.joda.time.DateTime dateTime20 = mutableDateTime16.toDateTime();
    org.joda.time.DateTime.Property property21 = dateTime20.yearOfCentury();
    java.util.Locale locale23 = null;
    org.joda.time.DateTime dateTime24 = property21.setCopy("26", locale23);
    org.joda.time.Seconds seconds25 = org.joda.time.Seconds.TWO;
    org.joda.time.DateTime dateTime27 = dateTime24.withPeriodAdded((org.joda.time.ReadablePeriod)seconds25, 5);
    org.joda.time.DateTimeZone dateTimeZone28 = null;
    org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(dateTimeZone28);
    org.joda.time.Duration duration32 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.DateMidnight dateMidnight33 = dateMidnight29.minus((org.joda.time.ReadableDuration)duration32);
    org.joda.time.DateTime dateTime34 = dateTime24.plus((org.joda.time.ReadableDuration)duration32);
    boolean b35 = duration12.equals((java.lang.Object)dateTime34);
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadableInstant)mutableDateTime1, (org.joda.time.ReadableDuration)duration12);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "CopticChronology[UTC]"+ "'", str4.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(duration14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(seconds25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test082"); }

    org.joda.time.ReadableInstant readableInstant1 = null;
    org.joda.time.ReadableDuration readableDuration2 = null;
    org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant1, readableDuration2);
    org.joda.time.ReadableDuration readableDuration4 = null;
    org.joda.time.Chronology chronology5 = null;
    org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
    org.joda.time.PeriodType periodType7 = null;
    org.joda.time.chrono.GregorianChronology gregorianChronology8 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((java.lang.Object)chronology5, periodType7, (org.joda.time.Chronology)gregorianChronology8);
    mutablePeriod3.setPeriod(readableDuration4, chronology5);
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone12);
    org.joda.time.DurationField durationField14 = copticChronology13.days();
    org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology)copticChronology13);
    org.joda.time.DateTimeField dateTimeField16 = copticChronology13.millisOfSecond();
    mutablePeriod3.setPeriod((long)(short)1, (org.joda.time.Chronology)copticChronology13);
    org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long)330, (org.joda.time.Chronology)copticChronology13);
    org.joda.time.LocalTime localTime20 = localTime18.minusMillis(1);
    org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone21);
    int i24 = dateTimeZone21.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone21);
    org.joda.time.DateTime dateTime27 = dateTime25.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property28 = dateTime25.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType29 = property28.getFieldType();
    org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology31 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone30);
    int i33 = dateTimeZone30.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone30);
    org.joda.time.DateTime dateTime36 = dateTime34.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property37 = dateTime34.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType38 = property37.getFieldType();
    org.joda.time.DateTimeComparator dateTimeComparator39 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType29, dateTimeFieldType38);
    boolean b40 = localTime20.isSupported(dateTimeFieldType29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableDateTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test083"); }

    org.joda.time.chrono.GregorianChronology gregorianChronology3 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period4 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology3);
    org.joda.time.DateTimeZone dateTimeZone5 = gregorianChronology3.getZone();
    org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long)1, dateTimeZone5);
    org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone5);
    org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone8 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone5);
    org.joda.time.chrono.IslamicChronology islamicChronology9 = org.joda.time.chrono.IslamicChronology.getInstance((org.joda.time.DateTimeZone)cachedDateTimeZone8);
    org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromMillisOfDay(1L, (org.joda.time.Chronology)islamicChronology9);
    // The following exception was thrown during execution in test generation
    try {
    long long18 = islamicChronology9.getDateTimeMillis(27, (int)(byte)1, 692, 32, 0, 2000, 10080);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cachedDateTimeZone8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localTime10);

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test084"); }

    org.joda.time.ReadableInstant readableInstant0 = null;
    org.joda.time.ReadableDuration readableDuration1 = null;
    org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
    org.joda.time.chrono.GregorianChronology gregorianChronology4 = org.joda.time.chrono.GregorianChronology.getInstance();
    mutablePeriod2.setPeriod((long)100, (org.joda.time.Chronology)gregorianChronology4);
    int i6 = mutablePeriod2.getWeeks();
    mutablePeriod2.setMonths(100);
    org.joda.time.Period period9 = mutablePeriod2.toPeriod();
    int[] i_array10 = period9.getValues();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array10);

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test085"); }

    org.joda.time.DateTimeZone dateTimeZone1 = null;
    org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone1);
    org.joda.time.DurationField durationField3 = copticChronology2.days();
    java.util.Locale locale4 = null;
    org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long)8, (org.joda.time.Chronology)copticChronology2, locale4);
    org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period11 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology10);
    org.joda.time.DateTimeZone dateTimeZone12 = gregorianChronology10.getZone();
    org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((int)(byte)1, 6, 8, (org.joda.time.Chronology)gregorianChronology10);
    org.joda.time.DateTimeField dateTimeField14 = gregorianChronology10.dayOfWeek();
    org.joda.time.field.SkipDateTimeField skipDateTimeField15 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)copticChronology2, dateTimeField14);
    java.util.Locale locale17 = null;
    java.lang.String str18 = skipDateTimeField15.getAsShortText(53L, locale17);
    org.joda.time.Chronology chronology19 = null;
    org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
    org.joda.time.Instant instant21 = mutableDateTime20.toInstant();
    org.joda.time.ReadableInstant readableInstant22 = null;
    boolean b23 = mutableDateTime20.isEqual(readableInstant22);
    org.joda.time.DateTime dateTime24 = mutableDateTime20.toDateTime();
    org.joda.time.DateTime.Property property25 = dateTime24.yearOfCentury();
    java.util.Locale locale27 = null;
    org.joda.time.DateTime dateTime28 = property25.setCopy("26", locale27);
    org.joda.time.Seconds seconds29 = org.joda.time.Seconds.TWO;
    org.joda.time.DateTime dateTime31 = dateTime28.withPeriodAdded((org.joda.time.ReadablePeriod)seconds29, 5);
    org.joda.time.DateTimeZone dateTimeZone32 = null;
    org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(dateTimeZone32);
    org.joda.time.Duration duration36 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.DateMidnight dateMidnight37 = dateMidnight33.minus((org.joda.time.ReadableDuration)duration36);
    org.joda.time.DateTime dateTime38 = dateTime28.plus((org.joda.time.ReadableDuration)duration36);
    org.joda.time.DateTimeZone dateTimeZone40 = null;
    org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone40);
    org.joda.time.DateTime dateTime42 = dateTime28.withFields((org.joda.time.ReadablePartial)localDateTime41);
    org.joda.time.Chronology chronology45 = null;
    java.util.Locale locale46 = null;
    org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long)'4', chronology45, locale46, (java.lang.Integer)1, (int)'a');
    dateTimeParserBucket49.setOffset((java.lang.Integer)(-1));
    org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
    dateTimeParserBucket49.setZone(dateTimeZone52);
    org.joda.time.Chronology chronology54 = null;
    org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime(chronology54);
    org.joda.time.DateTimeZone dateTimeZone56 = null;
    org.joda.time.chrono.CopticChronology copticChronology57 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone56);
    java.lang.String str58 = copticChronology57.toString();
    org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology60 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone59);
    org.joda.time.TimeOfDay timeOfDay61 = new org.joda.time.TimeOfDay(dateTimeZone59);
    org.joda.time.Chronology chronology62 = copticChronology57.withZone(dateTimeZone59);
    org.joda.time.DateTime dateTime63 = mutableDateTime55.toDateTime(dateTimeZone59);
    org.joda.time.chrono.EthiopicChronology ethiopicChronology65 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone59, (int)(byte)1);
    boolean b66 = dateTimeParserBucket49.restoreState((java.lang.Object)ethiopicChronology65);
    java.util.Locale locale67 = dateTimeParserBucket49.getLocale();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str68 = skipDateTimeField15.getAsShortText((org.joda.time.ReadablePartial)localDateTime41, 2000, locale67);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Thu"+ "'", str18.equals("Thu"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(seconds29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "CopticChronology[UTC]"+ "'", str58.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(ethiopicChronology65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale67);

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test086"); }

    org.joda.time.Chronology chronology0 = null;
    org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
    java.lang.Object obj2 = mutableDateTime1.clone();
    mutableDateTime1.addYears(12);
    int i5 = mutableDateTime1.getSecondOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 14238);

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test087"); }

    org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test088"); }

    org.joda.time.Minutes minutes0 = org.joda.time.Minutes.ONE;
    org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = org.joda.time.format.ISODateTimeFormat.hourMinuteSecond();
    org.joda.time.ReadableInstant readableInstant3 = null;
    org.joda.time.ReadableDuration readableDuration4 = null;
    org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(readableInstant3, readableDuration4);
    org.joda.time.ReadableDuration readableDuration6 = null;
    org.joda.time.Chronology chronology7 = null;
    org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
    org.joda.time.PeriodType periodType9 = null;
    org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((java.lang.Object)chronology7, periodType9, (org.joda.time.Chronology)gregorianChronology10);
    mutablePeriod5.setPeriod(readableDuration6, chronology7);
    org.joda.time.DateTimeZone dateTimeZone14 = null;
    org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone14);
    org.joda.time.DurationField durationField16 = copticChronology15.days();
    org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology)copticChronology15);
    org.joda.time.DateTimeField dateTimeField18 = copticChronology15.millisOfSecond();
    mutablePeriod5.setPeriod((long)(short)1, (org.joda.time.Chronology)copticChronology15);
    org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withChronology((org.joda.time.Chronology)copticChronology15);
    org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long)(short)-1, (org.joda.time.Chronology)copticChronology15);
    org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((java.lang.Object)minutes0, (org.joda.time.Chronology)copticChronology15);
    org.joda.time.Months months23 = org.joda.time.Months.FOUR;
    org.joda.time.Months months24 = org.joda.time.Months.FIVE;
    org.joda.time.Months months26 = months24.plus(330);
    org.joda.time.Months months27 = months23.plus(months24);
    org.joda.time.Months months29 = months24.minus(0);
    // The following exception was thrown during execution in test generation
    try {
    int i30 = minutes0.compareTo((org.joda.time.base.BaseSingleFieldPeriod)months29);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(minutes0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableDateTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(months23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(months24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(months26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(months27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(months29);

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test089"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
    org.joda.time.Duration duration4 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.DateTimeZone dateTimeZone5 = null;
    org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
    org.joda.time.DateMidnight.Property property7 = dateMidnight6.centuryOfEra();
    org.joda.time.DateMidnight.Property property8 = dateMidnight6.dayOfYear();
    org.joda.time.DateMidnight dateMidnight9 = property8.roundHalfFloorCopy();
    org.joda.time.PeriodType periodType10 = null;
    org.joda.time.Period period11 = duration4.toPeriodFrom((org.joda.time.ReadableInstant)dateMidnight9, periodType10);
    org.joda.time.DateMidnight dateMidnight13 = dateMidnight1.withPeriodAdded((org.joda.time.ReadablePeriod)period11, 100);
    org.joda.time.DateMidnight.Property property14 = dateMidnight13.centuryOfEra();
    org.joda.time.DateTimeZone dateTimeZone15 = null;
    org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(dateTimeZone15);
    long long17 = dateMidnight16.getMillis();
    org.joda.time.DateMidnight dateMidnight19 = dateMidnight16.plusDays(24);
    org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant)dateMidnight13, (org.joda.time.ReadableInstant)dateMidnight19);
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.DateMidnight dateMidnight22 = dateMidnight19.withDayOfWeek((int)'4');
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long17 == 1496707200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight19);

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test090"); }

    org.joda.time.Duration duration2 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.Duration duration4 = duration2.minus((long)10080);
    org.joda.time.Chronology chronology5 = null;
    org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
    org.joda.time.Instant instant7 = mutableDateTime6.toInstant();
    org.joda.time.ReadableInstant readableInstant8 = null;
    boolean b9 = mutableDateTime6.isEqual(readableInstant8);
    org.joda.time.DateTime dateTime10 = mutableDateTime6.toDateTime();
    org.joda.time.DateTime.Property property11 = dateTime10.yearOfCentury();
    java.util.Locale locale13 = null;
    org.joda.time.DateTime dateTime14 = property11.setCopy("26", locale13);
    org.joda.time.Seconds seconds15 = org.joda.time.Seconds.TWO;
    org.joda.time.DateTime dateTime17 = dateTime14.withPeriodAdded((org.joda.time.ReadablePeriod)seconds15, 5);
    org.joda.time.DateTimeZone dateTimeZone18 = null;
    org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(dateTimeZone18);
    org.joda.time.Duration duration22 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.DateMidnight dateMidnight23 = dateMidnight19.minus((org.joda.time.ReadableDuration)duration22);
    org.joda.time.DateTime dateTime24 = dateTime14.plus((org.joda.time.ReadableDuration)duration22);
    boolean b25 = duration2.equals((java.lang.Object)dateTime24);
    int i26 = dateTime24.getSecondOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(duration4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(seconds15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 14238);

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test091"); }

    org.joda.time.IllegalFieldValueException illegalFieldValueException4 = new org.joda.time.IllegalFieldValueException("", (java.lang.Number)47, (java.lang.Number)(byte)-1, (java.lang.Number)10080);
    java.lang.Throwable[] throwable_array5 = illegalFieldValueException4.getSuppressed();
    java.lang.Number number6 = illegalFieldValueException4.getLowerBound();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + number6 + "' != '" + (byte)-1+ "'", number6.equals((byte)-1));

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test092"); }

    org.joda.time.format.PeriodFormatter periodFormatter1 = org.joda.time.format.ISOPeriodFormat.alternateExtended();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone3);
    org.joda.time.LocalDateTime.Property property5 = localDateTime4.monthOfYear();
    org.joda.time.DateTimeZone dateTimeZone7 = null;
    org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone7);
    boolean b9 = localDateTime4.isAfter((org.joda.time.ReadablePartial)localDateTime8);
    org.joda.time.DateTimeZone dateTimeZone11 = null;
    org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone11);
    org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withMillisOfDay((int)(short)0);
    org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfYear();
    org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.dayTime();
    org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadablePartial)localDateTime4, (org.joda.time.ReadablePartial)localDateTime14, periodType16);
    org.joda.time.format.PeriodFormatter periodFormatter18 = periodFormatter1.withParseType(periodType16);
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.Period period19 = org.joda.time.Period.parse("[millisOfDay=1]", periodFormatter1);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodFormatter1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodFormatter18);

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test093"); }

    org.joda.time.ReadableInstant readableInstant0 = null;
    org.joda.time.ReadableDuration readableDuration1 = null;
    org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
    org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = org.joda.time.format.DateTimeFormat.fullDate();
    org.joda.time.Chronology chronology4 = null;
    org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
    int i8 = dateTimeFormatter3.parseInto((org.joda.time.ReadWritableInstant)mutableDateTime5, "secondOfMinute", 100);
    org.joda.time.DateTimeZone dateTimeZone9 = null;
    org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(dateTimeZone9);
    long long11 = dateMidnight10.getMillis();
    org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.plusDays(24);
    mutablePeriod2.setPeriod((org.joda.time.ReadableInstant)mutableDateTime5, (org.joda.time.ReadableInstant)dateMidnight13);
    org.joda.time.DateTimeZone dateTimeZone16 = null;
    org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone16);
    java.lang.String str18 = copticChronology17.toString();
    mutablePeriod2.setPeriod(0L, (org.joda.time.Chronology)copticChronology17);
    org.joda.time.Period period20 = mutablePeriod2.toPeriod();
    org.joda.time.Period period22 = period20.minusWeeks(770);
    org.joda.time.Period period24 = period22.withHours((int)(short)-1);
    org.joda.time.Period period26 = period24.withMonths((int)(byte)0);
    org.joda.time.Period period31 = new org.joda.time.Period((int)(short)0, (int)'4', 1, 0);
    org.joda.time.PeriodType periodType32 = null;
    org.joda.time.Period period33 = period31.withPeriodType(periodType32);
    org.joda.time.ReadableInstant readableInstant34 = null;
    org.joda.time.ReadableDuration readableDuration35 = null;
    org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(readableInstant34, readableDuration35);
    org.joda.time.ReadableDuration readableDuration37 = null;
    org.joda.time.Chronology chronology38 = null;
    org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(chronology38);
    org.joda.time.PeriodType periodType40 = null;
    org.joda.time.chrono.GregorianChronology gregorianChronology41 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((java.lang.Object)chronology38, periodType40, (org.joda.time.Chronology)gregorianChronology41);
    mutablePeriod36.setPeriod(readableDuration37, chronology38);
    org.joda.time.Period period44 = period31.plus((org.joda.time.ReadablePeriod)mutablePeriod36);
    org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((long)365);
    org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology48 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone47);
    int i50 = dateTimeZone47.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone47);
    org.joda.time.DateTime dateTime53 = dateTime51.minusWeeks((int)'4');
    org.joda.time.ReadableDuration readableDuration54 = null;
    org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant)dateTime53, readableDuration54);
    org.joda.time.Interval interval56 = new org.joda.time.Interval((org.joda.time.ReadableInstant)mutableDateTime46, (org.joda.time.ReadablePeriod)mutablePeriod55);
    org.joda.time.ReadableInstant readableInstant58 = null;
    org.joda.time.ReadableDuration readableDuration59 = null;
    org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(readableInstant58, readableDuration59);
    org.joda.time.ReadableDuration readableDuration61 = null;
    org.joda.time.Chronology chronology62 = null;
    org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime(chronology62);
    org.joda.time.PeriodType periodType64 = null;
    org.joda.time.chrono.GregorianChronology gregorianChronology65 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((java.lang.Object)chronology62, periodType64, (org.joda.time.Chronology)gregorianChronology65);
    mutablePeriod60.setPeriod(readableDuration61, chronology62);
    org.joda.time.DateTimeZone dateTimeZone69 = null;
    org.joda.time.chrono.CopticChronology copticChronology70 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone69);
    org.joda.time.DurationField durationField71 = copticChronology70.days();
    org.joda.time.MutableDateTime mutableDateTime72 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology)copticChronology70);
    org.joda.time.DateTimeField dateTimeField73 = copticChronology70.millisOfSecond();
    mutablePeriod60.setPeriod((long)(short)1, (org.joda.time.Chronology)copticChronology70);
    org.joda.time.LocalTime localTime75 = new org.joda.time.LocalTime((long)330, (org.joda.time.Chronology)copticChronology70);
    int i76 = localTime75.getMillisOfSecond();
    org.joda.time.LocalTime.Property property77 = localTime75.secondOfMinute();
    org.joda.time.LocalTime localTime78 = property77.withMaximumValue();
    org.joda.time.Seconds seconds79 = org.joda.time.Seconds.TWO;
    org.joda.time.DurationFieldType durationFieldType80 = seconds79.getFieldType();
    org.joda.time.LocalTime localTime82 = localTime78.withFieldAdded(durationFieldType80, 365);
    mutablePeriod55.add(durationFieldType80, (int)'#');
    mutablePeriod36.add(durationFieldType80, (int)(short)-1);
    org.joda.time.Period period88 = period26.withField(durationFieldType80, 1000);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-101));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 1496707200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "CopticChronology[UTC]"+ "'", str18.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableDateTime72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 330);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localTime78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(seconds79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationFieldType80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localTime82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period88);

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test094"); }

    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.parse("");
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test095"); }

    org.joda.time.Chronology chronology0 = null;
    org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
    org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.hourOfDay();
    org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.dayOfYear();
    org.joda.time.Duration duration6 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    long long7 = duration6.getStandardSeconds();
    mutableDateTime1.add((org.joda.time.ReadableDuration)duration6, 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 0L);

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test096"); }

    org.joda.time.Duration duration2 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone3);
    int i6 = dateTimeZone3.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone3);
    org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)duration2, (org.joda.time.ReadableInstant)dateTime7);
    org.joda.time.DateTime.Property property9 = dateTime7.monthOfYear();
    org.joda.time.DateTime dateTime11 = dateTime7.minus((long)1969);
    org.joda.time.DateTime dateTime13 = dateTime7.minusMinutes(810);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime13);

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test097"); }

    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((int)(byte)100, 236, 14, 0, 1970, (int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test098"); }

    org.joda.time.Hours hours0 = org.joda.time.Hours.SIX;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hours0);

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test099"); }

    org.joda.time.ReadableInstant readableInstant1 = null;
    org.joda.time.ReadableDuration readableDuration2 = null;
    org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant1, readableDuration2);
    org.joda.time.ReadableDuration readableDuration4 = null;
    org.joda.time.Chronology chronology5 = null;
    org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
    org.joda.time.PeriodType periodType7 = null;
    org.joda.time.chrono.GregorianChronology gregorianChronology8 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((java.lang.Object)chronology5, periodType7, (org.joda.time.Chronology)gregorianChronology8);
    mutablePeriod3.setPeriod(readableDuration4, chronology5);
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone12);
    org.joda.time.DurationField durationField14 = copticChronology13.days();
    org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology)copticChronology13);
    org.joda.time.DateTimeField dateTimeField16 = copticChronology13.millisOfSecond();
    mutablePeriod3.setPeriod((long)(short)1, (org.joda.time.Chronology)copticChronology13);
    org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long)330, (org.joda.time.Chronology)copticChronology13);
    int i19 = localTime18.getMillisOfSecond();
    org.joda.time.Period period24 = new org.joda.time.Period((int)(short)0, (int)'4', 1, 0);
    org.joda.time.PeriodType periodType25 = null;
    org.joda.time.Period period26 = period24.withPeriodType(periodType25);
    org.joda.time.Period period28 = period26.minusHours(10);
    org.joda.time.Period period29 = period28.toPeriod();
    org.joda.time.Duration duration30 = period29.toStandardDuration();
    org.joda.time.ReadableInstant readableInstant31 = null;
    org.joda.time.ReadableDuration readableDuration32 = null;
    org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(readableInstant31, readableDuration32);
    org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = org.joda.time.format.DateTimeFormat.fullDate();
    org.joda.time.Chronology chronology35 = null;
    org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(chronology35);
    int i39 = dateTimeFormatter34.parseInto((org.joda.time.ReadWritableInstant)mutableDateTime36, "secondOfMinute", 100);
    org.joda.time.DateTimeZone dateTimeZone40 = null;
    org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(dateTimeZone40);
    long long42 = dateMidnight41.getMillis();
    org.joda.time.DateMidnight dateMidnight44 = dateMidnight41.plusDays(24);
    mutablePeriod33.setPeriod((org.joda.time.ReadableInstant)mutableDateTime36, (org.joda.time.ReadableInstant)dateMidnight44);
    org.joda.time.DateTimeZone dateTimeZone47 = null;
    org.joda.time.chrono.CopticChronology copticChronology48 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone47);
    java.lang.String str49 = copticChronology48.toString();
    mutablePeriod33.setPeriod(0L, (org.joda.time.Chronology)copticChronology48);
    org.joda.time.DurationField durationField51 = copticChronology48.hours();
    java.lang.String str52 = copticChronology48.toString();
    org.joda.time.Period period53 = duration30.toPeriod((org.joda.time.Chronology)copticChronology48);
    org.joda.time.LocalTime localTime54 = localTime18.minus((org.joda.time.ReadablePeriod)period53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableDateTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 330);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(duration30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == (-101));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long42 == 1496707200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "CopticChronology[UTC]"+ "'", str49.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "CopticChronology[UTC]"+ "'", str52.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localTime54);

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test100"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
    org.joda.time.DurationField durationField2 = copticChronology1.days();
    org.joda.time.DateTimeZone dateTimeZone4 = null;
    org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone4);
    org.joda.time.LocalDateTime.Property property6 = localDateTime5.monthOfYear();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone8);
    boolean b10 = localDateTime5.isAfter((org.joda.time.ReadablePartial)localDateTime9);
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone12);
    org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfDay((int)(short)0);
    org.joda.time.LocalDateTime.Property property16 = localDateTime15.dayOfYear();
    org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.dayTime();
    org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial)localDateTime5, (org.joda.time.ReadablePartial)localDateTime15, periodType17);
    int[] i_array20 = copticChronology1.get((org.joda.time.ReadablePartial)localDateTime5, 1496646000000L);
    int i21 = localDateTime5.getMinuteOfHour();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test101"); }

    org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long)10);
    org.joda.time.LocalDate.Property property2 = localDate1.weekyear();
    org.joda.time.LocalDate localDate3 = property2.roundHalfCeilingCopy();
    org.joda.time.LocalDate localDate4 = property2.roundHalfCeilingCopy();
    org.joda.time.Chronology chronology7 = null;
    java.util.Locale locale8 = null;
    org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket((long)'4', chronology7, locale8, (java.lang.Integer)1, (int)'a');
    dateTimeParserBucket11.setOffset((java.lang.Integer)(-1));
    org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
    dateTimeParserBucket11.setZone(dateTimeZone14);
    org.joda.time.Chronology chronology16 = null;
    org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
    org.joda.time.DateTimeZone dateTimeZone18 = null;
    org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone18);
    java.lang.String str20 = copticChronology19.toString();
    org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone21);
    org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay(dateTimeZone21);
    org.joda.time.Chronology chronology24 = copticChronology19.withZone(dateTimeZone21);
    org.joda.time.DateTime dateTime25 = mutableDateTime17.toDateTime(dateTimeZone21);
    org.joda.time.chrono.EthiopicChronology ethiopicChronology27 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone21, (int)(byte)1);
    boolean b28 = dateTimeParserBucket11.restoreState((java.lang.Object)ethiopicChronology27);
    java.util.Locale locale29 = dateTimeParserBucket11.getLocale();
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.LocalDate localDate30 = property2.setCopy("P-770WT-1H", locale29);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "CopticChronology[UTC]"+ "'", str20.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(ethiopicChronology27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale29);

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test102"); }

    org.joda.time.Chronology chronology1 = null;
    java.util.Locale locale2 = null;
    org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long)'4', chronology1, locale2, (java.lang.Integer)1, (int)'a');
    dateTimeParserBucket5.setOffset((java.lang.Integer)(-1));
    dateTimeParserBucket5.setPivotYear((java.lang.Integer)0);
    long long10 = dateTimeParserBucket5.computeMillis();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long10 == 53L);

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test103"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
    org.joda.time.ReadableDuration readableDuration2 = null;
    org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant)dateMidnight1, readableDuration2);
    org.joda.time.Duration duration6 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    long long7 = duration6.getStandardSeconds();
    // The following exception was thrown during execution in test generation
    try {
    mutableInterval3.setDurationAfterStart((org.joda.time.ReadableDuration)duration6);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 0L);

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test104"); }

    org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone0);
    int i3 = dateTimeZone0.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone0);
    org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property7 = dateTime4.millisOfDay();
    boolean b8 = dateTime4.isBeforeNow();
    int i9 = dateTime4.getHourOfDay();
    org.joda.time.Duration duration12 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    long long13 = duration12.getStandardSeconds();
    org.joda.time.DateTime dateTime15 = dateTime4.withDurationAdded((org.joda.time.ReadableDuration)duration12, (int)(short)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime15);

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test105"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
    org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.plusDays((int)(short)100);
    org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay3.withMonthOfYear(10);
    org.joda.time.YearMonthDay.Property property6 = yearMonthDay3.monthOfYear();
    org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay3.minusMonths((int)(short)-1);
    org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
    java.lang.String str11 = dateTimeZone9.getShortName(1496721385602L);
    org.joda.time.Interval interval12 = yearMonthDay8.toInterval(dateTimeZone9);
    org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay8.plusYears(1034);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonthDay3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonthDay5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonthDay8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "UTC"+ "'", str11.equals("UTC"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(interval12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonthDay14);

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test106"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
    java.lang.String str2 = copticChronology1.toString();
    org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
    org.joda.time.DateTimeZone dateTimeZone5 = null;
    org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone5);
    java.lang.String str7 = copticChronology6.toString();
    org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(0L, (org.joda.time.Chronology)copticChronology6);
    org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone9);
    int i12 = dateTimeZone9.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone9);
    org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property16 = dateTime13.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType17 = property16.getFieldType();
    org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone18);
    int i21 = dateTimeZone18.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone18);
    org.joda.time.DateTime dateTime24 = dateTime22.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property25 = dateTime22.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType26 = property25.getFieldType();
    org.joda.time.DateTimeComparator dateTimeComparator27 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType17, dateTimeFieldType26);
    int i28 = timeOfDay8.indexOf(dateTimeFieldType26);
    org.joda.time.field.OffsetDateTimeField offsetDateTimeField32 = new org.joda.time.field.OffsetDateTimeField(dateTimeField3, dateTimeFieldType26, 10, 1000, 628);
    long long34 = offsetDateTimeField32.roundHalfEven(1496721385602L);
    int i36 = offsetDateTimeField32.getMaximumValue((long)(byte)100);
    java.lang.String str38 = offsetDateTimeField32.getAsText((long)330);
    // The following exception was thrown during execution in test generation
    try {
    long long41 = offsetDateTimeField32.add((long)(byte)-1, (int)(byte)10);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "CopticChronology[UTC]"+ "'", str2.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "CopticChronology[UTC]"+ "'", str7.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long34 == 463708800000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 628);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "27"+ "'", str38.equals("27"));

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test107"); }

    org.joda.time.Period period4 = new org.joda.time.Period((int)(short)0, (int)'4', 1, 0);
    org.joda.time.PeriodType periodType5 = null;
    org.joda.time.Period period6 = period4.withPeriodType(periodType5);
    org.joda.time.ReadableInstant readableInstant7 = null;
    org.joda.time.ReadableDuration readableDuration8 = null;
    org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(readableInstant7, readableDuration8);
    org.joda.time.ReadableDuration readableDuration10 = null;
    org.joda.time.Chronology chronology11 = null;
    org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
    org.joda.time.PeriodType periodType13 = null;
    org.joda.time.chrono.GregorianChronology gregorianChronology14 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((java.lang.Object)chronology11, periodType13, (org.joda.time.Chronology)gregorianChronology14);
    mutablePeriod9.setPeriod(readableDuration10, chronology11);
    org.joda.time.Period period17 = period4.plus((org.joda.time.ReadablePeriod)mutablePeriod9);
    mutablePeriod9.setMonths((int)'a');
    org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.MIDNIGHT;
    org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = org.joda.time.format.DateTimeFormat.fullDate();
    org.joda.time.Chronology chronology22 = null;
    org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
    int i26 = dateTimeFormatter21.parseInto((org.joda.time.ReadWritableInstant)mutableDateTime23, "secondOfMinute", 100);
    org.joda.time.DateTimeZone dateTimeZone27 = null;
    org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay(dateTimeZone27);
    org.joda.time.Seconds seconds29 = org.joda.time.Seconds.TWO;
    org.joda.time.DurationFieldType durationFieldType30 = seconds29.getFieldType();
    org.joda.time.TimeOfDay timeOfDay32 = timeOfDay28.withFieldAdded(durationFieldType30, 1000);
    mutableDateTime23.add(durationFieldType30, (int)'#');
    org.joda.time.LocalTime localTime36 = localTime20.withFieldAdded(durationFieldType30, 41);
    mutablePeriod9.set(durationFieldType30, 459);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == (-101));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(seconds29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationFieldType30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localTime36);

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test108"); }

    org.joda.time.Years years0 = org.joda.time.Years.ONE;
    org.joda.time.Years years1 = years0.negated();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(years0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(years1);

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test109"); }

    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("2017-09-14T00:00:00.000/2017-09-15T00:00:00.000");
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test110"); }

    org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
    org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusSeconds(0);
    org.joda.time.LocalDateTime.Property property3 = localDateTime0.dayOfMonth();
    org.joda.time.Interval interval4 = property3.toInterval();
    org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
    org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusSeconds(0);
    org.joda.time.LocalDateTime.Property property8 = localDateTime5.dayOfMonth();
    org.joda.time.Interval interval9 = property8.toInterval();
    boolean b10 = interval9.containsNow();
    boolean b11 = interval4.abuts((org.joda.time.ReadableInterval)interval9);
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(dateTimeZone12);
    org.joda.time.ReadableDuration readableDuration14 = null;
    org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant)dateMidnight13, readableDuration14);
    org.joda.time.Years years17 = org.joda.time.Years.years(0);
    org.joda.time.Years years19 = years17.minus((int)(byte)-1);
    mutableInterval15.setPeriodAfterStart((org.joda.time.ReadablePeriod)years19);
    boolean b21 = interval9.isAfter((org.joda.time.ReadableInterval)mutableInterval15);
    org.joda.time.MutableInterval mutableInterval22 = mutableInterval15.copy();
    org.joda.time.Period period27 = new org.joda.time.Period((int)(short)0, (int)'4', 1, 0);
    org.joda.time.PeriodType periodType28 = null;
    org.joda.time.Period period29 = period27.withPeriodType(periodType28);
    org.joda.time.Period period31 = period29.minusHours(10);
    org.joda.time.Period period32 = period31.toPeriod();
    org.joda.time.Period period34 = period32.minusMonths((int)(short)100);
    org.joda.time.Minutes minutes35 = period32.toStandardMinutes();
    org.joda.time.Minutes minutes37 = minutes35.minus((int)(short)1);
    // The following exception was thrown during execution in test generation
    try {
    mutableInterval22.setPeriodBeforeEnd((org.joda.time.ReadablePeriod)minutes35);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(interval4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(interval9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(years17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(years19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableInterval22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(minutes35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(minutes37);

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test111"); }

    org.joda.time.chrono.GregorianChronology gregorianChronology2 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period3 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology2);
    org.joda.time.DateTimeZone dateTimeZone4 = gregorianChronology2.getZone();
    org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long)1, dateTimeZone4);
    org.joda.time.DateMidnight dateMidnight6 = org.joda.time.DateMidnight.now(dateTimeZone4);
    org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now(dateTimeZone4);
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone4, 0L, (int)'4');
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate7);

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test112"); }

    org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
    org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusSeconds(0);
    org.joda.time.LocalDateTime.Property property3 = localDateTime0.dayOfMonth();
    org.joda.time.Interval interval4 = property3.toInterval();
    boolean b5 = interval4.containsNow();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(dateTimeZone6);
    org.joda.time.Duration duration10 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.DateMidnight dateMidnight11 = dateMidnight7.minus((org.joda.time.ReadableDuration)duration10);
    org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long)1);
    org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant)dateMidnight11, (org.joda.time.ReadableDuration)duration13);
    org.joda.time.Interval interval15 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration)duration13);
    org.joda.time.Years years16 = org.joda.time.Years.yearsIn((org.joda.time.ReadableInterval)interval15);
    int i17 = years16.getYears();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(interval4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(duration13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(interval15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(years16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test113"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
    org.joda.time.DateMidnight dateMidnight2 = yearMonthDay1.toDateMidnight();
    org.joda.time.YearMonthDay.Property property3 = yearMonthDay1.dayOfMonth();
    org.joda.time.DateTimeFieldType dateTimeFieldType4 = property3.getFieldType();
    java.lang.String str5 = property3.getAsText();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "6"+ "'", str5.equals("6"));

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test114"); }

    org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(0, 6, 999, (int)'#');
    mutablePeriod4.addYears(100);
    mutablePeriod4.setMonths(32);

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test115"); }

    org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long)6);
    org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.withCenturyOfEra(1);
    org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusWeeks(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight5);

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test116"); }

    org.joda.time.DateTimeZone dateTimeZone1 = null;
    org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone1);
    org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
    org.joda.time.DateTimeZone dateTimeZone5 = null;
    org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone5);
    boolean b7 = localDateTime2.isAfter((org.joda.time.ReadablePartial)localDateTime6);
    org.joda.time.LocalDateTime localDateTime9 = localDateTime2.withDayOfMonth((int)(short)10);
    org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekyear();
    org.joda.time.Seconds seconds12 = org.joda.time.Seconds.seconds((int)(short)-1);
    org.joda.time.LocalDateTime localDateTime13 = localDateTime9.plus((org.joda.time.ReadablePeriod)seconds12);
    org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withWeekyear(1034);
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMinuteOfHour(1000);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(seconds12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime15);

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test117"); }

    org.joda.time.Chronology chronology0 = null;
    org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
    org.joda.time.Instant instant2 = mutableDateTime1.toInstant();
    org.joda.time.ReadableInstant readableInstant3 = null;
    boolean b4 = mutableDateTime1.isEqual(readableInstant3);
    org.joda.time.DateTime dateTime5 = mutableDateTime1.toDateTime();
    org.joda.time.DateTime.Property property6 = dateTime5.yearOfCentury();
    java.util.Locale locale8 = null;
    org.joda.time.DateTime dateTime9 = property6.setCopy("26", locale8);
    org.joda.time.Seconds seconds10 = org.joda.time.Seconds.TWO;
    org.joda.time.DateTime dateTime12 = dateTime9.withPeriodAdded((org.joda.time.ReadablePeriod)seconds10, 5);
    org.joda.time.DateTime dateTime14 = dateTime9.minusMonths(28);
    org.joda.time.DateTime.Property property15 = dateTime9.monthOfYear();
    int i16 = property15.get();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(seconds10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 6);

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test118"); }

    org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long)784, (long)33);

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test119"); }

    org.joda.time.Chronology chronology0 = null;
    org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
    org.joda.time.Instant instant2 = mutableDateTime1.toInstant();
    mutableDateTime1.addWeekyears((int)(short)-1);
    org.joda.time.DateTimeZone dateTimeZone5 = null;
    org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
    long long7 = dateMidnight6.getMillis();
    org.joda.time.DateMidnight dateMidnight9 = dateMidnight6.plusDays(24);
    org.joda.time.Minutes minutes10 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant)mutableDateTime1, (org.joda.time.ReadableInstant)dateMidnight9);
    boolean b11 = mutableDateTime1.isBeforeNow();
    java.lang.Object obj12 = mutableDateTime1.clone();
    org.joda.time.Period period17 = new org.joda.time.Period((int)(short)0, (int)'4', 1, 0);
    org.joda.time.PeriodType periodType18 = null;
    org.joda.time.Period period19 = period17.withPeriodType(periodType18);
    org.joda.time.Period period21 = period19.minusHours(10);
    org.joda.time.Period period22 = period21.toPeriod();
    org.joda.time.Duration duration23 = period22.toStandardDuration();
    mutableDateTime1.add((org.joda.time.ReadableDuration)duration23, 1000);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 1496707200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(minutes10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(duration23);

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test120"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
    long long2 = dateMidnight1.getMillis();
    org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.plusDays(24);
    org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long)6);
    org.joda.time.Duration duration8 = new org.joda.time.Duration((long)2017);
    org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadableInstant)dateMidnight6, (org.joda.time.ReadableDuration)duration8);
    org.joda.time.DateMidnight dateMidnight11 = dateMidnight1.withDurationAdded((org.joda.time.ReadableDuration)duration8, 459);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long2 == 1496707200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight11);

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test121"); }

    org.joda.time.Period period4 = new org.joda.time.Period((int)(short)0, (int)'4', 1, 0);
    org.joda.time.PeriodType periodType5 = null;
    org.joda.time.Period period6 = period4.withPeriodType(periodType5);
    org.joda.time.Period period8 = period6.minusHours(10);
    org.joda.time.Period period10 = period6.withHours((int)'a');
    org.joda.time.Period period15 = new org.joda.time.Period((int)(short)0, (int)'4', 1, 0);
    org.joda.time.PeriodType periodType16 = null;
    org.joda.time.Period period17 = period15.withPeriodType(periodType16);
    org.joda.time.Period period19 = period17.minusHours(10);
    org.joda.time.Period period20 = period19.toPeriod();
    org.joda.time.Duration duration21 = period20.toStandardDuration();
    org.joda.time.ReadableInstant readableInstant22 = null;
    org.joda.time.ReadableDuration readableDuration23 = null;
    org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(readableInstant22, readableDuration23);
    org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = org.joda.time.format.DateTimeFormat.fullDate();
    org.joda.time.Chronology chronology26 = null;
    org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
    int i30 = dateTimeFormatter25.parseInto((org.joda.time.ReadWritableInstant)mutableDateTime27, "secondOfMinute", 100);
    org.joda.time.DateTimeZone dateTimeZone31 = null;
    org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(dateTimeZone31);
    long long33 = dateMidnight32.getMillis();
    org.joda.time.DateMidnight dateMidnight35 = dateMidnight32.plusDays(24);
    mutablePeriod24.setPeriod((org.joda.time.ReadableInstant)mutableDateTime27, (org.joda.time.ReadableInstant)dateMidnight35);
    org.joda.time.DateTimeZone dateTimeZone38 = null;
    org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone38);
    java.lang.String str40 = copticChronology39.toString();
    mutablePeriod24.setPeriod(0L, (org.joda.time.Chronology)copticChronology39);
    org.joda.time.DurationField durationField42 = copticChronology39.hours();
    java.lang.String str43 = copticChronology39.toString();
    org.joda.time.Period period44 = duration21.toPeriod((org.joda.time.Chronology)copticChronology39);
    org.joda.time.DateTimeField dateTimeField45 = copticChronology39.clockhourOfDay();
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.Interval interval46 = new org.joda.time.Interval((java.lang.Object)'a', (org.joda.time.Chronology)copticChronology39);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(duration21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == (-101));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long33 == 1496707200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "CopticChronology[UTC]"+ "'", str40.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "CopticChronology[UTC]"+ "'", str43.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField45);

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test122"); }

    org.joda.time.Duration duration2 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone3);
    org.joda.time.DateMidnight.Property property5 = dateMidnight4.centuryOfEra();
    org.joda.time.DateMidnight.Property property6 = dateMidnight4.dayOfYear();
    org.joda.time.DateMidnight dateMidnight7 = property6.roundHalfFloorCopy();
    org.joda.time.PeriodType periodType8 = null;
    org.joda.time.Period period9 = duration2.toPeriodFrom((org.joda.time.ReadableInstant)dateMidnight7, periodType8);
    org.joda.time.Duration duration12 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.Duration duration15 = duration12.withDurationAdded((long)28, (int)' ');
    org.joda.time.DateMidnight dateMidnight16 = dateMidnight7.minus((org.joda.time.ReadableDuration)duration12);
    org.joda.time.Duration duration17 = duration12.toDuration();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(duration15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(duration17);

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test123"); }

    org.joda.time.Duration duration2 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.Duration duration5 = duration2.withDurationAdded((long)28, (int)' ');
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(dateTimeZone6);
    org.joda.time.DateMidnight.Property property8 = dateMidnight7.centuryOfEra();
    org.joda.time.PeriodType periodType9 = null;
    org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)duration5, (org.joda.time.ReadableInstant)dateMidnight7, periodType9);
    org.joda.time.DateTimeZone dateTimeZone11 = null;
    org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(dateTimeZone11);
    org.joda.time.Duration duration15 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.DateMidnight dateMidnight16 = dateMidnight12.minus((org.joda.time.ReadableDuration)duration15);
    org.joda.time.Duration duration18 = duration5.withDurationAdded((org.joda.time.ReadableDuration)duration15, 70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(duration5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(duration18);

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test124"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(dateTimeZone0);
    org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusSeconds((int)(short)0);
    org.joda.time.TimeOfDay.Property property4 = timeOfDay1.secondOfMinute();
    java.lang.String str5 = property4.toString();
    int i6 = property4.getMinimumValueOverall();
    int i7 = property4.get();
    org.joda.time.TimeOfDay timeOfDay8 = property4.withMaximumValue();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Property[secondOfMinute]"+ "'", str5.equals("Property[secondOfMinute]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay8);

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test125"); }

    int i0 = org.joda.time.DateTimeConstants.AUGUST;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i0 == 8);

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test126"); }

    org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long)(byte)1);

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test127"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
    // The following exception was thrown during execution in test generation
    try {
    long long9 = copticChronology1.getDateTimeMillis((int)(short)1, 458, 10080, (int)(short)1, (int)(byte)1, 7, 32);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology1);

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test128"); }

    org.joda.time.DateTimeComparator dateTimeComparator0 = org.joda.time.DateTimeComparator.getInstance();
    java.lang.String str1 = dateTimeComparator0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "DateTimeComparator[]"+ "'", str1.equals("DateTimeComparator[]"));

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test129"); }

    org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(1496721385602L);

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test130"); }

    org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long)10);
    org.joda.time.LocalDate.Property property2 = localDate1.weekyear();
    org.joda.time.LocalDate localDate3 = property2.roundHalfCeilingCopy();
    org.joda.time.LocalDate localDate4 = property2.roundHalfCeilingCopy();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone6);
    java.lang.String str8 = copticChronology7.toString();
    org.joda.time.DateTimeField dateTimeField9 = copticChronology7.centuryOfEra();
    org.joda.time.DateTimeZone dateTimeZone11 = null;
    org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone11);
    java.lang.String str13 = copticChronology12.toString();
    org.joda.time.TimeOfDay timeOfDay14 = org.joda.time.TimeOfDay.fromMillisOfDay(0L, (org.joda.time.Chronology)copticChronology12);
    org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone15);
    int i18 = dateTimeZone15.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone15);
    org.joda.time.DateTime dateTime21 = dateTime19.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property22 = dateTime19.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType23 = property22.getFieldType();
    org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone24);
    int i27 = dateTimeZone24.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone24);
    org.joda.time.DateTime dateTime30 = dateTime28.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property31 = dateTime28.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType32 = property31.getFieldType();
    org.joda.time.DateTimeComparator dateTimeComparator33 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType23, dateTimeFieldType32);
    int i34 = timeOfDay14.indexOf(dateTimeFieldType32);
    org.joda.time.field.OffsetDateTimeField offsetDateTimeField38 = new org.joda.time.field.OffsetDateTimeField(dateTimeField9, dateTimeFieldType32, 10, 1000, 628);
    org.joda.time.DateTimeField dateTimeField39 = offsetDateTimeField38.getWrappedField();
    org.joda.time.Chronology chronology41 = null;
    java.util.Locale locale42 = null;
    org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long)'4', chronology41, locale42, (java.lang.Integer)1, (int)'a');
    dateTimeParserBucket45.setOffset((java.lang.Integer)(-1));
    org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
    dateTimeParserBucket45.setZone(dateTimeZone48);
    org.joda.time.Chronology chronology50 = null;
    org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(chronology50);
    org.joda.time.DateTimeZone dateTimeZone52 = null;
    org.joda.time.chrono.CopticChronology copticChronology53 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone52);
    java.lang.String str54 = copticChronology53.toString();
    org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology56 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone55);
    org.joda.time.TimeOfDay timeOfDay57 = new org.joda.time.TimeOfDay(dateTimeZone55);
    org.joda.time.Chronology chronology58 = copticChronology53.withZone(dateTimeZone55);
    org.joda.time.DateTime dateTime59 = mutableDateTime51.toDateTime(dateTimeZone55);
    org.joda.time.chrono.EthiopicChronology ethiopicChronology61 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone55, (int)(byte)1);
    boolean b62 = dateTimeParserBucket45.restoreState((java.lang.Object)ethiopicChronology61);
    java.util.Locale locale63 = dateTimeParserBucket45.getLocale();
    int i64 = offsetDateTimeField38.getMaximumTextLength(locale63);
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.LocalDate localDate65 = property2.setCopy("2017-09-14T00:00:00.000/2017-09-15T00:00:00.000", locale63);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "CopticChronology[UTC]"+ "'", str8.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "CopticChronology[UTC]"+ "'", str13.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "CopticChronology[UTC]"+ "'", str54.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(ethiopicChronology61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 3);

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test131"); }

    org.joda.time.Chronology chronology0 = null;
    org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
    org.joda.time.Instant instant2 = mutableDateTime1.toInstant();
    org.joda.time.ReadableInstant readableInstant3 = null;
    boolean b4 = mutableDateTime1.isEqual(readableInstant3);
    org.joda.time.DateTime dateTime5 = mutableDateTime1.toDateTime();
    org.joda.time.DateTime.Property property6 = dateTime5.yearOfCentury();
    java.util.Locale locale8 = null;
    org.joda.time.DateTime dateTime9 = property6.setCopy("26", locale8);
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.DateTime dateTime11 = property6.setCopy("CopticChronology[America/Los_Angeles]");
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime9);

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test132"); }

    org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
    org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays((-1));
    // The following exception was thrown during execution in test generation
    try {
    int i4 = localDateTime0.getValue(86);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime2);

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test133"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(dateTimeZone0);
    org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusSeconds((int)(short)0);
    org.joda.time.TimeOfDay.Property property4 = timeOfDay1.secondOfMinute();
    int i5 = timeOfDay1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 4);

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test134"); }

    org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long)235);
    org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.MonthDay monthDay4 = monthDay1.withDayOfMonth(64);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property2);

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test135"); }

    org.joda.time.Weeks weeks0 = org.joda.time.Weeks.MIN_VALUE;
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.Days days1 = weeks0.toStandardDays();
      org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException");
    } catch (java.lang.ArithmeticException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weeks0);

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test136"); }

    org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone0);
    int i3 = dateTimeZone0.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone0);
    org.joda.time.DateTime dateTime6 = dateTime4.withMillisOfDay(9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime6);

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test137"); }

    org.joda.time.Chronology chronology0 = null;
    org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
    org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.hourOfDay();
    org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone3);
    org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime(dateTimeZone3);
    org.joda.time.DateTime dateTime6 = mutableDateTime1.toDateTime(dateTimeZone3);
    // The following exception was thrown during execution in test generation
    try {
    mutableDateTime1.setDateTime(345, 78, 32, 54, 0, 86, 25);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime6);

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test138"); }

    org.joda.time.ReadableInstant readableInstant0 = null;
    org.joda.time.ReadableDuration readableDuration1 = null;
    org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
    org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = org.joda.time.format.DateTimeFormat.fullDate();
    org.joda.time.Chronology chronology4 = null;
    org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
    int i8 = dateTimeFormatter3.parseInto((org.joda.time.ReadWritableInstant)mutableDateTime5, "secondOfMinute", 100);
    org.joda.time.DateTimeZone dateTimeZone9 = null;
    org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(dateTimeZone9);
    long long11 = dateMidnight10.getMillis();
    org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.plusDays(24);
    mutablePeriod2.setPeriod((org.joda.time.ReadableInstant)mutableDateTime5, (org.joda.time.ReadableInstant)dateMidnight13);
    org.joda.time.Days days15 = org.joda.time.Days.SEVEN;
    mutablePeriod2.add((org.joda.time.ReadablePeriod)days15);
    org.joda.time.Seconds seconds17 = days15.toStandardSeconds();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-101));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 1496707200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(days15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(seconds17);

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test139"); }

    org.joda.time.Days days0 = org.joda.time.Days.ZERO;
    org.joda.time.DurationFieldType durationFieldType1 = days0.getFieldType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(days0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationFieldType1);

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test140"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(dateTimeZone0);
    org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusSeconds((int)(short)0);
    org.joda.time.TimeOfDay.Property property4 = timeOfDay1.secondOfMinute();
    org.joda.time.TimeOfDay.Property property5 = timeOfDay1.millisOfSecond();
    int i6 = property5.getMaximumValue();
    java.util.Locale locale7 = null;
    int i8 = property5.getMaximumShortTextLength(locale7);
    int i9 = property5.get();
    java.lang.String str10 = property5.getAsShortText();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 999);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 992);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "992"+ "'", str10.equals("992"));

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test141"); }

    org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone5 = new org.joda.time.tz.FixedDateTimeZone("hi!", "2017-W23-2T03:56:37Z", 26, 1034);
    java.lang.String str6 = fixedDateTimeZone5.getID();
    org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long)1970, (org.joda.time.DateTimeZone)fixedDateTimeZone5);
    org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!"+ "'", str6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime8);

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test142"); }

    org.joda.time.Chronology chronology0 = null;
    org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
    org.joda.time.Instant instant2 = mutableDateTime1.toInstant();
    mutableDateTime1.addWeekyears((int)(short)-1);
    org.joda.time.DateTimeZone dateTimeZone5 = null;
    org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
    long long7 = dateMidnight6.getMillis();
    org.joda.time.DateMidnight dateMidnight9 = dateMidnight6.plusDays(24);
    org.joda.time.Minutes minutes10 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant)mutableDateTime1, (org.joda.time.ReadableInstant)dateMidnight9);
    org.joda.time.DateMidnight.Property property11 = dateMidnight9.dayOfMonth();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 1496707200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(minutes10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property11);

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test143"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
    org.joda.time.DurationField durationField2 = copticChronology1.days();
    org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology)copticChronology1);
    boolean b5 = mutableDateTime3.isEqual((long)491);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableDateTime3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test144"); }

    org.joda.time.ReadableInstant readableInstant1 = null;
    org.joda.time.ReadableDuration readableDuration2 = null;
    org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant1, readableDuration2);
    org.joda.time.ReadableDuration readableDuration4 = null;
    org.joda.time.Chronology chronology5 = null;
    org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
    org.joda.time.PeriodType periodType7 = null;
    org.joda.time.chrono.GregorianChronology gregorianChronology8 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((java.lang.Object)chronology5, periodType7, (org.joda.time.Chronology)gregorianChronology8);
    mutablePeriod3.setPeriod(readableDuration4, chronology5);
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone12);
    org.joda.time.DurationField durationField14 = copticChronology13.days();
    org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology)copticChronology13);
    org.joda.time.DateTimeField dateTimeField16 = copticChronology13.millisOfSecond();
    mutablePeriod3.setPeriod((long)(short)1, (org.joda.time.Chronology)copticChronology13);
    org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long)330, (org.joda.time.Chronology)copticChronology13);
    int i19 = localTime18.getMillisOfSecond();
    org.joda.time.LocalTime.Property property20 = localTime18.secondOfMinute();
    org.joda.time.LocalTime localTime21 = property20.withMinimumValue();
    org.joda.time.LocalTime localTime22 = property20.roundHalfCeilingCopy();
    int i23 = localTime22.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableDateTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 330);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localTime21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 4);

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test145"); }

    org.joda.time.Seconds seconds0 = org.joda.time.Seconds.ONE;
    org.joda.time.Hours hours1 = seconds0.toStandardHours();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(seconds0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hours1);

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test146"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
    org.joda.time.DurationField durationField2 = copticChronology1.days();
    org.joda.time.DateTimeZone dateTimeZone4 = null;
    org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone4);
    org.joda.time.LocalDateTime.Property property6 = localDateTime5.monthOfYear();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone8);
    boolean b10 = localDateTime5.isAfter((org.joda.time.ReadablePartial)localDateTime9);
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone12);
    org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfDay((int)(short)0);
    org.joda.time.LocalDateTime.Property property16 = localDateTime15.dayOfYear();
    org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.dayTime();
    org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial)localDateTime5, (org.joda.time.ReadablePartial)localDateTime15, periodType17);
    int[] i_array20 = copticChronology1.get((org.joda.time.ReadablePartial)localDateTime5, 1496646000000L);
    org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((org.joda.time.Chronology)copticChronology1);
    org.joda.time.DateTimeZone dateTimeZone23 = null;
    org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone23);
    org.joda.time.LocalDateTime.Property property25 = localDateTime24.monthOfYear();
    org.joda.time.DateTimeZone dateTimeZone27 = null;
    org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone27);
    boolean b29 = localDateTime24.isAfter((org.joda.time.ReadablePartial)localDateTime28);
    org.joda.time.LocalDateTime localDateTime31 = localDateTime24.withDayOfMonth((int)(short)10);
    org.joda.time.LocalDateTime.Property property32 = localDateTime31.weekyear();
    org.joda.time.Seconds seconds34 = org.joda.time.Seconds.seconds((int)(short)-1);
    org.joda.time.LocalDateTime localDateTime35 = localDateTime31.plus((org.joda.time.ReadablePeriod)seconds34);
    org.joda.time.DateMidnight dateMidnight36 = dateMidnight21.minus((org.joda.time.ReadablePeriod)seconds34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(seconds34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight36);

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test147"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
    org.joda.time.ReadableDuration readableDuration2 = null;
    org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant)dateMidnight1, readableDuration2);
    org.joda.time.Years years5 = org.joda.time.Years.years(0);
    org.joda.time.Years years7 = years5.minus((int)(byte)-1);
    mutableInterval3.setPeriodAfterStart((org.joda.time.ReadablePeriod)years7);
    org.joda.time.Years years10 = years7.dividedBy((int)(byte)100);
    org.joda.time.DurationFieldType durationFieldType11 = years10.getFieldType();
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((java.lang.Object)durationFieldType11);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(years5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(years7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(years10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationFieldType11);

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test148"); }

    org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long)10);
    java.lang.String str2 = localDate1.toString();
    org.joda.time.PeriodType periodType5 = null;
    org.joda.time.Period period6 = new org.joda.time.Period((long)(byte)1, (long)24, periodType5);
    org.joda.time.LocalDate localDate8 = localDate1.withPeriodAdded((org.joda.time.ReadablePeriod)period6, 345);
    org.joda.time.LocalDate localDate10 = localDate8.withWeekyear(10);
    org.joda.time.LocalDate.Property property11 = localDate10.era();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "1970-01-01"+ "'", str2.equals("1970-01-01"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property11);

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test149"); }

    org.joda.time.Chronology chronology2 = null;
    org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(chronology2);
    org.joda.time.PeriodType periodType4 = null;
    org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((java.lang.Object)chronology2, periodType4, (org.joda.time.Chronology)gregorianChronology5);
    org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long)345, chronology2);
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone8);
    org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minusMonths(0);
    org.joda.time.Chronology chronology13 = null;
    java.util.Locale locale14 = null;
    org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long)'4', chronology13, locale14, (java.lang.Integer)1, (int)'a');
    dateTimeParserBucket17.setOffset((java.lang.Integer)(-1));
    org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
    dateTimeParserBucket17.setZone(dateTimeZone20);
    org.joda.time.DateMidnight dateMidnight22 = yearMonthDay9.toDateMidnight(dateTimeZone20);
    org.joda.time.DateMidnight dateMidnight23 = localDate7.toDateMidnight(dateTimeZone20);
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object)999, dateTimeZone20);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonthDay11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight23);

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test150"); }

    org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(1496721418392L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(duration1);

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test151"); }

    org.joda.time.Chronology chronology1 = null;
    java.util.Locale locale2 = null;
    org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long)'4', chronology1, locale2, (java.lang.Integer)1, (int)'a');
    dateTimeParserBucket5.setOffset((java.lang.Integer)(-1));
    org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
    dateTimeParserBucket5.setZone(dateTimeZone8);
    org.joda.time.Chronology chronology10 = null;
    org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone12);
    java.lang.String str14 = copticChronology13.toString();
    org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone15);
    org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay(dateTimeZone15);
    org.joda.time.Chronology chronology18 = copticChronology13.withZone(dateTimeZone15);
    org.joda.time.DateTime dateTime19 = mutableDateTime11.toDateTime(dateTimeZone15);
    org.joda.time.chrono.EthiopicChronology ethiopicChronology21 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone15, (int)(byte)1);
    boolean b22 = dateTimeParserBucket5.restoreState((java.lang.Object)ethiopicChronology21);
    org.joda.time.Chronology chronology23 = ethiopicChronology21.withUTC();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "CopticChronology[UTC]"+ "'", str14.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(ethiopicChronology21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology23);

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test152"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
    org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.plusDays((int)(short)100);
    org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period7 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology6);
    org.joda.time.DateTimeZone dateTimeZone8 = gregorianChronology6.getZone();
    org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long)1, dateTimeZone8);
    org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone8);
    org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone11 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone8);
    java.lang.String str13 = cachedDateTimeZone11.getNameKey((long)'a');
    org.joda.time.Interval interval14 = yearMonthDay1.toInterval((org.joda.time.DateTimeZone)cachedDateTimeZone11);
    org.joda.time.Period period19 = new org.joda.time.Period((int)(short)0, (int)'4', 1, 0);
    org.joda.time.PeriodType periodType20 = null;
    org.joda.time.Period period21 = period19.withPeriodType(periodType20);
    org.joda.time.Period period23 = period21.minusHours(10);
    org.joda.time.Period period25 = period21.withWeeks(2);
    boolean b26 = cachedDateTimeZone11.equals((java.lang.Object)period25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonthDay3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cachedDateTimeZone11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "UTC"+ "'", str13.equals("UTC"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(interval14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test153"); }

    org.joda.time.ReadableInstant readableInstant2 = null;
    org.joda.time.ReadableDuration readableDuration3 = null;
    org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(readableInstant2, readableDuration3);
    org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstance();
    mutablePeriod4.setPeriod((long)100, (org.joda.time.Chronology)gregorianChronology6);
    int i8 = mutablePeriod4.getWeeks();
    mutablePeriod4.setMonths(100);
    mutablePeriod4.setDays((int)'#');
    int i13 = mutablePeriod4.getWeeks();
    int i14 = mutablePeriod4.getMillis();
    org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone17);
    org.joda.time.YearMonth yearMonth19 = new org.joda.time.YearMonth((long)(byte)0, (org.joda.time.Chronology)iSOChronology18);
    org.joda.time.DateTimeField dateTimeField20 = iSOChronology18.secondOfDay();
    mutablePeriod4.add((long)3, (org.joda.time.Chronology)iSOChronology18);
    org.joda.time.Period period22 = new org.joda.time.Period((long)47, (long)298, (org.joda.time.Chronology)iSOChronology18);
    int i23 = period22.getWeeks();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test154"); }

    int i0 = org.joda.time.DateTimeConstants.JANUARY;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i0 == 1);

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test155"); }

    org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period2 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology1);
    org.joda.time.DurationField durationField3 = gregorianChronology1.eras();
    org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((org.joda.time.Chronology)gregorianChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test156"); }

    org.joda.time.ReadableInstant readableInstant0 = null;
    org.joda.time.ReadableDuration readableDuration1 = null;
    org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
    org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = org.joda.time.format.DateTimeFormat.fullDate();
    org.joda.time.Chronology chronology4 = null;
    org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
    int i8 = dateTimeFormatter3.parseInto((org.joda.time.ReadWritableInstant)mutableDateTime5, "secondOfMinute", 100);
    org.joda.time.DateTimeZone dateTimeZone9 = null;
    org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(dateTimeZone9);
    long long11 = dateMidnight10.getMillis();
    org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.plusDays(24);
    mutablePeriod2.setPeriod((org.joda.time.ReadableInstant)mutableDateTime5, (org.joda.time.ReadableInstant)dateMidnight13);
    int i15 = mutablePeriod2.getHours();
    mutablePeriod2.setPeriod((long)24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-101));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 1496707200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 20);

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test157"); }

    org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
    org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.fullDate();
    org.joda.time.Chronology chronology2 = null;
    org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(chronology2);
    int i6 = dateTimeFormatter1.parseInto((org.joda.time.ReadWritableInstant)mutableDateTime3, "secondOfMinute", 100);
    org.joda.time.DateTimeZone dateTimeZone7 = null;
    org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay(dateTimeZone7);
    org.joda.time.Seconds seconds9 = org.joda.time.Seconds.TWO;
    org.joda.time.DurationFieldType durationFieldType10 = seconds9.getFieldType();
    org.joda.time.TimeOfDay timeOfDay12 = timeOfDay8.withFieldAdded(durationFieldType10, 1000);
    mutableDateTime3.add(durationFieldType10, (int)'#');
    org.joda.time.LocalTime localTime16 = localTime0.withFieldAdded(durationFieldType10, 41);
    java.lang.String str17 = localTime16.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localTime0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-101));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(seconds9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationFieldType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "00:00:41.000"+ "'", str17.equals("00:00:41.000"));

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test158"); }

    org.joda.time.chrono.GregorianChronology gregorianChronology2 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period3 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology2);
    org.joda.time.DateTimeZone dateTimeZone4 = gregorianChronology2.getZone();
    org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long)1, dateTimeZone4);
    org.joda.time.DateMidnight dateMidnight6 = org.joda.time.DateMidnight.now(dateTimeZone4);
    org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.withYearOfCentury(0);
    org.joda.time.DateMidnight dateMidnight10 = dateMidnight6.withCenturyOfEra(628);
    org.joda.time.DateMidnight dateMidnight12 = dateMidnight6.withWeekyear(330);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight12);

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test159"); }

    org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter0);

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test160"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
    org.joda.time.DateMidnight.Property property2 = dateMidnight1.centuryOfEra();
    org.joda.time.DateMidnight.Property property3 = dateMidnight1.dayOfYear();
    org.joda.time.Interval interval4 = dateMidnight1.toInterval();
    boolean b5 = interval4.isAfterNow();
    boolean b6 = interval4.containsNow();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone8);
    org.joda.time.Chronology chronology10 = copticChronology9.withUTC();
    org.joda.time.MonthDay monthDay11 = new org.joda.time.MonthDay((long)'a', (org.joda.time.Chronology)copticChronology9);
    org.joda.time.MonthDay monthDay13 = monthDay11.plusDays((int)'#');
    boolean b14 = interval4.equals((java.lang.Object)monthDay13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(interval4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(monthDay13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test161"); }

    org.joda.time.Duration duration1 = new org.joda.time.Duration(1498780800000L);
    org.joda.time.Duration duration4 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.Duration duration6 = duration4.minus((long)10080);
    org.joda.time.Duration duration8 = duration1.withDurationAdded((org.joda.time.ReadableDuration)duration4, 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(duration6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(duration8);

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test162"); }

    org.joda.time.Chronology chronology0 = null;
    org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
    org.joda.time.Instant instant2 = mutableDateTime1.toInstant();
    org.joda.time.ReadableInstant readableInstant3 = null;
    boolean b4 = mutableDateTime1.isEqual(readableInstant3);
    org.joda.time.DateTime dateTime5 = mutableDateTime1.toDateTime();
    org.joda.time.DateTime.Property property6 = dateTime5.yearOfCentury();
    java.util.Locale locale8 = null;
    org.joda.time.DateTime dateTime9 = property6.setCopy("26", locale8);
    org.joda.time.Seconds seconds10 = org.joda.time.Seconds.TWO;
    org.joda.time.DateTime dateTime12 = dateTime9.withPeriodAdded((org.joda.time.ReadablePeriod)seconds10, 5);
    org.joda.time.DateTime dateTime14 = dateTime9.minusMonths(28);
    org.joda.time.DateTime.Property property15 = dateTime9.hourOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(seconds10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property15);

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test163"); }

    org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.hourMinuteSecondFraction();
    java.lang.StringBuffer stringBuffer1 = null;
    // The following exception was thrown during execution in test generation
    try {
    dateTimeFormatter0.printTo(stringBuffer1, 0L);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter0);

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test164"); }

    org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.hourOfHalfday();
    org.joda.time.Chronology chronology2 = null;
    org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(chronology2);
    java.util.GregorianCalendar gregorianCalendar4 = mutableDateTime3.toGregorianCalendar();
    mutableDateTime3.addMinutes((int)(byte)1);
    org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone7);
    int i10 = dateTimeZone7.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone7);
    org.joda.time.DateTime dateTime13 = dateTime11.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property14 = dateTime11.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType15 = property14.getFieldType();
    mutableDateTime3.set(dateTimeFieldType15, (int)(byte)10);
    org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField18 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField1, dateTimeFieldType15);
    long long20 = zeroIsMaxDateTimeField18.roundHalfEven((long)2017);
    int i22 = zeroIsMaxDateTimeField18.getMaximumValue(3155760000000L);
    int i24 = zeroIsMaxDateTimeField18.getMaximumValue((long)14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianCalendar4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long20 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 12);

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test165"); }

    org.joda.time.chrono.GregorianChronology gregorianChronology8 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period9 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology8);
    org.joda.time.DateTimeZone dateTimeZone10 = gregorianChronology8.getZone();
    org.joda.time.DateTimeZone dateTimeZone11 = gregorianChronology8.getZone();
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(20, (int)(short)1, 42, 86400, 12, 3, 6, (org.joda.time.Chronology)gregorianChronology8);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone11);

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test166"); }

    org.joda.time.chrono.GregorianChronology gregorianChronology2 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period3 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology2);
    org.joda.time.DateTimeZone dateTimeZone4 = gregorianChronology2.getZone();
    org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long)1, dateTimeZone4);
    org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone4);
    org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone7 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone4);
    java.lang.String str9 = cachedDateTimeZone7.getShortName((long)784);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cachedDateTimeZone7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "UTC"+ "'", str9.equals("UTC"));

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test167"); }

    org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.hourOfHalfday();
    org.joda.time.Chronology chronology2 = null;
    org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(chronology2);
    java.util.GregorianCalendar gregorianCalendar4 = mutableDateTime3.toGregorianCalendar();
    mutableDateTime3.addMinutes((int)(byte)1);
    org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone7);
    int i10 = dateTimeZone7.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone7);
    org.joda.time.DateTime dateTime13 = dateTime11.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property14 = dateTime11.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType15 = property14.getFieldType();
    mutableDateTime3.set(dateTimeFieldType15, (int)(byte)10);
    org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField18 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField1, dateTimeFieldType15);
    int i19 = zeroIsMaxDateTimeField18.getMaximumValue();
    int i21 = zeroIsMaxDateTimeField18.getLeapAmount(100L);
    int i23 = zeroIsMaxDateTimeField18.getMinimumValue((long)'a');
    org.joda.time.Chronology chronology27 = null;
    java.util.Locale locale28 = null;
    org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long)'4', chronology27, locale28, (java.lang.Integer)1, (int)'a');
    dateTimeParserBucket31.setOffset((java.lang.Integer)(-1));
    org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
    dateTimeParserBucket31.setZone(dateTimeZone34);
    org.joda.time.Chronology chronology36 = null;
    org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology36);
    org.joda.time.DateTimeZone dateTimeZone38 = null;
    org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone38);
    java.lang.String str40 = copticChronology39.toString();
    org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology42 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone41);
    org.joda.time.TimeOfDay timeOfDay43 = new org.joda.time.TimeOfDay(dateTimeZone41);
    org.joda.time.Chronology chronology44 = copticChronology39.withZone(dateTimeZone41);
    org.joda.time.DateTime dateTime45 = mutableDateTime37.toDateTime(dateTimeZone41);
    org.joda.time.chrono.EthiopicChronology ethiopicChronology47 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone41, (int)(byte)1);
    boolean b48 = dateTimeParserBucket31.restoreState((java.lang.Object)ethiopicChronology47);
    java.util.Locale locale49 = dateTimeParserBucket31.getLocale();
    // The following exception was thrown during execution in test generation
    try {
    long long50 = zeroIsMaxDateTimeField18.set((long)27, "14", locale49);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianCalendar4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "CopticChronology[UTC]"+ "'", str40.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(ethiopicChronology47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale49);

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test168"); }

    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.Years years1 = org.joda.time.Years.parseYears("PT-10H52M1S");
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test169"); }

    org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long)'#');
    org.joda.time.ReadableInstant readableInstant2 = null;
    org.joda.time.ReadableDuration readableDuration3 = null;
    org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(readableInstant2, readableDuration3);
    org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstance();
    mutablePeriod4.setPeriod((long)100, (org.joda.time.Chronology)gregorianChronology6);
    mutablePeriod4.addMillis((int)(byte)1);
    int i10 = mutablePeriod4.getMonths();
    org.joda.time.DurationFieldType[] durationFieldType_array11 = mutablePeriod4.getFieldTypes();
    org.joda.time.DateTime dateTime12 = dateTime1.plus((org.joda.time.ReadablePeriod)mutablePeriod4);
    org.joda.time.DateTime.Property property13 = dateTime12.secondOfMinute();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationFieldType_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property13);

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test170"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
    org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusMonths(0);
    org.joda.time.Chronology chronology5 = null;
    java.util.Locale locale6 = null;
    org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket((long)'4', chronology5, locale6, (java.lang.Integer)1, (int)'a');
    dateTimeParserBucket9.setOffset((java.lang.Integer)(-1));
    org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
    dateTimeParserBucket9.setZone(dateTimeZone12);
    org.joda.time.DateMidnight dateMidnight14 = yearMonthDay1.toDateMidnight(dateTimeZone12);
    org.joda.time.DateTime dateTime15 = yearMonthDay1.toDateTimeAtMidnight();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonthDay3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime15);

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test171"); }

    org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone0);
    org.joda.time.Chronology chronology2 = null;
    org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(chronology2);
    org.joda.time.Instant instant4 = mutableDateTime3.toInstant();
    mutableDateTime3.addWeekyears((int)(short)-1);
    org.joda.time.DateTimeZone dateTimeZone7 = null;
    org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(dateTimeZone7);
    long long9 = dateMidnight8.getMillis();
    org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.plusDays(24);
    org.joda.time.Minutes minutes12 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant)mutableDateTime3, (org.joda.time.ReadableInstant)dateMidnight11);
    int i13 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant)dateMidnight11);
    org.joda.time.ReadableDuration readableDuration14 = null;
    org.joda.time.DateTimeZone dateTimeZone17 = null;
    org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone17);
    org.joda.time.LocalDateTime.Property property19 = localDateTime18.monthOfYear();
    org.joda.time.DateTimeZone dateTimeZone21 = null;
    org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone21);
    boolean b23 = localDateTime18.isAfter((org.joda.time.ReadablePartial)localDateTime22);
    org.joda.time.DateTimeZone dateTimeZone25 = null;
    org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone25);
    org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withMillisOfDay((int)(short)0);
    org.joda.time.LocalDateTime.Property property29 = localDateTime28.dayOfYear();
    org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.dayTime();
    org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadablePartial)localDateTime18, (org.joda.time.ReadablePartial)localDateTime28, periodType30);
    org.joda.time.PeriodType periodType32 = periodType30.withSecondsRemoved();
    org.joda.time.PeriodType periodType33 = org.joda.time.DateTimeUtils.getPeriodType(periodType32);
    org.joda.time.Chronology chronology34 = null;
    org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology34);
    org.joda.time.PeriodType periodType36 = null;
    org.joda.time.chrono.GregorianChronology gregorianChronology37 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((java.lang.Object)chronology34, periodType36, (org.joda.time.Chronology)gregorianChronology37);
    org.joda.time.DateTimeField dateTimeField39 = gregorianChronology37.hourOfDay();
    org.joda.time.DurationField durationField40 = gregorianChronology37.minutes();
    org.joda.time.Period period41 = new org.joda.time.Period((long)37, periodType32, (org.joda.time.Chronology)gregorianChronology37);
    org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableInstant)dateMidnight11, readableDuration14, periodType32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long9 == 1496707200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(minutes12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField40);

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test172"); }

    org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long)365);
    org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone2);
    int i5 = dateTimeZone2.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone2);
    org.joda.time.DateTime dateTime8 = dateTime6.minusWeeks((int)'4');
    org.joda.time.ReadableDuration readableDuration9 = null;
    org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant)dateTime8, readableDuration9);
    org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant)mutableDateTime1, (org.joda.time.ReadablePeriod)mutablePeriod10);
    mutableDateTime1.setMillisOfSecond(17);
    boolean b15 = mutableDateTime1.isBefore((long)(byte)100);
    org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime1.copy();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableDateTime16);

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test173"); }

    int i0 = org.joda.time.DateTimeConstants.MILLIS_PER_HOUR;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i0 == 3600000);

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test174"); }

    org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period6 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology5);
    org.joda.time.DateTimeZone dateTimeZone7 = gregorianChronology5.getZone();
    org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((int)(byte)1, 6, 8, (org.joda.time.Chronology)gregorianChronology5);
    org.joda.time.DateTimeField dateTimeField9 = gregorianChronology5.dayOfWeek();
    org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((-518399999L), (org.joda.time.Chronology)gregorianChronology5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test175"); }

    org.joda.time.chrono.GregorianChronology gregorianChronology3 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period4 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology3);
    org.joda.time.DateTimeZone dateTimeZone5 = gregorianChronology3.getZone();
    org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long)1, dateTimeZone5);
    org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone5);
    org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone8 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone5);
    org.joda.time.chrono.IslamicChronology islamicChronology9 = org.joda.time.chrono.IslamicChronology.getInstance((org.joda.time.DateTimeZone)cachedDateTimeZone8);
    org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromMillisOfDay(1L, (org.joda.time.Chronology)islamicChronology9);
    org.joda.time.DurationField durationField11 = islamicChronology9.hours();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cachedDateTimeZone8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField11);

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test176"); }

    org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
    org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays((-1));
    org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusWeeks(999);
    org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay();
    org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.minusHours(365);
    org.joda.time.DateTime dateTime8 = timeOfDay7.toDateTimeToday();
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.Period period9 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial)localDateTime4, (org.joda.time.ReadablePartial)timeOfDay7);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime8);

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test177"); }

    org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long)10);
    java.lang.String str2 = localDate1.toString();
    org.joda.time.PeriodType periodType5 = null;
    org.joda.time.Period period6 = new org.joda.time.Period((long)(byte)1, (long)24, periodType5);
    org.joda.time.LocalDate localDate8 = localDate1.withPeriodAdded((org.joda.time.ReadablePeriod)period6, 345);
    org.joda.time.DurationFieldType durationFieldType9 = null;
    boolean b10 = localDate8.isSupported(durationFieldType9);
    org.joda.time.Interval interval11 = localDate8.toInterval();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "1970-01-01"+ "'", str2.equals("1970-01-01"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(interval11);

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test178"); }

    org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
    org.joda.time.Interval interval1 = yearMonth0.toInterval();
    org.joda.time.Interval interval2 = yearMonth0.toInterval();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(interval1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(interval2);

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test179"); }

    org.joda.time.Chronology chronology0 = null;
    org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
    org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.hourOfDay();
    org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.year();
    org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfEven();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableDateTime4);

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test180"); }

    org.joda.time.DateTimeZone dateTimeZone1 = null;
    org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone1);
    org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int)(short)0);
    org.joda.time.DateTimeZone dateTimeZone5 = null;
    org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
    org.joda.time.ReadableDuration readableDuration7 = null;
    org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant)dateMidnight6, readableDuration7);
    org.joda.time.Years years10 = org.joda.time.Years.years(0);
    org.joda.time.Years years12 = years10.minus((int)(byte)-1);
    mutableInterval8.setPeriodAfterStart((org.joda.time.ReadablePeriod)years12);
    org.joda.time.LocalDateTime localDateTime15 = localDateTime4.withPeriodAdded((org.joda.time.ReadablePeriod)years12, (int)'a');
    org.joda.time.LocalDateTime localDateTime17 = localDateTime4.plusWeeks(8);
    org.joda.time.LocalDateTime localDateTime19 = localDateTime4.minusMinutes(6);
    org.joda.time.LocalDateTime localDateTime21 = localDateTime4.plusDays(242);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(years10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(years12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime21);

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test181"); }

    org.joda.time.ReadableInstant readableInstant1 = null;
    org.joda.time.ReadableDuration readableDuration2 = null;
    org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant1, readableDuration2);
    org.joda.time.ReadableDuration readableDuration4 = null;
    org.joda.time.Chronology chronology5 = null;
    org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
    org.joda.time.PeriodType periodType7 = null;
    org.joda.time.chrono.GregorianChronology gregorianChronology8 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((java.lang.Object)chronology5, periodType7, (org.joda.time.Chronology)gregorianChronology8);
    mutablePeriod3.setPeriod(readableDuration4, chronology5);
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone12);
    org.joda.time.DurationField durationField14 = copticChronology13.days();
    org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology)copticChronology13);
    org.joda.time.DateTimeField dateTimeField16 = copticChronology13.millisOfSecond();
    mutablePeriod3.setPeriod((long)(short)1, (org.joda.time.Chronology)copticChronology13);
    org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long)330, (org.joda.time.Chronology)copticChronology13);
    int i19 = localTime18.getMillisOfSecond();
    org.joda.time.LocalTime.Property property20 = localTime18.secondOfMinute();
    org.joda.time.LocalTime localTime21 = property20.withMinimumValue();
    org.joda.time.LocalTime.Property property22 = localTime21.secondOfMinute();
    org.joda.time.LocalTime localTime24 = localTime21.withSecondOfMinute(42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableDateTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 330);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localTime21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localTime24);

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test182"); }

    org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long)10);
    java.lang.String str2 = localDate1.toString();
    org.joda.time.PeriodType periodType5 = null;
    org.joda.time.Period period6 = new org.joda.time.Period((long)(byte)1, (long)24, periodType5);
    org.joda.time.LocalDate localDate8 = localDate1.withPeriodAdded((org.joda.time.ReadablePeriod)period6, 345);
    org.joda.time.LocalDate localDate10 = localDate8.withWeekyear(10);
    org.joda.time.DateTime dateTime11 = localDate10.toDateTimeAtCurrentTime();
    org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((java.lang.Object)10L);
    org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone14);
    int i17 = dateTimeZone14.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone14);
    org.joda.time.DateTime dateTime20 = dateTime18.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property21 = dateTime18.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType22 = property21.getFieldType();
    org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone23);
    int i26 = dateTimeZone23.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone23);
    org.joda.time.DateTime dateTime29 = dateTime27.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property30 = dateTime27.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType31 = property30.getFieldType();
    org.joda.time.DateTimeComparator dateTimeComparator32 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType22, dateTimeFieldType31);
    org.joda.time.DateMidnight.Property property33 = dateMidnight13.property(dateTimeFieldType22);
    boolean b34 = localDate10.isSupported(dateTimeFieldType22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "1970-01-01"+ "'", str2.equals("1970-01-01"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test183"); }

    org.joda.time.Chronology chronology0 = null;
    org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
    org.joda.time.DateTimeZone dateTimeZone2 = null;
    org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone2);
    java.lang.String str4 = copticChronology3.toString();
    org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone5);
    org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(dateTimeZone5);
    org.joda.time.Chronology chronology8 = copticChronology3.withZone(dateTimeZone5);
    org.joda.time.DateTime dateTime9 = mutableDateTime1.toDateTime(dateTimeZone5);
    mutableDateTime1.setMillisOfDay(999);
    int i12 = mutableDateTime1.getMonthOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "CopticChronology[UTC]"+ "'", str4.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 6);

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test184"); }

    org.joda.time.YearMonth yearMonth1 = org.joda.time.YearMonth.parse("1969-12-31");
    int i2 = yearMonth1.size();
    org.joda.time.YearMonth yearMonth4 = yearMonth1.minusYears((int)'a');
    int i5 = yearMonth1.size();
    org.joda.time.DateTimeFieldType[] dateTimeFieldType_array6 = yearMonth1.getFieldTypes();
    org.joda.time.DateTimeZone dateTimeZone7 = null;
    org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone7);
    org.joda.time.DurationField durationField9 = copticChronology8.days();
    org.joda.time.DateTimeZone dateTimeZone11 = null;
    org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone11);
    org.joda.time.LocalDateTime.Property property13 = localDateTime12.monthOfYear();
    org.joda.time.DateTimeZone dateTimeZone15 = null;
    org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone15);
    boolean b17 = localDateTime12.isAfter((org.joda.time.ReadablePartial)localDateTime16);
    org.joda.time.DateTimeZone dateTimeZone19 = null;
    org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone19);
    org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withMillisOfDay((int)(short)0);
    org.joda.time.LocalDateTime.Property property23 = localDateTime22.dayOfYear();
    org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.dayTime();
    org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadablePartial)localDateTime12, (org.joda.time.ReadablePartial)localDateTime22, periodType24);
    int[] i_array27 = copticChronology8.get((org.joda.time.ReadablePartial)localDateTime12, 1496646000000L);
    org.joda.time.Chronology chronology28 = null;
    org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology28);
    org.joda.time.PeriodType periodType30 = null;
    org.joda.time.chrono.GregorianChronology gregorianChronology31 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((java.lang.Object)chronology28, periodType30, (org.joda.time.Chronology)gregorianChronology31);
    org.joda.time.DateTimeField dateTimeField33 = gregorianChronology31.hourOfDay();
    org.joda.time.DurationField durationField34 = gregorianChronology31.minutes();
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.Partial partial35 = new org.joda.time.Partial(dateTimeFieldType_array6, i_array27, (org.joda.time.Chronology)gregorianChronology31);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonth1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonth4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField34);

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test185"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
    org.joda.time.ReadableDuration readableDuration2 = null;
    org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant)dateMidnight1, readableDuration2);
    org.joda.time.Chronology chronology4 = null;
    org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
    org.joda.time.Instant instant6 = mutableDateTime5.toInstant();
    mutableDateTime5.addWeekyears((int)(short)-1);
    org.joda.time.DateTimeZone dateTimeZone9 = null;
    org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(dateTimeZone9);
    long long11 = dateMidnight10.getMillis();
    org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.plusDays(24);
    org.joda.time.Minutes minutes14 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant)mutableDateTime5, (org.joda.time.ReadableInstant)dateMidnight13);
    org.joda.time.Minutes minutes15 = org.joda.time.Minutes.THREE;
    org.joda.time.Minutes minutes16 = minutes14.plus(minutes15);
    mutableInterval3.setPeriodAfterStart((org.joda.time.ReadablePeriod)minutes14);
    org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
    org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusSeconds(0);
    org.joda.time.LocalDateTime.Property property21 = localDateTime18.dayOfMonth();
    org.joda.time.Interval interval22 = property21.toInterval();
    org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
    org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusSeconds(0);
    org.joda.time.LocalDateTime.Property property26 = localDateTime23.dayOfMonth();
    org.joda.time.Interval interval27 = property26.toInterval();
    boolean b28 = interval27.containsNow();
    boolean b29 = interval22.abuts((org.joda.time.ReadableInterval)interval27);
    org.joda.time.Chronology chronology30 = interval27.getChronology();
    mutableInterval3.setChronology(chronology30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 1496707200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(minutes14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(minutes15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(minutes16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(interval22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(interval27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology30);

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test186"); }

    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType0 = org.joda.time.chrono.IslamicChronology.LEAP_YEAR_15_BASED;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType0);

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test187"); }

    org.joda.time.Duration duration2 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone3);
    int i6 = dateTimeZone3.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone3);
    org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)duration2, (org.joda.time.ReadableInstant)dateTime7);
    org.joda.time.DateTime.Property property9 = dateTime7.monthOfYear();
    org.joda.time.DateTime dateTime11 = dateTime7.minus((long)1969);
    org.joda.time.DateTime dateTime12 = dateTime11.withEarlierOffsetAtOverlap();
    org.joda.time.DateTime.Property property13 = dateTime11.yearOfCentury();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property13);

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test188"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
    java.lang.String str2 = copticChronology1.toString();
    org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
    org.joda.time.DateTimeZone dateTimeZone5 = null;
    org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone5);
    java.lang.String str7 = copticChronology6.toString();
    org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(0L, (org.joda.time.Chronology)copticChronology6);
    org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone9);
    int i12 = dateTimeZone9.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone9);
    org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property16 = dateTime13.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType17 = property16.getFieldType();
    org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone18);
    int i21 = dateTimeZone18.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone18);
    org.joda.time.DateTime dateTime24 = dateTime22.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property25 = dateTime22.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType26 = property25.getFieldType();
    org.joda.time.DateTimeComparator dateTimeComparator27 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType17, dateTimeFieldType26);
    int i28 = timeOfDay8.indexOf(dateTimeFieldType26);
    org.joda.time.field.OffsetDateTimeField offsetDateTimeField32 = new org.joda.time.field.OffsetDateTimeField(dateTimeField3, dateTimeFieldType26, 10, 1000, 628);
    long long34 = offsetDateTimeField32.roundHalfEven(1496721385602L);
    int i36 = offsetDateTimeField32.getMaximumValue((long)(byte)100);
    int i38 = offsetDateTimeField32.getLeapAmount(20L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "CopticChronology[UTC]"+ "'", str2.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "CopticChronology[UTC]"+ "'", str7.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long34 == 463708800000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 628);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test189"); }

    org.joda.time.Chronology chronology0 = null;
    org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
    org.joda.time.Instant instant2 = mutableDateTime1.toInstant();
    org.joda.time.Instant instant5 = instant2.withDurationAdded((long)1969, 37);
    org.joda.time.MutableDateTime mutableDateTime6 = instant5.toMutableDateTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableDateTime6);

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test190"); }

    org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
    org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusSeconds(0);
    org.joda.time.LocalDateTime.Property property3 = localDateTime0.dayOfMonth();
    org.joda.time.Interval interval4 = property3.toInterval();
    org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
    org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusSeconds(0);
    org.joda.time.LocalDateTime.Property property8 = localDateTime5.dayOfMonth();
    org.joda.time.Interval interval9 = property8.toInterval();
    boolean b10 = interval4.isAfter((org.joda.time.ReadableInterval)interval9);
    org.joda.time.ReadableDuration readableDuration11 = null;
    org.joda.time.Interval interval12 = interval4.withDurationBeforeEnd(readableDuration11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(interval4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(interval9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(interval12);

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test191"); }

    org.joda.time.Period period4 = new org.joda.time.Period((int)(short)0, (int)'4', 1, 0);
    org.joda.time.PeriodType periodType5 = null;
    org.joda.time.Period period6 = period4.withPeriodType(periodType5);
    org.joda.time.ReadableInstant readableInstant7 = null;
    org.joda.time.ReadableDuration readableDuration8 = null;
    org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(readableInstant7, readableDuration8);
    org.joda.time.ReadableDuration readableDuration10 = null;
    org.joda.time.Chronology chronology11 = null;
    org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
    org.joda.time.PeriodType periodType13 = null;
    org.joda.time.chrono.GregorianChronology gregorianChronology14 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((java.lang.Object)chronology11, periodType13, (org.joda.time.Chronology)gregorianChronology14);
    mutablePeriod9.setPeriod(readableDuration10, chronology11);
    org.joda.time.Period period17 = period4.plus((org.joda.time.ReadablePeriod)mutablePeriod9);
    org.joda.time.Period period19 = period4.withHours(32);
    org.joda.time.Seconds seconds20 = period4.toStandardSeconds();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(seconds20);

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test192"); }

    org.joda.time.Chronology chronology1 = null;
    java.util.Locale locale2 = null;
    org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long)'4', chronology1, locale2, (java.lang.Integer)1, (int)'a');
    dateTimeParserBucket5.setOffset((java.lang.Integer)(-1));
    org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
    dateTimeParserBucket5.setZone(dateTimeZone8);
    org.joda.time.Chronology chronology10 = null;
    org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone12);
    java.lang.String str14 = copticChronology13.toString();
    org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone15);
    org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay(dateTimeZone15);
    org.joda.time.Chronology chronology18 = copticChronology13.withZone(dateTimeZone15);
    org.joda.time.DateTime dateTime19 = mutableDateTime11.toDateTime(dateTimeZone15);
    org.joda.time.chrono.EthiopicChronology ethiopicChronology21 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone15, (int)(byte)1);
    boolean b22 = dateTimeParserBucket5.restoreState((java.lang.Object)ethiopicChronology21);
    java.util.Locale locale23 = dateTimeParserBucket5.getLocale();
    long long26 = dateTimeParserBucket5.computeMillis(true, "1969-12-31");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "CopticChronology[UTC]"+ "'", str14.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(ethiopicChronology21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long26 == 53L);

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test193"); }

    org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.hourOfHalfday();
    org.joda.time.Chronology chronology2 = null;
    org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(chronology2);
    java.util.GregorianCalendar gregorianCalendar4 = mutableDateTime3.toGregorianCalendar();
    mutableDateTime3.addMinutes((int)(byte)1);
    org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone7);
    int i10 = dateTimeZone7.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone7);
    org.joda.time.DateTime dateTime13 = dateTime11.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property14 = dateTime11.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType15 = property14.getFieldType();
    mutableDateTime3.set(dateTimeFieldType15, (int)(byte)10);
    org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField18 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField1, dateTimeFieldType15);
    int i19 = zeroIsMaxDateTimeField18.getMaximumValue();
    long long22 = zeroIsMaxDateTimeField18.add((long)24, 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianCalendar4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long22 == 32400024L);

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test194"); }

    org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long)365);
    org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone2);
    int i5 = dateTimeZone2.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone2);
    org.joda.time.DateTime dateTime8 = dateTime6.minusWeeks((int)'4');
    org.joda.time.ReadableDuration readableDuration9 = null;
    org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant)dateTime8, readableDuration9);
    org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant)mutableDateTime1, (org.joda.time.ReadablePeriod)mutablePeriod10);
    boolean b13 = interval11.isBefore((long)41);
    org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone14);
    int i17 = dateTimeZone14.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone14);
    org.joda.time.Duration duration21 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.Duration duration24 = duration21.withDurationAdded((long)28, (int)' ');
    org.joda.time.DateTimeZone dateTimeZone25 = null;
    org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(dateTimeZone25);
    org.joda.time.DateMidnight.Property property27 = dateMidnight26.centuryOfEra();
    org.joda.time.PeriodType periodType28 = null;
    org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)duration24, (org.joda.time.ReadableInstant)dateMidnight26, periodType28);
    org.joda.time.DateTime dateTime31 = dateTime18.withDurationAdded((org.joda.time.ReadableDuration)duration24, 5);
    boolean b32 = interval11.contains((org.joda.time.ReadableInstant)dateTime18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(duration24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test195"); }

    org.joda.time.Chronology chronology1 = null;
    java.util.Locale locale2 = null;
    org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long)'4', chronology1, locale2, (java.lang.Integer)1, (int)'a');
    dateTimeParserBucket5.setPivotYear((java.lang.Integer)1000);
    java.lang.Integer i8 = dateTimeParserBucket5.getPivotYear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + i8 + "' != '" + 1000+ "'", i8.equals(1000));

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test196"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
    org.joda.time.Duration duration4 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.DateTimeZone dateTimeZone5 = null;
    org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
    org.joda.time.DateMidnight.Property property7 = dateMidnight6.centuryOfEra();
    org.joda.time.DateMidnight.Property property8 = dateMidnight6.dayOfYear();
    org.joda.time.DateMidnight dateMidnight9 = property8.roundHalfFloorCopy();
    org.joda.time.PeriodType periodType10 = null;
    org.joda.time.Period period11 = duration4.toPeriodFrom((org.joda.time.ReadableInstant)dateMidnight9, periodType10);
    org.joda.time.DateMidnight dateMidnight13 = dateMidnight1.withPeriodAdded((org.joda.time.ReadablePeriod)period11, 100);
    boolean b14 = dateMidnight13.isEqualNow();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test197"); }

    org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.hourMinuteSecond();
    org.joda.time.ReadableInstant readableInstant1 = null;
    org.joda.time.ReadableDuration readableDuration2 = null;
    org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant1, readableDuration2);
    org.joda.time.ReadableDuration readableDuration4 = null;
    org.joda.time.Chronology chronology5 = null;
    org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
    org.joda.time.PeriodType periodType7 = null;
    org.joda.time.chrono.GregorianChronology gregorianChronology8 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((java.lang.Object)chronology5, periodType7, (org.joda.time.Chronology)gregorianChronology8);
    mutablePeriod3.setPeriod(readableDuration4, chronology5);
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone12);
    org.joda.time.DurationField durationField14 = copticChronology13.days();
    org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology)copticChronology13);
    org.joda.time.DateTimeField dateTimeField16 = copticChronology13.millisOfSecond();
    mutablePeriod3.setPeriod((long)(short)1, (org.joda.time.Chronology)copticChronology13);
    org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter0.withChronology((org.joda.time.Chronology)copticChronology13);
    org.joda.time.DateTimeZone dateTimeZone19 = null;
    org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone19);
    org.joda.time.DateMidnight dateMidnight21 = yearMonthDay20.toDateMidnight();
    long long23 = copticChronology13.set((org.joda.time.ReadablePartial)yearMonthDay20, (long)(short)100);
    org.joda.time.DateTime dateTime24 = yearMonthDay20.toDateTimeAtMidnight();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableDateTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long23 == 10449302400100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime24);

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test198"); }

    org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long)365);
    org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone2);
    int i5 = dateTimeZone2.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone2);
    org.joda.time.DateTime dateTime8 = dateTime6.minusWeeks((int)'4');
    org.joda.time.ReadableDuration readableDuration9 = null;
    org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant)dateTime8, readableDuration9);
    org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant)mutableDateTime1, (org.joda.time.ReadablePeriod)mutablePeriod10);
    org.joda.time.ReadableInstant readableInstant13 = null;
    org.joda.time.ReadableDuration readableDuration14 = null;
    org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(readableInstant13, readableDuration14);
    org.joda.time.ReadableDuration readableDuration16 = null;
    org.joda.time.Chronology chronology17 = null;
    org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
    org.joda.time.PeriodType periodType19 = null;
    org.joda.time.chrono.GregorianChronology gregorianChronology20 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((java.lang.Object)chronology17, periodType19, (org.joda.time.Chronology)gregorianChronology20);
    mutablePeriod15.setPeriod(readableDuration16, chronology17);
    org.joda.time.DateTimeZone dateTimeZone24 = null;
    org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone24);
    org.joda.time.DurationField durationField26 = copticChronology25.days();
    org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology)copticChronology25);
    org.joda.time.DateTimeField dateTimeField28 = copticChronology25.millisOfSecond();
    mutablePeriod15.setPeriod((long)(short)1, (org.joda.time.Chronology)copticChronology25);
    org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((long)330, (org.joda.time.Chronology)copticChronology25);
    int i31 = localTime30.getMillisOfSecond();
    org.joda.time.LocalTime.Property property32 = localTime30.secondOfMinute();
    org.joda.time.LocalTime localTime33 = property32.withMaximumValue();
    org.joda.time.Seconds seconds34 = org.joda.time.Seconds.TWO;
    org.joda.time.DurationFieldType durationFieldType35 = seconds34.getFieldType();
    org.joda.time.LocalTime localTime37 = localTime33.withFieldAdded(durationFieldType35, 365);
    mutablePeriod10.add(durationFieldType35, (int)'#');
    mutablePeriod10.add(2, 28, 64, 157, 8, (int)(short)100, 236, 42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableDateTime27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 330);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localTime33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(seconds34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationFieldType35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localTime37);

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test199"); }

    org.joda.time.Period period1 = org.joda.time.Period.years(5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period1);

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test200"); }

    org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDate();
    org.joda.time.Chronology chronology1 = dateTimeFormatter0.getChronology();
    java.lang.Appendable appendable2 = null;
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone3);
    int i5 = dateMidnight4.getDayOfWeek();
    // The following exception was thrown during execution in test generation
    try {
    dateTimeFormatter0.printTo(appendable2, (org.joda.time.ReadableInstant)dateMidnight4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(chronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test201"); }

    org.joda.time.Hours hours1 = org.joda.time.Hours.hours(692);
    org.joda.time.Days days2 = hours1.toStandardDays();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hours1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(days2);

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test202"); }

    org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone0);
    int i3 = dateTimeZone0.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone0);
    org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property7 = dateTime4.millisOfDay();
    boolean b8 = dateTime4.isBeforeNow();
    org.joda.time.DateTime dateTime10 = dateTime4.withHourOfDay(8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime10);

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test203"); }

    org.joda.time.ReadableInstant readableInstant0 = null;
    org.joda.time.ReadableDuration readableDuration1 = null;
    org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
    org.joda.time.chrono.GregorianChronology gregorianChronology4 = org.joda.time.chrono.GregorianChronology.getInstance();
    mutablePeriod2.setPeriod((long)100, (org.joda.time.Chronology)gregorianChronology4);
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(dateTimeZone6);
    int i8 = dateMidnight7.getDayOfWeek();
    org.joda.time.Chronology chronology9 = null;
    org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
    java.util.GregorianCalendar gregorianCalendar11 = mutableDateTime10.toGregorianCalendar();
    org.joda.time.chrono.LimitChronology limitChronology12 = org.joda.time.chrono.LimitChronology.getInstance((org.joda.time.Chronology)gregorianChronology4, (org.joda.time.ReadableDateTime)dateMidnight7, (org.joda.time.ReadableDateTime)mutableDateTime10);
    java.lang.String str13 = limitChronology12.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianCalendar11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(limitChronology12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "LimitChronology[GregorianChronology[UTC], 2017-06-06T00:00:00.000Z, 2017-06-06T03:57:31.848Z]"+ "'", str13.equals("LimitChronology[GregorianChronology[UTC], 2017-06-06T00:00:00.000Z, 2017-06-06T03:57:31.848Z]"));

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test204"); }

    org.joda.time.Chronology chronology0 = null;
    org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
    org.joda.time.DateTimeZone dateTimeZone2 = null;
    org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone2);
    java.lang.String str4 = copticChronology3.toString();
    org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone5);
    org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(dateTimeZone5);
    org.joda.time.Chronology chronology8 = copticChronology3.withZone(dateTimeZone5);
    org.joda.time.DateTime dateTime9 = mutableDateTime1.toDateTime(dateTimeZone5);
    org.joda.time.DateTimeZone dateTimeZone10 = null;
    org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(dateTimeZone10);
    org.joda.time.Duration duration14 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.DateMidnight dateMidnight15 = dateMidnight11.minus((org.joda.time.ReadableDuration)duration14);
    org.joda.time.Duration duration17 = org.joda.time.Duration.standardHours((long)1);
    org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant)dateMidnight15, (org.joda.time.ReadableDuration)duration17);
    org.joda.time.DateTime dateTime19 = dateTime9.plus((org.joda.time.ReadableDuration)duration17);
    org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.minutes();
    org.joda.time.Period period21 = duration17.toPeriod(periodType20);
    org.joda.time.PeriodType periodType22 = org.joda.time.DateTimeUtils.getPeriodType(periodType20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "CopticChronology[UTC]"+ "'", str4.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(duration17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType22);

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test205"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
    org.joda.time.DateMidnight.Property property2 = dateMidnight1.centuryOfEra();
    org.joda.time.DateMidnight dateMidnight4 = property2.addWrapFieldToCopy((int)(short)100);
    org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withDayOfYear(28);
    int i7 = dateMidnight6.getMinuteOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test206"); }

    org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long)17);
    org.joda.time.Duration duration2 = duration1.toDuration();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(duration1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(duration2);

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test207"); }

    org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
    org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays((-1));
    org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusDays(42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime4);

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test208"); }

    org.joda.time.Chronology chronology1 = null;
    org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
    org.joda.time.PeriodType periodType3 = null;
    org.joda.time.chrono.GregorianChronology gregorianChronology4 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((java.lang.Object)chronology1, periodType3, (org.joda.time.Chronology)gregorianChronology4);
    org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long)345, chronology1);
    org.joda.time.DateTimeZone dateTimeZone7 = null;
    org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
    org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths(0);
    org.joda.time.Chronology chronology12 = null;
    java.util.Locale locale13 = null;
    org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long)'4', chronology12, locale13, (java.lang.Integer)1, (int)'a');
    dateTimeParserBucket16.setOffset((java.lang.Integer)(-1));
    org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
    dateTimeParserBucket16.setZone(dateTimeZone19);
    org.joda.time.DateMidnight dateMidnight21 = yearMonthDay8.toDateMidnight(dateTimeZone19);
    org.joda.time.DateMidnight dateMidnight22 = localDate6.toDateMidnight(dateTimeZone19);
    org.joda.time.LocalDate.Property property23 = localDate6.weekyear();
    org.joda.time.LocalDate localDate25 = localDate6.plusMonths(1969);
    org.joda.time.DateTime dateTime26 = localDate6.toDateTimeAtMidnight();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonthDay10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime26);

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test209"); }

    org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long)535);

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test210"); }

    org.joda.time.Chronology chronology0 = null;
    org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
    org.joda.time.Instant instant2 = mutableDateTime1.toInstant();
    mutableDateTime1.addWeekyears((int)(short)-1);
    org.joda.time.DateTimeZone dateTimeZone5 = null;
    org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
    long long7 = dateMidnight6.getMillis();
    org.joda.time.DateMidnight dateMidnight9 = dateMidnight6.plusDays(24);
    org.joda.time.Minutes minutes10 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant)mutableDateTime1, (org.joda.time.ReadableInstant)dateMidnight9);
    // The following exception was thrown during execution in test generation
    try {
    mutableDateTime1.setDate(10, 54, (-101));
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 1496707200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(minutes10);

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test211"); }

    java.util.Date date0 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.fromDateFields(date0);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test212"); }

    org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(463708800000L);

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test213"); }

    int i0 = org.joda.time.DateTimeConstants.MINUTES_PER_DAY;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i0 == 1440);

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test214"); }

    org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicOrdinalDateTime();
    org.joda.time.Chronology chronology1 = null;
    org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
    org.joda.time.Instant instant3 = mutableDateTime2.toInstant();
    org.joda.time.ReadableInstant readableInstant4 = null;
    boolean b5 = mutableDateTime2.isEqual(readableInstant4);
    org.joda.time.DateTime dateTime6 = mutableDateTime2.toDateTime();
    org.joda.time.DateTime.Property property7 = dateTime6.yearOfCentury();
    java.util.Locale locale9 = null;
    org.joda.time.DateTime dateTime10 = property7.setCopy("26", locale9);
    org.joda.time.Seconds seconds11 = org.joda.time.Seconds.TWO;
    org.joda.time.DateTime dateTime13 = dateTime10.withPeriodAdded((org.joda.time.ReadablePeriod)seconds11, 5);
    org.joda.time.DateTimeZone dateTimeZone14 = null;
    org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(dateTimeZone14);
    org.joda.time.Duration duration18 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.DateMidnight dateMidnight19 = dateMidnight15.minus((org.joda.time.ReadableDuration)duration18);
    org.joda.time.DateTime dateTime20 = dateTime10.plus((org.joda.time.ReadableDuration)duration18);
    org.joda.time.DateTimeZone dateTimeZone22 = null;
    org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone22);
    org.joda.time.DateTime dateTime24 = dateTime10.withFields((org.joda.time.ReadablePartial)localDateTime23);
    java.lang.String str25 = dateTimeFormatter0.print((org.joda.time.ReadableInstant)dateTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(seconds11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "2026157T035732.537Z"+ "'", str25.equals("2026157T035732.537Z"));

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test215"); }

    org.joda.time.Chronology chronology0 = null;
    org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
    java.util.GregorianCalendar gregorianCalendar2 = mutableDateTime1.toGregorianCalendar();
    mutableDateTime1.addMinutes((int)(byte)1);
    org.joda.time.ReadableInstant readableInstant5 = null;
    org.joda.time.ReadableDuration readableDuration6 = null;
    org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(readableInstant5, readableDuration6);
    org.joda.time.chrono.GregorianChronology gregorianChronology9 = org.joda.time.chrono.GregorianChronology.getInstance();
    mutablePeriod7.setPeriod((long)100, (org.joda.time.Chronology)gregorianChronology9);
    mutableDateTime1.setChronology((org.joda.time.Chronology)gregorianChronology9);
    int i12 = mutableDateTime1.getSecondOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianCalendar2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 14312);

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test216"); }

    org.joda.time.chrono.JulianChronology julianChronology0 = org.joda.time.chrono.JulianChronology.getInstance();
    org.joda.time.DateTimeZone dateTimeZone1 = julianChronology0.getZone();
    org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(julianChronology0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology2);

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test217"); }

    org.joda.time.ReadableInstant readableInstant1 = null;
    org.joda.time.ReadableDuration readableDuration2 = null;
    org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant1, readableDuration2);
    org.joda.time.ReadableDuration readableDuration4 = null;
    org.joda.time.Chronology chronology5 = null;
    org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
    org.joda.time.PeriodType periodType7 = null;
    org.joda.time.chrono.GregorianChronology gregorianChronology8 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((java.lang.Object)chronology5, periodType7, (org.joda.time.Chronology)gregorianChronology8);
    mutablePeriod3.setPeriod(readableDuration4, chronology5);
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone12);
    org.joda.time.DurationField durationField14 = copticChronology13.days();
    org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology)copticChronology13);
    org.joda.time.DateTimeField dateTimeField16 = copticChronology13.millisOfSecond();
    mutablePeriod3.setPeriod((long)(short)1, (org.joda.time.Chronology)copticChronology13);
    org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long)330, (org.joda.time.Chronology)copticChronology13);
    int i19 = localTime18.getMillisOfSecond();
    org.joda.time.LocalTime.Property property20 = localTime18.secondOfMinute();
    org.joda.time.LocalTime localTime21 = property20.withMinimumValue();
    org.joda.time.LocalTime.Property property22 = localTime21.hourOfDay();
    org.joda.time.LocalTime localTime23 = property22.withMinimumValue();
    org.joda.time.Chronology chronology26 = null;
    java.util.Locale locale27 = null;
    org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long)'4', chronology26, locale27, (java.lang.Integer)1, (int)'a');
    dateTimeParserBucket30.setOffset((java.lang.Integer)(-1));
    org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
    dateTimeParserBucket30.setZone(dateTimeZone33);
    org.joda.time.Chronology chronology35 = null;
    org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(chronology35);
    org.joda.time.DateTimeZone dateTimeZone37 = null;
    org.joda.time.chrono.CopticChronology copticChronology38 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone37);
    java.lang.String str39 = copticChronology38.toString();
    org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology41 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone40);
    org.joda.time.TimeOfDay timeOfDay42 = new org.joda.time.TimeOfDay(dateTimeZone40);
    org.joda.time.Chronology chronology43 = copticChronology38.withZone(dateTimeZone40);
    org.joda.time.DateTime dateTime44 = mutableDateTime36.toDateTime(dateTimeZone40);
    org.joda.time.chrono.EthiopicChronology ethiopicChronology46 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone40, (int)(byte)1);
    boolean b47 = dateTimeParserBucket30.restoreState((java.lang.Object)ethiopicChronology46);
    java.util.Locale locale48 = dateTimeParserBucket30.getLocale();
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.LocalTime localTime49 = property22.setCopy("hi!", locale48);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableDateTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 330);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localTime21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localTime23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "CopticChronology[UTC]"+ "'", str39.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(ethiopicChronology46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale48);

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test218"); }

    org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long)'#');
    org.joda.time.DateTime dateTime3 = dateTime1.minusDays(4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime3);

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test219"); }

    org.joda.time.chrono.BuddhistChronology buddhistChronology0 = org.joda.time.chrono.BuddhistChronology.getInstance();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(buddhistChronology0);

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test220"); }

    int i0 = org.joda.time.DateTimeConstants.AD;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i0 == 1);

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test221"); }

    org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
    org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusDays((-1));
    org.joda.time.LocalDateTime localDateTime4 = localDateTime0.plusSeconds(628);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime4);

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test222"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
    java.lang.String str2 = copticChronology1.toString();
    org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
    org.joda.time.DateTimeZone dateTimeZone5 = null;
    org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone5);
    java.lang.String str7 = copticChronology6.toString();
    org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(0L, (org.joda.time.Chronology)copticChronology6);
    org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone9);
    int i12 = dateTimeZone9.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone9);
    org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property16 = dateTime13.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType17 = property16.getFieldType();
    org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone18);
    int i21 = dateTimeZone18.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone18);
    org.joda.time.DateTime dateTime24 = dateTime22.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property25 = dateTime22.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType26 = property25.getFieldType();
    org.joda.time.DateTimeComparator dateTimeComparator27 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType17, dateTimeFieldType26);
    int i28 = timeOfDay8.indexOf(dateTimeFieldType26);
    org.joda.time.field.OffsetDateTimeField offsetDateTimeField32 = new org.joda.time.field.OffsetDateTimeField(dateTimeField3, dateTimeFieldType26, 10, 1000, 628);
    java.lang.String str33 = offsetDateTimeField32.toString();
    long long35 = offsetDateTimeField32.roundHalfFloor((long)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "CopticChronology[UTC]"+ "'", str2.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "CopticChronology[UTC]"+ "'", str7.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "DateTimeField[millisOfDay]"+ "'", str33.equals("DateTimeField[millisOfDay]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long35 == 463708800000L);

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test223"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(dateTimeZone0);
    org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusSeconds((int)(short)0);
    org.joda.time.TimeOfDay.Property property4 = timeOfDay1.secondOfMinute();
    org.joda.time.TimeOfDay.Property property5 = timeOfDay1.millisOfSecond();
    int i6 = property5.getMaximumValue();
    int i7 = property5.getMinimumValueOverall();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 999);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test224"); }

    org.joda.time.Days days0 = org.joda.time.Days.MIN_VALUE;
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.Hours hours1 = days0.toStandardHours();
      org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException");
    } catch (java.lang.ArithmeticException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(days0);

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test225"); }

    org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long)10);
    java.lang.String str2 = localDate1.toString();
    org.joda.time.PeriodType periodType5 = null;
    org.joda.time.Period period6 = new org.joda.time.Period((long)(byte)1, (long)24, periodType5);
    org.joda.time.LocalDate localDate8 = localDate1.withPeriodAdded((org.joda.time.ReadablePeriod)period6, 345);
    org.joda.time.DurationFieldType durationFieldType9 = null;
    boolean b10 = localDate8.isSupported(durationFieldType9);
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone12);
    org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfDay((int)(short)0);
    org.joda.time.DateTimeZone dateTimeZone16 = null;
    org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(dateTimeZone16);
    org.joda.time.ReadableDuration readableDuration18 = null;
    org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant)dateMidnight17, readableDuration18);
    org.joda.time.Years years21 = org.joda.time.Years.years(0);
    org.joda.time.Years years23 = years21.minus((int)(byte)-1);
    mutableInterval19.setPeriodAfterStart((org.joda.time.ReadablePeriod)years23);
    org.joda.time.LocalDateTime localDateTime26 = localDateTime15.withPeriodAdded((org.joda.time.ReadablePeriod)years23, (int)'a');
    org.joda.time.LocalDateTime localDateTime28 = localDateTime15.minusMonths(0);
    org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusDays((int)'#');
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.Months months31 = org.joda.time.Months.monthsBetween((org.joda.time.ReadablePartial)localDate8, (org.joda.time.ReadablePartial)localDateTime28);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "1970-01-01"+ "'", str2.equals("1970-01-01"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(years21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(years23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime30);

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test226"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
    org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.year();
    org.joda.time.YearMonthDay yearMonthDay4 = property2.setCopy((int)(byte)-1);
    org.joda.time.ReadableInstant readableInstant5 = null;
    org.joda.time.ReadableDuration readableDuration6 = null;
    org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(readableInstant5, readableDuration6);
    org.joda.time.chrono.GregorianChronology gregorianChronology9 = org.joda.time.chrono.GregorianChronology.getInstance();
    mutablePeriod7.setPeriod((long)100, (org.joda.time.Chronology)gregorianChronology9);
    org.joda.time.DateTimeZone dateTimeZone11 = null;
    org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(dateTimeZone11);
    int i13 = dateMidnight12.getDayOfWeek();
    org.joda.time.Chronology chronology14 = null;
    org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
    java.util.GregorianCalendar gregorianCalendar16 = mutableDateTime15.toGregorianCalendar();
    org.joda.time.chrono.LimitChronology limitChronology17 = org.joda.time.chrono.LimitChronology.getInstance((org.joda.time.Chronology)gregorianChronology9, (org.joda.time.ReadableDateTime)dateMidnight12, (org.joda.time.ReadableDateTime)mutableDateTime15);
    org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay4.withChronologyRetainFields((org.joda.time.Chronology)limitChronology17);
    // The following exception was thrown during execution in test generation
    try {
    long long23 = limitChronology17.getDateTimeMillis((int)(byte)0, 70, 17, 41);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonthDay4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianCalendar16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(limitChronology17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonthDay18);

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test227"); }

    org.joda.time.ReadableInstant readableInstant0 = null;
    org.joda.time.ReadableDuration readableDuration1 = null;
    org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
    org.joda.time.chrono.GregorianChronology gregorianChronology4 = org.joda.time.chrono.GregorianChronology.getInstance();
    mutablePeriod2.setPeriod((long)100, (org.joda.time.Chronology)gregorianChronology4);
    int i6 = mutablePeriod2.getWeeks();
    org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
    org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusSeconds(0);
    org.joda.time.LocalDateTime.Property property10 = localDateTime7.dayOfMonth();
    org.joda.time.Interval interval11 = property10.toInterval();
    boolean b12 = interval11.containsNow();
    org.joda.time.DateTimeZone dateTimeZone13 = null;
    org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(dateTimeZone13);
    org.joda.time.Duration duration17 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.DateMidnight dateMidnight18 = dateMidnight14.minus((org.joda.time.ReadableDuration)duration17);
    org.joda.time.Duration duration20 = org.joda.time.Duration.standardHours((long)1);
    org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant)dateMidnight18, (org.joda.time.ReadableDuration)duration20);
    org.joda.time.Interval interval22 = interval11.withDurationAfterStart((org.joda.time.ReadableDuration)duration20);
    mutablePeriod2.setPeriod((org.joda.time.ReadableDuration)duration20);
    org.joda.time.Period period24 = mutablePeriod2.toPeriod();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(interval11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(duration20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(interval22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period24);

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test228"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(dateTimeZone0);
    org.joda.time.DateTimeFieldType[] dateTimeFieldType_array2 = timeOfDay1.getFieldTypes();
    int i3 = timeOfDay1.getMillisOfSecond();
    org.joda.time.TimeOfDay timeOfDay5 = timeOfDay1.plusSeconds((int)(byte)1);
    int i6 = timeOfDay5.getSecondOfMinute();
    org.joda.time.DateTime dateTime7 = timeOfDay5.toDateTimeToday();
    org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
    org.joda.time.DateTime.Property property9 = dateTime8.dayOfYear();
    org.joda.time.chrono.GregorianChronology gregorianChronology13 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period14 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology13);
    org.joda.time.DateTimeZone dateTimeZone15 = gregorianChronology13.getZone();
    org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long)1, dateTimeZone15);
    org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone15);
    org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone18 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone15);
    int i20 = cachedDateTimeZone18.getOffset((long)(byte)100);
    org.joda.time.DateTimeZone dateTimeZone21 = cachedDateTimeZone18.getUncachedZone();
    org.joda.time.Chronology chronology24 = null;
    java.util.Locale locale25 = null;
    org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long)'4', chronology24, locale25, (java.lang.Integer)1, (int)'a');
    dateTimeParserBucket28.setOffset((java.lang.Integer)(-1));
    org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
    dateTimeParserBucket28.setZone(dateTimeZone31);
    org.joda.time.Chronology chronology33 = null;
    org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology33);
    org.joda.time.DateTimeZone dateTimeZone35 = null;
    org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone35);
    java.lang.String str37 = copticChronology36.toString();
    org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology39 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone38);
    org.joda.time.TimeOfDay timeOfDay40 = new org.joda.time.TimeOfDay(dateTimeZone38);
    org.joda.time.Chronology chronology41 = copticChronology36.withZone(dateTimeZone38);
    org.joda.time.DateTime dateTime42 = mutableDateTime34.toDateTime(dateTimeZone38);
    org.joda.time.chrono.EthiopicChronology ethiopicChronology44 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38, (int)(byte)1);
    boolean b45 = dateTimeParserBucket28.restoreState((java.lang.Object)ethiopicChronology44);
    java.util.Locale locale46 = dateTimeParserBucket28.getLocale();
    java.lang.String str47 = dateTimeZone21.getShortName(0L, locale46);
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.DateTime dateTime48 = property9.setCopy("2017-06-06T00:00:00.000", locale46);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 805);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cachedDateTimeZone18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "CopticChronology[UTC]"+ "'", str37.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(ethiopicChronology44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "UTC"+ "'", str47.equals("UTC"));

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test229"); }

    org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.dayTime();
    org.joda.time.chrono.GregorianChronology gregorianChronology3 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period4 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology3);
    org.joda.time.DateTimeField dateTimeField5 = gregorianChronology3.era();
    org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long)(short)-1, periodType1, (org.joda.time.Chronology)gregorianChronology3);
    org.joda.time.PeriodType periodType7 = periodType1.withMonthsRemoved();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType7);

  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test230"); }

    org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearWeekDayTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType0);

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test231"); }

    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(23, (int)'a', 26, 86, 5, 628);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test232"); }

    org.joda.time.Chronology chronology0 = null;
    org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
    org.joda.time.DateTimeZone dateTimeZone2 = null;
    org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone2);
    java.lang.String str4 = copticChronology3.toString();
    org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone5);
    org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(dateTimeZone5);
    org.joda.time.Chronology chronology8 = copticChronology3.withZone(dateTimeZone5);
    org.joda.time.DateTime dateTime9 = mutableDateTime1.toDateTime(dateTimeZone5);
    org.joda.time.chrono.EthiopicChronology ethiopicChronology11 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone5, (int)(byte)1);
    java.lang.String str12 = ethiopicChronology11.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "CopticChronology[UTC]"+ "'", str4.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(ethiopicChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "EthiopicChronology[UTC,mdfw=1]"+ "'", str12.equals("EthiopicChronology[UTC,mdfw=1]"));

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test233"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
    org.joda.time.DurationField durationField2 = copticChronology1.days();
    org.joda.time.DateTimeZone dateTimeZone4 = null;
    org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone4);
    org.joda.time.LocalDateTime.Property property6 = localDateTime5.monthOfYear();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone8);
    boolean b10 = localDateTime5.isAfter((org.joda.time.ReadablePartial)localDateTime9);
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone12);
    org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfDay((int)(short)0);
    org.joda.time.LocalDateTime.Property property16 = localDateTime15.dayOfYear();
    org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.dayTime();
    org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial)localDateTime5, (org.joda.time.ReadablePartial)localDateTime15, periodType17);
    int[] i_array20 = copticChronology1.get((org.joda.time.ReadablePartial)localDateTime5, 1496646000000L);
    // The following exception was thrown during execution in test generation
    try {
    long long25 = copticChronology1.getDateTimeMillis(242, 33, (int)(byte)-1, 70);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array20);

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test234"); }

    java.io.DataInput dataInput0 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.tz.DateTimeZoneBuilder.readFrom(dataInput0, "26");
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test235"); }

    org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("hi!", "2017-W23-2T03:56:37Z", 26, 1034);
    java.lang.String str5 = fixedDateTimeZone4.getID();
    java.lang.String str7 = fixedDateTimeZone4.getName((long)(short)-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!"+ "'", str5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "+00:00:00.026"+ "'", str7.equals("+00:00:00.026"));

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test236"); }

    org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(10L);
    org.joda.time.ReadableInterval readableInterval2 = null;
    org.joda.time.Hours hours3 = org.joda.time.Hours.hoursIn(readableInterval2);
    org.joda.time.Duration duration4 = hours3.toStandardDuration();
    org.joda.time.MonthDay monthDay6 = monthDay1.withPeriodAdded((org.joda.time.ReadablePeriod)hours3, 298);
    java.lang.String str7 = monthDay6.toString();
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.MonthDay monthDay9 = monthDay6.withDayOfMonth(999);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hours3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(duration4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(monthDay6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "--01-01"+ "'", str7.equals("--01-01"));

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test237"); }

    org.joda.time.Instant instant0 = new org.joda.time.Instant();
    org.joda.time.Duration duration3 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.Duration duration6 = duration3.withDurationAdded((long)28, (int)' ');
    org.joda.time.Instant instant7 = instant0.minus((org.joda.time.ReadableDuration)duration6);
    org.joda.time.Instant instant10 = instant7.withDurationAdded(1496721418392L, 365);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(duration6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant10);

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test238"); }

    org.joda.time.DateTimeZone dateTimeZone1 = null;
    org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone1);
    org.joda.time.DurationField durationField3 = copticChronology2.days();
    java.util.Locale locale4 = null;
    org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long)8, (org.joda.time.Chronology)copticChronology2, locale4);
    org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period11 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology10);
    org.joda.time.DateTimeZone dateTimeZone12 = gregorianChronology10.getZone();
    org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((int)(byte)1, 6, 8, (org.joda.time.Chronology)gregorianChronology10);
    org.joda.time.DateTimeField dateTimeField14 = gregorianChronology10.dayOfWeek();
    org.joda.time.field.SkipDateTimeField skipDateTimeField15 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)copticChronology2, dateTimeField14);
    org.joda.time.DurationField durationField16 = skipDateTimeField15.getLeapDurationField();
    int i18 = skipDateTimeField15.getMinimumValue((long)70);
    int i19 = skipDateTimeField15.getMinimumValue();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(durationField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test239"); }

    org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendMinuteOfHour(345);
    org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendTimeZoneId();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test240"); }

    org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((java.lang.Object)10L);
    org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone2);
    int i5 = dateTimeZone2.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone2);
    org.joda.time.DateTime dateTime8 = dateTime6.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property9 = dateTime6.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType10 = property9.getFieldType();
    org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone11);
    int i14 = dateTimeZone11.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone11);
    org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property18 = dateTime15.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType19 = property18.getFieldType();
    org.joda.time.DateTimeComparator dateTimeComparator20 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType10, dateTimeFieldType19);
    org.joda.time.DateMidnight.Property property21 = dateMidnight1.property(dateTimeFieldType10);
    org.joda.time.DateMidnight.Property property22 = dateMidnight1.dayOfWeek();
    boolean b23 = property22.isLeap();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test241"); }

    org.joda.time.chrono.GregorianChronology gregorianChronology4 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period5 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology4);
    org.joda.time.DateTimeZone dateTimeZone6 = gregorianChronology4.getZone();
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1969, (int)(short)0, 100, (org.joda.time.Chronology)gregorianChronology4);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone6);

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test242"); }

    org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long)10);
    java.lang.String str2 = localDate1.toString();
    org.joda.time.PeriodType periodType5 = null;
    org.joda.time.Period period6 = new org.joda.time.Period((long)(byte)1, (long)24, periodType5);
    org.joda.time.LocalDate localDate8 = localDate1.withPeriodAdded((org.joda.time.ReadablePeriod)period6, 345);
    org.joda.time.LocalDate localDate10 = localDate8.minusWeeks(6);
    org.joda.time.LocalDate.Property property11 = localDate10.dayOfWeek();
    org.joda.time.LocalDate localDate12 = property11.roundFloorCopy();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "1970-01-01"+ "'", str2.equals("1970-01-01"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate12);

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test243"); }

    org.joda.time.Chronology chronology1 = null;
    java.util.Locale locale2 = null;
    org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long)'4', chronology1, locale2, (java.lang.Integer)1, (int)'a');
    dateTimeParserBucket5.setOffset((java.lang.Integer)(-1));
    org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
    dateTimeParserBucket5.setZone(dateTimeZone8);
    org.joda.time.Chronology chronology10 = null;
    org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone12);
    java.lang.String str14 = copticChronology13.toString();
    org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone15);
    org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay(dateTimeZone15);
    org.joda.time.Chronology chronology18 = copticChronology13.withZone(dateTimeZone15);
    org.joda.time.DateTime dateTime19 = mutableDateTime11.toDateTime(dateTimeZone15);
    org.joda.time.chrono.EthiopicChronology ethiopicChronology21 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone15, (int)(byte)1);
    boolean b22 = dateTimeParserBucket5.restoreState((java.lang.Object)ethiopicChronology21);
    int i23 = ethiopicChronology21.getMinimumDaysInFirstWeek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "CopticChronology[UTC]"+ "'", str14.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(ethiopicChronology21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test244"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
    org.joda.time.ReadableDuration readableDuration2 = null;
    org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant)dateMidnight1, readableDuration2);
    org.joda.time.Years years5 = org.joda.time.Years.years(0);
    org.joda.time.Years years7 = years5.minus((int)(byte)-1);
    mutableInterval3.setPeriodAfterStart((org.joda.time.ReadablePeriod)years7);
    org.joda.time.Years years10 = years7.dividedBy((int)(byte)100);
    org.joda.time.Years years11 = years7.negated();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(years5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(years7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(years10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(years11);

  }

  @Test
  public void test245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test245"); }

    org.joda.time.Duration duration2 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone3);
    int i6 = dateTimeZone3.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone3);
    org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)duration2, (org.joda.time.ReadableInstant)dateTime7);
    org.joda.time.DateTimeZone dateTimeZone9 = null;
    org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay(dateTimeZone9);
    org.joda.time.DateMidnight dateMidnight11 = yearMonthDay10.toDateMidnight();
    org.joda.time.YearMonthDay.Property property12 = yearMonthDay10.dayOfMonth();
    org.joda.time.DateTimeFieldType dateTimeFieldType13 = property12.getFieldType();
    org.joda.time.DateTime.Property property14 = dateTime7.property(dateTimeFieldType13);
    org.joda.time.DateTime dateTime16 = dateTime7.plusSeconds((int)(short)1);
    org.joda.time.DateTime.Property property17 = dateTime7.dayOfMonth();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property17);

  }

  @Test
  public void test246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test246"); }

    org.joda.time.Duration duration2 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone3);
    int i6 = dateTimeZone3.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone3);
    org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)duration2, (org.joda.time.ReadableInstant)dateTime7);
    org.joda.time.Duration duration11 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone12);
    int i15 = dateTimeZone12.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone12);
    org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)duration11, (org.joda.time.ReadableInstant)dateTime16);
    long long18 = duration11.getStandardHours();
    org.joda.time.DateTime dateTime19 = dateTime7.minus((org.joda.time.ReadableDuration)duration11);
    org.joda.time.Period period24 = new org.joda.time.Period((int)(short)0, (int)'4', 1, 0);
    org.joda.time.PeriodType periodType25 = null;
    org.joda.time.Period period26 = period24.withPeriodType(periodType25);
    org.joda.time.ReadableInstant readableInstant27 = null;
    org.joda.time.ReadableDuration readableDuration28 = null;
    org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(readableInstant27, readableDuration28);
    org.joda.time.ReadableDuration readableDuration30 = null;
    org.joda.time.Chronology chronology31 = null;
    org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(chronology31);
    org.joda.time.PeriodType periodType33 = null;
    org.joda.time.chrono.GregorianChronology gregorianChronology34 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((java.lang.Object)chronology31, periodType33, (org.joda.time.Chronology)gregorianChronology34);
    mutablePeriod29.setPeriod(readableDuration30, chronology31);
    org.joda.time.Period period37 = period24.plus((org.joda.time.ReadablePeriod)mutablePeriod29);
    mutablePeriod29.setMonths((int)'a');
    int i40 = mutablePeriod29.getYears();
    org.joda.time.DateTime dateTime42 = dateTime7.withPeriodAdded((org.joda.time.ReadablePeriod)mutablePeriod29, 78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long18 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime42);

  }

  @Test
  public void test247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test247"); }

    org.joda.time.chrono.GregorianChronology gregorianChronology4 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period5 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology4);
    org.joda.time.DateTimeZone dateTimeZone6 = gregorianChronology4.getZone();
    org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay((int)(byte)1, 6, 8, (org.joda.time.Chronology)gregorianChronology4);
    org.joda.time.DateTimeField dateTimeField8 = gregorianChronology4.minuteOfHour();
    // The following exception was thrown during execution in test generation
    try {
    long long16 = gregorianChronology4.getDateTimeMillis(770, (-1), 2017, 330, 2017, 25, (int)(byte)1);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField8);

  }

  @Test
  public void test248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test248"); }

    org.joda.time.Period period4 = new org.joda.time.Period((int)(short)0, (int)'4', 1, 0);
    org.joda.time.PeriodType periodType5 = null;
    org.joda.time.Period period6 = period4.withPeriodType(periodType5);
    org.joda.time.Period period8 = period6.minusHours(10);
    org.joda.time.Period period9 = period8.toPeriod();
    int i10 = period9.getYears();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);

  }

  @Test
  public void test249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test249"); }

    org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.hourOfHalfday();
    org.joda.time.Chronology chronology2 = null;
    org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(chronology2);
    java.util.GregorianCalendar gregorianCalendar4 = mutableDateTime3.toGregorianCalendar();
    mutableDateTime3.addMinutes((int)(byte)1);
    org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone7);
    int i10 = dateTimeZone7.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone7);
    org.joda.time.DateTime dateTime13 = dateTime11.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property14 = dateTime11.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType15 = property14.getFieldType();
    mutableDateTime3.set(dateTimeFieldType15, (int)(byte)10);
    org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField18 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField1, dateTimeFieldType15);
    int i19 = zeroIsMaxDateTimeField18.getMaximumValue();
    int i21 = zeroIsMaxDateTimeField18.getLeapAmount(100L);
    long long23 = zeroIsMaxDateTimeField18.roundHalfFloor((long)47);
    int i25 = zeroIsMaxDateTimeField18.getMaximumValue((long)'4');
    org.joda.time.DurationField durationField26 = zeroIsMaxDateTimeField18.getLeapDurationField();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianCalendar4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long23 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(durationField26);

  }

  @Test
  public void test250() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test250"); }

    org.joda.time.chrono.GregorianChronology gregorianChronology7 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period8 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology7);
    org.joda.time.DateTimeZone dateTimeZone9 = gregorianChronology7.getZone();
    org.joda.time.DateTimeZone dateTimeZone10 = gregorianChronology7.getZone();
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(236, 24, 235, 999, 0, 42, (org.joda.time.Chronology)gregorianChronology7);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone10);

  }

  @Test
  public void test251() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test251"); }

    org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone0);
    org.joda.time.Chronology chronology2 = null;
    org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(chronology2);
    org.joda.time.Instant instant4 = mutableDateTime3.toInstant();
    mutableDateTime3.addWeekyears((int)(short)-1);
    org.joda.time.DateTimeZone dateTimeZone7 = null;
    org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(dateTimeZone7);
    long long9 = dateMidnight8.getMillis();
    org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.plusDays(24);
    org.joda.time.Minutes minutes12 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant)mutableDateTime3, (org.joda.time.ReadableInstant)dateMidnight11);
    int i13 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant)dateMidnight11);
    org.joda.time.chrono.GregorianChronology gregorianChronology15 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period16 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology15);
    org.joda.time.MonthDay monthDay17 = new org.joda.time.MonthDay((java.lang.Object)dateMidnight11, (org.joda.time.Chronology)gregorianChronology15);
    org.joda.time.DateMidnight.Property property18 = dateMidnight11.year();
    org.joda.time.DateTimeZone dateTimeZone19 = null;
    org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone19);
    org.joda.time.DurationField durationField21 = copticChronology20.days();
    org.joda.time.DurationField durationField22 = copticChronology20.years();
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((java.lang.Object)dateMidnight11, (org.joda.time.Chronology)copticChronology20);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long9 == 1496707200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(minutes12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField22);

  }

  @Test
  public void test252() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test252"); }

    org.joda.time.Seconds seconds0 = org.joda.time.Seconds.THREE;
    java.lang.String str1 = seconds0.toString();
    org.joda.time.Days days2 = seconds0.toStandardDays();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(seconds0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "PT3S"+ "'", str1.equals("PT3S"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(days2);

  }

  @Test
  public void test253() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test253"); }

    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(843, 1970);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  @Test
  public void test254() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test254"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(dateTimeZone0);
    org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusSeconds((int)(short)0);
    org.joda.time.TimeOfDay.Property property4 = timeOfDay1.secondOfMinute();
    org.joda.time.TimeOfDay.Property property5 = timeOfDay1.millisOfSecond();
    java.util.Locale locale6 = null;
    int i7 = property5.getMaximumTextLength(locale6);
    org.joda.time.DateTimeFieldType dateTimeFieldType8 = property5.getFieldType();
    int i9 = property5.get();
    org.joda.time.TimeOfDay timeOfDay11 = property5.addToCopy(843);
    org.joda.time.TimeOfDay timeOfDay12 = property5.withMinimumValue();
    org.joda.time.DateTimeZone dateTimeZone14 = null;
    org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone14);
    java.lang.String str16 = copticChronology15.toString();
    org.joda.time.DateTimeField dateTimeField17 = copticChronology15.centuryOfEra();
    org.joda.time.DateTimeZone dateTimeZone19 = null;
    org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone19);
    java.lang.String str21 = copticChronology20.toString();
    org.joda.time.TimeOfDay timeOfDay22 = org.joda.time.TimeOfDay.fromMillisOfDay(0L, (org.joda.time.Chronology)copticChronology20);
    org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone23);
    int i26 = dateTimeZone23.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone23);
    org.joda.time.DateTime dateTime29 = dateTime27.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property30 = dateTime27.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType31 = property30.getFieldType();
    org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone32);
    int i35 = dateTimeZone32.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone32);
    org.joda.time.DateTime dateTime38 = dateTime36.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property39 = dateTime36.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType40 = property39.getFieldType();
    org.joda.time.DateTimeComparator dateTimeComparator41 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType31, dateTimeFieldType40);
    int i42 = timeOfDay22.indexOf(dateTimeFieldType40);
    org.joda.time.field.OffsetDateTimeField offsetDateTimeField46 = new org.joda.time.field.OffsetDateTimeField(dateTimeField17, dateTimeFieldType40, 10, 1000, 628);
    org.joda.time.DateTimeField dateTimeField47 = offsetDateTimeField46.getWrappedField();
    org.joda.time.Chronology chronology49 = null;
    java.util.Locale locale50 = null;
    org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long)'4', chronology49, locale50, (java.lang.Integer)1, (int)'a');
    dateTimeParserBucket53.setOffset((java.lang.Integer)(-1));
    org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.UTC;
    dateTimeParserBucket53.setZone(dateTimeZone56);
    org.joda.time.Chronology chronology58 = null;
    org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime(chronology58);
    org.joda.time.DateTimeZone dateTimeZone60 = null;
    org.joda.time.chrono.CopticChronology copticChronology61 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone60);
    java.lang.String str62 = copticChronology61.toString();
    org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology64 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone63);
    org.joda.time.TimeOfDay timeOfDay65 = new org.joda.time.TimeOfDay(dateTimeZone63);
    org.joda.time.Chronology chronology66 = copticChronology61.withZone(dateTimeZone63);
    org.joda.time.DateTime dateTime67 = mutableDateTime59.toDateTime(dateTimeZone63);
    org.joda.time.chrono.EthiopicChronology ethiopicChronology69 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone63, (int)(byte)1);
    boolean b70 = dateTimeParserBucket53.restoreState((java.lang.Object)ethiopicChronology69);
    java.util.Locale locale71 = dateTimeParserBucket53.getLocale();
    int i72 = offsetDateTimeField46.getMaximumTextLength(locale71);
    org.joda.time.TimeOfDay timeOfDay73 = property5.setCopy("0", locale71);
    org.joda.time.Period period78 = new org.joda.time.Period((int)(short)0, (int)'4', 1, 0);
    org.joda.time.PeriodType periodType79 = null;
    org.joda.time.Period period80 = period78.withPeriodType(periodType79);
    org.joda.time.Period period82 = period80.minusHours(10);
    org.joda.time.Period period83 = period82.toPeriod();
    org.joda.time.Duration duration84 = period83.toStandardDuration();
    org.joda.time.TimeOfDay timeOfDay85 = timeOfDay73.plus((org.joda.time.ReadablePeriod)period83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 953);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "CopticChronology[UTC]"+ "'", str16.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "CopticChronology[UTC]"+ "'", str21.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "CopticChronology[UTC]"+ "'", str62.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(ethiopicChronology69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(duration84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay85);

  }

  @Test
  public void test255() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test255"); }

    org.joda.time.Chronology chronology0 = null;
    org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
    org.joda.time.Instant instant2 = mutableDateTime1.toInstant();
    mutableDateTime1.addWeekyears((int)(short)-1);
    org.joda.time.DateTimeZone dateTimeZone5 = null;
    org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
    long long7 = dateMidnight6.getMillis();
    org.joda.time.DateMidnight dateMidnight9 = dateMidnight6.plusDays(24);
    org.joda.time.Minutes minutes10 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant)mutableDateTime1, (org.joda.time.ReadableInstant)dateMidnight9);
    org.joda.time.Minutes minutes11 = org.joda.time.Minutes.THREE;
    org.joda.time.Minutes minutes12 = minutes10.plus(minutes11);
    org.joda.time.ReadableInstant readableInstant13 = null;
    org.joda.time.ReadableDuration readableDuration14 = null;
    org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(readableInstant13, readableDuration14);
    org.joda.time.chrono.GregorianChronology gregorianChronology17 = org.joda.time.chrono.GregorianChronology.getInstance();
    mutablePeriod15.setPeriod((long)100, (org.joda.time.Chronology)gregorianChronology17);
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay((java.lang.Object)minutes12, (org.joda.time.Chronology)gregorianChronology17);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 1496707200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(minutes10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(minutes11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(minutes12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology17);

  }

  @Test
  public void test256() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test256"); }

    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(5, 884, (int)(short)10, 999, (int)'4', 345, 0);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  @Test
  public void test257() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test257"); }

    org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone0);
    int i3 = dateTimeZone0.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone0);
    org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
    org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusSeconds(0);
    org.joda.time.LocalDateTime.Property property8 = localDateTime5.dayOfMonth();
    org.joda.time.Interval interval9 = property8.toInterval();
    org.joda.time.Minutes minutes10 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval)interval9);
    org.joda.time.Duration duration13 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone14);
    int i17 = dateTimeZone14.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone14);
    org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)duration13, (org.joda.time.ReadableInstant)dateTime18);
    boolean b20 = interval9.isAfter((org.joda.time.ReadableInstant)dateTime18);
    org.joda.time.DateTime dateTime22 = dateTime18.withCenturyOfEra((int)(byte)1);
    int i23 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant)dateTime18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(interval9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(minutes10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);

  }

  @Test
  public void test258() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test258"); }

    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(10, 810, (int)(byte)1);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  @Test
  public void test259() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test259"); }

    org.joda.time.Chronology chronology0 = null;
    org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
    // The following exception was thrown during execution in test generation
    try {
    int i3 = partial1.getValue(459);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  @Test
  public void test260() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test260"); }

    org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long)10);
    org.joda.time.LocalDate.Property property2 = localDate1.weekyear();
    org.joda.time.LocalDate localDate3 = property2.roundHalfCeilingCopy();
    org.joda.time.LocalDate localDate4 = property2.roundHalfCeilingCopy();
    org.joda.time.LocalDate localDate5 = property2.roundHalfFloorCopy();
    int i6 = property2.get();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1970);

  }

  @Test
  public void test261() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test261"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
    java.lang.String str2 = copticChronology1.toString();
    org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
    org.joda.time.DateTimeZone dateTimeZone5 = null;
    org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone5);
    java.lang.String str7 = copticChronology6.toString();
    org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(0L, (org.joda.time.Chronology)copticChronology6);
    org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone9);
    int i12 = dateTimeZone9.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone9);
    org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property16 = dateTime13.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType17 = property16.getFieldType();
    org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone18);
    int i21 = dateTimeZone18.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone18);
    org.joda.time.DateTime dateTime24 = dateTime22.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property25 = dateTime22.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType26 = property25.getFieldType();
    org.joda.time.DateTimeComparator dateTimeComparator27 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType17, dateTimeFieldType26);
    int i28 = timeOfDay8.indexOf(dateTimeFieldType26);
    org.joda.time.field.OffsetDateTimeField offsetDateTimeField32 = new org.joda.time.field.OffsetDateTimeField(dateTimeField3, dateTimeFieldType26, 10, 1000, 628);
    int i34 = offsetDateTimeField32.get((long)(short)-1);
    int i36 = offsetDateTimeField32.getLeapAmount((long)2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "CopticChronology[UTC]"+ "'", str2.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "CopticChronology[UTC]"+ "'", str7.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);

  }

  @Test
  public void test262() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test262"); }

    org.joda.time.ReadableInstant readableInstant0 = null;
    org.joda.time.ReadableDuration readableDuration1 = null;
    org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
    org.joda.time.chrono.GregorianChronology gregorianChronology4 = org.joda.time.chrono.GregorianChronology.getInstance();
    mutablePeriod2.setPeriod((long)100, (org.joda.time.Chronology)gregorianChronology4);
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(dateTimeZone6);
    int i8 = dateMidnight7.getDayOfWeek();
    org.joda.time.Chronology chronology9 = null;
    org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
    java.util.GregorianCalendar gregorianCalendar11 = mutableDateTime10.toGregorianCalendar();
    org.joda.time.chrono.LimitChronology limitChronology12 = org.joda.time.chrono.LimitChronology.getInstance((org.joda.time.Chronology)gregorianChronology4, (org.joda.time.ReadableDateTime)dateMidnight7, (org.joda.time.ReadableDateTime)mutableDateTime10);
    org.joda.time.DateTime dateTime13 = limitChronology12.getUpperLimit();
    org.joda.time.DateTimeZone dateTimeZone16 = null;
    org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone16);
    org.joda.time.LocalDateTime.Property property18 = localDateTime17.monthOfYear();
    org.joda.time.DateTimeZone dateTimeZone20 = null;
    org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone20);
    boolean b22 = localDateTime17.isAfter((org.joda.time.ReadablePartial)localDateTime21);
    org.joda.time.DateTimeZone dateTimeZone24 = null;
    org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone24);
    org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withMillisOfDay((int)(short)0);
    org.joda.time.LocalDateTime.Property property28 = localDateTime27.dayOfYear();
    org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.dayTime();
    org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadablePartial)localDateTime17, (org.joda.time.ReadablePartial)localDateTime27, periodType29);
    org.joda.time.PeriodType periodType31 = periodType29.withSecondsRemoved();
    org.joda.time.PeriodType periodType32 = org.joda.time.DateTimeUtils.getPeriodType(periodType31);
    org.joda.time.Chronology chronology33 = null;
    org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology33);
    org.joda.time.PeriodType periodType35 = null;
    org.joda.time.chrono.GregorianChronology gregorianChronology36 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((java.lang.Object)chronology33, periodType35, (org.joda.time.Chronology)gregorianChronology36);
    org.joda.time.DateTimeField dateTimeField38 = gregorianChronology36.hourOfDay();
    org.joda.time.DurationField durationField39 = gregorianChronology36.minutes();
    org.joda.time.Period period40 = new org.joda.time.Period((long)37, periodType31, (org.joda.time.Chronology)gregorianChronology36);
    boolean b41 = limitChronology12.equals((java.lang.Object)gregorianChronology36);
    org.joda.time.DateTime dateTime42 = limitChronology12.getUpperLimit();
    org.joda.time.DateTime dateTime43 = dateTime42.withLaterOffsetAtOverlap();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianCalendar11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(limitChronology12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime43);

  }

  @Test
  public void test263() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test263"); }

    org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone0);
    int i3 = dateTimeZone0.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone0);
    org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property7 = dateTime4.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType8 = property7.getFieldType();
    org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone9);
    int i12 = dateTimeZone9.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone9);
    org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property16 = dateTime13.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType17 = property16.getFieldType();
    org.joda.time.DateTimeComparator dateTimeComparator18 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType8, dateTimeFieldType17);
    org.joda.time.Partial partial20 = new org.joda.time.Partial(dateTimeFieldType8, (int)(byte)1);
    int i22 = partial20.getValue((int)(short)0);
    org.joda.time.DateTimeFieldType[] dateTimeFieldType_array23 = partial20.getFieldTypes();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType_array23);

  }

  @Test
  public void test264() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test264"); }

    org.joda.time.chrono.GregorianChronology gregorianChronology2 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period3 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology2);
    org.joda.time.DateTimeZone dateTimeZone4 = gregorianChronology2.getZone();
    org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long)1, dateTimeZone4);
    org.joda.time.DateMidnight dateMidnight6 = org.joda.time.DateMidnight.now(dateTimeZone4);
    org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now(dateTimeZone4);
    org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone8);
    int i11 = dateTimeZone8.getOffsetFromLocal((long)100);
    org.joda.time.Interval interval12 = localDate7.toInterval(dateTimeZone8);
    org.joda.time.Interval interval13 = interval12.toInterval();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(interval12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(interval13);

  }

  @Test
  public void test265() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test265"); }

    org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone0);
    int i3 = dateTimeZone0.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone0);
    org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property7 = dateTime4.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType8 = property7.getFieldType();
    org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone9);
    int i12 = dateTimeZone9.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone9);
    org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property16 = dateTime13.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType17 = property16.getFieldType();
    org.joda.time.DateTimeComparator dateTimeComparator18 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType8, dateTimeFieldType17);
    org.joda.time.Partial partial20 = new org.joda.time.Partial(dateTimeFieldType8, (int)(byte)1);
    org.joda.time.Period period25 = new org.joda.time.Period((int)(short)0, (int)'4', 1, 0);
    org.joda.time.PeriodType periodType26 = null;
    org.joda.time.Period period27 = period25.withPeriodType(periodType26);
    org.joda.time.ReadableInstant readableInstant28 = null;
    org.joda.time.ReadableDuration readableDuration29 = null;
    org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(readableInstant28, readableDuration29);
    org.joda.time.ReadableDuration readableDuration31 = null;
    org.joda.time.Chronology chronology32 = null;
    org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
    org.joda.time.PeriodType periodType34 = null;
    org.joda.time.chrono.GregorianChronology gregorianChronology35 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((java.lang.Object)chronology32, periodType34, (org.joda.time.Chronology)gregorianChronology35);
    mutablePeriod30.setPeriod(readableDuration31, chronology32);
    org.joda.time.Period period38 = period25.plus((org.joda.time.ReadablePeriod)mutablePeriod30);
    org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long)365);
    org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology42 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone41);
    int i44 = dateTimeZone41.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone41);
    org.joda.time.DateTime dateTime47 = dateTime45.minusWeeks((int)'4');
    org.joda.time.ReadableDuration readableDuration48 = null;
    org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant)dateTime47, readableDuration48);
    org.joda.time.Interval interval50 = new org.joda.time.Interval((org.joda.time.ReadableInstant)mutableDateTime40, (org.joda.time.ReadablePeriod)mutablePeriod49);
    org.joda.time.ReadableInstant readableInstant52 = null;
    org.joda.time.ReadableDuration readableDuration53 = null;
    org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(readableInstant52, readableDuration53);
    org.joda.time.ReadableDuration readableDuration55 = null;
    org.joda.time.Chronology chronology56 = null;
    org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime(chronology56);
    org.joda.time.PeriodType periodType58 = null;
    org.joda.time.chrono.GregorianChronology gregorianChronology59 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((java.lang.Object)chronology56, periodType58, (org.joda.time.Chronology)gregorianChronology59);
    mutablePeriod54.setPeriod(readableDuration55, chronology56);
    org.joda.time.DateTimeZone dateTimeZone63 = null;
    org.joda.time.chrono.CopticChronology copticChronology64 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone63);
    org.joda.time.DurationField durationField65 = copticChronology64.days();
    org.joda.time.MutableDateTime mutableDateTime66 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology)copticChronology64);
    org.joda.time.DateTimeField dateTimeField67 = copticChronology64.millisOfSecond();
    mutablePeriod54.setPeriod((long)(short)1, (org.joda.time.Chronology)copticChronology64);
    org.joda.time.LocalTime localTime69 = new org.joda.time.LocalTime((long)330, (org.joda.time.Chronology)copticChronology64);
    int i70 = localTime69.getMillisOfSecond();
    org.joda.time.LocalTime.Property property71 = localTime69.secondOfMinute();
    org.joda.time.LocalTime localTime72 = property71.withMaximumValue();
    org.joda.time.Seconds seconds73 = org.joda.time.Seconds.TWO;
    org.joda.time.DurationFieldType durationFieldType74 = seconds73.getFieldType();
    org.joda.time.LocalTime localTime76 = localTime72.withFieldAdded(durationFieldType74, 365);
    mutablePeriod49.add(durationFieldType74, (int)'#');
    mutablePeriod30.add(durationFieldType74, (int)(short)-1);
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.Partial partial82 = partial20.withFieldAddWrapped(durationFieldType74, (-101));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableDateTime66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 330);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localTime72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(seconds73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationFieldType74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localTime76);

  }

  @Test
  public void test266() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test266"); }

    org.joda.time.DateTimeZone dateTimeZone1 = null;
    org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone1);
    org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int)(short)0);
    org.joda.time.DateTimeZone dateTimeZone5 = null;
    org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
    org.joda.time.ReadableDuration readableDuration7 = null;
    org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant)dateMidnight6, readableDuration7);
    org.joda.time.Years years10 = org.joda.time.Years.years(0);
    org.joda.time.Years years12 = years10.minus((int)(byte)-1);
    mutableInterval8.setPeriodAfterStart((org.joda.time.ReadablePeriod)years12);
    org.joda.time.LocalDateTime localDateTime15 = localDateTime4.withPeriodAdded((org.joda.time.ReadablePeriod)years12, (int)'a');
    org.joda.time.LocalDateTime localDateTime17 = localDateTime4.minusMonths(0);
    int i18 = localDateTime17.getYear();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str20 = localDateTime17.toString("T03:56:41");
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(years10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(years12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1970);

  }

  @Test
  public void test267() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test267"); }

    org.joda.time.DateTimeZone dateTimeZone1 = null;
    org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone1);
    org.joda.time.DurationField durationField3 = copticChronology2.days();
    java.util.Locale locale4 = null;
    org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long)8, (org.joda.time.Chronology)copticChronology2, locale4);
    org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period11 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology10);
    org.joda.time.DateTimeZone dateTimeZone12 = gregorianChronology10.getZone();
    org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((int)(byte)1, 6, 8, (org.joda.time.Chronology)gregorianChronology10);
    org.joda.time.DateTimeField dateTimeField14 = gregorianChronology10.dayOfWeek();
    org.joda.time.field.SkipDateTimeField skipDateTimeField15 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)copticChronology2, dateTimeField14);
    java.util.Locale locale17 = null;
    java.lang.String str18 = skipDateTimeField15.getAsShortText(53L, locale17);
    org.joda.time.TimeOfDay timeOfDay19 = org.joda.time.TimeOfDay.MIDNIGHT;
    org.joda.time.TimeOfDay timeOfDay21 = timeOfDay19.minusMinutes((int)(short)0);
    java.util.Locale locale22 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str23 = skipDateTimeField15.getAsText((org.joda.time.ReadablePartial)timeOfDay21, locale22);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Thu"+ "'", str18.equals("Thu"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay21);

  }

  @Test
  public void test268() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test268"); }

    int i0 = org.joda.time.DateTimeConstants.SECONDS_PER_WEEK;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i0 == 604800);

  }

  @Test
  public void test269() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test269"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
    long long2 = dateMidnight1.getMillis();
    org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.plusDays(24);
    org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long)10);
    org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withFields((org.joda.time.ReadablePartial)localDate6);
    org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusDays((-101));
    org.joda.time.DateMidnight dateMidnight11 = dateMidnight7.withCenturyOfEra(1034);
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.DateMidnight dateMidnight13 = dateMidnight7.withMonthOfYear(42);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long2 == 1496707200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight11);

  }

  @Test
  public void test270() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test270"); }

    org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateHourMinuteSecondFraction();
    org.joda.time.Chronology chronology1 = null;
    org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone3);
    java.lang.String str5 = copticChronology4.toString();
    org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone6);
    org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay(dateTimeZone6);
    org.joda.time.Chronology chronology9 = copticChronology4.withZone(dateTimeZone6);
    org.joda.time.DateTime dateTime10 = mutableDateTime2.toDateTime(dateTimeZone6);
    java.lang.String str11 = dateTimeFormatter0.print((org.joda.time.ReadableInstant)mutableDateTime2);
    java.lang.Object obj12 = mutableDateTime2.clone();
    org.joda.time.MutableDateTime.Property property13 = mutableDateTime2.dayOfYear();
    org.joda.time.MutableDateTime.Property property14 = mutableDateTime2.millisOfSecond();
    mutableDateTime2.setMonthOfYear(2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "CopticChronology[UTC]"+ "'", str5.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "2017-06-06T03:57:41.170"+ "'", str11.equals("2017-06-06T03:57:41.170"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property14);

  }

  @Test
  public void test271() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test271"); }

    org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long)23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(duration1);

  }

  @Test
  public void test272() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test272"); }

    org.joda.time.ReadableInstant readableInstant1 = null;
    org.joda.time.ReadableDuration readableDuration2 = null;
    org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant1, readableDuration2);
    org.joda.time.ReadableDuration readableDuration4 = null;
    org.joda.time.Chronology chronology5 = null;
    org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
    org.joda.time.PeriodType periodType7 = null;
    org.joda.time.chrono.GregorianChronology gregorianChronology8 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((java.lang.Object)chronology5, periodType7, (org.joda.time.Chronology)gregorianChronology8);
    mutablePeriod3.setPeriod(readableDuration4, chronology5);
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone12);
    org.joda.time.DurationField durationField14 = copticChronology13.days();
    org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology)copticChronology13);
    org.joda.time.DateTimeField dateTimeField16 = copticChronology13.millisOfSecond();
    mutablePeriod3.setPeriod((long)(short)1, (org.joda.time.Chronology)copticChronology13);
    org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long)330, (org.joda.time.Chronology)copticChronology13);
    int i19 = localTime18.getMillisOfSecond();
    org.joda.time.LocalTime.Property property20 = localTime18.secondOfMinute();
    org.joda.time.LocalTime localTime21 = property20.withMinimumValue();
    org.joda.time.LocalTime.Property property22 = localTime21.hourOfDay();
    org.joda.time.LocalTime.Property property23 = localTime21.minuteOfHour();
    org.joda.time.LocalTime localTime24 = property23.withMinimumValue();
    org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long)10);
    java.lang.String str27 = localDate26.toString();
    org.joda.time.PeriodType periodType30 = null;
    org.joda.time.Period period31 = new org.joda.time.Period((long)(byte)1, (long)24, periodType30);
    org.joda.time.LocalDate localDate33 = localDate26.withPeriodAdded((org.joda.time.ReadablePeriod)period31, 345);
    org.joda.time.LocalDate localDate35 = localDate33.withWeekyear(10);
    org.joda.time.LocalDate localDate37 = localDate33.plusDays((int)(short)1);
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.Years years38 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)localTime24, (org.joda.time.ReadablePartial)localDate33);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableDateTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 330);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localTime21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "1970-01-01"+ "'", str27.equals("1970-01-01"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate37);

  }

  @Test
  public void test273() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test273"); }

    org.joda.time.DateTimeZone dateTimeZone1 = null;
    org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone1);
    org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
    org.joda.time.DateTimeZone dateTimeZone5 = null;
    org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone5);
    boolean b7 = localDateTime2.isAfter((org.joda.time.ReadablePartial)localDateTime6);
    int i8 = localDateTime2.getMillisOfDay();
    org.joda.time.ReadableDuration readableDuration9 = null;
    org.joda.time.LocalDateTime localDateTime11 = localDateTime2.withDurationAdded(readableDuration9, 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime11);

  }

  @Test
  public void test274() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test274"); }

    org.joda.time.Period period4 = new org.joda.time.Period((int)(short)0, (int)'4', 1, 0);
    org.joda.time.PeriodType periodType5 = null;
    org.joda.time.Period period6 = period4.withPeriodType(periodType5);
    org.joda.time.Period period8 = period6.minusHours(10);
    org.joda.time.Period period9 = period8.toPeriod();
    org.joda.time.Period period11 = period9.minusMonths((int)(short)100);
    org.joda.time.Period period13 = period11.withWeeks(6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period13);

  }

  @Test
  public void test275() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test275"); }

    org.joda.time.Chronology chronology1 = null;
    org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
    org.joda.time.PeriodType periodType3 = null;
    org.joda.time.chrono.GregorianChronology gregorianChronology4 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((java.lang.Object)chronology1, periodType3, (org.joda.time.Chronology)gregorianChronology4);
    org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long)345, chronology1);
    org.joda.time.DateTimeZone dateTimeZone7 = null;
    org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
    org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths(0);
    org.joda.time.Chronology chronology12 = null;
    java.util.Locale locale13 = null;
    org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long)'4', chronology12, locale13, (java.lang.Integer)1, (int)'a');
    dateTimeParserBucket16.setOffset((java.lang.Integer)(-1));
    org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
    dateTimeParserBucket16.setZone(dateTimeZone19);
    org.joda.time.DateMidnight dateMidnight21 = yearMonthDay8.toDateMidnight(dateTimeZone19);
    org.joda.time.DateMidnight dateMidnight22 = localDate6.toDateMidnight(dateTimeZone19);
    org.joda.time.LocalDate.Property property23 = localDate6.weekyear();
    org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long)'#');
    org.joda.time.ReadableInstant readableInstant26 = null;
    org.joda.time.ReadableDuration readableDuration27 = null;
    org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(readableInstant26, readableDuration27);
    org.joda.time.chrono.GregorianChronology gregorianChronology30 = org.joda.time.chrono.GregorianChronology.getInstance();
    mutablePeriod28.setPeriod((long)100, (org.joda.time.Chronology)gregorianChronology30);
    mutablePeriod28.addMillis((int)(byte)1);
    int i34 = mutablePeriod28.getMonths();
    org.joda.time.DurationFieldType[] durationFieldType_array35 = mutablePeriod28.getFieldTypes();
    org.joda.time.DateTime dateTime36 = dateTime25.plus((org.joda.time.ReadablePeriod)mutablePeriod28);
    org.joda.time.ReadableInstant readableInstant37 = null;
    org.joda.time.ReadableDuration readableDuration38 = null;
    org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(readableInstant37, readableDuration38);
    org.joda.time.chrono.GregorianChronology gregorianChronology41 = org.joda.time.chrono.GregorianChronology.getInstance();
    mutablePeriod39.setPeriod((long)100, (org.joda.time.Chronology)gregorianChronology41);
    int i43 = mutablePeriod39.getWeeks();
    mutablePeriod39.addDays(10080);
    org.joda.time.DateTime dateTime46 = dateTime25.plus((org.joda.time.ReadablePeriod)mutablePeriod39);
    org.joda.time.LocalDate localDate47 = localDate6.minus((org.joda.time.ReadablePeriod)mutablePeriod39);
    org.joda.time.Duration duration50 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology52 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone51);
    int i54 = dateTimeZone51.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone51);
    org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)duration50, (org.joda.time.ReadableInstant)dateTime55);
    org.joda.time.DateTimeZone dateTimeZone57 = null;
    org.joda.time.YearMonthDay yearMonthDay58 = new org.joda.time.YearMonthDay(dateTimeZone57);
    org.joda.time.DateMidnight dateMidnight59 = yearMonthDay58.toDateMidnight();
    org.joda.time.YearMonthDay.Property property60 = yearMonthDay58.dayOfMonth();
    org.joda.time.DateTimeFieldType dateTimeFieldType61 = property60.getFieldType();
    org.joda.time.DateTime.Property property62 = dateTime55.property(dateTimeFieldType61);
    int i63 = localDate47.get(dateTimeFieldType61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonthDay10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationFieldType_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 28);

  }

  @Test
  public void test276() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test276"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
    java.lang.String str2 = copticChronology1.toString();
    org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
    org.joda.time.DateTimeZone dateTimeZone5 = null;
    org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone5);
    java.lang.String str7 = copticChronology6.toString();
    org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(0L, (org.joda.time.Chronology)copticChronology6);
    org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone9);
    int i12 = dateTimeZone9.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone9);
    org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property16 = dateTime13.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType17 = property16.getFieldType();
    org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone18);
    int i21 = dateTimeZone18.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone18);
    org.joda.time.DateTime dateTime24 = dateTime22.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property25 = dateTime22.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType26 = property25.getFieldType();
    org.joda.time.DateTimeComparator dateTimeComparator27 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType17, dateTimeFieldType26);
    int i28 = timeOfDay8.indexOf(dateTimeFieldType26);
    org.joda.time.field.OffsetDateTimeField offsetDateTimeField32 = new org.joda.time.field.OffsetDateTimeField(dateTimeField3, dateTimeFieldType26, 10, 1000, 628);
    int i34 = offsetDateTimeField32.getMaximumValue((long)1000);
    java.lang.String str36 = offsetDateTimeField32.getAsShortText((long)345);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "CopticChronology[UTC]"+ "'", str2.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "CopticChronology[UTC]"+ "'", str7.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 628);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "27"+ "'", str36.equals("27"));

  }

  @Test
  public void test277() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test277"); }

    org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth((long)1034, (org.joda.time.Chronology)ethiopicChronology1);
    java.lang.String str3 = ethiopicChronology1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(ethiopicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "EthiopicChronology[UTC]"+ "'", str3.equals("EthiopicChronology[UTC]"));

  }

  @Test
  public void test278() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test278"); }

    org.joda.time.ReadableInstant readableInstant1 = null;
    org.joda.time.ReadableDuration readableDuration2 = null;
    org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant1, readableDuration2);
    org.joda.time.ReadableDuration readableDuration4 = null;
    org.joda.time.Chronology chronology5 = null;
    org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
    org.joda.time.PeriodType periodType7 = null;
    org.joda.time.chrono.GregorianChronology gregorianChronology8 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((java.lang.Object)chronology5, periodType7, (org.joda.time.Chronology)gregorianChronology8);
    mutablePeriod3.setPeriod(readableDuration4, chronology5);
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone12);
    org.joda.time.DurationField durationField14 = copticChronology13.days();
    org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology)copticChronology13);
    org.joda.time.DateTimeField dateTimeField16 = copticChronology13.millisOfSecond();
    mutablePeriod3.setPeriod((long)(short)1, (org.joda.time.Chronology)copticChronology13);
    org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long)330, (org.joda.time.Chronology)copticChronology13);
    int i19 = localTime18.getMillisOfSecond();
    org.joda.time.LocalTime.Property property20 = localTime18.secondOfMinute();
    java.lang.String str21 = property20.getAsShortText();
    org.joda.time.DateTimeField dateTimeField22 = property20.getField();
    org.joda.time.LocalTime localTime23 = property20.roundHalfFloorCopy();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableDateTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 330);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "0"+ "'", str21.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localTime23);

  }

  @Test
  public void test279() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test279"); }

    org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period12 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology11);
    org.joda.time.DateTimeZone dateTimeZone13 = gregorianChronology11.getZone();
    org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay((int)(byte)1, 6, 8, (org.joda.time.Chronology)gregorianChronology11);
    org.joda.time.DateTimeField dateTimeField15 = gregorianChronology11.minuteOfHour();
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(535, 1969, 157, 1034, 27, 33, 33, (org.joda.time.Chronology)gregorianChronology11);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField15);

  }

  @Test
  public void test280() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test280"); }

    long long2 = org.joda.time.field.FieldUtils.safeSubtract((long)770, (long)365);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long2 == 405L);

  }

  @Test
  public void test281() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test281"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
    org.joda.time.DateMidnight dateMidnight2 = yearMonthDay1.toDateMidnight();
    org.joda.time.YearMonthDay.Property property3 = yearMonthDay1.dayOfMonth();
    org.joda.time.DateTimeFieldType dateTimeFieldType4 = property3.getFieldType();
    org.joda.time.YearMonthDay yearMonthDay6 = property3.addWrapFieldToCopy(0);
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.DateTimeField dateTimeField8 = yearMonthDay6.getField(330);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonthDay6);

  }

  @Test
  public void test282() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test282"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
    org.joda.time.Duration duration4 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.DateMidnight dateMidnight5 = dateMidnight1.minus((org.joda.time.ReadableDuration)duration4);
    org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long)1);
    org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant)dateMidnight5, (org.joda.time.ReadableDuration)duration7);
    org.joda.time.DateTimeZone dateTimeZone9 = null;
    org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(dateTimeZone9);
    org.joda.time.DateMidnight.Property property11 = dateMidnight10.centuryOfEra();
    org.joda.time.DateMidnight.Property property12 = dateMidnight10.dayOfYear();
    org.joda.time.Duration duration15 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.Duration duration17 = duration15.minus((long)10080);
    org.joda.time.Chronology chronology18 = null;
    org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology18);
    org.joda.time.Instant instant20 = mutableDateTime19.toInstant();
    org.joda.time.ReadableInstant readableInstant21 = null;
    boolean b22 = mutableDateTime19.isEqual(readableInstant21);
    org.joda.time.DateTime dateTime23 = mutableDateTime19.toDateTime();
    org.joda.time.DateTime.Property property24 = dateTime23.yearOfCentury();
    java.util.Locale locale26 = null;
    org.joda.time.DateTime dateTime27 = property24.setCopy("26", locale26);
    org.joda.time.Seconds seconds28 = org.joda.time.Seconds.TWO;
    org.joda.time.DateTime dateTime30 = dateTime27.withPeriodAdded((org.joda.time.ReadablePeriod)seconds28, 5);
    org.joda.time.DateTimeZone dateTimeZone31 = null;
    org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(dateTimeZone31);
    org.joda.time.Duration duration35 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.minus((org.joda.time.ReadableDuration)duration35);
    org.joda.time.DateTime dateTime37 = dateTime27.plus((org.joda.time.ReadableDuration)duration35);
    boolean b38 = duration15.equals((java.lang.Object)dateTime37);
    org.joda.time.DateMidnight dateMidnight39 = dateMidnight10.plus((org.joda.time.ReadableDuration)duration15);
    org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableDuration)duration7, (org.joda.time.ReadableInstant)dateMidnight10);
    org.joda.time.DateMidnight dateMidnight42 = dateMidnight10.withMillis((long)953);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(duration7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(duration17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(seconds28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight42);

  }

  @Test
  public void test283() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test283"); }

    org.joda.time.Seconds seconds0 = org.joda.time.Seconds.MAX_VALUE;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(seconds0);

  }

  @Test
  public void test284() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test284"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
    org.joda.time.Duration duration4 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.DateTimeZone dateTimeZone5 = null;
    org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
    org.joda.time.DateMidnight.Property property7 = dateMidnight6.centuryOfEra();
    org.joda.time.DateMidnight.Property property8 = dateMidnight6.dayOfYear();
    org.joda.time.DateMidnight dateMidnight9 = property8.roundHalfFloorCopy();
    org.joda.time.PeriodType periodType10 = null;
    org.joda.time.Period period11 = duration4.toPeriodFrom((org.joda.time.ReadableInstant)dateMidnight9, periodType10);
    org.joda.time.DateMidnight dateMidnight13 = dateMidnight1.withPeriodAdded((org.joda.time.ReadablePeriod)period11, 100);
    org.joda.time.DateMidnight.Property property14 = dateMidnight13.centuryOfEra();
    org.joda.time.DateTimeZone dateTimeZone15 = null;
    org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(dateTimeZone15);
    long long17 = dateMidnight16.getMillis();
    org.joda.time.DateMidnight dateMidnight19 = dateMidnight16.plusDays(24);
    org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant)dateMidnight13, (org.joda.time.ReadableInstant)dateMidnight19);
    org.joda.time.DateMidnight.Property property21 = dateMidnight19.era();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long17 == 1496707200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property21);

  }

  @Test
  public void test285() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test285"); }

    org.joda.time.DateTimeZone dateTimeZone2 = null;
    org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone2);
    org.joda.time.DurationField durationField4 = copticChronology3.days();
    org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology)copticChronology3);
    org.joda.time.DateTimeField dateTimeField6 = copticChronology3.millisOfSecond();
    org.joda.time.DateTimeZone dateTimeZone7 = null;
    org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone7);
    org.joda.time.DurationField durationField9 = copticChronology8.days();
    org.joda.time.DateTimeZone dateTimeZone11 = null;
    org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone11);
    org.joda.time.LocalDateTime.Property property13 = localDateTime12.monthOfYear();
    org.joda.time.DateTimeZone dateTimeZone15 = null;
    org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone15);
    boolean b17 = localDateTime12.isAfter((org.joda.time.ReadablePartial)localDateTime16);
    org.joda.time.DateTimeZone dateTimeZone19 = null;
    org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone19);
    org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withMillisOfDay((int)(short)0);
    org.joda.time.LocalDateTime.Property property23 = localDateTime22.dayOfYear();
    org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.dayTime();
    org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadablePartial)localDateTime12, (org.joda.time.ReadablePartial)localDateTime22, periodType24);
    int[] i_array27 = copticChronology8.get((org.joda.time.ReadablePartial)localDateTime12, 1496646000000L);
    int[] i_array29 = copticChronology3.get((org.joda.time.ReadablePartial)localDateTime12, 1496707200000L);
    org.joda.time.Period period30 = new org.joda.time.Period((-259199958L), (long)(byte)-1, (org.joda.time.Chronology)copticChronology3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableDateTime5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array29);

  }

  @Test
  public void test286() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test286"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
    org.joda.time.DurationField durationField2 = copticChronology1.days();
    org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology)copticChronology1);
    org.joda.time.DateTimeField dateTimeField4 = copticChronology1.millisOfSecond();
    org.joda.time.DateTimeZone dateTimeZone5 = null;
    org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone5);
    org.joda.time.DurationField durationField7 = copticChronology6.days();
    org.joda.time.DateTimeZone dateTimeZone9 = null;
    org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone9);
    org.joda.time.LocalDateTime.Property property11 = localDateTime10.monthOfYear();
    org.joda.time.DateTimeZone dateTimeZone13 = null;
    org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone13);
    boolean b15 = localDateTime10.isAfter((org.joda.time.ReadablePartial)localDateTime14);
    org.joda.time.DateTimeZone dateTimeZone17 = null;
    org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone17);
    org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withMillisOfDay((int)(short)0);
    org.joda.time.LocalDateTime.Property property21 = localDateTime20.dayOfYear();
    org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.dayTime();
    org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadablePartial)localDateTime10, (org.joda.time.ReadablePartial)localDateTime20, periodType22);
    int[] i_array25 = copticChronology6.get((org.joda.time.ReadablePartial)localDateTime10, 1496646000000L);
    int[] i_array27 = copticChronology1.get((org.joda.time.ReadablePartial)localDateTime10, 1496707200000L);
    org.joda.time.LocalDateTime localDateTime29 = localDateTime10.plusMinutes(235);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableDateTime3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime29);

  }

  @Test
  public void test287() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test287"); }

    org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long)10);
    java.lang.String str2 = localDate1.toString();
    org.joda.time.PeriodType periodType5 = null;
    org.joda.time.Period period6 = new org.joda.time.Period((long)(byte)1, (long)24, periodType5);
    org.joda.time.LocalDate localDate8 = localDate1.withPeriodAdded((org.joda.time.ReadablePeriod)period6, 345);
    org.joda.time.Period period9 = period6.toPeriod();
    org.joda.time.Period period11 = period6.withDays(535);
    org.joda.time.Period period12 = period11.normalizedStandard();
    org.joda.time.DurationFieldType[] durationFieldType_array13 = period11.getFieldTypes();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "1970-01-01"+ "'", str2.equals("1970-01-01"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationFieldType_array13);

  }

  @Test
  public void test288() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test288"); }

    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("+00:00:00.026");
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test289() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test289"); }

    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int)' ', 953, 24, 14312);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  @Test
  public void test290() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test290"); }

    org.joda.time.Period period4 = new org.joda.time.Period((int)(short)0, (int)'4', 1, 0);
    org.joda.time.PeriodType periodType5 = null;
    org.joda.time.Period period6 = period4.withPeriodType(periodType5);
    org.joda.time.Period period8 = period6.minusHours(10);
    org.joda.time.Period period10 = period6.withHours((int)'a');
    org.joda.time.Period period12 = period6.minusMillis((int)'4');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period12);

  }

  @Test
  public void test291() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test291"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
    long long2 = dateMidnight1.getMillis();
    org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.plusDays(24);
    org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long)10);
    org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withFields((org.joda.time.ReadablePartial)localDate6);
    org.joda.time.Chronology chronology9 = null;
    java.util.Locale locale10 = null;
    org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long)'4', chronology9, locale10, (java.lang.Integer)1, (int)'a');
    dateTimeParserBucket13.setOffset((java.lang.Integer)(-1));
    org.joda.time.Chronology chronology16 = null;
    org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
    java.util.GregorianCalendar gregorianCalendar18 = mutableDateTime17.toGregorianCalendar();
    mutableDateTime17.addMinutes((int)(byte)1);
    org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone21);
    int i24 = dateTimeZone21.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(dateTimeZone21);
    org.joda.time.DateTime dateTime27 = dateTime25.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property28 = dateTime25.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType29 = property28.getFieldType();
    mutableDateTime17.set(dateTimeFieldType29, (int)(byte)10);
    dateTimeParserBucket13.saveField(dateTimeFieldType29, 10080);
    org.joda.time.DateMidnight.Property property34 = dateMidnight7.property(dateTimeFieldType29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long2 == 1496707200000L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianCalendar18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property34);

  }

  @Test
  public void test292() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test292"); }

    org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
    org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusSeconds(0);
    org.joda.time.LocalDateTime.Property property3 = localDateTime0.dayOfMonth();
    org.joda.time.Interval interval4 = property3.toInterval();
    boolean b5 = interval4.containsNow();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(dateTimeZone6);
    org.joda.time.Duration duration10 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.DateMidnight dateMidnight11 = dateMidnight7.minus((org.joda.time.ReadableDuration)duration10);
    org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long)1);
    org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant)dateMidnight11, (org.joda.time.ReadableDuration)duration13);
    org.joda.time.Interval interval15 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration)duration13);
    long long16 = duration13.getMillis();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(interval4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(duration13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(interval15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 3600000L);

  }

  @Test
  public void test293() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test293"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
    org.joda.time.DurationField durationField2 = copticChronology1.days();
    org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology)copticChronology1);
    org.joda.time.DateTimeField dateTimeField4 = copticChronology1.millisOfSecond();
    org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology)copticChronology1);
    org.joda.time.DateTime dateTime7 = dateTime5.minusSeconds((int)' ');
    org.joda.time.DateTime.Property property8 = dateTime7.secondOfDay();
    org.joda.time.DateTime dateTime10 = property8.setCopy("14238");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableDateTime3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime10);

  }

  @Test
  public void test294() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test294"); }

    org.joda.time.YearMonth yearMonth0 = new org.joda.time.YearMonth();
    org.joda.time.YearMonth.Property property1 = yearMonth0.year();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property1);

  }

  @Test
  public void test295() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test295"); }

    org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();

  }

  @Test
  public void test296() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test296"); }

    org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long)10);
    java.lang.String str2 = localDate1.toString();
    org.joda.time.LocalDate localDate4 = localDate1.withDayOfMonth(3);
    int i6 = localDate1.getValue(0);
    org.joda.time.LocalDate.Property property7 = localDate1.dayOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "1970-01-01"+ "'", str2.equals("1970-01-01"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1970);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property7);

  }

  @Test
  public void test297() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test297"); }

    org.joda.time.Chronology chronology0 = null;
    org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology1);

  }

  @Test
  public void test298() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test298"); }

    org.joda.time.IllegalFieldValueException illegalFieldValueException2 = new org.joda.time.IllegalFieldValueException("32", "EthiopicChronology[UTC,mdfw=1]");

  }

  @Test
  public void test299() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test299"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(dateTimeZone0);
    org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusSeconds((int)(short)0);
    org.joda.time.TimeOfDay.Property property4 = timeOfDay1.secondOfMinute();
    java.lang.String str5 = property4.toString();
    int i6 = property4.getMinimumValueOverall();
    int i7 = property4.getMinimumValue();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Property[secondOfMinute]"+ "'", str5.equals("Property[secondOfMinute]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);

  }

  @Test
  public void test300() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test300"); }

    org.joda.time.Chronology chronology0 = null;
    org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
    org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.weekyear();
    int i3 = mutableDateTime1.getYear();
    // The following exception was thrown during execution in test generation
    try {
    mutableDateTime1.setHourOfDay(2017);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 2017);

  }

  @Test
  public void test301() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test301"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
    java.lang.String str2 = copticChronology1.toString();
    org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
    org.joda.time.DateTimeZone dateTimeZone5 = null;
    org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone5);
    java.lang.String str7 = copticChronology6.toString();
    org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(0L, (org.joda.time.Chronology)copticChronology6);
    org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone9);
    int i12 = dateTimeZone9.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone9);
    org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property16 = dateTime13.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType17 = property16.getFieldType();
    org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone18);
    int i21 = dateTimeZone18.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone18);
    org.joda.time.DateTime dateTime24 = dateTime22.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property25 = dateTime22.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType26 = property25.getFieldType();
    org.joda.time.DateTimeComparator dateTimeComparator27 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType17, dateTimeFieldType26);
    int i28 = timeOfDay8.indexOf(dateTimeFieldType26);
    org.joda.time.field.OffsetDateTimeField offsetDateTimeField32 = new org.joda.time.field.OffsetDateTimeField(dateTimeField3, dateTimeFieldType26, 10, 1000, 628);
    java.lang.String str33 = offsetDateTimeField32.toString();
    org.joda.time.DateTimeZone dateTimeZone34 = null;
    org.joda.time.TimeOfDay timeOfDay35 = new org.joda.time.TimeOfDay(dateTimeZone34);
    org.joda.time.TimeOfDay timeOfDay37 = timeOfDay35.minusSeconds((int)(short)0);
    org.joda.time.TimeOfDay.Property property38 = timeOfDay35.secondOfMinute();
    org.joda.time.TimeOfDay.Property property39 = timeOfDay35.millisOfSecond();
    java.util.Locale locale40 = null;
    int i41 = property39.getMaximumTextLength(locale40);
    org.joda.time.DateTimeFieldType dateTimeFieldType42 = property39.getFieldType();
    int i43 = property39.get();
    org.joda.time.TimeOfDay timeOfDay45 = property39.addToCopy(843);
    int i46 = offsetDateTimeField32.getMaximumValue((org.joda.time.ReadablePartial)timeOfDay45);
    int i47 = offsetDateTimeField32.getMinimumValue();
    org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology49 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone48);
    org.joda.time.LocalDate localDate50 = org.joda.time.LocalDate.now((org.joda.time.Chronology)iSOChronology49);
    org.joda.time.DateTimeZone dateTimeZone52 = null;
    org.joda.time.chrono.CopticChronology copticChronology53 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone52);
    org.joda.time.DurationField durationField54 = copticChronology53.days();
    org.joda.time.MutableDateTime mutableDateTime55 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology)copticChronology53);
    org.joda.time.DateTimeField dateTimeField56 = copticChronology53.millisOfSecond();
    org.joda.time.DateTimeZone dateTimeZone57 = null;
    org.joda.time.chrono.CopticChronology copticChronology58 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone57);
    org.joda.time.DurationField durationField59 = copticChronology58.days();
    org.joda.time.DateTimeZone dateTimeZone61 = null;
    org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone61);
    org.joda.time.LocalDateTime.Property property63 = localDateTime62.monthOfYear();
    org.joda.time.DateTimeZone dateTimeZone65 = null;
    org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone65);
    boolean b67 = localDateTime62.isAfter((org.joda.time.ReadablePartial)localDateTime66);
    org.joda.time.DateTimeZone dateTimeZone69 = null;
    org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone69);
    org.joda.time.LocalDateTime localDateTime72 = localDateTime70.withMillisOfDay((int)(short)0);
    org.joda.time.LocalDateTime.Property property73 = localDateTime72.dayOfYear();
    org.joda.time.PeriodType periodType74 = org.joda.time.PeriodType.dayTime();
    org.joda.time.Period period75 = new org.joda.time.Period((org.joda.time.ReadablePartial)localDateTime62, (org.joda.time.ReadablePartial)localDateTime72, periodType74);
    int[] i_array77 = copticChronology58.get((org.joda.time.ReadablePartial)localDateTime62, 1496646000000L);
    int[] i_array79 = copticChronology53.get((org.joda.time.ReadablePartial)localDateTime62, 1496707200000L);
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array81 = offsetDateTimeField32.set((org.joda.time.ReadablePartial)localDate50, 47, i_array79, (-97));
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "CopticChronology[UTC]"+ "'", str2.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "CopticChronology[UTC]"+ "'", str7.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "DateTimeField[millisOfDay]"+ "'", str33.equals("DateTimeField[millisOfDay]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 679);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 628);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 1000);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableDateTime55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array79);

  }

  @Test
  public void test302() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test302"); }

    org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long)10080);
    org.joda.time.TimeOfDay.Property property2 = timeOfDay1.minuteOfHour();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property2);

  }

  @Test
  public void test303() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test303"); }

    org.joda.time.ReadableInstant readableInstant1 = null;
    org.joda.time.ReadableDuration readableDuration2 = null;
    org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant1, readableDuration2);
    org.joda.time.ReadableDuration readableDuration4 = null;
    org.joda.time.Chronology chronology5 = null;
    org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
    org.joda.time.PeriodType periodType7 = null;
    org.joda.time.chrono.GregorianChronology gregorianChronology8 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((java.lang.Object)chronology5, periodType7, (org.joda.time.Chronology)gregorianChronology8);
    mutablePeriod3.setPeriod(readableDuration4, chronology5);
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone12);
    org.joda.time.DurationField durationField14 = copticChronology13.days();
    org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology)copticChronology13);
    org.joda.time.DateTimeField dateTimeField16 = copticChronology13.millisOfSecond();
    mutablePeriod3.setPeriod((long)(short)1, (org.joda.time.Chronology)copticChronology13);
    org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long)330, (org.joda.time.Chronology)copticChronology13);
    int i19 = localTime18.getMillisOfSecond();
    org.joda.time.LocalTime.Property property20 = localTime18.secondOfMinute();
    org.joda.time.LocalTime localTime21 = property20.withMaximumValue();
    org.joda.time.Seconds seconds22 = org.joda.time.Seconds.TWO;
    org.joda.time.DurationFieldType durationFieldType23 = seconds22.getFieldType();
    org.joda.time.LocalTime localTime25 = localTime21.withFieldAdded(durationFieldType23, 365);
    int i26 = localTime21.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableDateTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 330);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localTime21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(seconds22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationFieldType23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localTime25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 4);

  }

  @Test
  public void test304() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test304"); }

    org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.hourMinuteSecondMillis();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter0);

  }

  @Test
  public void test305() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test305"); }

    org.joda.time.chrono.CopticChronology copticChronology0 = org.joda.time.chrono.CopticChronology.getInstance();
    org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((org.joda.time.Chronology)copticChronology0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology0);

  }

  @Test
  public void test306() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test306"); }

    org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekDateTimeNoMillis();
    org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((int)'#');
    boolean b3 = dateTimeFormatter0.isParser();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);

  }

  @Test
  public void test307() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test307"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
    org.joda.time.DateTimeZone dateTimeZone2 = null;
    org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(dateTimeZone2);
    org.joda.time.DateMidnight.Property property4 = dateMidnight3.centuryOfEra();
    org.joda.time.DateMidnight.Property property5 = dateMidnight3.dayOfYear();
    org.joda.time.DateMidnight dateMidnight6 = property5.roundHalfFloorCopy();
    org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.plus((long)(-1));
    org.joda.time.DateTime dateTime9 = dateMidnight6.toDateTime();
    org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant)dateMidnight1, (org.joda.time.ReadableInstant)dateMidnight6);
    java.lang.Object obj11 = mutableInterval10.clone();
    org.joda.time.Chronology chronology12 = mutableInterval10.getChronology();
    java.lang.String str13 = mutableInterval10.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "2017-06-06T00:00:00.000/2017-06-06T00:00:00.000"+ "'", str13.equals("2017-06-06T00:00:00.000/2017-06-06T00:00:00.000"));

  }

  @Test
  public void test308() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test308"); }

    org.joda.time.DateTimeUtils.setCurrentMillisFixed((long)7);

  }

  @Test
  public void test309() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test309"); }

    org.joda.time.ReadableDuration readableDuration0 = null;
    org.joda.time.DateTimeZone dateTimeZone1 = null;
    org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(dateTimeZone1);
    long long3 = dateMidnight2.getMillis();
    org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.plusDays(24);
    org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long)10);
    org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.withFields((org.joda.time.ReadablePartial)localDate7);
    org.joda.time.LocalDate.Property property9 = localDate7.centuryOfEra();
    org.joda.time.Chronology chronology10 = null;
    org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
    org.joda.time.Instant instant12 = mutableDateTime11.toInstant();
    org.joda.time.ReadableInstant readableInstant13 = null;
    boolean b14 = mutableDateTime11.isEqual(readableInstant13);
    org.joda.time.DateTime dateTime15 = mutableDateTime11.toDateTime();
    org.joda.time.DateTime.Property property16 = dateTime15.yearOfCentury();
    org.joda.time.DateTime dateTime18 = property16.addToCopy((long)365);
    org.joda.time.DateTime dateTime19 = property16.withMinimumValue();
    int i20 = dateTime19.getYear();
    int i21 = property9.getDifference((org.joda.time.ReadableInstant)dateTime19);
    org.joda.time.Interval interval22 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant)dateTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long3 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1900);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);

  }

  @Test
  public void test310() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test310"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
    java.lang.String str2 = copticChronology1.toString();
    org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
    org.joda.time.DateTimeZone dateTimeZone5 = null;
    org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone5);
    java.lang.String str7 = copticChronology6.toString();
    org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(0L, (org.joda.time.Chronology)copticChronology6);
    org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone9);
    int i12 = dateTimeZone9.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone9);
    org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property16 = dateTime13.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType17 = property16.getFieldType();
    org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone18);
    int i21 = dateTimeZone18.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone18);
    org.joda.time.DateTime dateTime24 = dateTime22.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property25 = dateTime22.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType26 = property25.getFieldType();
    org.joda.time.DateTimeComparator dateTimeComparator27 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType17, dateTimeFieldType26);
    int i28 = timeOfDay8.indexOf(dateTimeFieldType26);
    org.joda.time.field.OffsetDateTimeField offsetDateTimeField32 = new org.joda.time.field.OffsetDateTimeField(dateTimeField3, dateTimeFieldType26, 10, 1000, 628);
    java.lang.String str33 = offsetDateTimeField32.toString();
    org.joda.time.DateTimeZone dateTimeZone34 = null;
    org.joda.time.TimeOfDay timeOfDay35 = new org.joda.time.TimeOfDay(dateTimeZone34);
    org.joda.time.TimeOfDay timeOfDay37 = timeOfDay35.minusSeconds((int)(short)0);
    org.joda.time.TimeOfDay.Property property38 = timeOfDay35.secondOfMinute();
    org.joda.time.TimeOfDay.Property property39 = timeOfDay35.millisOfSecond();
    java.util.Locale locale40 = null;
    int i41 = property39.getMaximumTextLength(locale40);
    org.joda.time.DateTimeFieldType dateTimeFieldType42 = property39.getFieldType();
    int i43 = property39.get();
    org.joda.time.TimeOfDay timeOfDay45 = property39.addToCopy(843);
    int i46 = offsetDateTimeField32.getMaximumValue((org.joda.time.ReadablePartial)timeOfDay45);
    int i47 = offsetDateTimeField32.getMinimumValue();
    long long49 = offsetDateTimeField32.remainder((long)(byte)-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "CopticChronology[UTC]"+ "'", str2.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "CopticChronology[UTC]"+ "'", str7.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "DateTimeField[millisOfDay]"+ "'", str33.equals("DateTimeField[millisOfDay]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 628);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 1000);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long49 == (-1L));

  }

  @Test
  public void test311() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test311"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
    java.lang.String str2 = copticChronology1.toString();
    org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
    org.joda.time.DateTimeZone dateTimeZone5 = null;
    org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone5);
    java.lang.String str7 = copticChronology6.toString();
    org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(0L, (org.joda.time.Chronology)copticChronology6);
    org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone9);
    int i12 = dateTimeZone9.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone9);
    org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property16 = dateTime13.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType17 = property16.getFieldType();
    org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone18);
    int i21 = dateTimeZone18.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone18);
    org.joda.time.DateTime dateTime24 = dateTime22.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property25 = dateTime22.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType26 = property25.getFieldType();
    org.joda.time.DateTimeComparator dateTimeComparator27 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType17, dateTimeFieldType26);
    int i28 = timeOfDay8.indexOf(dateTimeFieldType26);
    org.joda.time.field.OffsetDateTimeField offsetDateTimeField32 = new org.joda.time.field.OffsetDateTimeField(dateTimeField3, dateTimeFieldType26, 10, 1000, 628);
    org.joda.time.IllegalFieldValueException illegalFieldValueException35 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType26, (java.lang.Number)10080, "");
    java.lang.String str36 = illegalFieldValueException35.getIllegalValueAsString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "CopticChronology[UTC]"+ "'", str2.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "CopticChronology[UTC]"+ "'", str7.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "10080"+ "'", str36.equals("10080"));

  }

  @Test
  public void test312() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test312"); }

    org.joda.time.DateTimeZone dateTimeZone7 = null;
    org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
    org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusDays((int)(byte)10);
    org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
    boolean b13 = dateTimeZone11.isStandardOffset((long)843);
    org.joda.time.Interval interval14 = yearMonthDay10.toInterval(dateTimeZone11);
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(459, (int)'#', 236, 14, (int)(short)1, 236, 1969, dateTimeZone11);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonthDay10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(interval14);

  }

  @Test
  public void test313() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test313"); }

    org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.standard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType0);

  }

  @Test
  public void test314() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test314"); }

    org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
    org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.year();
    org.joda.time.DateTimeZone dateTimeZone2 = null;
    org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(dateTimeZone2);
    org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.minusSeconds((int)(short)0);
    org.joda.time.TimeOfDay.Property property6 = timeOfDay3.secondOfMinute();
    org.joda.time.TimeOfDay.Property property7 = timeOfDay3.millisOfSecond();
    java.util.Locale locale8 = null;
    int i9 = property7.getMaximumTextLength(locale8);
    org.joda.time.DateTimeFieldType dateTimeFieldType10 = property7.getFieldType();
    mutableDateTime0.set(dateTimeFieldType10, (int)(byte)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableDateTime0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType10);

  }

  @Test
  public void test315() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test315"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(dateTimeZone0);
    org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusSeconds((int)(short)0);
    org.joda.time.TimeOfDay.Property property4 = timeOfDay1.secondOfMinute();
    java.lang.String str5 = property4.toString();
    java.lang.String str6 = property4.getName();
    org.joda.time.TimeOfDay timeOfDay8 = property4.addWrapFieldToCopy((-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Property[secondOfMinute]"+ "'", str5.equals("Property[secondOfMinute]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "secondOfMinute"+ "'", str6.equals("secondOfMinute"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay8);

  }

  @Test
  public void test316() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test316"); }

    org.joda.time.DateTimeZone dateTimeZone1 = null;
    org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone1);
    org.joda.time.DurationField durationField3 = copticChronology2.days();
    java.util.Locale locale4 = null;
    org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long)8, (org.joda.time.Chronology)copticChronology2, locale4);
    org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period11 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology10);
    org.joda.time.DateTimeZone dateTimeZone12 = gregorianChronology10.getZone();
    org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((int)(byte)1, 6, 8, (org.joda.time.Chronology)gregorianChronology10);
    org.joda.time.DateTimeField dateTimeField14 = gregorianChronology10.dayOfWeek();
    org.joda.time.field.SkipDateTimeField skipDateTimeField15 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)copticChronology2, dateTimeField14);
    org.joda.time.DurationField durationField16 = skipDateTimeField15.getLeapDurationField();
    int i18 = skipDateTimeField15.getMinimumValue((long)70);
    org.joda.time.DurationField durationField19 = skipDateTimeField15.getRangeDurationField();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(durationField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField19);

  }

  @Test
  public void test317() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test317"); }

    org.joda.time.Duration duration2 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone3);
    org.joda.time.DateMidnight.Property property5 = dateMidnight4.centuryOfEra();
    org.joda.time.DateMidnight.Property property6 = dateMidnight4.dayOfYear();
    org.joda.time.DateMidnight dateMidnight7 = property6.roundHalfFloorCopy();
    org.joda.time.PeriodType periodType8 = null;
    org.joda.time.Period period9 = duration2.toPeriodFrom((org.joda.time.ReadableInstant)dateMidnight7, periodType8);
    org.joda.time.DateMidnight.Property property10 = dateMidnight7.year();
    org.joda.time.DateTimeZone dateTimeZone11 = null;
    org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(dateTimeZone11);
    org.joda.time.Duration duration15 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.DateTimeZone dateTimeZone16 = null;
    org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(dateTimeZone16);
    org.joda.time.DateMidnight.Property property18 = dateMidnight17.centuryOfEra();
    org.joda.time.DateMidnight.Property property19 = dateMidnight17.dayOfYear();
    org.joda.time.DateMidnight dateMidnight20 = property19.roundHalfFloorCopy();
    org.joda.time.PeriodType periodType21 = null;
    org.joda.time.Period period22 = duration15.toPeriodFrom((org.joda.time.ReadableInstant)dateMidnight20, periodType21);
    org.joda.time.DateMidnight dateMidnight24 = dateMidnight12.withPeriodAdded((org.joda.time.ReadablePeriod)period22, 100);
    org.joda.time.DateMidnight.Property property25 = dateMidnight24.centuryOfEra();
    org.joda.time.DateTimeZone dateTimeZone26 = null;
    org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(dateTimeZone26);
    long long28 = dateMidnight27.getMillis();
    org.joda.time.DateMidnight dateMidnight30 = dateMidnight27.plusDays(24);
    org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant)dateMidnight24, (org.joda.time.ReadableInstant)dateMidnight30);
    org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant)dateMidnight7, (org.joda.time.ReadableInstant)dateMidnight24);
    int i33 = period32.getDays();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long28 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == (-1));

  }

  @Test
  public void test318() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test318"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
    org.joda.time.DateMidnight.Property property2 = dateMidnight1.centuryOfEra();
    org.joda.time.DateMidnight.Property property3 = dateMidnight1.dayOfYear();
    org.joda.time.DateMidnight dateMidnight4 = property3.roundHalfFloorCopy();
    org.joda.time.DateMidnight dateMidnight6 = property3.addWrapFieldToCopy(33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight6);

  }

  @Test
  public void test319() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test319"); }

    org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((java.lang.Object)10L);
    org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone2);
    int i5 = dateTimeZone2.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone2);
    org.joda.time.DateTime dateTime8 = dateTime6.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property9 = dateTime6.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType10 = property9.getFieldType();
    org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone11);
    int i14 = dateTimeZone11.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone11);
    org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property18 = dateTime15.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType19 = property18.getFieldType();
    org.joda.time.DateTimeComparator dateTimeComparator20 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType10, dateTimeFieldType19);
    org.joda.time.DateMidnight.Property property21 = dateMidnight1.property(dateTimeFieldType10);
    org.joda.time.Partial partial23 = new org.joda.time.Partial(dateTimeFieldType10, 2017);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property21);

  }

  @Test
  public void test320() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test320"); }

    org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.weeks();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType0);

  }

  @Test
  public void test321() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test321"); }

    org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.time();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType0);

  }

  @Test
  public void test322() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test322"); }

    org.joda.time.Chronology chronology0 = null;
    org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
    org.joda.time.Instant instant2 = mutableDateTime1.toInstant();
    mutableDateTime1.addWeekyears((int)(short)-1);
    org.joda.time.DateTimeZone dateTimeZone5 = null;
    org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
    long long7 = dateMidnight6.getMillis();
    org.joda.time.DateMidnight dateMidnight9 = dateMidnight6.plusDays(24);
    org.joda.time.Minutes minutes10 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant)mutableDateTime1, (org.joda.time.ReadableInstant)dateMidnight9);
    org.joda.time.DateTimeZone dateTimeZone11 = null;
    org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(dateTimeZone11);
    org.joda.time.Duration duration15 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.DateMidnight dateMidnight16 = dateMidnight12.minus((org.joda.time.ReadableDuration)duration15);
    org.joda.time.DateMidnight dateMidnight17 = dateMidnight9.minus((org.joda.time.ReadableDuration)duration15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(minutes10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight17);

  }

  @Test
  public void test323() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test323"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
    java.lang.String str2 = copticChronology1.toString();
    org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
    org.joda.time.DateTimeZone dateTimeZone5 = null;
    org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone5);
    java.lang.String str7 = copticChronology6.toString();
    org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(0L, (org.joda.time.Chronology)copticChronology6);
    org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone9);
    int i12 = dateTimeZone9.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone9);
    org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property16 = dateTime13.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType17 = property16.getFieldType();
    org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone18);
    int i21 = dateTimeZone18.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone18);
    org.joda.time.DateTime dateTime24 = dateTime22.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property25 = dateTime22.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType26 = property25.getFieldType();
    org.joda.time.DateTimeComparator dateTimeComparator27 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType17, dateTimeFieldType26);
    int i28 = timeOfDay8.indexOf(dateTimeFieldType26);
    org.joda.time.field.OffsetDateTimeField offsetDateTimeField32 = new org.joda.time.field.OffsetDateTimeField(dateTimeField3, dateTimeFieldType26, 10, 1000, 628);
    java.lang.String str33 = offsetDateTimeField32.toString();
    org.joda.time.DateTimeZone dateTimeZone34 = null;
    org.joda.time.TimeOfDay timeOfDay35 = new org.joda.time.TimeOfDay(dateTimeZone34);
    org.joda.time.TimeOfDay timeOfDay37 = timeOfDay35.minusSeconds((int)(short)0);
    org.joda.time.TimeOfDay.Property property38 = timeOfDay35.secondOfMinute();
    org.joda.time.TimeOfDay.Property property39 = timeOfDay35.millisOfSecond();
    java.util.Locale locale40 = null;
    int i41 = property39.getMaximumTextLength(locale40);
    org.joda.time.DateTimeFieldType dateTimeFieldType42 = property39.getFieldType();
    int i43 = property39.get();
    org.joda.time.TimeOfDay timeOfDay45 = property39.addToCopy(843);
    int i46 = offsetDateTimeField32.getMaximumValue((org.joda.time.ReadablePartial)timeOfDay45);
    // The following exception was thrown during execution in test generation
    try {
    long long49 = offsetDateTimeField32.addWrapField(1496707200000L, 2000);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "CopticChronology[UTC]"+ "'", str2.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "CopticChronology[UTC]"+ "'", str7.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "DateTimeField[millisOfDay]"+ "'", str33.equals("DateTimeField[millisOfDay]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 628);

  }

  @Test
  public void test324() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test324"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
    org.joda.time.YearMonthDay.Property property2 = yearMonthDay1.year();
    org.joda.time.YearMonthDay yearMonthDay4 = property2.addWrapFieldToCopy(0);
    org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.minusMonths(26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonthDay4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonthDay6);

  }

  @Test
  public void test325() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test325"); }

    org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone0);
    int i3 = dateTimeZone0.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone0);
    org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property7 = dateTime4.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType8 = property7.getFieldType();
    org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone9);
    int i12 = dateTimeZone9.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone9);
    org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property16 = dateTime13.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType17 = property16.getFieldType();
    org.joda.time.DateTimeComparator dateTimeComparator18 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType8, dateTimeFieldType17);
    org.joda.time.Partial partial20 = new org.joda.time.Partial(dateTimeFieldType8, (int)(byte)1);
    org.joda.time.Seconds seconds21 = org.joda.time.Seconds.TWO;
    org.joda.time.Partial partial22 = partial20.plus((org.joda.time.ReadablePeriod)seconds21);
    org.joda.time.DateTimeFieldType[] dateTimeFieldType_array23 = partial22.getFieldTypes();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(seconds21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(partial22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType_array23);

  }

  @Test
  public void test326() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test326"); }

    org.joda.time.Chronology chronology0 = null;
    org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
    org.joda.time.Instant instant2 = mutableDateTime1.toInstant();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone3);
    org.joda.time.DateMidnight.Property property5 = dateMidnight4.centuryOfEra();
    org.joda.time.DateMidnight.Property property6 = dateMidnight4.dayOfYear();
    org.joda.time.Minutes minutes7 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant)instant2, (org.joda.time.ReadableInstant)dateMidnight4);
    org.joda.time.ReadableInstant readableInstant8 = null;
    org.joda.time.ReadableDuration readableDuration9 = null;
    org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(readableInstant8, readableDuration9);
    org.joda.time.chrono.GregorianChronology gregorianChronology12 = org.joda.time.chrono.GregorianChronology.getInstance();
    mutablePeriod10.setPeriod((long)100, (org.joda.time.Chronology)gregorianChronology12);
    org.joda.time.DateMidnight dateMidnight14 = dateMidnight4.plus((org.joda.time.ReadablePeriod)mutablePeriod10);
    org.joda.time.Chronology chronology15 = null;
    org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
    java.util.GregorianCalendar gregorianCalendar17 = mutableDateTime16.toGregorianCalendar();
    mutableDateTime16.addMinutes((int)(byte)1);
    org.joda.time.ReadableInstant readableInstant20 = null;
    org.joda.time.ReadableDuration readableDuration21 = null;
    org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(readableInstant20, readableDuration21);
    org.joda.time.chrono.GregorianChronology gregorianChronology24 = org.joda.time.chrono.GregorianChronology.getInstance();
    mutablePeriod22.setPeriod((long)100, (org.joda.time.Chronology)gregorianChronology24);
    mutableDateTime16.setChronology((org.joda.time.Chronology)gregorianChronology24);
    org.joda.time.MutableDateTime mutableDateTime27 = mutableDateTime16.copy();
    org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant)dateMidnight14, (org.joda.time.ReadableInstant)mutableDateTime16);
    org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay((long)235);
    org.joda.time.MonthDay.Property property31 = monthDay30.monthOfYear();
    org.joda.time.MonthDay monthDay32 = property31.getMonthDay();
    org.joda.time.DateMidnight dateMidnight33 = dateMidnight14.withFields((org.joda.time.ReadablePartial)monthDay32);
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.withMonthOfYear(20);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(minutes7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianCalendar17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableDateTime27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(monthDay32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight33);

  }

  @Test
  public void test327() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test327"); }

    org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
    org.joda.time.Chronology chronology1 = null;
    org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
    int i5 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant)mutableDateTime2, "secondOfMinute", 100);
    org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter0.withPivotYear((java.lang.Integer)1034);
    org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withDefaultYear(770);
    java.lang.StringBuffer stringBuffer10 = null;
    org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long)10);
    java.lang.String str13 = localDate12.toString();
    org.joda.time.PeriodType periodType16 = null;
    org.joda.time.Period period17 = new org.joda.time.Period((long)(byte)1, (long)24, periodType16);
    org.joda.time.LocalDate localDate19 = localDate12.withPeriodAdded((org.joda.time.ReadablePeriod)period17, 345);
    org.joda.time.Chronology chronology20 = null;
    org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
    org.joda.time.Instant instant22 = mutableDateTime21.toInstant();
    mutableDateTime21.addWeekyears((int)(short)-1);
    org.joda.time.DateTimeZone dateTimeZone25 = null;
    org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(dateTimeZone25);
    long long27 = dateMidnight26.getMillis();
    org.joda.time.DateMidnight dateMidnight29 = dateMidnight26.plusDays(24);
    org.joda.time.Minutes minutes30 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant)mutableDateTime21, (org.joda.time.ReadableInstant)dateMidnight29);
    org.joda.time.Minutes minutes31 = org.joda.time.Minutes.THREE;
    org.joda.time.Minutes minutes32 = minutes30.plus(minutes31);
    org.joda.time.PeriodType periodType33 = minutes30.getPeriodType();
    boolean b34 = localDate19.equals((java.lang.Object)minutes30);
    org.joda.time.LocalDate localDate36 = localDate19.plusMonths(86);
    // The following exception was thrown during execution in test generation
    try {
    dateTimeFormatter7.printTo(stringBuffer10, (org.joda.time.ReadablePartial)localDate19);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-101));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "1970-01-01"+ "'", str13.equals("1970-01-01"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long27 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(minutes30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(minutes31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(minutes32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate36);

  }

  @Test
  public void test328() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test328"); }

    org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateHourMinuteSecond();
    java.lang.String str2 = dateTimeFormatter0.print((long)(byte)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "1970-01-01T00:00:00"+ "'", str2.equals("1970-01-01T00:00:00"));

  }

  @Test
  public void test329() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test329"); }

    org.joda.time.field.FieldUtils.verifyValueBounds("1970-01-01T00:00:00", (int)'a', (-101), 1969);

  }

  @Test
  public void test330() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test330"); }

    org.joda.time.ReadableInstant readableInstant0 = null;
    org.joda.time.ReadableDuration readableDuration1 = null;
    org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
    org.joda.time.chrono.GregorianChronology gregorianChronology4 = org.joda.time.chrono.GregorianChronology.getInstance();
    mutablePeriod2.setPeriod((long)100, (org.joda.time.Chronology)gregorianChronology4);
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(dateTimeZone6);
    int i8 = dateMidnight7.getDayOfWeek();
    org.joda.time.Chronology chronology9 = null;
    org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
    java.util.GregorianCalendar gregorianCalendar11 = mutableDateTime10.toGregorianCalendar();
    org.joda.time.chrono.LimitChronology limitChronology12 = org.joda.time.chrono.LimitChronology.getInstance((org.joda.time.Chronology)gregorianChronology4, (org.joda.time.ReadableDateTime)dateMidnight7, (org.joda.time.ReadableDateTime)mutableDateTime10);
    org.joda.time.DateTimeZone dateTimeZone14 = null;
    org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone14);
    org.joda.time.DurationField durationField16 = copticChronology15.days();
    java.util.Locale locale17 = null;
    org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long)8, (org.joda.time.Chronology)copticChronology15, locale17);
    org.joda.time.chrono.GregorianChronology gregorianChronology23 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period24 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology23);
    org.joda.time.DateTimeZone dateTimeZone25 = gregorianChronology23.getZone();
    org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay((int)(byte)1, 6, 8, (org.joda.time.Chronology)gregorianChronology23);
    org.joda.time.DateTimeField dateTimeField27 = gregorianChronology23.dayOfWeek();
    org.joda.time.field.SkipDateTimeField skipDateTimeField28 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)copticChronology15, dateTimeField27);
    org.joda.time.DurationField durationField29 = skipDateTimeField28.getLeapDurationField();
    int i31 = skipDateTimeField28.getMinimumValue((long)70);
    mutableDateTime10.setRounding((org.joda.time.DateTimeField)skipDateTimeField28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianCalendar11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(limitChronology12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(durationField29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);

  }

  @Test
  public void test331() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test331"); }

    org.joda.time.chrono.GregorianChronology gregorianChronology2 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period3 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology2);
    org.joda.time.DateTimeZone dateTimeZone4 = gregorianChronology2.getZone();
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval((java.lang.Object)"00:00:41.000", (org.joda.time.Chronology)gregorianChronology2);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone4);

  }

  @Test
  public void test332() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test332"); }

    org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicTime();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter0);

  }

  @Test
  public void test333() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test333"); }

    org.joda.time.Chronology chronology0 = null;
    org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
    org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.hourOfDay();
    org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.year();
    int i4 = mutableDateTime1.getYearOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 1970);

  }

  @Test
  public void test334() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test334"); }

    org.joda.time.DateTimeZone dateTimeZone1 = null;
    org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone1);
    org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
    org.joda.time.LocalDateTime localDateTime4 = property3.roundCeilingCopy();
    org.joda.time.Chronology chronology5 = null;
    org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
    org.joda.time.Instant instant7 = mutableDateTime6.toInstant();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(dateTimeZone8);
    org.joda.time.DateMidnight.Property property10 = dateMidnight9.centuryOfEra();
    org.joda.time.DateMidnight.Property property11 = dateMidnight9.dayOfYear();
    org.joda.time.Minutes minutes12 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant)instant7, (org.joda.time.ReadableInstant)dateMidnight9);
    org.joda.time.DateTime dateTime13 = instant7.toDateTimeISO();
    long long14 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant)instant7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(minutes12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long14 == 0L);

  }

  @Test
  public void test335() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test335"); }

    org.joda.time.Period period4 = new org.joda.time.Period((int)(short)0, (int)'4', 1, 0);
    org.joda.time.PeriodType periodType5 = null;
    org.joda.time.Period period6 = period4.withPeriodType(periodType5);
    org.joda.time.Period period8 = period4.minusMillis((int)'a');
    int i9 = period4.getWeeks();
    org.joda.time.Seconds seconds10 = period4.toStandardSeconds();
    org.joda.time.Seconds seconds11 = seconds10.negated();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(seconds10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(seconds11);

  }

  @Test
  public void test336() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test336"); }

    org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.ISODateTimeFormat.hourMinuteSecond();
    org.joda.time.ReadableInstant readableInstant7 = null;
    org.joda.time.ReadableDuration readableDuration8 = null;
    org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(readableInstant7, readableDuration8);
    org.joda.time.ReadableDuration readableDuration10 = null;
    org.joda.time.Chronology chronology11 = null;
    org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
    org.joda.time.PeriodType periodType13 = null;
    org.joda.time.chrono.GregorianChronology gregorianChronology14 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((java.lang.Object)chronology11, periodType13, (org.joda.time.Chronology)gregorianChronology14);
    mutablePeriod9.setPeriod(readableDuration10, chronology11);
    org.joda.time.DateTimeZone dateTimeZone18 = null;
    org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone18);
    org.joda.time.DurationField durationField20 = copticChronology19.days();
    org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology)copticChronology19);
    org.joda.time.DateTimeField dateTimeField22 = copticChronology19.millisOfSecond();
    mutablePeriod9.setPeriod((long)(short)1, (org.joda.time.Chronology)copticChronology19);
    org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter6.withChronology((org.joda.time.Chronology)copticChronology19);
    org.joda.time.DateTimeField dateTimeField25 = copticChronology19.centuryOfEra();
    org.joda.time.DateTimeField dateTimeField26 = copticChronology19.centuryOfEra();
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(330, 78, 242, 884, 33, 491, (org.joda.time.Chronology)copticChronology19);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableDateTime21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField26);

  }

  @Test
  public void test337() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test337"); }

    org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
    org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth((long)(byte)0, (org.joda.time.Chronology)iSOChronology2);
    int i4 = yearMonth3.size();
    org.joda.time.YearMonth yearMonth6 = yearMonth3.minusMonths(24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonth6);

  }

  @Test
  public void test338() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test338"); }

    org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period2 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology1);
    org.joda.time.Weeks weeks3 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod)period2);
    org.joda.time.Period period5 = period2.withHours(0);
    org.joda.time.format.PeriodFormatter periodFormatter6 = org.joda.time.format.ISOPeriodFormat.alternateExtended();
    java.lang.String str7 = period5.toString(periodFormatter6);
    java.io.Writer writer8 = null;
    org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long)10);
    java.lang.String str11 = localDate10.toString();
    org.joda.time.PeriodType periodType14 = null;
    org.joda.time.Period period15 = new org.joda.time.Period((long)(byte)1, (long)24, periodType14);
    org.joda.time.LocalDate localDate17 = localDate10.withPeriodAdded((org.joda.time.ReadablePeriod)period15, 345);
    org.joda.time.Chronology chronology18 = null;
    org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology18);
    org.joda.time.Instant instant20 = mutableDateTime19.toInstant();
    mutableDateTime19.addWeekyears((int)(short)-1);
    org.joda.time.DateTimeZone dateTimeZone23 = null;
    org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(dateTimeZone23);
    long long25 = dateMidnight24.getMillis();
    org.joda.time.DateMidnight dateMidnight27 = dateMidnight24.plusDays(24);
    org.joda.time.Minutes minutes28 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant)mutableDateTime19, (org.joda.time.ReadableInstant)dateMidnight27);
    org.joda.time.Minutes minutes29 = org.joda.time.Minutes.THREE;
    org.joda.time.Minutes minutes30 = minutes28.plus(minutes29);
    org.joda.time.PeriodType periodType31 = minutes28.getPeriodType();
    boolean b32 = localDate17.equals((java.lang.Object)minutes28);
    // The following exception was thrown during execution in test generation
    try {
    periodFormatter6.printTo(writer8, (org.joda.time.ReadablePeriod)minutes28);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weeks3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodFormatter6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "P0000-00-00T00:00:00.100"+ "'", str7.equals("P0000-00-00T00:00:00.100"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "1970-01-01"+ "'", str11.equals("1970-01-01"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long25 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(minutes28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(minutes29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(minutes30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);

  }

  @Test
  public void test339() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test339"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
    org.joda.time.DurationField durationField2 = copticChronology1.days();
    org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology)copticChronology1);
    org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.secondOfMinute();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableDateTime3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property4);

  }

  @Test
  public void test340() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test340"); }

    org.joda.time.Months months0 = org.joda.time.Months.TEN;
    org.joda.time.Months months2 = months0.minus(535);
    org.joda.time.PeriodType periodType3 = months2.getPeriodType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(months0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(months2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType3);

  }

  @Test
  public void test341() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test341"); }

    org.joda.time.Chronology chronology1 = null;
    org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
    org.joda.time.PeriodType periodType3 = null;
    org.joda.time.chrono.GregorianChronology gregorianChronology4 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((java.lang.Object)chronology1, periodType3, (org.joda.time.Chronology)gregorianChronology4);
    org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long)345, chronology1);
    org.joda.time.DateTimeZone dateTimeZone7 = null;
    org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
    org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths(0);
    org.joda.time.Chronology chronology12 = null;
    java.util.Locale locale13 = null;
    org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long)'4', chronology12, locale13, (java.lang.Integer)1, (int)'a');
    dateTimeParserBucket16.setOffset((java.lang.Integer)(-1));
    org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
    dateTimeParserBucket16.setZone(dateTimeZone19);
    org.joda.time.DateMidnight dateMidnight21 = yearMonthDay8.toDateMidnight(dateTimeZone19);
    org.joda.time.DateMidnight dateMidnight22 = localDate6.toDateMidnight(dateTimeZone19);
    org.joda.time.LocalDate.Property property23 = localDate6.weekyear();
    org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long)'#');
    org.joda.time.ReadableInstant readableInstant26 = null;
    org.joda.time.ReadableDuration readableDuration27 = null;
    org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(readableInstant26, readableDuration27);
    org.joda.time.chrono.GregorianChronology gregorianChronology30 = org.joda.time.chrono.GregorianChronology.getInstance();
    mutablePeriod28.setPeriod((long)100, (org.joda.time.Chronology)gregorianChronology30);
    mutablePeriod28.addMillis((int)(byte)1);
    int i34 = mutablePeriod28.getMonths();
    org.joda.time.DurationFieldType[] durationFieldType_array35 = mutablePeriod28.getFieldTypes();
    org.joda.time.DateTime dateTime36 = dateTime25.plus((org.joda.time.ReadablePeriod)mutablePeriod28);
    org.joda.time.ReadableInstant readableInstant37 = null;
    org.joda.time.ReadableDuration readableDuration38 = null;
    org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(readableInstant37, readableDuration38);
    org.joda.time.chrono.GregorianChronology gregorianChronology41 = org.joda.time.chrono.GregorianChronology.getInstance();
    mutablePeriod39.setPeriod((long)100, (org.joda.time.Chronology)gregorianChronology41);
    int i43 = mutablePeriod39.getWeeks();
    mutablePeriod39.addDays(10080);
    org.joda.time.DateTime dateTime46 = dateTime25.plus((org.joda.time.ReadablePeriod)mutablePeriod39);
    org.joda.time.LocalDate localDate47 = localDate6.minus((org.joda.time.ReadablePeriod)mutablePeriod39);
    mutablePeriod39.setPeriod((long)628);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonthDay10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationFieldType_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate47);

  }

  @Test
  public void test342() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test342"); }

    org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
    org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusSeconds(0);
    org.joda.time.LocalDateTime.Property property3 = localDateTime0.dayOfMonth();
    org.joda.time.LocalDateTime.Property property4 = localDateTime0.dayOfWeek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property4);

  }

  @Test
  public void test343() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test343"); }

    org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(236, 6);

  }

  @Test
  public void test344() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test344"); }

    org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay(10L);
    org.joda.time.ReadableInterval readableInterval2 = null;
    org.joda.time.Hours hours3 = org.joda.time.Hours.hoursIn(readableInterval2);
    org.joda.time.Duration duration4 = hours3.toStandardDuration();
    org.joda.time.MonthDay monthDay6 = monthDay1.withPeriodAdded((org.joda.time.ReadablePeriod)hours3, 298);
    org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long)(short)10);
    org.joda.time.LocalDateTime.Property property9 = localDateTime8.hourOfDay();
    org.joda.time.LocalDateTime.Property property10 = localDateTime8.secondOfMinute();
    org.joda.time.LocalDateTime localDateTime12 = property10.addToCopy(1496721418392L);
    // The following exception was thrown during execution in test generation
    try {
    boolean b13 = monthDay1.isEqual((org.joda.time.ReadablePartial)localDateTime12);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hours3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(duration4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(monthDay6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime12);

  }

  @Test
  public void test345() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test345"); }

    org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long)242);

  }

  @Test
  public void test346() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test346"); }

    org.joda.time.Chronology chronology0 = null;
    org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
    java.util.GregorianCalendar gregorianCalendar2 = mutableDateTime1.toGregorianCalendar();
    mutableDateTime1.addMinutes((int)(byte)1);
    org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone5);
    int i8 = dateTimeZone5.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone5);
    org.joda.time.DateTime dateTime11 = dateTime9.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property12 = dateTime9.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType13 = property12.getFieldType();
    mutableDateTime1.set(dateTimeFieldType13, (int)(byte)10);
    org.joda.time.MutableDateTime.Property property16 = mutableDateTime1.millisOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianCalendar2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property16);

  }

  @Test
  public void test347() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test347"); }

    org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone0);
    int i3 = dateTimeZone0.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone0);
    org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property7 = dateTime4.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType8 = property7.getFieldType();
    org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone9);
    int i12 = dateTimeZone9.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone9);
    org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property16 = dateTime13.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType17 = property16.getFieldType();
    org.joda.time.DateTimeComparator dateTimeComparator18 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType8, dateTimeFieldType17);
    org.joda.time.Partial partial20 = new org.joda.time.Partial(dateTimeFieldType8, (int)(byte)1);
    org.joda.time.Seconds seconds21 = org.joda.time.Seconds.TWO;
    org.joda.time.Partial partial22 = partial20.plus((org.joda.time.ReadablePeriod)seconds21);
    org.joda.time.DateTimeFieldType[] dateTimeFieldType_array23 = partial20.getFieldTypes();
    org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = partial20.getFormatter();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(seconds21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(partial22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(dateTimeFormatter24);

  }

  @Test
  public void test348() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test348"); }

    org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone0);
    int i3 = dateTimeZone0.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone0);
    org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property7 = dateTime4.millisOfDay();
    org.joda.time.DateTime dateTime9 = property7.addToCopy(0);
    org.joda.time.Chronology chronology10 = null;
    org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
    java.util.GregorianCalendar gregorianCalendar12 = mutableDateTime11.toGregorianCalendar();
    mutableDateTime11.addMinutes((int)(byte)1);
    org.joda.time.Weeks weeks15 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)dateTime9, (org.joda.time.ReadableInstant)mutableDateTime11);
    mutableDateTime11.addWeeks(24);
    mutableDateTime11.setMinuteOfDay(365);
    // The following exception was thrown during execution in test generation
    try {
    mutableDateTime11.setWeekyear(604800000);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianCalendar12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weeks15);

  }

  @Test
  public void test349() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test349"); }

    org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long)784);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(duration1);

  }

  @Test
  public void test350() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test350"); }

    org.joda.time.DateTimeZone dateTimeZone1 = null;
    org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone1);
    org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
    org.joda.time.DateTimeZone dateTimeZone5 = null;
    org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone5);
    boolean b7 = localDateTime2.isAfter((org.joda.time.ReadablePartial)localDateTime6);
    org.joda.time.LocalDateTime localDateTime9 = localDateTime2.withDayOfMonth((int)(short)10);
    org.joda.time.LocalDateTime localDateTime11 = localDateTime2.withYear(6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime11);

  }

  @Test
  public void test351() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test351"); }

    org.joda.time.Chronology chronology1 = null;
    java.util.Locale locale2 = null;
    org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long)'4', chronology1, locale2, (java.lang.Integer)1, (int)'a');
    dateTimeParserBucket5.setOffset((java.lang.Integer)(-1));
    dateTimeParserBucket5.setPivotYear((java.lang.Integer)0);
    org.joda.time.DateTimeZone dateTimeZone10 = null;
    org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone10);
    java.lang.String str12 = copticChronology11.toString();
    org.joda.time.DateTimeField dateTimeField13 = copticChronology11.centuryOfEra();
    org.joda.time.DateTimeZone dateTimeZone15 = null;
    org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone15);
    java.lang.String str17 = copticChronology16.toString();
    org.joda.time.TimeOfDay timeOfDay18 = org.joda.time.TimeOfDay.fromMillisOfDay(0L, (org.joda.time.Chronology)copticChronology16);
    org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone19);
    int i22 = dateTimeZone19.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone19);
    org.joda.time.DateTime dateTime25 = dateTime23.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property26 = dateTime23.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType27 = property26.getFieldType();
    org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone28);
    int i31 = dateTimeZone28.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone28);
    org.joda.time.DateTime dateTime34 = dateTime32.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property35 = dateTime32.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType36 = property35.getFieldType();
    org.joda.time.DateTimeComparator dateTimeComparator37 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType27, dateTimeFieldType36);
    int i38 = timeOfDay18.indexOf(dateTimeFieldType36);
    org.joda.time.field.OffsetDateTimeField offsetDateTimeField42 = new org.joda.time.field.OffsetDateTimeField(dateTimeField13, dateTimeFieldType36, 10, 1000, 628);
    org.joda.time.DateTimeField dateTimeField43 = offsetDateTimeField42.getWrappedField();
    dateTimeParserBucket5.saveField((org.joda.time.DateTimeField)offsetDateTimeField42, 9);
    org.joda.time.DateTimeField dateTimeField46 = org.joda.time.field.StrictDateTimeField.getInstance((org.joda.time.DateTimeField)offsetDateTimeField42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "CopticChronology[UTC]"+ "'", str12.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "CopticChronology[UTC]"+ "'", str17.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField46);

  }

  @Test
  public void test352() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test352"); }

    org.joda.time.YearMonth yearMonth1 = org.joda.time.YearMonth.parse("1969-12-31");
    int i2 = yearMonth1.size();
    org.joda.time.YearMonth yearMonth4 = yearMonth1.minusYears((int)'a');
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone6);
    java.lang.String str8 = copticChronology7.toString();
    org.joda.time.TimeOfDay timeOfDay9 = org.joda.time.TimeOfDay.fromMillisOfDay(0L, (org.joda.time.Chronology)copticChronology7);
    org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology11 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone10);
    int i13 = dateTimeZone10.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone10);
    org.joda.time.DateTime dateTime16 = dateTime14.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property17 = dateTime14.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType18 = property17.getFieldType();
    org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone19);
    int i22 = dateTimeZone19.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone19);
    org.joda.time.DateTime dateTime25 = dateTime23.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property26 = dateTime23.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType27 = property26.getFieldType();
    org.joda.time.DateTimeComparator dateTimeComparator28 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType18, dateTimeFieldType27);
    int i29 = timeOfDay9.indexOf(dateTimeFieldType27);
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.YearMonth yearMonth31 = yearMonth1.withField(dateTimeFieldType27, 535);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonth1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonth4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "CopticChronology[UTC]"+ "'", str8.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == (-1));

  }

  @Test
  public void test353() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test353"); }

    org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone5 = new org.joda.time.tz.FixedDateTimeZone("hi!", "2017-W23-2T03:56:37Z", 26, 1034);
    java.lang.String str6 = fixedDateTimeZone5.getID();
    org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long)1970, (org.joda.time.DateTimeZone)fixedDateTimeZone5);
    long long9 = fixedDateTimeZone5.nextTransition((long)(short)1);
    boolean b10 = fixedDateTimeZone5.isFixed();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!"+ "'", str6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long9 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test354() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test354"); }

    org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long)10);
    java.lang.String str2 = localDate1.toString();
    org.joda.time.LocalDate localDate4 = localDate1.withDayOfMonth(3);
    int i5 = localDate1.getYearOfCentury();
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone6);
    org.joda.time.DurationField durationField8 = copticChronology7.days();
    org.joda.time.DateTimeZone dateTimeZone10 = null;
    org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone10);
    org.joda.time.LocalDateTime.Property property12 = localDateTime11.monthOfYear();
    org.joda.time.DateTimeZone dateTimeZone14 = null;
    org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone14);
    boolean b16 = localDateTime11.isAfter((org.joda.time.ReadablePartial)localDateTime15);
    org.joda.time.DateTimeZone dateTimeZone18 = null;
    org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone18);
    org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withMillisOfDay((int)(short)0);
    org.joda.time.LocalDateTime.Property property22 = localDateTime21.dayOfYear();
    org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.dayTime();
    org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadablePartial)localDateTime11, (org.joda.time.ReadablePartial)localDateTime21, periodType23);
    int[] i_array26 = copticChronology7.get((org.joda.time.ReadablePartial)localDateTime11, 1496646000000L);
    org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((org.joda.time.Chronology)copticChronology7);
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((java.lang.Object)localDate1, (org.joda.time.Chronology)copticChronology7);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "1970-01-01"+ "'", str2.equals("1970-01-01"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array26);

  }

  @Test
  public void test355() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test355"); }

    org.joda.time.ReadableInstant readableInstant1 = null;
    org.joda.time.ReadableDuration readableDuration2 = null;
    org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant1, readableDuration2);
    org.joda.time.ReadableDuration readableDuration4 = null;
    org.joda.time.Chronology chronology5 = null;
    org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
    org.joda.time.PeriodType periodType7 = null;
    org.joda.time.chrono.GregorianChronology gregorianChronology8 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((java.lang.Object)chronology5, periodType7, (org.joda.time.Chronology)gregorianChronology8);
    mutablePeriod3.setPeriod(readableDuration4, chronology5);
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone12);
    org.joda.time.DurationField durationField14 = copticChronology13.days();
    org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology)copticChronology13);
    org.joda.time.DateTimeField dateTimeField16 = copticChronology13.millisOfSecond();
    mutablePeriod3.setPeriod((long)(short)1, (org.joda.time.Chronology)copticChronology13);
    org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long)330, (org.joda.time.Chronology)copticChronology13);
    int i19 = localTime18.getMillisOfSecond();
    org.joda.time.LocalTime.Property property20 = localTime18.secondOfMinute();
    org.joda.time.LocalTime localTime21 = property20.withMinimumValue();
    org.joda.time.LocalTime.Property property22 = localTime21.hourOfDay();
    org.joda.time.LocalTime localTime23 = property22.withMinimumValue();
    org.joda.time.LocalTime localTime24 = property22.roundCeilingCopy();
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.LocalTime localTime26 = property22.setCopy("EthiopicChronology[UTC]");
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableDateTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 330);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localTime21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localTime23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localTime24);

  }

  @Test
  public void test356() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test356"); }

    org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long)'#');
    org.joda.time.ReadableInstant readableInstant2 = null;
    org.joda.time.ReadableDuration readableDuration3 = null;
    org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(readableInstant2, readableDuration3);
    org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstance();
    mutablePeriod4.setPeriod((long)100, (org.joda.time.Chronology)gregorianChronology6);
    mutablePeriod4.addMillis((int)(byte)1);
    int i10 = mutablePeriod4.getMonths();
    org.joda.time.DurationFieldType[] durationFieldType_array11 = mutablePeriod4.getFieldTypes();
    org.joda.time.DateTime dateTime12 = dateTime1.plus((org.joda.time.ReadablePeriod)mutablePeriod4);
    org.joda.time.ReadableInstant readableInstant13 = null;
    org.joda.time.ReadableDuration readableDuration14 = null;
    org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(readableInstant13, readableDuration14);
    org.joda.time.chrono.GregorianChronology gregorianChronology17 = org.joda.time.chrono.GregorianChronology.getInstance();
    mutablePeriod15.setPeriod((long)100, (org.joda.time.Chronology)gregorianChronology17);
    int i19 = mutablePeriod15.getWeeks();
    mutablePeriod15.addDays(10080);
    org.joda.time.DateTime dateTime22 = dateTime1.plus((org.joda.time.ReadablePeriod)mutablePeriod15);
    mutablePeriod15.setMillis(6);
    java.lang.Object obj25 = mutablePeriod15.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationFieldType_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj25);

  }

  @Test
  public void test357() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test357"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
    org.joda.time.Duration duration4 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.DateMidnight dateMidnight5 = dateMidnight1.minus((org.joda.time.ReadableDuration)duration4);
    org.joda.time.Duration duration7 = org.joda.time.Duration.standardHours((long)1);
    org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant)dateMidnight5, (org.joda.time.ReadableDuration)duration7);
    org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long)(short)10);
    org.joda.time.LocalDateTime.Property property11 = localDateTime10.hourOfDay();
    org.joda.time.LocalDateTime.Property property12 = localDateTime10.secondOfMinute();
    org.joda.time.LocalDateTime localDateTime14 = property12.addToCopy(1496721418392L);
    int i15 = localDateTime14.getDayOfYear();
    org.joda.time.DateMidnight dateMidnight16 = dateMidnight5.withFields((org.joda.time.ReadablePartial)localDateTime14);
    org.joda.time.Chronology chronology18 = null;
    java.util.Locale locale19 = null;
    org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long)'4', chronology18, locale19, (java.lang.Integer)1, (int)'a');
    dateTimeParserBucket22.setOffset((java.lang.Integer)(-1));
    org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
    dateTimeParserBucket22.setZone(dateTimeZone25);
    org.joda.time.LocalDateTime localDateTime27 = null;
    boolean b28 = dateTimeZone25.isLocalDateTimeGap(localDateTime27);
    org.joda.time.chrono.IslamicChronology islamicChronology29 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone25);
    org.joda.time.DateTime dateTime30 = localDateTime14.toDateTime(dateTimeZone25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(duration7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime30);

  }

  @Test
  public void test358() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test358"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
    org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.plusDays((int)(short)100);
    org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay3.withMonthOfYear(10);
    org.joda.time.Interval interval6 = yearMonthDay3.toInterval();
    org.joda.time.ReadableInstant readableInstant7 = null;
    org.joda.time.ReadableDuration readableDuration8 = null;
    org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(readableInstant7, readableDuration8);
    org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = org.joda.time.format.DateTimeFormat.fullDate();
    org.joda.time.Chronology chronology11 = null;
    org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
    int i15 = dateTimeFormatter10.parseInto((org.joda.time.ReadWritableInstant)mutableDateTime12, "secondOfMinute", 100);
    org.joda.time.DateTimeZone dateTimeZone16 = null;
    org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(dateTimeZone16);
    long long18 = dateMidnight17.getMillis();
    org.joda.time.DateMidnight dateMidnight20 = dateMidnight17.plusDays(24);
    mutablePeriod9.setPeriod((org.joda.time.ReadableInstant)mutableDateTime12, (org.joda.time.ReadableInstant)dateMidnight20);
    boolean b22 = interval6.contains((org.joda.time.ReadableInstant)dateMidnight20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonthDay3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonthDay5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(interval6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == (-101));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long18 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);

  }

  @Test
  public void test359() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test359"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(dateTimeZone0);
    org.joda.time.DateTimeFieldType[] dateTimeFieldType_array2 = timeOfDay1.getFieldTypes();
    org.joda.time.TimeOfDay timeOfDay4 = timeOfDay1.minusMinutes(1969);
    int i5 = timeOfDay1.getSecondOfMinute();
    org.joda.time.TimeOfDay timeOfDay7 = timeOfDay1.withMinuteOfHour(23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay7);

  }

  @Test
  public void test360() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test360"); }

    org.joda.time.chrono.JulianChronology julianChronology0 = org.joda.time.chrono.JulianChronology.getInstance();
    org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((org.joda.time.Chronology)julianChronology0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(julianChronology0);

  }

  @Test
  public void test361() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test361"); }

    org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long)10);
    java.lang.String str2 = localDate1.toString();
    org.joda.time.PeriodType periodType5 = null;
    org.joda.time.Period period6 = new org.joda.time.Period((long)(byte)1, (long)24, periodType5);
    org.joda.time.LocalDate localDate8 = localDate1.withPeriodAdded((org.joda.time.ReadablePeriod)period6, 345);
    org.joda.time.Period period9 = period6.toPeriod();
    org.joda.time.Period period11 = period6.withDays(535);
    org.joda.time.Duration duration12 = period11.toStandardDuration();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "1970-01-01"+ "'", str2.equals("1970-01-01"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(duration12);

  }

  @Test
  public void test362() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test362"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
    org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusMonths(0);
    org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay3.plusYears(1000);
    org.joda.time.Interval interval6 = yearMonthDay5.toInterval();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonthDay3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonthDay5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(interval6);

  }

  @Test
  public void test363() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test363"); }

    org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendMinuteOfHour(345);
    org.joda.time.Chronology chronology4 = null;
    java.util.Locale locale5 = null;
    org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket((long)'4', chronology4, locale5, (java.lang.Integer)1, (int)'a');
    dateTimeParserBucket8.setOffset((java.lang.Integer)(-1));
    org.joda.time.Chronology chronology11 = null;
    org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
    java.util.GregorianCalendar gregorianCalendar13 = mutableDateTime12.toGregorianCalendar();
    mutableDateTime12.addMinutes((int)(byte)1);
    org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone16);
    int i19 = dateTimeZone16.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone16);
    org.joda.time.DateTime dateTime22 = dateTime20.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property23 = dateTime20.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType24 = property23.getFieldType();
    mutableDateTime12.set(dateTimeFieldType24, (int)(byte)10);
    dateTimeParserBucket8.saveField(dateTimeFieldType24, 10080);
    org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology30 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone29);
    int i32 = dateTimeZone29.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone29);
    org.joda.time.DateTime dateTime35 = dateTime33.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property36 = dateTime33.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType37 = property36.getFieldType();
    java.util.Locale locale39 = null;
    dateTimeParserBucket8.saveField(dateTimeFieldType37, "2017-06-06T03:56:46.030", locale39);
    org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder43 = dateTimeFormatterBuilder2.appendSignedDecimal(dateTimeFieldType37, 429, 345);
    org.joda.time.DateTimeComparator dateTimeComparator44 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianCalendar13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatterBuilder43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator44);

  }

  @Test
  public void test364() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test364"); }

    org.joda.time.chrono.GregorianChronology gregorianChronology3 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period4 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology3);
    org.joda.time.DateTimeZone dateTimeZone5 = gregorianChronology3.getZone();
    org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long)1, dateTimeZone5);
    org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone5);
    org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone8 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone5);
    org.joda.time.chrono.IslamicChronology islamicChronology9 = org.joda.time.chrono.IslamicChronology.getInstance((org.joda.time.DateTimeZone)cachedDateTimeZone8);
    org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromMillisOfDay(1L, (org.joda.time.Chronology)islamicChronology9);
    org.joda.time.ReadableInstant readableInstant11 = null;
    org.joda.time.ReadableDuration readableDuration12 = null;
    org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(readableInstant11, readableDuration12);
    org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = org.joda.time.format.DateTimeFormat.fullDate();
    org.joda.time.Chronology chronology15 = null;
    org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
    int i19 = dateTimeFormatter14.parseInto((org.joda.time.ReadWritableInstant)mutableDateTime16, "secondOfMinute", 100);
    org.joda.time.DateTimeZone dateTimeZone20 = null;
    org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(dateTimeZone20);
    long long22 = dateMidnight21.getMillis();
    org.joda.time.DateMidnight dateMidnight24 = dateMidnight21.plusDays(24);
    mutablePeriod13.setPeriod((org.joda.time.ReadableInstant)mutableDateTime16, (org.joda.time.ReadableInstant)dateMidnight24);
    org.joda.time.DateTimeZone dateTimeZone27 = null;
    org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone27);
    java.lang.String str29 = copticChronology28.toString();
    mutablePeriod13.setPeriod(0L, (org.joda.time.Chronology)copticChronology28);
    org.joda.time.Period period31 = mutablePeriod13.toPeriod();
    org.joda.time.Period period33 = period31.minusWeeks(770);
    org.joda.time.Period period35 = period33.withHours((int)(short)-1);
    org.joda.time.Period period37 = period35.withMonths((int)(byte)0);
    boolean b38 = islamicChronology9.equals((java.lang.Object)period35);
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType leapYearPatternType39 = islamicChronology9.getLeapYearPatternType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cachedDateTimeZone8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == (-101));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long22 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "CopticChronology[UTC]"+ "'", str29.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(leapYearPatternType39);

  }

  @Test
  public void test365() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test365"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
    org.joda.time.DateMidnight.Property property2 = dateMidnight1.centuryOfEra();
    org.joda.time.DateMidnight dateMidnight4 = property2.addWrapFieldToCopy((int)(short)100);
    org.joda.time.Interval interval5 = property2.toInterval();
    org.joda.time.DateMidnight dateMidnight6 = property2.roundCeilingCopy();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(interval5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight6);

  }

  @Test
  public void test366() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test366"); }

    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.Months months1 = org.joda.time.Months.parseMonths("14");
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test367() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test367"); }

    org.joda.time.Chronology chronology1 = null;
    org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
    org.joda.time.PeriodType periodType3 = null;
    org.joda.time.chrono.GregorianChronology gregorianChronology4 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((java.lang.Object)chronology1, periodType3, (org.joda.time.Chronology)gregorianChronology4);
    org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long)345, chronology1);
    org.joda.time.DateTimeZone dateTimeZone7 = null;
    org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
    org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths(0);
    org.joda.time.Chronology chronology12 = null;
    java.util.Locale locale13 = null;
    org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long)'4', chronology12, locale13, (java.lang.Integer)1, (int)'a');
    dateTimeParserBucket16.setOffset((java.lang.Integer)(-1));
    org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
    dateTimeParserBucket16.setZone(dateTimeZone19);
    org.joda.time.DateMidnight dateMidnight21 = yearMonthDay8.toDateMidnight(dateTimeZone19);
    org.joda.time.DateMidnight dateMidnight22 = localDate6.toDateMidnight(dateTimeZone19);
    org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.plusMonths(157);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonthDay10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight24);

  }

  @Test
  public void test368() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test368"); }

    org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long)(byte)-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(duration1);

  }

  @Test
  public void test369() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test369"); }

    org.joda.time.Duration duration2 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone3);
    org.joda.time.DateMidnight.Property property5 = dateMidnight4.centuryOfEra();
    org.joda.time.DateMidnight.Property property6 = dateMidnight4.dayOfYear();
    org.joda.time.DateMidnight dateMidnight7 = property6.roundHalfFloorCopy();
    org.joda.time.PeriodType periodType8 = null;
    org.joda.time.Period period9 = duration2.toPeriodFrom((org.joda.time.ReadableInstant)dateMidnight7, periodType8);
    org.joda.time.DateMidnight.Property property10 = dateMidnight7.year();
    org.joda.time.DateMidnight dateMidnight11 = property10.roundFloorCopy();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight11);

  }

  @Test
  public void test370() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test370"); }

    org.joda.time.DateTimeZone dateTimeZone1 = null;
    org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone1);
    org.joda.time.DurationField durationField3 = copticChronology2.days();
    java.util.Locale locale4 = null;
    org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long)8, (org.joda.time.Chronology)copticChronology2, locale4);
    org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period11 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology10);
    org.joda.time.DateTimeZone dateTimeZone12 = gregorianChronology10.getZone();
    org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((int)(byte)1, 6, 8, (org.joda.time.Chronology)gregorianChronology10);
    org.joda.time.DateTimeField dateTimeField14 = gregorianChronology10.dayOfWeek();
    org.joda.time.field.SkipDateTimeField skipDateTimeField15 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)copticChronology2, dateTimeField14);
    java.util.Locale locale17 = null;
    java.lang.String str18 = skipDateTimeField15.getAsShortText(53L, locale17);
    int i20 = skipDateTimeField15.getLeapAmount((long)2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Thu"+ "'", str18.equals("Thu"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);

  }

  @Test
  public void test371() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test371"); }

    org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateHourMinuteSecondFraction();
    org.joda.time.Chronology chronology1 = dateTimeFormatter0.getChronology();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(chronology1);

  }

  @Test
  public void test372() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test372"); }

    org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendMinuteOfHour(345);
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(dateTimeZone3);
    org.joda.time.DateTimeFieldType[] dateTimeFieldType_array5 = timeOfDay4.getFieldTypes();
    int i6 = timeOfDay4.getMillisOfSecond();
    org.joda.time.TimeOfDay timeOfDay8 = timeOfDay4.plusSeconds((int)(byte)1);
    int i9 = timeOfDay8.getSecondOfMinute();
    org.joda.time.Chronology chronology10 = null;
    org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
    java.util.GregorianCalendar gregorianCalendar12 = mutableDateTime11.toGregorianCalendar();
    org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromCalendarFields((java.util.Calendar)gregorianCalendar12);
    org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = org.joda.time.format.ISODateTimeFormat.tTimeNoMillis();
    java.lang.String str15 = localTime13.toString(dateTimeFormatter14);
    boolean b16 = timeOfDay8.isBefore((org.joda.time.ReadablePartial)localTime13);
    org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone17);
    int i20 = dateTimeZone17.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone17);
    org.joda.time.DateTime dateTime23 = dateTime21.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property24 = dateTime21.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType25 = property24.getFieldType();
    org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone26);
    int i29 = dateTimeZone26.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone26);
    org.joda.time.DateTime dateTime32 = dateTime30.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property33 = dateTime30.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType34 = property33.getFieldType();
    org.joda.time.DateTimeComparator dateTimeComparator35 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType25, dateTimeFieldType34);
    org.joda.time.DateTimeZone dateTimeZone36 = null;
    org.joda.time.TimeOfDay timeOfDay37 = new org.joda.time.TimeOfDay(dateTimeZone36);
    org.joda.time.TimeOfDay timeOfDay39 = timeOfDay37.minusSeconds((int)(short)0);
    org.joda.time.TimeOfDay.Property property40 = timeOfDay37.secondOfMinute();
    org.joda.time.TimeOfDay.Property property41 = timeOfDay37.millisOfSecond();
    java.util.Locale locale42 = null;
    int i43 = property41.getMaximumTextLength(locale42);
    org.joda.time.DateTimeFieldType dateTimeFieldType44 = property41.getFieldType();
    org.joda.time.DateTimeComparator dateTimeComparator45 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType34, dateTimeFieldType44);
    boolean b46 = localTime13.isSupported(dateTimeFieldType34);
    org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder49 = dateTimeFormatterBuilder2.appendSignedDecimal(dateTimeFieldType34, 9, 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianCalendar12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "T00:00:00"+ "'", str15.equals("T00:00:00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatterBuilder49);

  }

  @Test
  public void test373() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test373"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
    java.lang.String str2 = copticChronology1.toString();
    org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
    org.joda.time.DateTimeZone dateTimeZone5 = null;
    org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone5);
    java.lang.String str7 = copticChronology6.toString();
    org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(0L, (org.joda.time.Chronology)copticChronology6);
    org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone9);
    int i12 = dateTimeZone9.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone9);
    org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property16 = dateTime13.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType17 = property16.getFieldType();
    org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone18);
    int i21 = dateTimeZone18.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone18);
    org.joda.time.DateTime dateTime24 = dateTime22.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property25 = dateTime22.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType26 = property25.getFieldType();
    org.joda.time.DateTimeComparator dateTimeComparator27 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType17, dateTimeFieldType26);
    int i28 = timeOfDay8.indexOf(dateTimeFieldType26);
    org.joda.time.field.OffsetDateTimeField offsetDateTimeField32 = new org.joda.time.field.OffsetDateTimeField(dateTimeField3, dateTimeFieldType26, 10, 1000, 628);
    java.lang.String str33 = offsetDateTimeField32.toString();
    org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField34 = new org.joda.time.field.DelegatedDateTimeField((org.joda.time.DateTimeField)offsetDateTimeField32);
    org.joda.time.ReadableInstant readableInstant35 = null;
    org.joda.time.ReadableDuration readableDuration36 = null;
    org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(readableInstant35, readableDuration36);
    org.joda.time.chrono.GregorianChronology gregorianChronology39 = org.joda.time.chrono.GregorianChronology.getInstance();
    mutablePeriod37.setPeriod((long)100, (org.joda.time.Chronology)gregorianChronology39);
    mutablePeriod37.addMillis((int)(byte)1);
    int i43 = mutablePeriod37.getMonths();
    org.joda.time.DurationFieldType[] durationFieldType_array44 = mutablePeriod37.getFieldTypes();
    org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.forFields(durationFieldType_array44);
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((java.lang.Object)offsetDateTimeField32, periodType45);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "CopticChronology[UTC]"+ "'", str2.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "CopticChronology[UTC]"+ "'", str7.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "DateTimeField[millisOfDay]"+ "'", str33.equals("DateTimeField[millisOfDay]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationFieldType_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType45);

  }

  @Test
  public void test374() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test374"); }

    org.joda.time.ReadableInstant readableInstant0 = null;
    org.joda.time.ReadableDuration readableDuration1 = null;
    org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
    org.joda.time.chrono.GregorianChronology gregorianChronology4 = org.joda.time.chrono.GregorianChronology.getInstance();
    mutablePeriod2.setPeriod((long)100, (org.joda.time.Chronology)gregorianChronology4);
    mutablePeriod2.addMillis((int)(byte)1);
    org.joda.time.DateTimeZone dateTimeZone10 = null;
    org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone10);
    java.lang.String str12 = copticChronology11.toString();
    org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone13);
    org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay(dateTimeZone13);
    org.joda.time.Chronology chronology16 = copticChronology11.withZone(dateTimeZone13);
    long long20 = copticChronology11.add((long)26, 20L, 17);
    mutablePeriod2.setPeriod((long)(-97), 1496721400817L, (org.joda.time.Chronology)copticChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "CopticChronology[UTC]"+ "'", str12.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long20 == 366L);

  }

  @Test
  public void test375() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test375"); }

    org.joda.time.chrono.BuddhistChronology buddhistChronology0 = org.joda.time.chrono.BuddhistChronology.getInstanceUTC();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(buddhistChronology0);

  }

  @Test
  public void test376() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test376"); }

    org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
    org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusSeconds(0);
    org.joda.time.LocalDateTime.Property property3 = localDateTime0.dayOfMonth();
    org.joda.time.LocalDateTime localDateTime5 = localDateTime0.withMillisOfSecond(365);
    int i6 = localDateTime0.getHourOfDay();
    org.joda.time.LocalDateTime localDateTime8 = localDateTime0.withYear((-101));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime8);

  }

  @Test
  public void test377() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test377"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
    org.joda.time.DurationField durationField2 = copticChronology1.days();
    org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology)copticChronology1);
    org.joda.time.DateTimeField dateTimeField4 = copticChronology1.millisOfSecond();
    org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((org.joda.time.Chronology)copticChronology1);
    org.joda.time.DateTime.Property property6 = dateTime5.era();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableDateTime3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property6);

  }

  @Test
  public void test378() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test378"); }

    org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone0);
    int i3 = dateTimeZone0.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone0);
    org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks((int)'4');
    org.joda.time.DateTime dateTime8 = dateTime4.minusMillis(14);
    org.joda.time.DateTime dateTime10 = dateTime4.withDayOfYear(4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime10);

  }

  @Test
  public void test379() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test379"); }

    org.joda.time.Days days0 = org.joda.time.Days.FIVE;
    org.joda.time.Seconds seconds1 = days0.toStandardSeconds();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(days0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(seconds1);

  }

  @Test
  public void test380() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test380"); }

    org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long)54);

  }

  @Test
  public void test381() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test381"); }

    org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long)10);
    java.lang.String str2 = localDate1.toString();
    org.joda.time.LocalDate localDate4 = localDate1.withDayOfMonth(3);
    org.joda.time.DateTimeZone dateTimeZone5 = null;
    org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay(dateTimeZone5);
    org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusSeconds((int)(short)0);
    org.joda.time.TimeOfDay.Property property9 = timeOfDay6.secondOfMinute();
    org.joda.time.TimeOfDay.Property property10 = timeOfDay6.millisOfSecond();
    java.util.Locale locale11 = null;
    int i12 = property10.getMaximumTextLength(locale11);
    org.joda.time.DateTimeFieldType dateTimeFieldType13 = property10.getFieldType();
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.LocalDate localDate15 = localDate4.withField(dateTimeFieldType13, 157);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "1970-01-01"+ "'", str2.equals("1970-01-01"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType13);

  }

  @Test
  public void test382() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test382"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(dateTimeZone0);
    org.joda.time.DateTimeFieldType[] dateTimeFieldType_array2 = timeOfDay1.getFieldTypes();
    org.joda.time.TimeOfDay timeOfDay4 = timeOfDay1.minusMinutes(1969);
    int i5 = timeOfDay1.getSecondOfMinute();
    org.joda.time.TimeOfDay timeOfDay7 = timeOfDay1.plusHours(86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay7);

  }

  @Test
  public void test383() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test383"); }

    org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long)10);
    org.joda.time.LocalDate.Property property2 = localDate1.weekyear();
    org.joda.time.LocalDate localDate3 = property2.roundHalfCeilingCopy();
    org.joda.time.LocalDate localDate4 = property2.roundHalfCeilingCopy();
    org.joda.time.LocalDate localDate5 = property2.getLocalDate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate5);

  }

  @Test
  public void test384() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test384"); }

    org.joda.time.ReadableInterval readableInterval0 = null;
    org.joda.time.Hours hours1 = org.joda.time.Hours.hoursIn(readableInterval0);
    org.joda.time.Period period6 = new org.joda.time.Period((int)(short)0, (int)'4', 1, 0);
    org.joda.time.PeriodType periodType7 = null;
    org.joda.time.Period period8 = period6.withPeriodType(periodType7);
    org.joda.time.Hours hours9 = period6.toStandardHours();
    org.joda.time.Hours hours10 = hours9.negated();
    boolean b11 = hours1.isGreaterThan(hours10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hours1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hours9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hours10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test385() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test385"); }

    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((java.lang.Object)1.0d);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test386() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test386"); }

    org.joda.time.Chronology chronology0 = null;
    org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
    org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.hourOfDay();
    org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.year();
    mutableDateTime1.setMillisOfSecond(0);
    org.joda.time.Chronology chronology7 = null;
    org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
    org.joda.time.PeriodType periodType9 = null;
    org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((java.lang.Object)chronology7, periodType9, (org.joda.time.Chronology)gregorianChronology10);
    org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((-1L), chronology7);
    org.joda.time.chrono.GregorianChronology gregorianChronology15 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period16 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology15);
    org.joda.time.DateTimeZone dateTimeZone17 = gregorianChronology15.getZone();
    org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long)1, dateTimeZone17);
    org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone17);
    org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone20 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone17);
    org.joda.time.DateTimeZone dateTimeZone21 = cachedDateTimeZone20.getUncachedZone();
    org.joda.time.DateTime dateTime22 = localTime12.toDateTimeToday((org.joda.time.DateTimeZone)cachedDateTimeZone20);
    mutableDateTime1.setZoneRetainFields((org.joda.time.DateTimeZone)cachedDateTimeZone20);
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstance((org.joda.time.DateTimeZone)cachedDateTimeZone20, (int)(byte)10);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cachedDateTimeZone20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime22);

  }

  @Test
  public void test387() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test387"); }

    org.joda.time.Years years1 = org.joda.time.Years.years(0);
    java.lang.String str2 = years1.toString();
    org.joda.time.Years years4 = years1.minus(17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(years1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "P0Y"+ "'", str2.equals("P0Y"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(years4);

  }

  @Test
  public void test388() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test388"); }

    org.joda.time.Hours hours0 = org.joda.time.Hours.FIVE;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hours0);

  }

  @Test
  public void test389() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test389"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
    org.joda.time.DateMidnight dateMidnight2 = yearMonthDay1.toDateMidnight();
    org.joda.time.YearMonthDay.Property property3 = yearMonthDay1.dayOfMonth();
    org.joda.time.DateTimeFieldType dateTimeFieldType4 = property3.getFieldType();
    org.joda.time.YearMonthDay yearMonthDay6 = property3.addWrapFieldToCopy(0);
    org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay6.plusMonths(429);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonthDay6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonthDay8);

  }

  @Test
  public void test390() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test390"); }

    org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone0);
    int i3 = dateTimeZone0.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone0);
    org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property7 = dateTime4.millisOfDay();
    org.joda.time.Interval interval8 = property7.toInterval();
    org.joda.time.DateTime dateTime9 = property7.roundCeilingCopy();
    org.joda.time.DateTime dateTime10 = property7.roundHalfEvenCopy();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(interval8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime10);

  }

  @Test
  public void test391() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test391"); }

    org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
    org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.fullDate();
    org.joda.time.Chronology chronology2 = null;
    org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(chronology2);
    int i6 = dateTimeFormatter1.parseInto((org.joda.time.ReadWritableInstant)mutableDateTime3, "secondOfMinute", 100);
    org.joda.time.DateTimeZone dateTimeZone7 = null;
    org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay(dateTimeZone7);
    org.joda.time.Seconds seconds9 = org.joda.time.Seconds.TWO;
    org.joda.time.DurationFieldType durationFieldType10 = seconds9.getFieldType();
    org.joda.time.TimeOfDay timeOfDay12 = timeOfDay8.withFieldAdded(durationFieldType10, 1000);
    mutableDateTime3.add(durationFieldType10, (int)'#');
    org.joda.time.LocalTime localTime16 = localTime0.withFieldAdded(durationFieldType10, 41);
    org.joda.time.ReadablePeriod readablePeriod17 = null;
    org.joda.time.LocalTime localTime18 = localTime16.plus(readablePeriod17);
    org.joda.time.LocalTime.Property property19 = localTime18.millisOfSecond();
    org.joda.time.LocalTime localTime21 = localTime18.withMinuteOfHour(37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localTime0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == (-101));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(seconds9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationFieldType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localTime18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localTime21);

  }

  @Test
  public void test392() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test392"); }

    java.io.Writer writer0 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.format.FormatUtils.writeUnpaddedInteger(writer0, 0);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test393() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test393"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
    org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.plusDays((int)(short)100);
    int i4 = yearMonthDay3.getDayOfMonth();
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay3.withDayOfMonth(330);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonthDay3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 11);

  }

  @Test
  public void test394() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test394"); }

    org.joda.time.Months months0 = org.joda.time.Months.FIVE;
    org.joda.time.Months months2 = months0.plus((int)(short)100);
    org.joda.time.Months months3 = org.joda.time.Months.FOUR;
    org.joda.time.Months months4 = org.joda.time.Months.FIVE;
    org.joda.time.Months months6 = months4.plus(330);
    org.joda.time.Months months7 = months3.plus(months4);
    org.joda.time.Months months8 = months0.minus(months7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(months0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(months2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(months3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(months4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(months6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(months7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(months8);

  }

  @Test
  public void test395() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test395"); }

    org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
    org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(dateTimeZone1);
    org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(3155760000000L, dateTimeZone1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology2);

  }

  @Test
  public void test396() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test396"); }

    org.joda.time.Years years1 = org.joda.time.Years.years(0);
    org.joda.time.Years years3 = years1.minus((int)(byte)-1);
    org.joda.time.Years years4 = years3.negated();
    org.joda.time.Chronology chronology5 = null;
    org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
    org.joda.time.Instant instant7 = mutableDateTime6.toInstant();
    mutableDateTime6.addWeekyears((int)(short)-1);
    org.joda.time.DateTimeZone dateTimeZone10 = null;
    org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(dateTimeZone10);
    long long12 = dateMidnight11.getMillis();
    org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.plusDays(24);
    org.joda.time.Minutes minutes15 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant)mutableDateTime6, (org.joda.time.ReadableInstant)dateMidnight14);
    org.joda.time.Minutes minutes16 = org.joda.time.Minutes.THREE;
    org.joda.time.Minutes minutes17 = minutes15.plus(minutes16);
    // The following exception was thrown during execution in test generation
    try {
    int i18 = years4.compareTo((org.joda.time.base.BaseSingleFieldPeriod)minutes17);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(years1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(years3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(years4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long12 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(minutes15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(minutes16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(minutes17);

  }

  @Test
  public void test397() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test397"); }

    org.joda.time.Chronology chronology0 = null;
    org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
    org.joda.time.Instant instant2 = mutableDateTime1.toInstant();
    org.joda.time.ReadableInstant readableInstant3 = null;
    boolean b4 = mutableDateTime1.isEqual(readableInstant3);
    org.joda.time.DateTime dateTime5 = mutableDateTime1.toDateTime();
    org.joda.time.DateTime.Property property6 = dateTime5.yearOfCentury();
    org.joda.time.DateTime dateTime8 = property6.addToCopy((long)365);
    org.joda.time.DateTime dateTime9 = property6.withMinimumValue();
    int i10 = dateTime9.getYear();
    org.joda.time.DateTime.Property property11 = dateTime9.millisOfSecond();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1900);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property11);

  }

  @Test
  public void test398() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test398"); }

    org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone0);
    org.joda.time.Chronology chronology2 = null;
    org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(chronology2);
    org.joda.time.Instant instant4 = mutableDateTime3.toInstant();
    mutableDateTime3.addWeekyears((int)(short)-1);
    org.joda.time.DateTimeZone dateTimeZone7 = null;
    org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(dateTimeZone7);
    long long9 = dateMidnight8.getMillis();
    org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.plusDays(24);
    org.joda.time.Minutes minutes12 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant)mutableDateTime3, (org.joda.time.ReadableInstant)dateMidnight11);
    int i13 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant)dateMidnight11);
    long long16 = dateTimeZone0.convertLocalToUTC((long)9, true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long9 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(minutes12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 9L);

  }

  @Test
  public void test399() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test399"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(dateTimeZone0);
    org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusSeconds((int)(short)0);
    org.joda.time.TimeOfDay.Property property4 = timeOfDay1.secondOfMinute();
    org.joda.time.TimeOfDay.Property property5 = timeOfDay1.millisOfSecond();
    org.joda.time.ReadablePeriod readablePeriod6 = null;
    org.joda.time.TimeOfDay timeOfDay8 = timeOfDay1.withPeriodAdded(readablePeriod6, 330);
    org.joda.time.LocalTime localTime9 = timeOfDay1.toLocalTime();
    org.joda.time.LocalTime localTime11 = localTime9.plusMinutes((-97));
    int i12 = localTime11.getMillisOfSecond();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 7);

  }

  @Test
  public void test400() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test400"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
    java.lang.String str2 = copticChronology1.toString();
    org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
    org.joda.time.DateTimeZone dateTimeZone5 = null;
    org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone5);
    java.lang.String str7 = copticChronology6.toString();
    org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(0L, (org.joda.time.Chronology)copticChronology6);
    org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone9);
    int i12 = dateTimeZone9.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone9);
    org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property16 = dateTime13.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType17 = property16.getFieldType();
    org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone18);
    int i21 = dateTimeZone18.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone18);
    org.joda.time.DateTime dateTime24 = dateTime22.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property25 = dateTime22.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType26 = property25.getFieldType();
    org.joda.time.DateTimeComparator dateTimeComparator27 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType17, dateTimeFieldType26);
    int i28 = timeOfDay8.indexOf(dateTimeFieldType26);
    org.joda.time.field.OffsetDateTimeField offsetDateTimeField32 = new org.joda.time.field.OffsetDateTimeField(dateTimeField3, dateTimeFieldType26, 10, 1000, 628);
    java.lang.String str33 = offsetDateTimeField32.toString();
    int i34 = offsetDateTimeField32.getMinimumValue();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "CopticChronology[UTC]"+ "'", str2.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "CopticChronology[UTC]"+ "'", str7.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "DateTimeField[millisOfDay]"+ "'", str33.equals("DateTimeField[millisOfDay]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 1000);

  }

  @Test
  public void test401() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test401"); }

    org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone0);
    int i3 = dateTimeZone0.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone0);
    org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property7 = dateTime4.millisOfDay();
    boolean b8 = dateTime4.isBeforeNow();
    org.joda.time.DateTime dateTime10 = dateTime4.plusMonths(2);
    org.joda.time.DateTime dateTime11 = dateTime4.withEarlierOffsetAtOverlap();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime11);

  }

  @Test
  public void test402() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test402"); }

    org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekDateTimeNoMillis();
    boolean b1 = dateTimeFormatter0.isPrinter();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);

  }

  @Test
  public void test403() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test403"); }

    org.joda.time.Period period4 = new org.joda.time.Period((int)(short)0, (int)'4', 1, 0);
    org.joda.time.PeriodType periodType5 = null;
    org.joda.time.Period period6 = period4.withPeriodType(periodType5);
    org.joda.time.Period period8 = period6.minusHours(10);
    org.joda.time.Period period9 = period8.toPeriod();
    org.joda.time.Duration duration10 = period9.toStandardDuration();
    org.joda.time.Chronology chronology11 = null;
    org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
    org.joda.time.Instant instant13 = mutableDateTime12.toInstant();
    org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.millis();
    org.joda.time.PeriodType periodType15 = periodType14.withYearsRemoved();
    org.joda.time.Period period16 = duration10.toPeriodTo((org.joda.time.ReadableInstant)instant13, periodType14);
    org.joda.time.DateTime dateTime17 = instant13.toDateTimeISO();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(duration10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime17);

  }

  @Test
  public void test404() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test404"); }

    org.joda.time.Chronology chronology0 = null;
    org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
    org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.hourOfDay();
    mutableDateTime1.addWeeks(10080);
    // The following exception was thrown during execution in test generation
    try {
    mutableDateTime1.setTime(9, 2017, 3600000, 953);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property2);

  }

  @Test
  public void test405() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test405"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
    org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth((org.joda.time.Chronology)copticChronology1);
    org.joda.time.YearMonth yearMonth4 = yearMonth2.minusYears((int)'a');
    org.joda.time.YearMonth yearMonth6 = yearMonth2.minusYears((-1));
    org.joda.time.YearMonth yearMonth8 = yearMonth6.withYear((int)' ');
    org.joda.time.YearMonth.Property property9 = yearMonth8.year();
    org.joda.time.YearMonth yearMonth11 = property9.addToCopy(86400);
    org.joda.time.YearMonth yearMonth13 = yearMonth11.minusMonths((-101));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonth4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonth6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonth8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonth11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonth13);

  }

  @Test
  public void test406() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test406"); }

    org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long)10);
    java.lang.String str2 = localDate1.toString();
    org.joda.time.PeriodType periodType5 = null;
    org.joda.time.Period period6 = new org.joda.time.Period((long)(byte)1, (long)24, periodType5);
    org.joda.time.LocalDate localDate8 = localDate1.withPeriodAdded((org.joda.time.ReadablePeriod)period6, 345);
    org.joda.time.LocalDate localDate10 = localDate8.withWeekyear(10);
    org.joda.time.LocalDate localDate12 = localDate8.plusDays((int)(short)1);
    org.joda.time.Period period17 = new org.joda.time.Period((int)(short)0, (int)'4', 1, 0);
    org.joda.time.PeriodType periodType18 = null;
    org.joda.time.Period period19 = period17.withPeriodType(periodType18);
    org.joda.time.Period period21 = period19.minusHours(10);
    org.joda.time.Period period22 = period21.toPeriod();
    org.joda.time.Duration duration23 = period22.toStandardDuration();
    org.joda.time.Chronology chronology24 = null;
    org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
    org.joda.time.Instant instant26 = mutableDateTime25.toInstant();
    org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.millis();
    org.joda.time.PeriodType periodType28 = periodType27.withYearsRemoved();
    org.joda.time.Period period29 = duration23.toPeriodTo((org.joda.time.ReadableInstant)instant26, periodType27);
    org.joda.time.LocalDate localDate30 = localDate8.plus((org.joda.time.ReadablePeriod)period29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "1970-01-01"+ "'", str2.equals("1970-01-01"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(duration23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate30);

  }

  @Test
  public void test407() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test407"); }

    org.joda.time.chrono.GregorianChronology gregorianChronology2 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period3 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology2);
    org.joda.time.DateTimeZone dateTimeZone4 = gregorianChronology2.getZone();
    org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long)1, dateTimeZone4);
    org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone4);
    org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone7 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone4);
    int i9 = cachedDateTimeZone7.getOffset((long)(byte)100);
    org.joda.time.DateTimeZone dateTimeZone10 = cachedDateTimeZone7.getUncachedZone();
    int i12 = cachedDateTimeZone7.getOffset(20L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cachedDateTimeZone7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);

  }

  @Test
  public void test408() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test408"); }

    org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(0, 6, 999, (int)'#');
    mutablePeriod4.addYears(100);
    java.lang.Object obj7 = mutablePeriod4.clone();
    java.lang.String str8 = mutablePeriod4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "P100YT6M999.035S"+ "'", str8.equals("P100YT6M999.035S"));

  }

  @Test
  public void test409() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test409"); }

    org.joda.time.Chronology chronology0 = null;
    org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
    org.joda.time.Instant instant2 = mutableDateTime1.toInstant();
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone3);
    org.joda.time.DateMidnight.Property property5 = dateMidnight4.centuryOfEra();
    org.joda.time.DateMidnight.Property property6 = dateMidnight4.dayOfYear();
    org.joda.time.Minutes minutes7 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant)instant2, (org.joda.time.ReadableInstant)dateMidnight4);
    org.joda.time.Instant instant9 = instant2.plus((long)(short)10);
    long long10 = instant9.getMillis();
    org.joda.time.Instant instant12 = instant9.minus((long)1000);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(minutes7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long10 == 17L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant12);

  }

  @Test
  public void test410() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test410"); }

    org.joda.time.chrono.GregorianChronology gregorianChronology2 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period3 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology2);
    org.joda.time.DateTimeZone dateTimeZone4 = gregorianChronology2.getZone();
    org.joda.time.DateTimeZone dateTimeZone5 = gregorianChronology2.getZone();
    org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((java.lang.Object)1496721418392L, dateTimeZone5);
    org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now(dateTimeZone5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate7);

  }

  @Test
  public void test411() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test411"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(dateTimeZone0);
    org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusSeconds((int)(short)0);
    org.joda.time.TimeOfDay.Property property4 = timeOfDay1.secondOfMinute();
    org.joda.time.TimeOfDay.Property property5 = timeOfDay1.millisOfSecond();
    org.joda.time.ReadablePeriod readablePeriod6 = null;
    org.joda.time.TimeOfDay timeOfDay8 = timeOfDay1.withPeriodAdded(readablePeriod6, 330);
    org.joda.time.LocalTime localTime9 = timeOfDay1.toLocalTime();
    org.joda.time.LocalTime localTime11 = localTime9.plusMinutes((-97));
    java.lang.String str12 = localTime11.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "22:23:00.007"+ "'", str12.equals("22:23:00.007"));

  }

  @Test
  public void test412() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test412"); }

    org.joda.time.Chronology chronology0 = null;
    org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
    org.joda.time.Instant instant2 = mutableDateTime1.toInstant();
    org.joda.time.ReadableInstant readableInstant3 = null;
    boolean b4 = mutableDateTime1.isEqual(readableInstant3);
    org.joda.time.DateTime dateTime5 = mutableDateTime1.toDateTime();
    org.joda.time.DateTime.Property property6 = dateTime5.yearOfCentury();
    org.joda.time.DateTime dateTime8 = property6.addToCopy((long)365);
    org.joda.time.DateTime dateTime9 = property6.withMinimumValue();
    org.joda.time.DateTime dateTime10 = property6.roundHalfEvenCopy();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime10);

  }

  @Test
  public void test413() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test413"); }

    org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((long)235);
    org.joda.time.MonthDay.Property property2 = monthDay1.monthOfYear();
    org.joda.time.MonthDay monthDay3 = property2.getMonthDay();
    java.lang.String str5 = monthDay3.toString("17");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(monthDay3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "17"+ "'", str5.equals("17"));

  }

  @Test
  public void test414() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test414"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
    org.joda.time.Duration duration4 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.DateTimeZone dateTimeZone5 = null;
    org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
    org.joda.time.DateMidnight.Property property7 = dateMidnight6.centuryOfEra();
    org.joda.time.DateMidnight.Property property8 = dateMidnight6.dayOfYear();
    org.joda.time.DateMidnight dateMidnight9 = property8.roundHalfFloorCopy();
    org.joda.time.PeriodType periodType10 = null;
    org.joda.time.Period period11 = duration4.toPeriodFrom((org.joda.time.ReadableInstant)dateMidnight9, periodType10);
    org.joda.time.DateMidnight dateMidnight13 = dateMidnight1.withPeriodAdded((org.joda.time.ReadablePeriod)period11, 100);
    org.joda.time.DateMidnight.Property property14 = dateMidnight13.monthOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property14);

  }

  @Test
  public void test415() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test415"); }

    org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period2 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology1);
    org.joda.time.Weeks weeks3 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod)period2);
    org.joda.time.Period period5 = period2.withHours(0);
    org.joda.time.Period period7 = period5.minusDays((int)'4');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weeks3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period7);

  }

  @Test
  public void test416() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test416"); }

    org.joda.time.chrono.GregorianChronology gregorianChronology2 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period3 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology2);
    org.joda.time.DateTimeZone dateTimeZone4 = gregorianChronology2.getZone();
    org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long)1, dateTimeZone4);
    org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone4);
    org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone7 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone4);
    org.joda.time.chrono.IslamicChronology islamicChronology8 = org.joda.time.chrono.IslamicChronology.getInstance((org.joda.time.DateTimeZone)cachedDateTimeZone7);
    org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now((org.joda.time.DateTimeZone)cachedDateTimeZone7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cachedDateTimeZone7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableDateTime9);

  }

  @Test
  public void test417() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test417"); }

    org.joda.time.Chronology chronology1 = null;
    org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
    org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.hourOfDay();
    org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.year();
    mutableDateTime2.setMillisOfSecond(0);
    org.joda.time.Chronology chronology7 = null;
    org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
    org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.hourOfDay();
    org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology11 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone10);
    org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime(dateTimeZone10);
    org.joda.time.DateTime dateTime13 = mutableDateTime8.toDateTime(dateTimeZone10);
    org.joda.time.DateTime dateTime14 = mutableDateTime2.toDateTime(dateTimeZone10);
    org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(0L, dateTimeZone10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime14);

  }

  @Test
  public void test418() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test418"); }

    org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekyearWeek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter0);

  }

  @Test
  public void test419() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test419"); }

    org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long)10);
    org.joda.time.LocalDate.Property property2 = localDate1.weekyear();
    org.joda.time.LocalDate localDate3 = property2.roundHalfCeilingCopy();
    org.joda.time.LocalDate localDate5 = localDate3.minusMonths(25);
    org.joda.time.LocalDate.Property property6 = localDate5.yearOfCentury();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property6);

  }

  @Test
  public void test420() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test420"); }

    org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long)10);
    java.lang.String str2 = localDate1.toString();
    org.joda.time.PeriodType periodType5 = null;
    org.joda.time.Period period6 = new org.joda.time.Period((long)(byte)1, (long)24, periodType5);
    org.joda.time.LocalDate localDate8 = localDate1.withPeriodAdded((org.joda.time.ReadablePeriod)period6, 345);
    org.joda.time.Period period9 = period6.toPeriod();
    org.joda.time.Period period11 = period9.withHours((int)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "1970-01-01"+ "'", str2.equals("1970-01-01"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period11);

  }

  @Test
  public void test421() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test421"); }

    org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long)10);
    java.lang.String str2 = localDate1.toString();
    org.joda.time.PeriodType periodType5 = null;
    org.joda.time.Period period6 = new org.joda.time.Period((long)(byte)1, (long)24, periodType5);
    org.joda.time.LocalDate localDate8 = localDate1.withPeriodAdded((org.joda.time.ReadablePeriod)period6, 345);
    org.joda.time.DurationFieldType durationFieldType9 = null;
    boolean b10 = localDate8.isSupported(durationFieldType9);
    org.joda.time.LocalDate.Property property11 = localDate8.weekyear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "1970-01-01"+ "'", str2.equals("1970-01-01"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property11);

  }

  @Test
  public void test422() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test422"); }

    org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance();
    int i1 = gJChronology0.getMinimumDaysInFirstWeek();
    org.joda.time.Chronology chronology2 = gJChronology0.withUTC();
    org.joda.time.Instant instant3 = gJChronology0.getGregorianCutover();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gJChronology0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant3);

  }

  @Test
  public void test423() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test423"); }

    org.joda.time.DateTimeZone dateTimeZone1 = null;
    org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone1);
    org.joda.time.DurationField durationField3 = copticChronology2.days();
    java.util.Locale locale4 = null;
    org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long)8, (org.joda.time.Chronology)copticChronology2, locale4);
    org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period11 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology10);
    org.joda.time.DateTimeZone dateTimeZone12 = gregorianChronology10.getZone();
    org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((int)(byte)1, 6, 8, (org.joda.time.Chronology)gregorianChronology10);
    org.joda.time.DateTimeField dateTimeField14 = gregorianChronology10.dayOfWeek();
    org.joda.time.field.SkipDateTimeField skipDateTimeField15 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)copticChronology2, dateTimeField14);
    int i17 = skipDateTimeField15.getMaximumValue((long)843);
    org.joda.time.DateTimeZone dateTimeZone20 = null;
    org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone20);
    java.lang.String str22 = copticChronology21.toString();
    org.joda.time.DateTimeField dateTimeField23 = copticChronology21.centuryOfEra();
    org.joda.time.DateTimeZone dateTimeZone25 = null;
    org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone25);
    java.lang.String str27 = copticChronology26.toString();
    org.joda.time.TimeOfDay timeOfDay28 = org.joda.time.TimeOfDay.fromMillisOfDay(0L, (org.joda.time.Chronology)copticChronology26);
    org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology30 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone29);
    int i32 = dateTimeZone29.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone29);
    org.joda.time.DateTime dateTime35 = dateTime33.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property36 = dateTime33.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType37 = property36.getFieldType();
    org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology39 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone38);
    int i41 = dateTimeZone38.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone38);
    org.joda.time.DateTime dateTime44 = dateTime42.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property45 = dateTime42.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType46 = property45.getFieldType();
    org.joda.time.DateTimeComparator dateTimeComparator47 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType37, dateTimeFieldType46);
    int i48 = timeOfDay28.indexOf(dateTimeFieldType46);
    org.joda.time.field.OffsetDateTimeField offsetDateTimeField52 = new org.joda.time.field.OffsetDateTimeField(dateTimeField23, dateTimeFieldType46, 10, 1000, 628);
    org.joda.time.DateTimeField dateTimeField53 = offsetDateTimeField52.getWrappedField();
    org.joda.time.Chronology chronology55 = null;
    java.util.Locale locale56 = null;
    org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket((long)'4', chronology55, locale56, (java.lang.Integer)1, (int)'a');
    dateTimeParserBucket59.setOffset((java.lang.Integer)(-1));
    org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.UTC;
    dateTimeParserBucket59.setZone(dateTimeZone62);
    org.joda.time.Chronology chronology64 = null;
    org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime(chronology64);
    org.joda.time.DateTimeZone dateTimeZone66 = null;
    org.joda.time.chrono.CopticChronology copticChronology67 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone66);
    java.lang.String str68 = copticChronology67.toString();
    org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology70 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone69);
    org.joda.time.TimeOfDay timeOfDay71 = new org.joda.time.TimeOfDay(dateTimeZone69);
    org.joda.time.Chronology chronology72 = copticChronology67.withZone(dateTimeZone69);
    org.joda.time.DateTime dateTime73 = mutableDateTime65.toDateTime(dateTimeZone69);
    org.joda.time.chrono.EthiopicChronology ethiopicChronology75 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone69, (int)(byte)1);
    boolean b76 = dateTimeParserBucket59.restoreState((java.lang.Object)ethiopicChronology75);
    java.util.Locale locale77 = dateTimeParserBucket59.getLocale();
    int i78 = offsetDateTimeField52.getMaximumTextLength(locale77);
    // The following exception was thrown during execution in test generation
    try {
    long long79 = skipDateTimeField15.set((long)(short)100, "2017-06-06T03:57:13.411", locale77);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "CopticChronology[UTC]"+ "'", str22.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "CopticChronology[UTC]"+ "'", str27.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "CopticChronology[UTC]"+ "'", str68.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(ethiopicChronology75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 3);

  }

  @Test
  public void test424() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test424"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
    org.joda.time.DateMidnight dateMidnight2 = yearMonthDay1.toDateMidnight();
    org.joda.time.YearMonthDay.Property property3 = yearMonthDay1.dayOfMonth();
    org.joda.time.DateTimeFieldType dateTimeFieldType4 = property3.getFieldType();
    org.joda.time.YearMonthDay yearMonthDay6 = property3.addWrapFieldToCopy(0);
    org.joda.time.YearMonthDay yearMonthDay7 = property3.withMinimumValue();
    org.joda.time.YearMonthDay yearMonthDay9 = property3.addToCopy((int)'a');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonthDay6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonthDay7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonthDay9);

  }

  @Test
  public void test425() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test425"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
    java.lang.String str2 = copticChronology1.toString();
    org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
    org.joda.time.DateTimeZone dateTimeZone5 = null;
    org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone5);
    java.lang.String str7 = copticChronology6.toString();
    org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(0L, (org.joda.time.Chronology)copticChronology6);
    org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone9);
    int i12 = dateTimeZone9.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone9);
    org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property16 = dateTime13.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType17 = property16.getFieldType();
    org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone18);
    int i21 = dateTimeZone18.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone18);
    org.joda.time.DateTime dateTime24 = dateTime22.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property25 = dateTime22.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType26 = property25.getFieldType();
    org.joda.time.DateTimeComparator dateTimeComparator27 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType17, dateTimeFieldType26);
    int i28 = timeOfDay8.indexOf(dateTimeFieldType26);
    org.joda.time.field.OffsetDateTimeField offsetDateTimeField32 = new org.joda.time.field.OffsetDateTimeField(dateTimeField3, dateTimeFieldType26, 10, 1000, 628);
    java.lang.String str33 = offsetDateTimeField32.toString();
    org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField34 = new org.joda.time.field.DelegatedDateTimeField((org.joda.time.DateTimeField)offsetDateTimeField32);
    org.joda.time.DateTimeZone dateTimeZone36 = null;
    org.joda.time.chrono.CopticChronology copticChronology37 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone36);
    java.lang.String str38 = copticChronology37.toString();
    org.joda.time.DateTimeField dateTimeField39 = copticChronology37.centuryOfEra();
    org.joda.time.DateTimeZone dateTimeZone41 = null;
    org.joda.time.chrono.CopticChronology copticChronology42 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone41);
    java.lang.String str43 = copticChronology42.toString();
    org.joda.time.TimeOfDay timeOfDay44 = org.joda.time.TimeOfDay.fromMillisOfDay(0L, (org.joda.time.Chronology)copticChronology42);
    org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology46 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone45);
    int i48 = dateTimeZone45.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone45);
    org.joda.time.DateTime dateTime51 = dateTime49.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property52 = dateTime49.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType53 = property52.getFieldType();
    org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology55 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone54);
    int i57 = dateTimeZone54.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone54);
    org.joda.time.DateTime dateTime60 = dateTime58.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property61 = dateTime58.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType62 = property61.getFieldType();
    org.joda.time.DateTimeComparator dateTimeComparator63 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType53, dateTimeFieldType62);
    int i64 = timeOfDay44.indexOf(dateTimeFieldType62);
    org.joda.time.field.OffsetDateTimeField offsetDateTimeField68 = new org.joda.time.field.OffsetDateTimeField(dateTimeField39, dateTimeFieldType62, 10, 1000, 628);
    org.joda.time.DateTimeField dateTimeField69 = offsetDateTimeField68.getWrappedField();
    org.joda.time.Chronology chronology71 = null;
    java.util.Locale locale72 = null;
    org.joda.time.format.DateTimeParserBucket dateTimeParserBucket75 = new org.joda.time.format.DateTimeParserBucket((long)'4', chronology71, locale72, (java.lang.Integer)1, (int)'a');
    dateTimeParserBucket75.setOffset((java.lang.Integer)(-1));
    org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.UTC;
    dateTimeParserBucket75.setZone(dateTimeZone78);
    org.joda.time.Chronology chronology80 = null;
    org.joda.time.MutableDateTime mutableDateTime81 = new org.joda.time.MutableDateTime(chronology80);
    org.joda.time.DateTimeZone dateTimeZone82 = null;
    org.joda.time.chrono.CopticChronology copticChronology83 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone82);
    java.lang.String str84 = copticChronology83.toString();
    org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology86 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone85);
    org.joda.time.TimeOfDay timeOfDay87 = new org.joda.time.TimeOfDay(dateTimeZone85);
    org.joda.time.Chronology chronology88 = copticChronology83.withZone(dateTimeZone85);
    org.joda.time.DateTime dateTime89 = mutableDateTime81.toDateTime(dateTimeZone85);
    org.joda.time.chrono.EthiopicChronology ethiopicChronology91 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone85, (int)(byte)1);
    boolean b92 = dateTimeParserBucket75.restoreState((java.lang.Object)ethiopicChronology91);
    java.util.Locale locale93 = dateTimeParserBucket75.getLocale();
    int i94 = offsetDateTimeField68.getMaximumTextLength(locale93);
    java.lang.String str95 = offsetDateTimeField32.getAsText(14238, locale93);
    org.joda.time.format.PeriodFormatter periodFormatter96 = org.joda.time.format.PeriodFormat.wordBased(locale93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "CopticChronology[UTC]"+ "'", str2.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "CopticChronology[UTC]"+ "'", str7.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "DateTimeField[millisOfDay]"+ "'", str33.equals("DateTimeField[millisOfDay]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "CopticChronology[UTC]"+ "'", str38.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "CopticChronology[UTC]"+ "'", str43.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "CopticChronology[UTC]"+ "'", str84.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(ethiopicChronology91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str95 + "' != '" + "14238"+ "'", str95.equals("14238"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodFormatter96);

  }

  @Test
  public void test426() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test426"); }

    org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendWeekOfWeekyear(236);
    org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendTimeZoneName();
    org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone4);
    org.joda.time.DateTimeField dateTimeField6 = iSOChronology5.minuteOfDay();
    org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone7);
    int i10 = dateTimeZone7.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone7);
    org.joda.time.DateTime dateTime13 = dateTime11.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property14 = dateTime11.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType15 = property14.getFieldType();
    org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone16);
    int i19 = dateTimeZone16.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone16);
    org.joda.time.DateTime dateTime22 = dateTime20.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property23 = dateTime20.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType24 = property23.getFieldType();
    org.joda.time.DateTimeComparator dateTimeComparator25 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType15, dateTimeFieldType24);
    org.joda.time.Partial partial27 = new org.joda.time.Partial(dateTimeFieldType15, (int)(byte)1);
    org.joda.time.field.OffsetDateTimeField offsetDateTimeField31 = new org.joda.time.field.OffsetDateTimeField(dateTimeField6, dateTimeFieldType15, 14, 628, 1034);
    org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder33 = dateTimeFormatterBuilder0.appendFixedDecimal(dateTimeFieldType15, 20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatterBuilder33);

  }

  @Test
  public void test427() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test427"); }

    org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
    mutableDateTime0.setMinuteOfHour((int)(byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableDateTime0);

  }

  @Test
  public void test428() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test428"); }

    org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.timeElementParser();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter0);

  }

  @Test
  public void test429() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test429"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
    java.lang.String str2 = copticChronology1.toString();
    org.joda.time.Chronology chronology3 = null;
    org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
    org.joda.time.DateTimeZone dateTimeZone5 = null;
    org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone5);
    java.lang.String str7 = copticChronology6.toString();
    org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone8);
    org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(dateTimeZone8);
    org.joda.time.Chronology chronology11 = copticChronology6.withZone(dateTimeZone8);
    org.joda.time.DateTime dateTime12 = mutableDateTime4.toDateTime(dateTimeZone8);
    org.joda.time.chrono.ZonedChronology zonedChronology13 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology)copticChronology1, dateTimeZone8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "CopticChronology[UTC]"+ "'", str2.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "CopticChronology[UTC]"+ "'", str7.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(zonedChronology13);

  }

  @Test
  public void test430() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test430"); }

    org.joda.time.Period period4 = new org.joda.time.Period((int)(short)0, (int)'4', 1, 0);
    org.joda.time.PeriodType periodType5 = null;
    org.joda.time.Period period6 = period4.withPeriodType(periodType5);
    org.joda.time.Period period8 = period6.minusHours(10);
    org.joda.time.Period period9 = period8.toPeriod();
    org.joda.time.Duration duration10 = period9.toStandardDuration();
    org.joda.time.Chronology chronology11 = null;
    org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
    org.joda.time.Instant instant13 = mutableDateTime12.toInstant();
    org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.millis();
    org.joda.time.PeriodType periodType15 = periodType14.withYearsRemoved();
    org.joda.time.Period period16 = duration10.toPeriodTo((org.joda.time.ReadableInstant)instant13, periodType14);
    org.joda.time.ReadableInstant readableInstant17 = null;
    org.joda.time.ReadableDuration readableDuration18 = null;
    org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(readableInstant17, readableDuration18);
    org.joda.time.chrono.GregorianChronology gregorianChronology21 = org.joda.time.chrono.GregorianChronology.getInstance();
    mutablePeriod19.setPeriod((long)100, (org.joda.time.Chronology)gregorianChronology21);
    org.joda.time.DateTimeZone dateTimeZone23 = null;
    org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(dateTimeZone23);
    int i25 = dateMidnight24.getDayOfWeek();
    org.joda.time.Chronology chronology26 = null;
    org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
    java.util.GregorianCalendar gregorianCalendar28 = mutableDateTime27.toGregorianCalendar();
    org.joda.time.chrono.LimitChronology limitChronology29 = org.joda.time.chrono.LimitChronology.getInstance((org.joda.time.Chronology)gregorianChronology21, (org.joda.time.ReadableDateTime)dateMidnight24, (org.joda.time.ReadableDateTime)mutableDateTime27);
    boolean b31 = dateMidnight24.isBefore((long)843);
    boolean b32 = instant13.isEqual((org.joda.time.ReadableInstant)dateMidnight24);
    org.joda.time.ReadableDuration readableDuration33 = null;
    org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableInstant)dateMidnight24, readableDuration33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(duration10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianCalendar28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(limitChronology29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);

  }

  @Test
  public void test431() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test431"); }

    org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
    org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusSeconds(0);
    org.joda.time.LocalDateTime.Property property3 = localDateTime0.dayOfMonth();
    org.joda.time.Interval interval4 = property3.toInterval();
    org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
    org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusSeconds(0);
    org.joda.time.LocalDateTime.Property property8 = localDateTime5.dayOfMonth();
    org.joda.time.Interval interval9 = property8.toInterval();
    boolean b10 = interval4.isAfter((org.joda.time.ReadableInterval)interval9);
    boolean b11 = interval4.isAfterNow();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(interval4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(interval9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test432() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test432"); }

    org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendMinuteOfHour(345);
    org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendHourOfHalfday(17);
    org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.DateTimeField dateTimeField6 = gregorianChronology5.hourOfHalfday();
    org.joda.time.Chronology chronology7 = null;
    org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
    java.util.GregorianCalendar gregorianCalendar9 = mutableDateTime8.toGregorianCalendar();
    mutableDateTime8.addMinutes((int)(byte)1);
    org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone12);
    int i15 = dateTimeZone12.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone12);
    org.joda.time.DateTime dateTime18 = dateTime16.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property19 = dateTime16.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType20 = property19.getFieldType();
    mutableDateTime8.set(dateTimeFieldType20, (int)(byte)10);
    org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField23 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField6, dateTimeFieldType20);
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType20, (-2147483647), 1969);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianCalendar9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType20);

  }

  @Test
  public void test433() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test433"); }

    org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone0);
    int i3 = dateTimeZone0.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone0);
    org.joda.time.Duration duration7 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.Duration duration10 = duration7.withDurationAdded((long)28, (int)' ');
    org.joda.time.DateTimeZone dateTimeZone11 = null;
    org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(dateTimeZone11);
    org.joda.time.DateMidnight.Property property13 = dateMidnight12.centuryOfEra();
    org.joda.time.PeriodType periodType14 = null;
    org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)duration10, (org.joda.time.ReadableInstant)dateMidnight12, periodType14);
    org.joda.time.DateTime dateTime17 = dateTime4.withDurationAdded((org.joda.time.ReadableDuration)duration10, 5);
    org.joda.time.DateTimeZone dateTimeZone18 = null;
    org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone18);
    org.joda.time.YearMonth yearMonth20 = new org.joda.time.YearMonth((org.joda.time.Chronology)copticChronology19);
    org.joda.time.YearMonth yearMonth22 = yearMonth20.minusYears((int)'a');
    org.joda.time.YearMonth yearMonth24 = yearMonth20.minusYears((-1));
    org.joda.time.DateTimeFieldType dateTimeFieldType26 = yearMonth20.getFieldType(0);
    int i27 = dateTime17.get(dateTimeFieldType26);
    org.joda.time.DateTime dateTime28 = dateTime17.withTimeAtStartOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(duration10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonth22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonth24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 1970);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime28);

  }

  @Test
  public void test434() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test434"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(dateTimeZone0);
    org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusSeconds((int)(short)0);
    org.joda.time.TimeOfDay.Property property4 = timeOfDay1.secondOfMinute();
    java.lang.String str5 = property4.getAsString();
    java.lang.String str6 = property4.getAsText();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "0"+ "'", str5.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "0"+ "'", str6.equals("0"));

  }

  @Test
  public void test435() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test435"); }

    org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.hourOfHalfday();
    org.joda.time.Chronology chronology2 = null;
    org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(chronology2);
    java.util.GregorianCalendar gregorianCalendar4 = mutableDateTime3.toGregorianCalendar();
    mutableDateTime3.addMinutes((int)(byte)1);
    org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone7);
    int i10 = dateTimeZone7.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone7);
    org.joda.time.DateTime dateTime13 = dateTime11.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property14 = dateTime11.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType15 = property14.getFieldType();
    mutableDateTime3.set(dateTimeFieldType15, (int)(byte)10);
    org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField18 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField1, dateTimeFieldType15);
    int i19 = zeroIsMaxDateTimeField18.getMaximumValue();
    int i21 = zeroIsMaxDateTimeField18.getLeapAmount(100L);
    long long23 = zeroIsMaxDateTimeField18.roundHalfFloor((long)47);
    org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone24);
    int i27 = dateTimeZone24.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone24);
    org.joda.time.DateTime dateTime30 = dateTime28.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property31 = dateTime28.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType32 = property31.getFieldType();
    org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology34 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone33);
    int i36 = dateTimeZone33.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone33);
    org.joda.time.DateTime dateTime39 = dateTime37.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property40 = dateTime37.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType41 = property40.getFieldType();
    org.joda.time.DateTimeComparator dateTimeComparator42 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType32, dateTimeFieldType41);
    org.joda.time.Partial partial44 = new org.joda.time.Partial(dateTimeFieldType32, (int)(byte)1);
    org.joda.time.DateTimeZone dateTimeZone46 = null;
    org.joda.time.chrono.CopticChronology copticChronology47 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone46);
    org.joda.time.DurationField durationField48 = copticChronology47.days();
    org.joda.time.DateTimeZone dateTimeZone50 = null;
    org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone50);
    org.joda.time.LocalDateTime.Property property52 = localDateTime51.monthOfYear();
    org.joda.time.DateTimeZone dateTimeZone54 = null;
    org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone54);
    boolean b56 = localDateTime51.isAfter((org.joda.time.ReadablePartial)localDateTime55);
    org.joda.time.DateTimeZone dateTimeZone58 = null;
    org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone58);
    org.joda.time.LocalDateTime localDateTime61 = localDateTime59.withMillisOfDay((int)(short)0);
    org.joda.time.LocalDateTime.Property property62 = localDateTime61.dayOfYear();
    org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.dayTime();
    org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadablePartial)localDateTime51, (org.joda.time.ReadablePartial)localDateTime61, periodType63);
    int[] i_array66 = copticChronology47.get((org.joda.time.ReadablePartial)localDateTime51, 1496646000000L);
    // The following exception was thrown during execution in test generation
    try {
    int[] i_array68 = zeroIsMaxDateTimeField18.add((org.joda.time.ReadablePartial)partial44, 23, i_array66, (int)'a');
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianCalendar4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long23 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array66);

  }

  @Test
  public void test436() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test436"); }

    org.joda.time.YearMonth yearMonth1 = org.joda.time.YearMonth.parse("1969-12-31");
    int i2 = yearMonth1.size();
    org.joda.time.YearMonth yearMonth4 = yearMonth1.minusYears((int)'a');
    int i5 = yearMonth1.size();
    org.joda.time.DateTimeFieldType[] dateTimeFieldType_array6 = yearMonth1.getFieldTypes();
    java.lang.String str7 = yearMonth1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonth1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonth4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "1969-12"+ "'", str7.equals("1969-12"));

  }

  @Test
  public void test437() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test437"); }

    org.joda.time.ReadableInstant readableInstant0 = null;
    org.joda.time.ReadableDuration readableDuration1 = null;
    org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
    org.joda.time.chrono.GregorianChronology gregorianChronology4 = org.joda.time.chrono.GregorianChronology.getInstance();
    mutablePeriod2.setPeriod((long)100, (org.joda.time.Chronology)gregorianChronology4);
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(dateTimeZone6);
    int i8 = dateMidnight7.getDayOfWeek();
    org.joda.time.Chronology chronology9 = null;
    org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
    java.util.GregorianCalendar gregorianCalendar11 = mutableDateTime10.toGregorianCalendar();
    org.joda.time.chrono.LimitChronology limitChronology12 = org.joda.time.chrono.LimitChronology.getInstance((org.joda.time.Chronology)gregorianChronology4, (org.joda.time.ReadableDateTime)dateMidnight7, (org.joda.time.ReadableDateTime)mutableDateTime10);
    org.joda.time.DateTime dateTime13 = limitChronology12.getUpperLimit();
    org.joda.time.DateTimeZone dateTimeZone16 = null;
    org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone16);
    org.joda.time.LocalDateTime.Property property18 = localDateTime17.monthOfYear();
    org.joda.time.DateTimeZone dateTimeZone20 = null;
    org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone20);
    boolean b22 = localDateTime17.isAfter((org.joda.time.ReadablePartial)localDateTime21);
    org.joda.time.DateTimeZone dateTimeZone24 = null;
    org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone24);
    org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withMillisOfDay((int)(short)0);
    org.joda.time.LocalDateTime.Property property28 = localDateTime27.dayOfYear();
    org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.dayTime();
    org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadablePartial)localDateTime17, (org.joda.time.ReadablePartial)localDateTime27, periodType29);
    org.joda.time.PeriodType periodType31 = periodType29.withSecondsRemoved();
    org.joda.time.PeriodType periodType32 = org.joda.time.DateTimeUtils.getPeriodType(periodType31);
    org.joda.time.Chronology chronology33 = null;
    org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology33);
    org.joda.time.PeriodType periodType35 = null;
    org.joda.time.chrono.GregorianChronology gregorianChronology36 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((java.lang.Object)chronology33, periodType35, (org.joda.time.Chronology)gregorianChronology36);
    org.joda.time.DateTimeField dateTimeField38 = gregorianChronology36.hourOfDay();
    org.joda.time.DurationField durationField39 = gregorianChronology36.minutes();
    org.joda.time.Period period40 = new org.joda.time.Period((long)37, periodType31, (org.joda.time.Chronology)gregorianChronology36);
    boolean b41 = limitChronology12.equals((java.lang.Object)gregorianChronology36);
    org.joda.time.DateTime dateTime42 = limitChronology12.getUpperLimit();
    java.lang.String str43 = limitChronology12.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianCalendar11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(limitChronology12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "LimitChronology[GregorianChronology[UTC], 1970-01-01T00:00:00.000Z, 1970-01-01T00:00:00.007Z]"+ "'", str43.equals("LimitChronology[GregorianChronology[UTC], 1970-01-01T00:00:00.000Z, 1970-01-01T00:00:00.007Z]"));

  }

  @Test
  public void test438() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test438"); }

    java.lang.Object obj0 = null;
    org.joda.time.ReadableInstant readableInstant1 = null;
    org.joda.time.ReadableDuration readableDuration2 = null;
    org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant1, readableDuration2);
    org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = org.joda.time.format.DateTimeFormat.fullDate();
    org.joda.time.Chronology chronology5 = null;
    org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
    int i9 = dateTimeFormatter4.parseInto((org.joda.time.ReadWritableInstant)mutableDateTime6, "secondOfMinute", 100);
    org.joda.time.DateTimeZone dateTimeZone10 = null;
    org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(dateTimeZone10);
    long long12 = dateMidnight11.getMillis();
    org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.plusDays(24);
    mutablePeriod3.setPeriod((org.joda.time.ReadableInstant)mutableDateTime6, (org.joda.time.ReadableInstant)dateMidnight14);
    org.joda.time.DateTimeZone dateTimeZone17 = null;
    org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone17);
    java.lang.String str19 = copticChronology18.toString();
    mutablePeriod3.setPeriod(0L, (org.joda.time.Chronology)copticChronology18);
    org.joda.time.DurationField durationField21 = copticChronology18.hours();
    org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime(obj0, (org.joda.time.Chronology)copticChronology18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-101));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long12 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "CopticChronology[UTC]"+ "'", str19.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField21);

  }

  @Test
  public void test439() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test439"); }

    org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((java.lang.Object)10L);
    org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone2);
    int i5 = dateTimeZone2.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone2);
    org.joda.time.DateTime dateTime8 = dateTime6.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property9 = dateTime6.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType10 = property9.getFieldType();
    org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone11);
    int i14 = dateTimeZone11.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone11);
    org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property18 = dateTime15.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType19 = property18.getFieldType();
    org.joda.time.DateTimeComparator dateTimeComparator20 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType10, dateTimeFieldType19);
    org.joda.time.DateMidnight.Property property21 = dateMidnight1.property(dateTimeFieldType10);
    org.joda.time.DateMidnight dateMidnight23 = dateMidnight1.withWeekyear(628);
    org.joda.time.Months months24 = org.joda.time.Months.FOUR;
    org.joda.time.Months months25 = org.joda.time.Months.FIVE;
    org.joda.time.Months months27 = months25.plus(330);
    org.joda.time.Months months28 = months24.plus(months25);
    org.joda.time.DateMidnight dateMidnight29 = dateMidnight1.minus((org.joda.time.ReadablePeriod)months25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(months24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(months25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(months27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(months28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight29);

  }

  @Test
  public void test440() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test440"); }

    org.joda.time.chrono.EthiopicChronology ethiopicChronology1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay((long)24, (org.joda.time.Chronology)ethiopicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(ethiopicChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localTime2);

  }

  @Test
  public void test441() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test441"); }

    org.joda.time.ReadableInstant readableInstant0 = null;
    org.joda.time.ReadableDuration readableDuration1 = null;
    org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
    org.joda.time.chrono.GregorianChronology gregorianChronology4 = org.joda.time.chrono.GregorianChronology.getInstance();
    mutablePeriod2.setPeriod((long)100, (org.joda.time.Chronology)gregorianChronology4);
    int i6 = mutablePeriod2.getWeeks();
    org.joda.time.Period period11 = new org.joda.time.Period((int)(short)0, (int)'4', 1, 0);
    org.joda.time.PeriodType periodType12 = null;
    org.joda.time.Period period13 = period11.withPeriodType(periodType12);
    mutablePeriod2.add((org.joda.time.ReadablePeriod)period13);
    mutablePeriod2.addHours((int)(short)10);
    org.joda.time.MutablePeriod mutablePeriod17 = mutablePeriod2.copy();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutablePeriod17);

  }

  @Test
  public void test442() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test442"); }

    org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendMinuteOfHour(345);
    org.joda.time.Chronology chronology4 = null;
    java.util.Locale locale5 = null;
    org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket((long)'4', chronology4, locale5, (java.lang.Integer)1, (int)'a');
    dateTimeParserBucket8.setOffset((java.lang.Integer)(-1));
    org.joda.time.Chronology chronology11 = null;
    org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
    java.util.GregorianCalendar gregorianCalendar13 = mutableDateTime12.toGregorianCalendar();
    mutableDateTime12.addMinutes((int)(byte)1);
    org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone16);
    int i19 = dateTimeZone16.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone16);
    org.joda.time.DateTime dateTime22 = dateTime20.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property23 = dateTime20.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType24 = property23.getFieldType();
    mutableDateTime12.set(dateTimeFieldType24, (int)(byte)10);
    dateTimeParserBucket8.saveField(dateTimeFieldType24, 10080);
    org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology30 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone29);
    int i32 = dateTimeZone29.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone29);
    org.joda.time.DateTime dateTime35 = dateTime33.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property36 = dateTime33.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType37 = property36.getFieldType();
    java.util.Locale locale39 = null;
    dateTimeParserBucket8.saveField(dateTimeFieldType37, "2017-06-06T03:56:46.030", locale39);
    org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder43 = dateTimeFormatterBuilder2.appendSignedDecimal(dateTimeFieldType37, 429, 345);
    org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder46 = dateTimeFormatterBuilder2.appendFractionOfMinute(236, 10080);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianCalendar13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatterBuilder43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatterBuilder46);

  }

  @Test
  public void test443() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test443"); }

    org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendMinuteOfHour(345);
    org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear(17);
    org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTimeZoneShortName();
    org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendWeekOfWeekyear(1000);
    org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder5.appendCenturyOfEra(458, 491);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);

  }

  @Test
  public void test444() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test444"); }

    org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long)365);
    org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone2);
    int i5 = dateTimeZone2.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone2);
    org.joda.time.DateTime dateTime8 = dateTime6.minusWeeks((int)'4');
    org.joda.time.ReadableDuration readableDuration9 = null;
    org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant)dateTime8, readableDuration9);
    org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant)mutableDateTime1, (org.joda.time.ReadablePeriod)mutablePeriod10);
    mutableDateTime1.setMillisOfSecond(17);
    org.joda.time.MutableDateTime.Property property14 = mutableDateTime1.year();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property14);

  }

  @Test
  public void test445() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test445"); }

    org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekyearWeekDay();
    org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period6 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology5);
    org.joda.time.DateTimeZone dateTimeZone7 = gregorianChronology5.getZone();
    org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((int)(byte)1, 6, 8, (org.joda.time.Chronology)gregorianChronology5);
    org.joda.time.DateTimeField dateTimeField9 = gregorianChronology5.minuteOfHour();
    org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter0.withChronology((org.joda.time.Chronology)gregorianChronology5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter10);

  }

  @Test
  public void test446() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test446"); }

    org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone0);
    int i3 = dateTimeZone0.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone0);
    org.joda.time.Duration duration7 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.Duration duration10 = duration7.withDurationAdded((long)28, (int)' ');
    org.joda.time.DateTimeZone dateTimeZone11 = null;
    org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(dateTimeZone11);
    org.joda.time.DateMidnight.Property property13 = dateMidnight12.centuryOfEra();
    org.joda.time.PeriodType periodType14 = null;
    org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)duration10, (org.joda.time.ReadableInstant)dateMidnight12, periodType14);
    org.joda.time.DateTime dateTime17 = dateTime4.withDurationAdded((org.joda.time.ReadableDuration)duration10, 5);
    org.joda.time.DateTime dateTime19 = dateTime4.withCenturyOfEra(784);
    org.joda.time.Period period24 = new org.joda.time.Period((int)(short)0, (int)'4', 1, 0);
    org.joda.time.PeriodType periodType25 = null;
    org.joda.time.Period period26 = period24.withPeriodType(periodType25);
    org.joda.time.Period period28 = period26.minusHours(10);
    org.joda.time.Period period30 = period26.withWeeks(2);
    org.joda.time.Period period31 = period26.normalizedStandard();
    int i32 = period26.getHours();
    org.joda.time.Weeks weeks33 = period26.toStandardWeeks();
    org.joda.time.Period period35 = period26.plusDays((-101));
    org.joda.time.DateTime dateTime36 = dateTime4.plus((org.joda.time.ReadablePeriod)period35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(duration10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weeks33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime36);

  }

  @Test
  public void test447() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test447"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
    org.joda.time.Duration duration4 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.DateTimeZone dateTimeZone5 = null;
    org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
    org.joda.time.DateMidnight.Property property7 = dateMidnight6.centuryOfEra();
    org.joda.time.DateMidnight.Property property8 = dateMidnight6.dayOfYear();
    org.joda.time.DateMidnight dateMidnight9 = property8.roundHalfFloorCopy();
    org.joda.time.PeriodType periodType10 = null;
    org.joda.time.Period period11 = duration4.toPeriodFrom((org.joda.time.ReadableInstant)dateMidnight9, periodType10);
    org.joda.time.DateMidnight dateMidnight13 = dateMidnight1.withPeriodAdded((org.joda.time.ReadablePeriod)period11, 100);
    org.joda.time.DateMidnight.Property property14 = dateMidnight13.centuryOfEra();
    org.joda.time.DateTimeZone dateTimeZone15 = null;
    org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(dateTimeZone15);
    long long17 = dateMidnight16.getMillis();
    org.joda.time.DateMidnight dateMidnight19 = dateMidnight16.plusDays(24);
    org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant)dateMidnight13, (org.joda.time.ReadableInstant)dateMidnight19);
    org.joda.time.DateTimeZone dateTimeZone21 = null;
    org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(dateTimeZone21);
    org.joda.time.Duration duration25 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.DateTimeZone dateTimeZone26 = null;
    org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(dateTimeZone26);
    org.joda.time.DateMidnight.Property property28 = dateMidnight27.centuryOfEra();
    org.joda.time.DateMidnight.Property property29 = dateMidnight27.dayOfYear();
    org.joda.time.DateMidnight dateMidnight30 = property29.roundHalfFloorCopy();
    org.joda.time.PeriodType periodType31 = null;
    org.joda.time.Period period32 = duration25.toPeriodFrom((org.joda.time.ReadableInstant)dateMidnight30, periodType31);
    org.joda.time.DateMidnight dateMidnight34 = dateMidnight22.withPeriodAdded((org.joda.time.ReadablePeriod)period32, 100);
    org.joda.time.DateMidnight dateMidnight36 = dateMidnight19.withPeriodAdded((org.joda.time.ReadablePeriod)period32, 9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long17 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight36);

  }

  @Test
  public void test448() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test448"); }

    org.joda.time.chrono.GregorianChronology gregorianChronology2 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period3 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology2);
    org.joda.time.DateTimeZone dateTimeZone4 = gregorianChronology2.getZone();
    org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long)1, dateTimeZone4);
    org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone4);
    org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone7 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone4);
    boolean b8 = cachedDateTimeZone7.isFixed();
    java.lang.String str10 = cachedDateTimeZone7.getNameKey((long)10);
    org.joda.time.Chronology chronology13 = null;
    java.util.Locale locale14 = null;
    org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long)'4', chronology13, locale14, (java.lang.Integer)1, (int)'a');
    dateTimeParserBucket17.setOffset((java.lang.Integer)(-1));
    org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
    dateTimeParserBucket17.setZone(dateTimeZone20);
    org.joda.time.Chronology chronology22 = null;
    org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
    org.joda.time.DateTimeZone dateTimeZone24 = null;
    org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone24);
    java.lang.String str26 = copticChronology25.toString();
    org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone27);
    org.joda.time.TimeOfDay timeOfDay29 = new org.joda.time.TimeOfDay(dateTimeZone27);
    org.joda.time.Chronology chronology30 = copticChronology25.withZone(dateTimeZone27);
    org.joda.time.DateTime dateTime31 = mutableDateTime23.toDateTime(dateTimeZone27);
    org.joda.time.chrono.EthiopicChronology ethiopicChronology33 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone27, (int)(byte)1);
    boolean b34 = dateTimeParserBucket17.restoreState((java.lang.Object)ethiopicChronology33);
    java.util.Locale locale35 = dateTimeParserBucket17.getLocale();
    java.lang.String str36 = cachedDateTimeZone7.getShortName((long)37, locale35);
    java.lang.String str38 = cachedDateTimeZone7.getShortName((long)2000);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cachedDateTimeZone7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "UTC"+ "'", str10.equals("UTC"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "CopticChronology[UTC]"+ "'", str26.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(ethiopicChronology33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "UTC"+ "'", str36.equals("UTC"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "UTC"+ "'", str38.equals("UTC"));

  }

  @Test
  public void test449() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test449"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
    java.lang.String str2 = copticChronology1.toString();
    org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
    org.joda.time.DateTimeZone dateTimeZone5 = null;
    org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone5);
    java.lang.String str7 = copticChronology6.toString();
    org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(0L, (org.joda.time.Chronology)copticChronology6);
    org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone9);
    int i12 = dateTimeZone9.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone9);
    org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property16 = dateTime13.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType17 = property16.getFieldType();
    org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone18);
    int i21 = dateTimeZone18.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone18);
    org.joda.time.DateTime dateTime24 = dateTime22.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property25 = dateTime22.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType26 = property25.getFieldType();
    org.joda.time.DateTimeComparator dateTimeComparator27 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType17, dateTimeFieldType26);
    int i28 = timeOfDay8.indexOf(dateTimeFieldType26);
    org.joda.time.field.OffsetDateTimeField offsetDateTimeField32 = new org.joda.time.field.OffsetDateTimeField(dateTimeField3, dateTimeFieldType26, 10, 1000, 628);
    org.joda.time.DateTimeField dateTimeField33 = offsetDateTimeField32.getWrappedField();
    long long35 = offsetDateTimeField32.roundCeiling((long)491);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "CopticChronology[UTC]"+ "'", str2.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "CopticChronology[UTC]"+ "'", str7.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long35 == 463708800000L);

  }

  @Test
  public void test450() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test450"); }

    org.joda.time.Chronology chronology2 = null;
    java.util.Locale locale3 = null;
    org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long)'4', chronology2, locale3, (java.lang.Integer)1, (int)'a');
    dateTimeParserBucket6.setOffset((java.lang.Integer)(-1));
    org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
    dateTimeParserBucket6.setZone(dateTimeZone9);
    org.joda.time.LocalDateTime localDateTime11 = null;
    boolean b12 = dateTimeZone9.isLocalDateTimeGap(localDateTime11);
    org.joda.time.chrono.IslamicChronology islamicChronology13 = org.joda.time.chrono.IslamicChronology.getInstance(dateTimeZone9);
    org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object)3155760000000L, dateTimeZone9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology13);

  }

  @Test
  public void test451() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test451"); }

    org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicOrdinalDateTimeNoMillis();
    java.lang.String str2 = dateTimeFormatter0.print((-72835200000L));
    boolean b3 = dateTimeFormatter0.isPrinter();
    java.io.Writer writer4 = null;
    org.joda.time.DateTimeZone dateTimeZone6 = null;
    org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone6);
    org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMillisOfDay((int)(short)0);
    int i10 = localDateTime7.getMillisOfDay();
    org.joda.time.LocalDateTime localDateTime12 = localDateTime7.minusMillis(1000);
    // The following exception was thrown during execution in test generation
    try {
    dateTimeFormatter0.printTo(writer4, (org.joda.time.ReadablePartial)localDateTime12);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "1967254T000000Z"+ "'", str2.equals("1967254T000000Z"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime12);

  }

  @Test
  public void test452() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test452"); }

    org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
    java.lang.String str2 = dateTimeZone0.getShortName(1496721385602L);
    int i4 = dateTimeZone0.getOffsetFromLocal(17L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "UTC"+ "'", str2.equals("UTC"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);

  }

  @Test
  public void test453() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test453"); }

    org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long)10);
    java.lang.String str2 = localDate1.toString();
    org.joda.time.LocalDate localDate4 = localDate1.withDayOfMonth(3);
    int i5 = localDate1.getYearOfCentury();
    org.joda.time.chrono.GregorianChronology gregorianChronology8 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period9 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology8);
    org.joda.time.DateTimeZone dateTimeZone10 = gregorianChronology8.getZone();
    org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long)1, dateTimeZone10);
    org.joda.time.DateMidnight dateMidnight12 = org.joda.time.DateMidnight.now(dateTimeZone10);
    org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now(dateTimeZone10);
    org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone14);
    int i17 = dateTimeZone14.getOffsetFromLocal((long)100);
    org.joda.time.Interval interval18 = localDate13.toInterval(dateTimeZone14);
    org.joda.time.LocalDate localDate19 = localDate1.withFields((org.joda.time.ReadablePartial)localDate13);
    int i20 = localDate1.getYear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "1970-01-01"+ "'", str2.equals("1970-01-01"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(interval18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1970);

  }

  @Test
  public void test454() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test454"); }

    java.lang.ClassLoader classLoader1 = null;
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.tz.ZoneInfoProvider zoneInfoProvider2 = new org.joda.time.tz.ZoneInfoProvider("Property[secondOfMinute]", classLoader1);
      org.junit.Assert.fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
    }

  }

  @Test
  public void test455() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test455"); }

    org.joda.time.Minutes minutes2 = org.joda.time.Minutes.ONE;
    org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = org.joda.time.format.ISODateTimeFormat.hourMinuteSecond();
    org.joda.time.ReadableInstant readableInstant5 = null;
    org.joda.time.ReadableDuration readableDuration6 = null;
    org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(readableInstant5, readableDuration6);
    org.joda.time.ReadableDuration readableDuration8 = null;
    org.joda.time.Chronology chronology9 = null;
    org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
    org.joda.time.PeriodType periodType11 = null;
    org.joda.time.chrono.GregorianChronology gregorianChronology12 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((java.lang.Object)chronology9, periodType11, (org.joda.time.Chronology)gregorianChronology12);
    mutablePeriod7.setPeriod(readableDuration8, chronology9);
    org.joda.time.DateTimeZone dateTimeZone16 = null;
    org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone16);
    org.joda.time.DurationField durationField18 = copticChronology17.days();
    org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology)copticChronology17);
    org.joda.time.DateTimeField dateTimeField20 = copticChronology17.millisOfSecond();
    mutablePeriod7.setPeriod((long)(short)1, (org.joda.time.Chronology)copticChronology17);
    org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter4.withChronology((org.joda.time.Chronology)copticChronology17);
    org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((long)(short)-1, (org.joda.time.Chronology)copticChronology17);
    org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((java.lang.Object)minutes2, (org.joda.time.Chronology)copticChronology17);
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.MonthDay monthDay25 = new org.joda.time.MonthDay(157, 9, (org.joda.time.Chronology)copticChronology17);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(minutes2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableDateTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter22);

  }

  @Test
  public void test456() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test456"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
    org.joda.time.DateMidnight.Property property2 = dateMidnight1.centuryOfEra();
    org.joda.time.DateMidnight dateMidnight4 = property2.addWrapFieldToCopy((int)(short)100);
    org.joda.time.DateMidnight.Property property5 = dateMidnight4.dayOfYear();
    org.joda.time.Chronology chronology6 = null;
    org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(chronology6);
    org.joda.time.Instant instant8 = mutableDateTime7.toInstant();
    org.joda.time.ReadableInstant readableInstant9 = null;
    boolean b10 = mutableDateTime7.isEqual(readableInstant9);
    org.joda.time.DateTime dateTime11 = mutableDateTime7.toDateTime();
    org.joda.time.DateTime.Property property12 = dateTime11.yearOfCentury();
    boolean b13 = dateMidnight4.isEqual((org.joda.time.ReadableInstant)dateTime11);
    org.joda.time.chrono.JulianChronology julianChronology14 = org.joda.time.chrono.JulianChronology.getInstance();
    java.lang.String str15 = julianChronology14.toString();
    org.joda.time.DateTimeZone dateTimeZone16 = julianChronology14.getZone();
    org.joda.time.DateTime dateTime17 = dateTime11.withZoneRetainFields(dateTimeZone16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(julianChronology14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "JulianChronology[UTC]"+ "'", str15.equals("JulianChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime17);

  }

  @Test
  public void test457() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test457"); }

    org.joda.time.DateTimeZone dateTimeZone1 = null;
    org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone1);
    org.joda.time.DurationField durationField3 = copticChronology2.days();
    java.util.Locale locale4 = null;
    org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long)8, (org.joda.time.Chronology)copticChronology2, locale4);
    org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period11 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology10);
    org.joda.time.DateTimeZone dateTimeZone12 = gregorianChronology10.getZone();
    org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((int)(byte)1, 6, 8, (org.joda.time.Chronology)gregorianChronology10);
    org.joda.time.DateTimeField dateTimeField14 = gregorianChronology10.dayOfWeek();
    org.joda.time.field.SkipDateTimeField skipDateTimeField15 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)copticChronology2, dateTimeField14);
    java.util.Locale locale17 = null;
    java.lang.String str18 = skipDateTimeField15.getAsShortText(53L, locale17);
    org.joda.time.DateTimeField dateTimeField19 = skipDateTimeField15.getWrappedField();
    org.joda.time.DateTimeField dateTimeField20 = skipDateTimeField15.getWrappedField();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Thu"+ "'", str18.equals("Thu"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField20);

  }

  @Test
  public void test458() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test458"); }

    org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
    org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusSeconds(0);
    org.joda.time.LocalDateTime.Property property3 = localDateTime0.dayOfMonth();
    org.joda.time.LocalDateTime localDateTime5 = localDateTime0.minusDays(535);
    int i6 = localDateTime0.getDayOfMonth();
    int i7 = localDateTime0.getDayOfMonth();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);

  }

  @Test
  public void test459() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test459"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(dateTimeZone0);
    org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusSeconds((int)(short)0);
    org.joda.time.TimeOfDay.Property property4 = timeOfDay1.secondOfMinute();
    int i5 = timeOfDay1.getSecondOfMinute();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);

  }

  @Test
  public void test460() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test460"); }

    org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder0 = new org.joda.time.tz.DateTimeZoneBuilder();
    org.joda.time.DateTimeZone dateTimeZone3 = dateTimeZoneBuilder0.toDateTimeZone("22:23:00.007", false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone3);

  }

  @Test
  public void test461() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test461"); }

    org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long)459);

  }

  @Test
  public void test462() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test462"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(dateTimeZone0);
    org.joda.time.DateTimeFieldType[] dateTimeFieldType_array2 = timeOfDay1.getFieldTypes();
    int i3 = timeOfDay1.getMillisOfSecond();
    org.joda.time.TimeOfDay timeOfDay5 = timeOfDay1.plusSeconds((int)(byte)1);
    int i6 = timeOfDay5.getSecondOfMinute();
    org.joda.time.Chronology chronology7 = null;
    org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
    java.util.GregorianCalendar gregorianCalendar9 = mutableDateTime8.toGregorianCalendar();
    org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromCalendarFields((java.util.Calendar)gregorianCalendar9);
    org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = org.joda.time.format.ISODateTimeFormat.tTimeNoMillis();
    java.lang.String str12 = localTime10.toString(dateTimeFormatter11);
    boolean b13 = timeOfDay5.isBefore((org.joda.time.ReadablePartial)localTime10);
    org.joda.time.LocalTime localTime15 = localTime10.withMillisOfSecond(24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianCalendar9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "T00:00:00"+ "'", str12.equals("T00:00:00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localTime15);

  }

  @Test
  public void test463() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test463"); }

    org.joda.time.IllegalFieldValueException illegalFieldValueException4 = new org.joda.time.IllegalFieldValueException("", (java.lang.Number)47, (java.lang.Number)(byte)-1, (java.lang.Number)10080);
    illegalFieldValueException4.prependMessage("T03:56:29");
    org.joda.time.IllegalFieldValueException illegalFieldValueException11 = new org.joda.time.IllegalFieldValueException("", (java.lang.Number)47, (java.lang.Number)(byte)-1, (java.lang.Number)10080);
    illegalFieldValueException11.prependMessage("T03:56:29");
    illegalFieldValueException11.prependMessage("2017-06-06T00:00:00.000");
    illegalFieldValueException4.addSuppressed((java.lang.Throwable)illegalFieldValueException11);
    java.lang.String str17 = illegalFieldValueException4.getIllegalValueAsString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "47"+ "'", str17.equals("47"));

  }

  @Test
  public void test464() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test464"); }

    org.joda.time.Months months0 = org.joda.time.Months.TEN;
    org.joda.time.Months months1 = org.joda.time.Months.TWELVE;
    org.joda.time.Months months2 = org.joda.time.Months.FIVE;
    boolean b3 = months1.isLessThan(months2);
    org.joda.time.Months months4 = months0.plus(months2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(months0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(months1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(months2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(months4);

  }

  @Test
  public void test465() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test465"); }

    org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
    org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusSeconds(0);
    org.joda.time.LocalDateTime.Property property3 = localDateTime0.dayOfMonth();
    org.joda.time.Interval interval4 = property3.toInterval();
    org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
    org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusSeconds(0);
    org.joda.time.LocalDateTime.Property property8 = localDateTime5.dayOfMonth();
    org.joda.time.Interval interval9 = property8.toInterval();
    boolean b10 = interval9.containsNow();
    boolean b11 = interval4.abuts((org.joda.time.ReadableInterval)interval9);
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(dateTimeZone12);
    org.joda.time.ReadableDuration readableDuration14 = null;
    org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant)dateMidnight13, readableDuration14);
    org.joda.time.Years years17 = org.joda.time.Years.years(0);
    org.joda.time.Years years19 = years17.minus((int)(byte)-1);
    mutableInterval15.setPeriodAfterStart((org.joda.time.ReadablePeriod)years19);
    boolean b21 = interval9.isAfter((org.joda.time.ReadableInterval)mutableInterval15);
    org.joda.time.MutableInterval mutableInterval22 = mutableInterval15.copy();
    org.joda.time.Interval interval23 = mutableInterval22.toInterval();
    org.joda.time.MutableInterval mutableInterval24 = mutableInterval22.toMutableInterval();
    long long25 = mutableInterval24.getStartMillis();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(interval4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(interval9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(years17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(years19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableInterval22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(interval23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableInterval24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long25 == 0L);

  }

  @Test
  public void test466() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test466"); }

    org.joda.time.Chronology chronology1 = null;
    org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
    org.joda.time.PeriodType periodType3 = null;
    org.joda.time.chrono.GregorianChronology gregorianChronology4 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((java.lang.Object)chronology1, periodType3, (org.joda.time.Chronology)gregorianChronology4);
    org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long)345, chronology1);
    org.joda.time.DateTimeZone dateTimeZone7 = null;
    org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone7);
    org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths(0);
    org.joda.time.Chronology chronology12 = null;
    java.util.Locale locale13 = null;
    org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long)'4', chronology12, locale13, (java.lang.Integer)1, (int)'a');
    dateTimeParserBucket16.setOffset((java.lang.Integer)(-1));
    org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
    dateTimeParserBucket16.setZone(dateTimeZone19);
    org.joda.time.DateMidnight dateMidnight21 = yearMonthDay8.toDateMidnight(dateTimeZone19);
    org.joda.time.DateMidnight dateMidnight22 = localDate6.toDateMidnight(dateTimeZone19);
    org.joda.time.Period period27 = new org.joda.time.Period((int)(short)0, (int)'4', 1, 0);
    org.joda.time.PeriodType periodType28 = null;
    org.joda.time.Period period29 = period27.withPeriodType(periodType28);
    org.joda.time.Period period31 = period29.minusHours(10);
    org.joda.time.Period period32 = period31.toPeriod();
    org.joda.time.Duration duration33 = period32.toStandardDuration();
    org.joda.time.Chronology chronology34 = null;
    org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology34);
    org.joda.time.Instant instant36 = mutableDateTime35.toInstant();
    org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.millis();
    org.joda.time.PeriodType periodType38 = periodType37.withYearsRemoved();
    org.joda.time.Period period39 = duration33.toPeriodTo((org.joda.time.ReadableInstant)instant36, periodType37);
    org.joda.time.DateTimeZone dateTimeZone40 = null;
    org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(dateTimeZone40);
    org.joda.time.DateMidnight.Property property42 = dateMidnight41.centuryOfEra();
    org.joda.time.DateMidnight dateMidnight44 = property42.addWrapFieldToCopy((int)(short)100);
    org.joda.time.DateMidnight.Property property45 = dateMidnight44.dayOfYear();
    boolean b46 = duration33.equals((java.lang.Object)property45);
    boolean b47 = dateMidnight22.equals((java.lang.Object)property45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonthDay10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(duration33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);

  }

  @Test
  public void test467() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test467"); }

    org.joda.time.ReadableInstant readableInstant0 = null;
    org.joda.time.ReadableDuration readableDuration1 = null;
    org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, readableDuration1);
    org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = org.joda.time.format.DateTimeFormat.fullDate();
    org.joda.time.Chronology chronology4 = null;
    org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
    int i8 = dateTimeFormatter3.parseInto((org.joda.time.ReadWritableInstant)mutableDateTime5, "secondOfMinute", 100);
    org.joda.time.DateTimeZone dateTimeZone9 = null;
    org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(dateTimeZone9);
    long long11 = dateMidnight10.getMillis();
    org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.plusDays(24);
    mutablePeriod2.setPeriod((org.joda.time.ReadableInstant)mutableDateTime5, (org.joda.time.ReadableInstant)dateMidnight13);
    org.joda.time.DateTimeZone dateTimeZone16 = null;
    org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone16);
    java.lang.String str18 = copticChronology17.toString();
    mutablePeriod2.setPeriod(0L, (org.joda.time.Chronology)copticChronology17);
    org.joda.time.Period period20 = mutablePeriod2.toPeriod();
    org.joda.time.Period period21 = period20.normalizedStandard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-101));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "CopticChronology[UTC]"+ "'", str18.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period21);

  }

  @Test
  public void test468() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test468"); }

    org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long)10);
    org.joda.time.LocalDate.Property property2 = localDate1.era();
    org.joda.time.LocalDate localDate3 = property2.getLocalDate();
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.LocalDate localDate5 = property2.setCopy("26");
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate3);

  }

  @Test
  public void test469() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test469"); }

    org.joda.time.chrono.GregorianChronology gregorianChronology3 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period4 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology3);
    org.joda.time.DateTimeZone dateTimeZone5 = gregorianChronology3.getZone();
    org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long)1, dateTimeZone5);
    org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone5);
    org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone8 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone5);
    org.joda.time.chrono.IslamicChronology islamicChronology9 = org.joda.time.chrono.IslamicChronology.getInstance((org.joda.time.DateTimeZone)cachedDateTimeZone8);
    org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long)330, (org.joda.time.Chronology)islamicChronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(cachedDateTimeZone8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(islamicChronology9);

  }

  @Test
  public void test470() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test470"); }

    org.joda.time.ReadableInstant readableInstant1 = null;
    org.joda.time.ReadableDuration readableDuration2 = null;
    org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant1, readableDuration2);
    org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = org.joda.time.format.DateTimeFormat.fullDate();
    org.joda.time.Chronology chronology5 = null;
    org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
    int i9 = dateTimeFormatter4.parseInto((org.joda.time.ReadWritableInstant)mutableDateTime6, "secondOfMinute", 100);
    org.joda.time.DateTimeZone dateTimeZone10 = null;
    org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(dateTimeZone10);
    long long12 = dateMidnight11.getMillis();
    org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.plusDays(24);
    mutablePeriod3.setPeriod((org.joda.time.ReadableInstant)mutableDateTime6, (org.joda.time.ReadableInstant)dateMidnight14);
    org.joda.time.DateTimeZone dateTimeZone17 = null;
    org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone17);
    java.lang.String str19 = copticChronology18.toString();
    mutablePeriod3.setPeriod(0L, (org.joda.time.Chronology)copticChronology18);
    org.joda.time.DurationField durationField21 = copticChronology18.hours();
    java.lang.String str22 = copticChronology18.toString();
    org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay(0L, (org.joda.time.Chronology)copticChronology18);
    org.joda.time.TimeOfDay timeOfDay25 = timeOfDay23.minusSeconds(17);
    org.joda.time.TimeOfDay timeOfDay27 = timeOfDay25.plusHours(330);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-101));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long12 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "CopticChronology[UTC]"+ "'", str19.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "CopticChronology[UTC]"+ "'", str22.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay27);

  }

  @Test
  public void test471() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test471"); }

    org.joda.time.format.PeriodPrinter periodPrinter0 = null;
    org.joda.time.format.PeriodFormatter periodFormatter1 = org.joda.time.format.ISOPeriodFormat.alternateWithWeeks();
    org.joda.time.DateTimeZone dateTimeZone4 = null;
    org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone4);
    org.joda.time.LocalDateTime.Property property6 = localDateTime5.monthOfYear();
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone8);
    boolean b10 = localDateTime5.isAfter((org.joda.time.ReadablePartial)localDateTime9);
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone12);
    org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfDay((int)(short)0);
    org.joda.time.LocalDateTime.Property property16 = localDateTime15.dayOfYear();
    org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.dayTime();
    org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial)localDateTime5, (org.joda.time.ReadablePartial)localDateTime15, periodType17);
    org.joda.time.PeriodType periodType19 = periodType17.withSecondsRemoved();
    org.joda.time.PeriodType periodType20 = org.joda.time.DateTimeUtils.getPeriodType(periodType19);
    org.joda.time.Chronology chronology21 = null;
    org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
    org.joda.time.PeriodType periodType23 = null;
    org.joda.time.chrono.GregorianChronology gregorianChronology24 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((java.lang.Object)chronology21, periodType23, (org.joda.time.Chronology)gregorianChronology24);
    org.joda.time.DateTimeField dateTimeField26 = gregorianChronology24.hourOfDay();
    org.joda.time.DurationField durationField27 = gregorianChronology24.minutes();
    org.joda.time.Period period28 = new org.joda.time.Period((long)37, periodType19, (org.joda.time.Chronology)gregorianChronology24);
    org.joda.time.format.PeriodFormatter periodFormatter29 = periodFormatter1.withParseType(periodType19);
    java.util.Locale locale30 = null;
    org.joda.time.format.PeriodFormatter periodFormatter31 = periodFormatter29.withLocale(locale30);
    org.joda.time.format.PeriodParser periodParser32 = periodFormatter29.getParser();
    org.joda.time.format.PeriodFormatter periodFormatter33 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodFormatter1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodType20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationField27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodFormatter29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodFormatter31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(periodParser32);

  }

  @Test
  public void test472() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test472"); }

    org.joda.time.DateTimeZone dateTimeZone1 = null;
    org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone1);
    org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
    org.joda.time.LocalDateTime.Property property4 = localDateTime2.monthOfYear();
    org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property5);

  }

  @Test
  public void test473() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test473"); }

    org.joda.time.Chronology chronology1 = null;
    java.util.Locale locale2 = null;
    org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long)'4', chronology1, locale2, (java.lang.Integer)1, (int)'a');
    dateTimeParserBucket5.setOffset((java.lang.Integer)(-1));
    org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
    dateTimeParserBucket5.setZone(dateTimeZone8);
    org.joda.time.Chronology chronology10 = null;
    org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
    org.joda.time.DateTimeZone dateTimeZone12 = null;
    org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone12);
    java.lang.String str14 = copticChronology13.toString();
    org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone15);
    org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay(dateTimeZone15);
    org.joda.time.Chronology chronology18 = copticChronology13.withZone(dateTimeZone15);
    org.joda.time.DateTime dateTime19 = mutableDateTime11.toDateTime(dateTimeZone15);
    org.joda.time.chrono.EthiopicChronology ethiopicChronology21 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone15, (int)(byte)1);
    boolean b22 = dateTimeParserBucket5.restoreState((java.lang.Object)ethiopicChronology21);
    org.joda.time.DateTimeField dateTimeField23 = ethiopicChronology21.minuteOfHour();
    org.joda.time.DateMidnight dateMidnight24 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)ethiopicChronology21);
    int i25 = ethiopicChronology21.getMinimumDaysInFirstWeek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "CopticChronology[UTC]"+ "'", str14.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(ethiopicChronology21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);

  }

  @Test
  public void test474() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test474"); }

    org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long)10);
    java.lang.String str2 = localDate1.toString();
    org.joda.time.LocalDate localDate4 = localDate1.withDayOfMonth(3);
    org.joda.time.DateMidnight dateMidnight5 = localDate1.toDateMidnight();
    org.joda.time.LocalDate localDate7 = localDate1.plusMonths((-101));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "1970-01-01"+ "'", str2.equals("1970-01-01"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate7);

  }

  @Test
  public void test475() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test475"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.withDayOfWeek(953);
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  @Test
  public void test476() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test476"); }

    org.joda.time.Chronology chronology1 = null;
    java.util.Locale locale2 = null;
    org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long)'4', chronology1, locale2, (java.lang.Integer)1, (int)'a');
    dateTimeParserBucket5.setOffset((java.lang.Integer)(-1));
    org.joda.time.DateTimeZone dateTimeZone8 = null;
    org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone8);
    java.lang.String str10 = copticChronology9.toString();
    org.joda.time.DateTimeField dateTimeField11 = copticChronology9.centuryOfEra();
    org.joda.time.DateTimeZone dateTimeZone13 = null;
    org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone13);
    java.lang.String str15 = copticChronology14.toString();
    org.joda.time.TimeOfDay timeOfDay16 = org.joda.time.TimeOfDay.fromMillisOfDay(0L, (org.joda.time.Chronology)copticChronology14);
    org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone17);
    int i20 = dateTimeZone17.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone17);
    org.joda.time.DateTime dateTime23 = dateTime21.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property24 = dateTime21.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType25 = property24.getFieldType();
    org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology27 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone26);
    int i29 = dateTimeZone26.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone26);
    org.joda.time.DateTime dateTime32 = dateTime30.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property33 = dateTime30.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType34 = property33.getFieldType();
    org.joda.time.DateTimeComparator dateTimeComparator35 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType25, dateTimeFieldType34);
    int i36 = timeOfDay16.indexOf(dateTimeFieldType34);
    org.joda.time.field.OffsetDateTimeField offsetDateTimeField40 = new org.joda.time.field.OffsetDateTimeField(dateTimeField11, dateTimeFieldType34, 10, 1000, 628);
    dateTimeParserBucket5.saveField(dateTimeFieldType34, 365);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "CopticChronology[UTC]"+ "'", str10.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "CopticChronology[UTC]"+ "'", str15.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == (-1));

  }

  @Test
  public void test477() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test477"); }

    org.joda.time.DateTimeZone dateTimeZone1 = null;
    org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long)(short)100, dateTimeZone1);
    org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears(345);
    org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withDayOfYear(2);
    org.joda.time.LocalDateTime.Property property7 = localDateTime6.secondOfMinute();
    java.lang.String str8 = property7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Property[secondOfMinute]"+ "'", str8.equals("Property[secondOfMinute]"));

  }

  @Test
  public void test478() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test478"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
    org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusMonths(0);
    org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay3.plusYears(1000);
    org.joda.time.DateTime dateTime6 = yearMonthDay5.toDateTimeAtMidnight();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonthDay3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonthDay5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime6);

  }

  @Test
  public void test479() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test479"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
    java.lang.String str2 = copticChronology1.toString();
    org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
    org.joda.time.DateTimeZone dateTimeZone5 = null;
    org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone5);
    java.lang.String str7 = copticChronology6.toString();
    org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(0L, (org.joda.time.Chronology)copticChronology6);
    org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone9);
    int i12 = dateTimeZone9.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone9);
    org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property16 = dateTime13.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType17 = property16.getFieldType();
    org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone18);
    int i21 = dateTimeZone18.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone18);
    org.joda.time.DateTime dateTime24 = dateTime22.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property25 = dateTime22.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType26 = property25.getFieldType();
    org.joda.time.DateTimeComparator dateTimeComparator27 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType17, dateTimeFieldType26);
    int i28 = timeOfDay8.indexOf(dateTimeFieldType26);
    org.joda.time.field.OffsetDateTimeField offsetDateTimeField32 = new org.joda.time.field.OffsetDateTimeField(dateTimeField3, dateTimeFieldType26, 10, 1000, 628);
    org.joda.time.field.OffsetDateTimeField offsetDateTimeField34 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField)offsetDateTimeField32, 1000);
    long long36 = offsetDateTimeField32.roundHalfCeiling((long)992);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "CopticChronology[UTC]"+ "'", str2.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "CopticChronology[UTC]"+ "'", str7.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long36 == 463708800000L);

  }

  @Test
  public void test480() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test480"); }

    org.joda.time.Chronology chronology0 = null;
    org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
    org.joda.time.Instant instant2 = mutableDateTime1.toInstant();
    org.joda.time.ReadableInstant readableInstant3 = null;
    boolean b4 = mutableDateTime1.isEqual(readableInstant3);
    org.joda.time.ReadableInstant readableInstant5 = null;
    org.joda.time.ReadableDuration readableDuration6 = null;
    org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(readableInstant5, readableDuration6);
    org.joda.time.chrono.GregorianChronology gregorianChronology9 = org.joda.time.chrono.GregorianChronology.getInstance();
    mutablePeriod7.setPeriod((long)100, (org.joda.time.Chronology)gregorianChronology9);
    int i11 = mutablePeriod7.getWeeks();
    boolean b12 = org.joda.time.field.FieldUtils.equals((java.lang.Object)mutableDateTime1, (java.lang.Object)i11);
    org.joda.time.chrono.GregorianChronology gregorianChronology14 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period15 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology14);
    org.joda.time.DateTimeZone dateTimeZone16 = gregorianChronology14.getZone();
    org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime1.toMutableDateTime(dateTimeZone16);
    org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone18);
    int i21 = dateTimeZone18.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone18);
    org.joda.time.DateTime dateTime24 = dateTime22.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property25 = dateTime22.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType26 = property25.getFieldType();
    org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone27);
    int i30 = dateTimeZone27.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone27);
    org.joda.time.DateTime dateTime33 = dateTime31.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property34 = dateTime31.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType35 = property34.getFieldType();
    org.joda.time.DateTimeComparator dateTimeComparator36 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType26, dateTimeFieldType35);
    org.joda.time.Partial partial38 = new org.joda.time.Partial(dateTimeFieldType26, (int)(byte)1);
    mutableDateTime17.set(dateTimeFieldType26, 8);
    mutableDateTime17.setMillis((long)54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(mutableDateTime17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator36);

  }

  @Test
  public void test481() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test481"); }

    org.joda.time.IllegalFieldValueException illegalFieldValueException4 = new org.joda.time.IllegalFieldValueException("", (java.lang.Number)47, (java.lang.Number)(byte)-1, (java.lang.Number)10080);
    java.lang.String str5 = illegalFieldValueException4.getIllegalValueAsString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "47"+ "'", str5.equals("47"));

  }

  @Test
  public void test482() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test482"); }

    org.joda.time.Period period4 = new org.joda.time.Period((int)(short)0, (int)'4', 1, 0);
    org.joda.time.PeriodType periodType5 = null;
    org.joda.time.Period period6 = period4.withPeriodType(periodType5);
    org.joda.time.Hours hours7 = period4.toStandardHours();
    org.joda.time.Days days8 = hours7.toStandardDays();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hours7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(days8);

  }

  @Test
  public void test483() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test483"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
    org.joda.time.DateMidnight dateMidnight2 = yearMonthDay1.toDateMidnight();
    org.joda.time.YearMonthDay.Property property3 = yearMonthDay1.dayOfMonth();
    org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusDays(429);
    org.joda.time.YearMonthDay.Property property6 = yearMonthDay1.monthOfYear();
    java.lang.String str7 = property6.getAsShortText();
    org.joda.time.YearMonthDay yearMonthDay8 = property6.withMinimumValue();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonthDay5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Jan"+ "'", str7.equals("Jan"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonthDay8);

  }

  @Test
  public void test484() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test484"); }

    org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateHourMinuteSecondFraction();
    org.joda.time.Chronology chronology1 = null;
    org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone3);
    java.lang.String str5 = copticChronology4.toString();
    org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone6);
    org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay(dateTimeZone6);
    org.joda.time.Chronology chronology9 = copticChronology4.withZone(dateTimeZone6);
    org.joda.time.DateTime dateTime10 = mutableDateTime2.toDateTime(dateTimeZone6);
    java.lang.String str11 = dateTimeFormatter0.print((org.joda.time.ReadableInstant)mutableDateTime2);
    java.lang.Object obj12 = mutableDateTime2.clone();
    org.joda.time.MutableDateTime.Property property13 = mutableDateTime2.dayOfYear();
    org.joda.time.MutableDateTime.Property property14 = mutableDateTime2.millisOfSecond();
    int i15 = property14.getMinimumValueOverall();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "CopticChronology[UTC]"+ "'", str5.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "1970-01-01T00:00:00.007"+ "'", str11.equals("1970-01-01T00:00:00.007"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);

  }

  @Test
  public void test485() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test485"); }

    org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.ISODateTimeFormat.weekDate();
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.MonthDay monthDay2 = org.joda.time.MonthDay.parse("--01-01", dateTimeFormatter1);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter1);

  }

  @Test
  public void test486() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test486"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(dateTimeZone0);
    org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.minusSeconds((int)(short)0);
    org.joda.time.TimeOfDay.Property property4 = timeOfDay1.secondOfMinute();
    org.joda.time.TimeOfDay.Property property5 = timeOfDay1.millisOfSecond();
    org.joda.time.ReadablePeriod readablePeriod6 = null;
    org.joda.time.TimeOfDay timeOfDay8 = timeOfDay1.withPeriodAdded(readablePeriod6, 330);
    org.joda.time.LocalTime localTime9 = timeOfDay1.toLocalTime();
    org.joda.time.LocalTime.Property property10 = localTime9.millisOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property10);

  }

  @Test
  public void test487() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test487"); }

    org.joda.time.ReadableInterval readableInterval0 = null;
    org.joda.time.Hours hours1 = org.joda.time.Hours.hoursIn(readableInterval0);
    org.joda.time.DurationFieldType durationFieldType2 = hours1.getFieldType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hours1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(durationFieldType2);

  }

  @Test
  public void test488() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test488"); }

    org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
    org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusSeconds(0);
    org.joda.time.LocalDateTime.Property property3 = localDateTime0.dayOfMonth();
    org.joda.time.Interval interval4 = property3.toInterval();
    org.joda.time.Minutes minutes5 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval)interval4);
    org.joda.time.Weeks weeks6 = minutes5.toStandardWeeks();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDateTime2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(interval4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(minutes5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weeks6);

  }

  @Test
  public void test489() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test489"); }

    org.joda.time.DateTime dateTime0 = org.joda.time.DateTime.now();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime0);

  }

  @Test
  public void test490() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test490"); }

    org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateHourMinuteSecondFraction();
    org.joda.time.Chronology chronology1 = null;
    org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
    org.joda.time.DateTimeZone dateTimeZone3 = null;
    org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone3);
    java.lang.String str5 = copticChronology4.toString();
    org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone6);
    org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay(dateTimeZone6);
    org.joda.time.Chronology chronology9 = copticChronology4.withZone(dateTimeZone6);
    org.joda.time.DateTime dateTime10 = mutableDateTime2.toDateTime(dateTimeZone6);
    java.lang.String str11 = dateTimeFormatter0.print((org.joda.time.ReadableInstant)mutableDateTime2);
    java.lang.Object obj12 = mutableDateTime2.clone();
    org.joda.time.MutableDateTime.Property property13 = mutableDateTime2.dayOfYear();
    // The following exception was thrown during execution in test generation
    try {
    org.joda.time.MutableDateTime mutableDateTime15 = property13.set("T03:56:36");
      org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "CopticChronology[UTC]"+ "'", str5.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(chronology9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "1970-01-01T00:00:00.007"+ "'", str11.equals("1970-01-01T00:00:00.007"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property13);

  }

  @Test
  public void test491() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test491"); }

    org.joda.time.Period period4 = new org.joda.time.Period((int)(short)0, (int)'4', 1, 0);
    org.joda.time.PeriodType periodType5 = null;
    org.joda.time.Period period6 = period4.withPeriodType(periodType5);
    org.joda.time.Hours hours7 = period4.toStandardHours();
    org.joda.time.Period period9 = period4.plusMonths(298);
    org.joda.time.Period period11 = period4.minusWeeks(8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hours7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(period11);

  }

  @Test
  public void test492() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test492"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
    java.lang.String str2 = copticChronology1.toString();
    org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
    org.joda.time.DateTimeZone dateTimeZone5 = null;
    org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone5);
    java.lang.String str7 = copticChronology6.toString();
    org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(0L, (org.joda.time.Chronology)copticChronology6);
    org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone9);
    int i12 = dateTimeZone9.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone9);
    org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property16 = dateTime13.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType17 = property16.getFieldType();
    org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone18);
    int i21 = dateTimeZone18.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone18);
    org.joda.time.DateTime dateTime24 = dateTime22.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property25 = dateTime22.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType26 = property25.getFieldType();
    org.joda.time.DateTimeComparator dateTimeComparator27 = org.joda.time.DateTimeComparator.getInstance(dateTimeFieldType17, dateTimeFieldType26);
    int i28 = timeOfDay8.indexOf(dateTimeFieldType26);
    org.joda.time.field.OffsetDateTimeField offsetDateTimeField32 = new org.joda.time.field.OffsetDateTimeField(dateTimeField3, dateTimeFieldType26, 10, 1000, 628);
    org.joda.time.DateTimeField dateTimeField33 = offsetDateTimeField32.getWrappedField();
    long long36 = offsetDateTimeField32.getDifferenceAsLong((long)(byte)10, (long)14312);
    org.joda.time.field.FieldUtils.verifyValueBounds((org.joda.time.DateTimeField)offsetDateTimeField32, (int)'a', 3, (int)(short)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "CopticChronology[UTC]"+ "'", str2.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(copticChronology6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "CopticChronology[UTC]"+ "'", str7.equals("CopticChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(timeOfDay8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeComparator27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeField33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long36 == 0L);

  }

  @Test
  public void test493() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test493"); }

    org.joda.time.chrono.GregorianChronology gregorianChronology4 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period5 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology4);
    org.joda.time.DateTimeZone dateTimeZone6 = gregorianChronology4.getZone();
    org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay((int)(byte)1, 6, 8, (org.joda.time.Chronology)gregorianChronology4);
    org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay7.plusMonths(10);
    org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period12 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology11);
    org.joda.time.Weeks weeks13 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod)period12);
    org.joda.time.Weeks weeks14 = org.joda.time.Weeks.MIN_VALUE;
    org.joda.time.Weeks weeks16 = weeks14.minus((-1));
    int i17 = weeks16.getWeeks();
    org.joda.time.Weeks weeks18 = weeks13.plus(weeks16);
    org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay9.withPeriodAdded((org.joda.time.ReadablePeriod)weeks18, 999);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonthDay9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weeks13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weeks14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weeks16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == (-2147483647));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(weeks18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonthDay20);

  }

  @Test
  public void test494() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test494"); }

    org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis();
    org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone6 = new org.joda.time.tz.FixedDateTimeZone("hi!", "2017-W23-2T03:56:37Z", 26, 1034);
    java.lang.String str7 = fixedDateTimeZone6.getID();
    org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long)1970, (org.joda.time.DateTimeZone)fixedDateTimeZone6);
    long long10 = fixedDateTimeZone6.nextTransition((long)(short)1);
    org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter0.withZone((org.joda.time.DateTimeZone)fixedDateTimeZone6);
    boolean b12 = dateTimeFormatter11.isOffsetParsed();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "hi!"+ "'", str7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long10 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatter11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test495() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test495"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
    org.joda.time.DateMidnight.Property property2 = dateMidnight1.centuryOfEra();
    org.joda.time.DateMidnight.Property property3 = dateMidnight1.dayOfYear();
    org.joda.time.Duration duration6 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.Duration duration8 = duration6.minus((long)10080);
    org.joda.time.Chronology chronology9 = null;
    org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
    org.joda.time.Instant instant11 = mutableDateTime10.toInstant();
    org.joda.time.ReadableInstant readableInstant12 = null;
    boolean b13 = mutableDateTime10.isEqual(readableInstant12);
    org.joda.time.DateTime dateTime14 = mutableDateTime10.toDateTime();
    org.joda.time.DateTime.Property property15 = dateTime14.yearOfCentury();
    java.util.Locale locale17 = null;
    org.joda.time.DateTime dateTime18 = property15.setCopy("26", locale17);
    org.joda.time.Seconds seconds19 = org.joda.time.Seconds.TWO;
    org.joda.time.DateTime dateTime21 = dateTime18.withPeriodAdded((org.joda.time.ReadablePeriod)seconds19, 5);
    org.joda.time.DateTimeZone dateTimeZone22 = null;
    org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(dateTimeZone22);
    org.joda.time.Duration duration26 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.DateMidnight dateMidnight27 = dateMidnight23.minus((org.joda.time.ReadableDuration)duration26);
    org.joda.time.DateTime dateTime28 = dateTime18.plus((org.joda.time.ReadableDuration)duration26);
    boolean b29 = duration6.equals((java.lang.Object)dateTime28);
    org.joda.time.DateMidnight dateMidnight30 = dateMidnight1.plus((org.joda.time.ReadableDuration)duration6);
    org.joda.time.LocalDate localDate31 = dateMidnight1.toLocalDate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(duration8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(seconds19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(localDate31);

  }

  @Test
  public void test496() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test496"); }

    org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendMinuteOfHour(345);
    org.joda.time.Chronology chronology4 = null;
    java.util.Locale locale5 = null;
    org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket((long)'4', chronology4, locale5, (java.lang.Integer)1, (int)'a');
    dateTimeParserBucket8.setOffset((java.lang.Integer)(-1));
    org.joda.time.Chronology chronology11 = null;
    org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
    java.util.GregorianCalendar gregorianCalendar13 = mutableDateTime12.toGregorianCalendar();
    mutableDateTime12.addMinutes((int)(byte)1);
    org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone16);
    int i19 = dateTimeZone16.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone16);
    org.joda.time.DateTime dateTime22 = dateTime20.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property23 = dateTime20.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType24 = property23.getFieldType();
    mutableDateTime12.set(dateTimeFieldType24, (int)(byte)10);
    dateTimeParserBucket8.saveField(dateTimeFieldType24, 10080);
    org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
    org.joda.time.chrono.ISOChronology iSOChronology30 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone29);
    int i32 = dateTimeZone29.getOffsetFromLocal((long)100);
    org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone29);
    org.joda.time.DateTime dateTime35 = dateTime33.minusWeeks((int)'4');
    org.joda.time.DateTime.Property property36 = dateTime33.millisOfDay();
    org.joda.time.DateTimeFieldType dateTimeFieldType37 = property36.getFieldType();
    java.util.Locale locale39 = null;
    dateTimeParserBucket8.saveField(dateTimeFieldType37, "2017-06-06T03:56:46.030", locale39);
    org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder43 = dateTimeFormatterBuilder2.appendSignedDecimal(dateTimeFieldType37, 429, 345);
    org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder46 = dateTimeFormatterBuilder43.appendYearOfEra(298, 770);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianCalendar13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(iSOChronology30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFieldType37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatterBuilder43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeFormatterBuilder46);

  }

  @Test
  public void test497() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test497"); }

    org.joda.time.DateTimeZone dateTimeZone0 = null;
    org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(dateTimeZone0);
    org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.plusDays((int)(short)100);
    org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay3.withMonthOfYear(10);
    org.joda.time.YearMonthDay.Property property6 = yearMonthDay3.monthOfYear();
    org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay3.minusMonths((int)(short)-1);
    org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
    java.lang.String str11 = dateTimeZone9.getShortName(1496721385602L);
    org.joda.time.Interval interval12 = yearMonthDay8.toInterval(dateTimeZone9);
    org.joda.time.DateTimeZone dateTimeZone13 = null;
    org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(dateTimeZone13);
    org.joda.time.DateMidnight.Property property15 = dateMidnight14.centuryOfEra();
    org.joda.time.DateMidnight.Property property16 = dateMidnight14.dayOfYear();
    org.joda.time.DateMidnight.Property property17 = dateMidnight14.yearOfCentury();
    org.joda.time.DateMidnight dateMidnight20 = dateMidnight14.withDurationAdded((long)(byte)10, 12);
    org.joda.time.Interval interval21 = interval12.withStart((org.joda.time.ReadableInstant)dateMidnight20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonthDay3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonthDay5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(yearMonthDay8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "UTC"+ "'", str11.equals("UTC"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(interval12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(interval21);

  }

  @Test
  public void test498() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test498"); }

    org.joda.time.Instant instant0 = new org.joda.time.Instant();
    org.joda.time.Duration duration3 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.Duration duration6 = duration3.withDurationAdded((long)28, (int)' ');
    org.joda.time.Instant instant7 = instant0.minus((org.joda.time.ReadableDuration)duration6);
    org.joda.time.Duration duration10 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.Duration duration13 = duration10.withDurationAdded((long)28, (int)' ');
    org.joda.time.Instant instant14 = instant0.minus((org.joda.time.ReadableDuration)duration13);
    org.joda.time.Instant instant16 = instant0.withMillis((-1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(duration6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(duration13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant16);

  }

  @Test
  public void test499() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test499"); }

    org.joda.time.Chronology chronology0 = null;
    org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
    org.joda.time.Instant instant2 = mutableDateTime1.toInstant();
    org.joda.time.ReadableInstant readableInstant3 = null;
    boolean b4 = mutableDateTime1.isEqual(readableInstant3);
    org.joda.time.DateTime dateTime5 = mutableDateTime1.toDateTime();
    org.joda.time.DateTime.Property property6 = dateTime5.yearOfCentury();
    java.util.Locale locale8 = null;
    org.joda.time.DateTime dateTime9 = property6.setCopy("26", locale8);
    org.joda.time.Seconds seconds10 = org.joda.time.Seconds.TWO;
    org.joda.time.DateTime dateTime12 = dateTime9.withPeriodAdded((org.joda.time.ReadablePeriod)seconds10, 5);
    org.joda.time.DateTimeZone dateTimeZone13 = null;
    org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(dateTimeZone13);
    org.joda.time.Duration duration17 = new org.joda.time.Duration((long)(short)10, (long)(short)0);
    org.joda.time.DateMidnight dateMidnight18 = dateMidnight14.minus((org.joda.time.ReadableDuration)duration17);
    org.joda.time.DateTime dateTime19 = dateTime9.plus((org.joda.time.ReadableDuration)duration17);
    int i20 = dateTime9.getDayOfMonth();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(instant2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(property6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(seconds10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTime19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);

  }

  @Test
  public void test500() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test500"); }

    org.joda.time.chrono.GregorianChronology gregorianChronology2 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.Period period3 = new org.joda.time.Period((long)100, (org.joda.time.Chronology)gregorianChronology2);
    org.joda.time.DateTimeZone dateTimeZone4 = gregorianChronology2.getZone();
    org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long)1, dateTimeZone4);
    org.joda.time.DateMidnight dateMidnight6 = org.joda.time.DateMidnight.now(dateTimeZone4);
    org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gregorianChronology2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateTimeZone4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(dateMidnight6);

  }

}
