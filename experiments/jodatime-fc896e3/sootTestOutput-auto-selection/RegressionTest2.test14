org.joda.time.PeriodType.standard : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cStandard> >>>>>>>> org.joda.time.PeriodType.standard : if r0 != null
org.joda.time.PeriodType.standard : if r0 != null >>>>>>>> org.joda.time.PeriodType.standard : return r0
org.joda.time.PeriodType.standard : return r0 >>>>>>>> org.joda.time.base.BasePeriod.checkPeriodType : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>(r1)
org.joda.time.base.BasePeriod.checkPeriodType : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getPeriodType : if r0 != null
org.joda.time.DateTimeUtils.getPeriodType : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getPeriodType : return r0
org.joda.time.DateTimeUtils.getPeriodType : return r0 >>>>>>>> org.joda.time.base.BasePeriod.checkPeriodType : return $r2
org.joda.time.base.BasePeriod.checkPeriodType : return $r2 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $i8 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int size()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $i8 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int size()>() >>>>>>>> org.joda.time.base.AbstractPeriod.size : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.base.AbstractPeriod.size : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.base.BasePeriod.getPeriodType : $r1 = r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType>
org.joda.time.base.BasePeriod.getPeriodType : $r1 = r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> >>>>>>>> org.joda.time.base.BasePeriod.getPeriodType : return $r1
org.joda.time.base.BasePeriod.getPeriodType : return $r1 >>>>>>>> org.joda.time.base.AbstractPeriod.size : $i0 = virtualinvoke $r1.<org.joda.time.PeriodType: int size()>()
org.joda.time.base.AbstractPeriod.size : $i0 = virtualinvoke $r1.<org.joda.time.PeriodType: int size()>() >>>>>>>> org.joda.time.PeriodType.size : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.size : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes> >>>>>>>> org.joda.time.PeriodType.size : $i0 = lengthof $r1
org.joda.time.PeriodType.size : $i0 = lengthof $r1 >>>>>>>> org.joda.time.PeriodType.size : return $i0
org.joda.time.PeriodType.size : return $i0 >>>>>>>> org.joda.time.base.AbstractPeriod.size : return $i0
org.joda.time.base.AbstractPeriod.size : return $i0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : r1 = newarray (int)[$i8]
org.joda.time.base.BasePeriod.setPeriodInternal : r1 = newarray (int)[$i8] >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>() >>>>>>>> org.joda.time.DurationFieldType.years : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType YEARS_TYPE>
org.joda.time.DurationFieldType.years : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType YEARS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.years : return $r0
org.joda.time.DurationFieldType.years : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r2, r1, i0)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r2, r1, i0) >>>>>>>> org.joda.time.base.BasePeriod.checkAndUpdate : i1 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int indexOf(org.joda.time.DurationFieldType)>(r1)
org.joda.time.base.BasePeriod.checkAndUpdate : i1 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int indexOf(org.joda.time.DurationFieldType)>(r1) >>>>>>>> org.joda.time.base.AbstractPeriod.indexOf : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.base.AbstractPeriod.indexOf : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.base.AbstractPeriod.indexOf : $i0 = virtualinvoke $r2.<org.joda.time.PeriodType: int indexOf(org.joda.time.DurationFieldType)>(r1)
org.joda.time.base.AbstractPeriod.indexOf : $i0 = virtualinvoke $r2.<org.joda.time.PeriodType: int indexOf(org.joda.time.DurationFieldType)>(r1) >>>>>>>> org.joda.time.PeriodType.indexOf : i0 = 0
org.joda.time.PeriodType.indexOf : i0 = 0 >>>>>>>> org.joda.time.PeriodType.indexOf : i1 = virtualinvoke r0.<org.joda.time.PeriodType: int size()>()
org.joda.time.PeriodType.indexOf : i1 = virtualinvoke r0.<org.joda.time.PeriodType: int size()>() >>>>>>>> org.joda.time.PeriodType.indexOf : if i0 >= i1
org.joda.time.PeriodType.indexOf : if i0 >= i1 >>>>>>>> org.joda.time.PeriodType.indexOf : $r2 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.indexOf : $r2 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes> >>>>>>>> org.joda.time.PeriodType.indexOf : $r3 = $r2[i0]
org.joda.time.PeriodType.indexOf : $r3 = $r2[i0] >>>>>>>> org.joda.time.PeriodType.indexOf : if $r3 != r1
org.joda.time.PeriodType.indexOf : if $r3 != r1 >>>>>>>> org.joda.time.PeriodType.indexOf : return i0
org.joda.time.PeriodType.indexOf : return i0 >>>>>>>> org.joda.time.base.AbstractPeriod.indexOf : return $i0
org.joda.time.base.AbstractPeriod.indexOf : return $i0 >>>>>>>> org.joda.time.base.BasePeriod.checkAndUpdate : if i1 != -1
org.joda.time.base.BasePeriod.checkAndUpdate : if i1 != -1 >>>>>>>> org.joda.time.base.BasePeriod.checkAndUpdate : r2[i1] = i0
org.joda.time.base.BasePeriod.checkAndUpdate : r2[i1] = i0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r3 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r3 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>() >>>>>>>> org.joda.time.DurationFieldType.months : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MONTHS_TYPE>
org.joda.time.DurationFieldType.months : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MONTHS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.months : return $r0
org.joda.time.DurationFieldType.months : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r3, r1, i1)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r3, r1, i1) >>>>>>>> org.joda.time.PeriodType.indexOf : i0 = i0 + 1
org.joda.time.PeriodType.indexOf : i0 = i0 + 1 >>>>>>>> org.joda.time.PeriodType.indexOf : goto [?= (branch)]
org.joda.time.PeriodType.indexOf : goto [?= (branch)] >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r4 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r4 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>() >>>>>>>> org.joda.time.DurationFieldType.weeks : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType WEEKS_TYPE>
org.joda.time.DurationFieldType.weeks : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType WEEKS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.weeks : return $r0
org.joda.time.DurationFieldType.weeks : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r4, r1, i2)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r4, r1, i2) >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r5 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r5 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>() >>>>>>>> org.joda.time.DurationFieldType.days : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType DAYS_TYPE>
org.joda.time.DurationFieldType.days : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType DAYS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.days : return $r0
org.joda.time.DurationFieldType.days : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r5, r1, i3)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r5, r1, i3) >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r6 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r6 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>() >>>>>>>> org.joda.time.DurationFieldType.hours : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType HOURS_TYPE>
org.joda.time.DurationFieldType.hours : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType HOURS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.hours : return $r0
org.joda.time.DurationFieldType.hours : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r6, r1, i4)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r6, r1, i4) >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r7 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r7 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>() >>>>>>>> org.joda.time.DurationFieldType.minutes : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MINUTES_TYPE>
org.joda.time.DurationFieldType.minutes : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MINUTES_TYPE> >>>>>>>> org.joda.time.DurationFieldType.minutes : return $r0
org.joda.time.DurationFieldType.minutes : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r7, r1, i5)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r7, r1, i5) >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r8 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r8 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>() >>>>>>>> org.joda.time.DurationFieldType.seconds : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType SECONDS_TYPE>
org.joda.time.DurationFieldType.seconds : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType SECONDS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.seconds : return $r0
org.joda.time.DurationFieldType.seconds : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r8, r1, i6)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r8, r1, i6) >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r9 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r9 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>() >>>>>>>> org.joda.time.DurationFieldType.millis : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MILLIS_TYPE>
org.joda.time.DurationFieldType.millis : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MILLIS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.millis : return $r0
org.joda.time.DurationFieldType.millis : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r9, r1, i7)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r9, r1, i7) >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : return r1
org.joda.time.base.BasePeriod.setPeriodInternal : return r1 >>>>>>>> org.joda.time.Period.withPeriodType : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>(r1)
org.joda.time.Period.withPeriodType : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getPeriodType : $r1 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType standard()>()
org.joda.time.DateTimeUtils.getPeriodType : $r1 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType standard()>() >>>>>>>> org.joda.time.DateTimeUtils.getPeriodType : return $r1
org.joda.time.DateTimeUtils.getPeriodType : return $r1 >>>>>>>> org.joda.time.Period.withPeriodType : $r3 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.withPeriodType : $r3 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.withPeriodType : $z0 = virtualinvoke r2.<org.joda.time.PeriodType: boolean equals(java.lang.Object)>($r3)
org.joda.time.Period.withPeriodType : $z0 = virtualinvoke r2.<org.joda.time.PeriodType: boolean equals(java.lang.Object)>($r3) >>>>>>>> org.joda.time.PeriodType.equals : if r0 != r1
org.joda.time.PeriodType.equals : if r0 != r1 >>>>>>>> org.joda.time.PeriodType.equals : return 1
org.joda.time.PeriodType.equals : return 1 >>>>>>>> org.joda.time.Period.withPeriodType : if $z0 == 0
org.joda.time.Period.withPeriodType : if $z0 == 0 >>>>>>>> org.joda.time.Period.withPeriodType : return r0
org.joda.time.Period.withPeriodType : return r0 >>>>>>>> org.joda.time.Period.minusHours : $i1 = neg i0
org.joda.time.Period.minusHours : $i1 = neg i0 >>>>>>>> org.joda.time.Period.minusHours : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.Period plusHours(int)>($i1)
org.joda.time.Period.minusHours : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.Period plusHours(int)>($i1) >>>>>>>> org.joda.time.Period.plusHours : if i0 != 0
org.joda.time.Period.plusHours : if i0 != 0 >>>>>>>> org.joda.time.Period.plusHours : r1 = virtualinvoke r0.<org.joda.time.Period: int[] getValues()>()
org.joda.time.Period.plusHours : r1 = virtualinvoke r0.<org.joda.time.Period: int[] getValues()>() >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : $i1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int size()>()
org.joda.time.base.AbstractPeriod.getValues : $i1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int size()>() >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : r1 = newarray (int)[$i1]
org.joda.time.base.AbstractPeriod.getValues : r1 = newarray (int)[$i1] >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : i0 = 0
org.joda.time.base.AbstractPeriod.getValues : i0 = 0 >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : $i2 = lengthof r1
org.joda.time.base.AbstractPeriod.getValues : $i2 = lengthof r1 >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : if i0 >= $i2
org.joda.time.base.AbstractPeriod.getValues : if i0 >= $i2 >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : $i3 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int getValue(int)>(i0)
org.joda.time.base.AbstractPeriod.getValues : $i3 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int getValue(int)>(i0) >>>>>>>> org.joda.time.base.BasePeriod.getValue : $r1 = r0.<org.joda.time.base.BasePeriod: int[] iValues>
org.joda.time.base.BasePeriod.getValue : $r1 = r0.<org.joda.time.base.BasePeriod: int[] iValues> >>>>>>>> org.joda.time.base.BasePeriod.getValue : $i1 = $r1[i0]
org.joda.time.base.BasePeriod.getValue : $i1 = $r1[i0] >>>>>>>> org.joda.time.base.BasePeriod.getValue : return $i1
org.joda.time.base.BasePeriod.getValue : return $i1 >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : r1[i0] = $i3
org.joda.time.base.AbstractPeriod.getValues : r1[i0] = $i3 >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : i0 = i0 + 1
org.joda.time.base.AbstractPeriod.getValues : i0 = i0 + 1 >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : goto [?= $i2 = lengthof r1]
org.joda.time.base.AbstractPeriod.getValues : goto [?= $i2 = lengthof r1] >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : return r1
org.joda.time.base.AbstractPeriod.getValues : return r1 >>>>>>>> org.joda.time.Period.plusHours : $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.plusHours : $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.plusHours : $i1 = <org.joda.time.PeriodType: int HOUR_INDEX>
org.joda.time.Period.plusHours : $i1 = <org.joda.time.PeriodType: int HOUR_INDEX> >>>>>>>> org.joda.time.Period.plusHours : virtualinvoke $r2.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i1, r1, i0)
org.joda.time.Period.plusHours : virtualinvoke $r2.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i1, r1, i0) >>>>>>>> org.joda.time.PeriodType.addIndexedField : if i1 != 0
org.joda.time.PeriodType.addIndexedField : if i1 != 0 >>>>>>>> org.joda.time.PeriodType.addIndexedField : $r3 = r0.<org.joda.time.PeriodType: int[] iIndices>
org.joda.time.PeriodType.addIndexedField : $r3 = r0.<org.joda.time.PeriodType: int[] iIndices> >>>>>>>> org.joda.time.PeriodType.addIndexedField : i2 = $r3[i0]
org.joda.time.PeriodType.addIndexedField : i2 = $r3[i0] >>>>>>>> org.joda.time.PeriodType.addIndexedField : if i2 != -1
org.joda.time.PeriodType.addIndexedField : if i2 != -1 >>>>>>>> org.joda.time.PeriodType.addIndexedField : $i3 = r2[i2]
org.joda.time.PeriodType.addIndexedField : $i3 = r2[i2] >>>>>>>> org.joda.time.PeriodType.addIndexedField : $i4 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>($i3, i1)
org.joda.time.PeriodType.addIndexedField : $i4 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>($i3, i1) >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : i2 = i0 + i1
org.joda.time.field.FieldUtils.safeAdd : i2 = i0 + i1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $i3 = i0 ^ i2
org.joda.time.field.FieldUtils.safeAdd : $i3 = i0 ^ i2 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $i3 >= 0
org.joda.time.field.FieldUtils.safeAdd : if $i3 >= 0 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $i4 = i0 ^ i1
org.joda.time.field.FieldUtils.safeAdd : $i4 = i0 ^ i1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $i4 < 0
org.joda.time.field.FieldUtils.safeAdd : if $i4 < 0 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : return i2
org.joda.time.field.FieldUtils.safeAdd : return i2 >>>>>>>> org.joda.time.PeriodType.addIndexedField : r2[i2] = $i4
org.joda.time.PeriodType.addIndexedField : r2[i2] = $i4 >>>>>>>> org.joda.time.PeriodType.addIndexedField : return 1
org.joda.time.PeriodType.addIndexedField : return 1 >>>>>>>> org.joda.time.Period.plusHours : $r3 = new org.joda.time.Period
org.joda.time.Period.plusHours : $r3 = new org.joda.time.Period >>>>>>>> org.joda.time.Period.plusHours : $r4 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.plusHours : $r4 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.plusHours : specialinvoke $r3.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>(r1, $r4)
org.joda.time.Period.plusHours : specialinvoke $r3.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>(r1, $r4) >>>>>>>> org.joda.time.Period.plusHours : return $r3
org.joda.time.Period.plusHours : return $r3 >>>>>>>> org.joda.time.Period.minusHours : return $r1
org.joda.time.Period.minusHours : return $r1 >>>>>>>> org.joda.time.Period.toPeriod : return r0
org.joda.time.Period.toPeriod : return r0 >>>>>>>> org.joda.time.Period.minusMonths : $i1 = neg i0
org.joda.time.Period.minusMonths : $i1 = neg i0 >>>>>>>> org.joda.time.Period.minusMonths : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.Period plusMonths(int)>($i1)
org.joda.time.Period.minusMonths : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.Period plusMonths(int)>($i1) >>>>>>>> org.joda.time.Period.plusMonths : if i0 != 0
org.joda.time.Period.plusMonths : if i0 != 0 >>>>>>>> org.joda.time.Period.plusMonths : r1 = virtualinvoke r0.<org.joda.time.Period: int[] getValues()>()
org.joda.time.Period.plusMonths : r1 = virtualinvoke r0.<org.joda.time.Period: int[] getValues()>() >>>>>>>> org.joda.time.Period.plusMonths : $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.plusMonths : $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.plusMonths : $i1 = <org.joda.time.PeriodType: int MONTH_INDEX>
org.joda.time.Period.plusMonths : $i1 = <org.joda.time.PeriodType: int MONTH_INDEX> >>>>>>>> org.joda.time.Period.plusMonths : virtualinvoke $r2.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i1, r1, i0)
org.joda.time.Period.plusMonths : virtualinvoke $r2.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i1, r1, i0) >>>>>>>> org.joda.time.Period.plusMonths : $r3 = new org.joda.time.Period
org.joda.time.Period.plusMonths : $r3 = new org.joda.time.Period >>>>>>>> org.joda.time.Period.plusMonths : $r4 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.plusMonths : $r4 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.plusMonths : specialinvoke $r3.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>(r1, $r4)
org.joda.time.Period.plusMonths : specialinvoke $r3.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>(r1, $r4) >>>>>>>> org.joda.time.Period.plusMonths : return $r3
org.joda.time.Period.plusMonths : return $r3 >>>>>>>> org.joda.time.Period.minusMonths : return $r1
org.joda.time.Period.minusMonths : return $r1 >>>>>>>> org.joda.time.Period.toStandardMinutes : specialinvoke r0.<org.joda.time.Period: void checkYearsAndMonths(java.lang.String)>("Minutes")
org.joda.time.Period.toStandardMinutes : specialinvoke r0.<org.joda.time.Period: void checkYearsAndMonths(java.lang.String)>("Minutes") >>>>>>>> org.joda.time.Period.checkYearsAndMonths : $i0 = virtualinvoke r0.<org.joda.time.Period: int getMonths()>()
org.joda.time.Period.checkYearsAndMonths : $i0 = virtualinvoke r0.<org.joda.time.Period: int getMonths()>() >>>>>>>> org.joda.time.Period.getMonths : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.getMonths : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.getMonths : $i0 = <org.joda.time.PeriodType: int MONTH_INDEX>
org.joda.time.Period.getMonths : $i0 = <org.joda.time.PeriodType: int MONTH_INDEX> >>>>>>>> org.joda.time.Period.getMonths : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0)
org.joda.time.Period.getMonths : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0) >>>>>>>> org.joda.time.PeriodType.getIndexedField : $r2 = r0.<org.joda.time.PeriodType: int[] iIndices>
org.joda.time.PeriodType.getIndexedField : $r2 = r0.<org.joda.time.PeriodType: int[] iIndices> >>>>>>>> org.joda.time.PeriodType.getIndexedField : i1 = $r2[i0]
org.joda.time.PeriodType.getIndexedField : i1 = $r2[i0] >>>>>>>> org.joda.time.PeriodType.getIndexedField : if i1 != -1
org.joda.time.PeriodType.getIndexedField : if i1 != -1 >>>>>>>> org.joda.time.PeriodType.getIndexedField : $i2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int getValue(int)>(i1)
org.joda.time.PeriodType.getIndexedField : $i2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int getValue(int)>(i1) >>>>>>>> org.joda.time.PeriodType.getIndexedField : return $i2
org.joda.time.PeriodType.getIndexedField : return $i2 >>>>>>>> org.joda.time.Period.getMonths : return $i1
org.joda.time.Period.getMonths : return $i1 >>>>>>>> org.joda.time.Period.checkYearsAndMonths : if $i0 == 0
org.joda.time.Period.checkYearsAndMonths : if $i0 == 0 >>>>>>>> org.joda.time.Period.checkYearsAndMonths : $i1 = virtualinvoke r0.<org.joda.time.Period: int getYears()>()
org.joda.time.Period.checkYearsAndMonths : $i1 = virtualinvoke r0.<org.joda.time.Period: int getYears()>() >>>>>>>> org.joda.time.Period.getYears : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.getYears : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.getYears : $i0 = <org.joda.time.PeriodType: int YEAR_INDEX>
org.joda.time.Period.getYears : $i0 = <org.joda.time.PeriodType: int YEAR_INDEX> >>>>>>>> org.joda.time.Period.getYears : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0)
org.joda.time.Period.getYears : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0) >>>>>>>> org.joda.time.Period.getYears : return $i1
org.joda.time.Period.getYears : return $i1 >>>>>>>> org.joda.time.Period.checkYearsAndMonths : if $i1 == 0
org.joda.time.Period.checkYearsAndMonths : if $i1 == 0 >>>>>>>> org.joda.time.Period.toStandardMinutes : $i2 = virtualinvoke r0.<org.joda.time.Period: int getMillis()>()
org.joda.time.Period.toStandardMinutes : $i2 = virtualinvoke r0.<org.joda.time.Period: int getMillis()>() >>>>>>>> org.joda.time.Period.getMillis : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.getMillis : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.getMillis : $i0 = <org.joda.time.PeriodType: int MILLI_INDEX>
org.joda.time.Period.getMillis : $i0 = <org.joda.time.PeriodType: int MILLI_INDEX> >>>>>>>> org.joda.time.Period.getMillis : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0)
org.joda.time.Period.getMillis : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0) >>>>>>>> org.joda.time.Period.getMillis : return $i1
org.joda.time.Period.getMillis : return $i1 >>>>>>>> org.joda.time.Period.toStandardMinutes : l0 = (long) $i2
org.joda.time.Period.toStandardMinutes : l0 = (long) $i2 >>>>>>>> org.joda.time.Period.toStandardMinutes : $i3 = virtualinvoke r0.<org.joda.time.Period: int getSeconds()>()
org.joda.time.Period.toStandardMinutes : $i3 = virtualinvoke r0.<org.joda.time.Period: int getSeconds()>() >>>>>>>> org.joda.time.Period.getSeconds : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.getSeconds : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.getSeconds : $i0 = <org.joda.time.PeriodType: int SECOND_INDEX>
org.joda.time.Period.getSeconds : $i0 = <org.joda.time.PeriodType: int SECOND_INDEX> >>>>>>>> org.joda.time.Period.getSeconds : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0)
org.joda.time.Period.getSeconds : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0) >>>>>>>> org.joda.time.Period.getSeconds : return $i1
org.joda.time.Period.getSeconds : return $i1 >>>>>>>> org.joda.time.Period.toStandardMinutes : $l4 = (long) $i3
org.joda.time.Period.toStandardMinutes : $l4 = (long) $i3 >>>>>>>> org.joda.time.Period.toStandardMinutes : $l5 = $l4 * 1000L
org.joda.time.Period.toStandardMinutes : $l5 = $l4 * 1000L >>>>>>>> org.joda.time.Period.toStandardMinutes : l6 = l0 + $l5
org.joda.time.Period.toStandardMinutes : l6 = l0 + $l5 >>>>>>>> org.joda.time.Period.toStandardMinutes : l1 = l6 / 60000L
org.joda.time.Period.toStandardMinutes : l1 = l6 / 60000L >>>>>>>> org.joda.time.Period.toStandardMinutes : $i7 = virtualinvoke r0.<org.joda.time.Period: int getMinutes()>()
org.joda.time.Period.toStandardMinutes : $i7 = virtualinvoke r0.<org.joda.time.Period: int getMinutes()>() >>>>>>>> org.joda.time.Period.getMinutes : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.getMinutes : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.getMinutes : $i0 = <org.joda.time.PeriodType: int MINUTE_INDEX>
org.joda.time.Period.getMinutes : $i0 = <org.joda.time.PeriodType: int MINUTE_INDEX> >>>>>>>> org.joda.time.Period.getMinutes : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0)
org.joda.time.Period.getMinutes : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0) >>>>>>>> org.joda.time.Period.getMinutes : return $i1
org.joda.time.Period.getMinutes : return $i1 >>>>>>>> org.joda.time.Period.toStandardMinutes : $l8 = (long) $i7
org.joda.time.Period.toStandardMinutes : $l8 = (long) $i7 >>>>>>>> org.joda.time.Period.toStandardMinutes : l9 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l1, $l8)
org.joda.time.Period.toStandardMinutes : l9 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l1, $l8) >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : l2 = l0 + l1
org.joda.time.field.FieldUtils.safeAdd : l2 = l0 + l1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $l3 = l0 ^ l2
org.joda.time.field.FieldUtils.safeAdd : $l3 = l0 ^ l2 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $b4 = $l3 cmp 0L
org.joda.time.field.FieldUtils.safeAdd : $b4 = $l3 cmp 0L >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $b4 >= 0
org.joda.time.field.FieldUtils.safeAdd : if $b4 >= 0 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : return l2
org.joda.time.field.FieldUtils.safeAdd : return l2 >>>>>>>> org.joda.time.Period.toStandardMinutes : $i10 = virtualinvoke r0.<org.joda.time.Period: int getHours()>()
org.joda.time.Period.toStandardMinutes : $i10 = virtualinvoke r0.<org.joda.time.Period: int getHours()>() >>>>>>>> org.joda.time.Period.getHours : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.getHours : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.getHours : $i0 = <org.joda.time.PeriodType: int HOUR_INDEX>
org.joda.time.Period.getHours : $i0 = <org.joda.time.PeriodType: int HOUR_INDEX> >>>>>>>> org.joda.time.Period.getHours : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0)
org.joda.time.Period.getHours : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0) >>>>>>>> org.joda.time.Period.getHours : return $i1
org.joda.time.Period.getHours : return $i1 >>>>>>>> org.joda.time.Period.toStandardMinutes : $l11 = (long) $i10
org.joda.time.Period.toStandardMinutes : $l11 = (long) $i10 >>>>>>>> org.joda.time.Period.toStandardMinutes : $l12 = $l11 * 60L
org.joda.time.Period.toStandardMinutes : $l12 = $l11 * 60L >>>>>>>> org.joda.time.Period.toStandardMinutes : l13 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l9, $l12)
org.joda.time.Period.toStandardMinutes : l13 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l9, $l12) >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $l5 = l0 ^ l1
org.joda.time.field.FieldUtils.safeAdd : $l5 = l0 ^ l1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $b6 = $l5 cmp 0L
org.joda.time.field.FieldUtils.safeAdd : $b6 = $l5 cmp 0L >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $b6 < 0
org.joda.time.field.FieldUtils.safeAdd : if $b6 < 0 >>>>>>>> org.joda.time.Period.toStandardMinutes : $i14 = virtualinvoke r0.<org.joda.time.Period: int getDays()>()
org.joda.time.Period.toStandardMinutes : $i14 = virtualinvoke r0.<org.joda.time.Period: int getDays()>() >>>>>>>> org.joda.time.Period.getDays : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.getDays : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.getDays : $i0 = <org.joda.time.PeriodType: int DAY_INDEX>
org.joda.time.Period.getDays : $i0 = <org.joda.time.PeriodType: int DAY_INDEX> >>>>>>>> org.joda.time.Period.getDays : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0)
org.joda.time.Period.getDays : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0) >>>>>>>> org.joda.time.Period.getDays : return $i1
org.joda.time.Period.getDays : return $i1 >>>>>>>> org.joda.time.Period.toStandardMinutes : $l15 = (long) $i14
org.joda.time.Period.toStandardMinutes : $l15 = (long) $i14 >>>>>>>> org.joda.time.Period.toStandardMinutes : $l16 = $l15 * 1440L
org.joda.time.Period.toStandardMinutes : $l16 = $l15 * 1440L >>>>>>>> org.joda.time.Period.toStandardMinutes : l17 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l13, $l16)
org.joda.time.Period.toStandardMinutes : l17 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l13, $l16) >>>>>>>> org.joda.time.Period.toStandardMinutes : $i18 = virtualinvoke r0.<org.joda.time.Period: int getWeeks()>()
org.joda.time.Period.toStandardMinutes : $i18 = virtualinvoke r0.<org.joda.time.Period: int getWeeks()>() >>>>>>>> org.joda.time.Period.getWeeks : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.getWeeks : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.getWeeks : $i0 = <org.joda.time.PeriodType: int WEEK_INDEX>
org.joda.time.Period.getWeeks : $i0 = <org.joda.time.PeriodType: int WEEK_INDEX> >>>>>>>> org.joda.time.Period.getWeeks : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0)
org.joda.time.Period.getWeeks : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0) >>>>>>>> org.joda.time.Period.getWeeks : return $i1
org.joda.time.Period.getWeeks : return $i1 >>>>>>>> org.joda.time.Period.toStandardMinutes : $l19 = (long) $i18
org.joda.time.Period.toStandardMinutes : $l19 = (long) $i18 >>>>>>>> org.joda.time.Period.toStandardMinutes : $l20 = $l19 * 10080L
org.joda.time.Period.toStandardMinutes : $l20 = $l19 * 10080L >>>>>>>> org.joda.time.Period.toStandardMinutes : l21 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l17, $l20)
org.joda.time.Period.toStandardMinutes : l21 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l17, $l20) >>>>>>>> org.joda.time.Period.toStandardMinutes : $i22 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>(l21)
org.joda.time.Period.toStandardMinutes : $i22 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>(l21) >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : $b1 = -2147483648L cmp l0
org.joda.time.field.FieldUtils.safeToInt : $b1 = -2147483648L cmp l0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : if $b1 > 0
org.joda.time.field.FieldUtils.safeToInt : if $b1 > 0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : $b2 = l0 cmp 2147483647L
org.joda.time.field.FieldUtils.safeToInt : $b2 = l0 cmp 2147483647L >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : if $b2 > 0
org.joda.time.field.FieldUtils.safeToInt : if $b2 > 0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : $i3 = (int) l0
org.joda.time.field.FieldUtils.safeToInt : $i3 = (int) l0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : return $i3
org.joda.time.field.FieldUtils.safeToInt : return $i3 >>>>>>>> org.joda.time.Period.toStandardMinutes : $r1 = staticinvoke <org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>($i22)
org.joda.time.Period.toStandardMinutes : $r1 = staticinvoke <org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>($i22) >>>>>>>> org.joda.time.format.ISOPeriodFormat.standard : $r0 = <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter cStandard>
org.joda.time.format.ISOPeriodFormat.standard : $r0 = <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter cStandard> >>>>>>>> org.joda.time.format.ISOPeriodFormat.standard : if $r0 != null
org.joda.time.format.ISOPeriodFormat.standard : if $r0 != null >>>>>>>> org.joda.time.format.ISOPeriodFormat.standard : $r1 = new org.joda.time.format.PeriodFormatterBuilder
org.joda.time.format.ISOPeriodFormat.standard : $r1 = new org.joda.time.format.PeriodFormatterBuilder >>>>>>>> org.joda.time.format.ISOPeriodFormat.standard : specialinvoke $r1.<org.joda.time.format.PeriodFormatterBuilder: void <init>()>()
org.joda.time.format.ISOPeriodFormat.standard : specialinvoke $r1.<org.joda.time.format.PeriodFormatterBuilder: void <init>()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.clear : r0.<org.joda.time.format.PeriodFormatterBuilder: int iMinPrintedDigits> = 1
org.joda.time.format.PeriodFormatterBuilder.clear : r0.<org.joda.time.format.PeriodFormatterBuilder: int iMinPrintedDigits> = 1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.clear : r0.<org.joda.time.format.PeriodFormatterBuilder: int iPrintZeroSetting> = 2
org.joda.time.format.PeriodFormatterBuilder.clear : r0.<org.joda.time.format.PeriodFormatterBuilder: int iPrintZeroSetting> = 2 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.clear : r0.<org.joda.time.format.PeriodFormatterBuilder: int iMaxParsedDigits> = 10
org.joda.time.format.PeriodFormatterBuilder.clear : r0.<org.joda.time.format.PeriodFormatterBuilder: int iMaxParsedDigits> = 10 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.clear : r0.<org.joda.time.format.PeriodFormatterBuilder: boolean iRejectSignedValues> = 0
org.joda.time.format.PeriodFormatterBuilder.clear : r0.<org.joda.time.format.PeriodFormatterBuilder: boolean iRejectSignedValues> = 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.clear : r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iPrefix> = null
org.joda.time.format.PeriodFormatterBuilder.clear : r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iPrefix> = null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.clear : $r1 = r0.<org.joda.time.format.PeriodFormatterBuilder: java.util.List iElementPairs>
org.joda.time.format.PeriodFormatterBuilder.clear : $r1 = r0.<org.joda.time.format.PeriodFormatterBuilder: java.util.List iElementPairs> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.clear : if $r1 != null
org.joda.time.format.PeriodFormatterBuilder.clear : if $r1 != null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.clear : $r2 = new java.util.ArrayList
org.joda.time.format.PeriodFormatterBuilder.clear : $r2 = new java.util.ArrayList >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.clear : specialinvoke $r2.<java.util.ArrayList: void <init>()>()
org.joda.time.format.PeriodFormatterBuilder.clear : specialinvoke $r2.<java.util.ArrayList: void <init>()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.clear : r0.<org.joda.time.format.PeriodFormatterBuilder: java.util.List iElementPairs> = $r2
org.joda.time.format.PeriodFormatterBuilder.clear : r0.<org.joda.time.format.PeriodFormatterBuilder: java.util.List iElementPairs> = $r2 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.clear : goto [?= r0.<org.joda.time.format.PeriodFormatterBuilder: boolean iNotPrinter> = 0]
org.joda.time.format.PeriodFormatterBuilder.clear : goto [?= r0.<org.joda.time.format.PeriodFormatterBuilder: boolean iNotPrinter> = 0] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.clear : r0.<org.joda.time.format.PeriodFormatterBuilder: boolean iNotPrinter> = 0
org.joda.time.format.PeriodFormatterBuilder.clear : r0.<org.joda.time.format.PeriodFormatterBuilder: boolean iNotPrinter> = 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.clear : r0.<org.joda.time.format.PeriodFormatterBuilder: boolean iNotParser> = 0
org.joda.time.format.PeriodFormatterBuilder.clear : r0.<org.joda.time.format.PeriodFormatterBuilder: boolean iNotParser> = 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.clear : $r4 = newarray (org.joda.time.format.PeriodFormatterBuilder$FieldFormatter)[10]
org.joda.time.format.PeriodFormatterBuilder.clear : $r4 = newarray (org.joda.time.format.PeriodFormatterBuilder$FieldFormatter)[10] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.clear : r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[] iFieldFormatters> = $r4
org.joda.time.format.PeriodFormatterBuilder.clear : r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[] iFieldFormatters> = $r4 >>>>>>>> org.joda.time.format.ISOPeriodFormat.standard : $r2 = virtualinvoke $r1.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendLiteral(java.lang.String)>("P")
org.joda.time.format.ISOPeriodFormat.standard : $r2 = virtualinvoke $r1.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendLiteral(java.lang.String)>("P") >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendLiteral : if r1 != null
org.joda.time.format.PeriodFormatterBuilder.appendLiteral : if r1 != null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendLiteral : specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: void clearPrefix()>()
org.joda.time.format.PeriodFormatterBuilder.appendLiteral : specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: void clearPrefix()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.clearPrefix : $r1 = r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iPrefix>
org.joda.time.format.PeriodFormatterBuilder.clearPrefix : $r1 = r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iPrefix> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.clearPrefix : if $r1 == null
org.joda.time.format.PeriodFormatterBuilder.clearPrefix : if $r1 == null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.clearPrefix : r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iPrefix> = null
org.joda.time.format.PeriodFormatterBuilder.clearPrefix : r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iPrefix> = null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendLiteral : $r4 = new org.joda.time.format.PeriodFormatterBuilder$Literal
org.joda.time.format.PeriodFormatterBuilder.appendLiteral : $r4 = new org.joda.time.format.PeriodFormatterBuilder$Literal >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendLiteral : specialinvoke $r4.<org.joda.time.format.PeriodFormatterBuilder$Literal: void <init>(java.lang.String)>(r1)
org.joda.time.format.PeriodFormatterBuilder.appendLiteral : specialinvoke $r4.<org.joda.time.format.PeriodFormatterBuilder$Literal: void <init>(java.lang.String)>(r1) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendLiteral : r2 = $r4
org.joda.time.format.PeriodFormatterBuilder.appendLiteral : r2 = $r4 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendLiteral : specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder append0(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>(r2, r2)
org.joda.time.format.PeriodFormatterBuilder.appendLiteral : specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder append0(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>(r2, r2) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.append0 : $r3 = r0.<org.joda.time.format.PeriodFormatterBuilder: java.util.List iElementPairs>
org.joda.time.format.PeriodFormatterBuilder.append0 : $r3 = r0.<org.joda.time.format.PeriodFormatterBuilder: java.util.List iElementPairs> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.append0 : interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1)
org.joda.time.format.PeriodFormatterBuilder.append0 : interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.append0 : $r4 = r0.<org.joda.time.format.PeriodFormatterBuilder: java.util.List iElementPairs>
org.joda.time.format.PeriodFormatterBuilder.append0 : $r4 = r0.<org.joda.time.format.PeriodFormatterBuilder: java.util.List iElementPairs> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.append0 : interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r2)
org.joda.time.format.PeriodFormatterBuilder.append0 : interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r2) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.append0 : $z2 = r0.<org.joda.time.format.PeriodFormatterBuilder: boolean iNotPrinter>
org.joda.time.format.PeriodFormatterBuilder.append0 : $z2 = r0.<org.joda.time.format.PeriodFormatterBuilder: boolean iNotPrinter> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.append0 : if r1 != null
org.joda.time.format.PeriodFormatterBuilder.append0 : if r1 != null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.append0 : $z3 = 0
org.joda.time.format.PeriodFormatterBuilder.append0 : $z3 = 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.append0 : $z4 = $z2 | $z3
org.joda.time.format.PeriodFormatterBuilder.append0 : $z4 = $z2 | $z3 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.append0 : r0.<org.joda.time.format.PeriodFormatterBuilder: boolean iNotPrinter> = $z4
org.joda.time.format.PeriodFormatterBuilder.append0 : r0.<org.joda.time.format.PeriodFormatterBuilder: boolean iNotPrinter> = $z4 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.append0 : $z5 = r0.<org.joda.time.format.PeriodFormatterBuilder: boolean iNotParser>
org.joda.time.format.PeriodFormatterBuilder.append0 : $z5 = r0.<org.joda.time.format.PeriodFormatterBuilder: boolean iNotParser> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.append0 : if r2 != null
org.joda.time.format.PeriodFormatterBuilder.append0 : if r2 != null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.append0 : $z6 = 0
org.joda.time.format.PeriodFormatterBuilder.append0 : $z6 = 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.append0 : $z7 = $z5 | $z6
org.joda.time.format.PeriodFormatterBuilder.append0 : $z7 = $z5 | $z6 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.append0 : r0.<org.joda.time.format.PeriodFormatterBuilder: boolean iNotParser> = $z7
org.joda.time.format.PeriodFormatterBuilder.append0 : r0.<org.joda.time.format.PeriodFormatterBuilder: boolean iNotParser> = $z7 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.append0 : return r0
org.joda.time.format.PeriodFormatterBuilder.append0 : return r0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendLiteral : return r0
org.joda.time.format.PeriodFormatterBuilder.appendLiteral : return r0 >>>>>>>> org.joda.time.format.ISOPeriodFormat.standard : $r3 = virtualinvoke $r2.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendYears()>()
org.joda.time.format.ISOPeriodFormat.standard : $r3 = virtualinvoke $r2.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendYears()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendYears : specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>(0)
org.joda.time.format.PeriodFormatterBuilder.appendYears : specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>(0) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendField : $i1 = r0.<org.joda.time.format.PeriodFormatterBuilder: int iMinPrintedDigits>
org.joda.time.format.PeriodFormatterBuilder.appendField : $i1 = r0.<org.joda.time.format.PeriodFormatterBuilder: int iMinPrintedDigits> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendField : specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: void appendField(int,int)>(i0, $i1)
org.joda.time.format.PeriodFormatterBuilder.appendField : specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: void appendField(int,int)>(i0, $i1) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendField : $r1 = new org.joda.time.format.PeriodFormatterBuilder$FieldFormatter
org.joda.time.format.PeriodFormatterBuilder.appendField : $r1 = new org.joda.time.format.PeriodFormatterBuilder$FieldFormatter >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendField : $i2 = r0.<org.joda.time.format.PeriodFormatterBuilder: int iPrintZeroSetting>
org.joda.time.format.PeriodFormatterBuilder.appendField : $i2 = r0.<org.joda.time.format.PeriodFormatterBuilder: int iPrintZeroSetting> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendField : $i3 = r0.<org.joda.time.format.PeriodFormatterBuilder: int iMaxParsedDigits>
org.joda.time.format.PeriodFormatterBuilder.appendField : $i3 = r0.<org.joda.time.format.PeriodFormatterBuilder: int iMaxParsedDigits> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendField : $z0 = r0.<org.joda.time.format.PeriodFormatterBuilder: boolean iRejectSignedValues>
org.joda.time.format.PeriodFormatterBuilder.appendField : $z0 = r0.<org.joda.time.format.PeriodFormatterBuilder: boolean iRejectSignedValues> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendField : $r3 = r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[] iFieldFormatters>
org.joda.time.format.PeriodFormatterBuilder.appendField : $r3 = r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[] iFieldFormatters> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendField : $r4 = r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iPrefix>
org.joda.time.format.PeriodFormatterBuilder.appendField : $r4 = r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iPrefix> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendField : specialinvoke $r1.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void <init>(int,int,int,boolean,int,org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[],org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>(i1, $i2, $i3, $z0, i0, $r3, $r4, null)
org.joda.time.format.PeriodFormatterBuilder.appendField : specialinvoke $r1.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void <init>(int,int,int,boolean,int,org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[],org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>(i1, $i2, $i3, $z0, i0, $r3, $r4, null) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendField : r2 = $r1
org.joda.time.format.PeriodFormatterBuilder.appendField : r2 = $r1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendField : specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder append0(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>(r2, r2)
org.joda.time.format.PeriodFormatterBuilder.appendField : specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder append0(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>(r2, r2) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendField : $r6 = r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[] iFieldFormatters>
org.joda.time.format.PeriodFormatterBuilder.appendField : $r6 = r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[] iFieldFormatters> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendField : $r6[i0] = r2
org.joda.time.format.PeriodFormatterBuilder.appendField : $r6[i0] = r2 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendField : r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iPrefix> = null
org.joda.time.format.PeriodFormatterBuilder.appendField : r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iPrefix> = null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendYears : return r0
org.joda.time.format.PeriodFormatterBuilder.appendYears : return r0 >>>>>>>> org.joda.time.format.ISOPeriodFormat.standard : $r4 = virtualinvoke $r3.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>("Y")
org.joda.time.format.ISOPeriodFormat.standard : $r4 = virtualinvoke $r3.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>("Y") >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSuffix : if r1 != null
org.joda.time.format.PeriodFormatterBuilder.appendSuffix : if r1 != null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $r3 = new org.joda.time.format.PeriodFormatterBuilder$SimpleAffix
org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $r3 = new org.joda.time.format.PeriodFormatterBuilder$SimpleAffix >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSuffix : specialinvoke $r3.<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: void <init>(java.lang.String)>(r1)
org.joda.time.format.PeriodFormatterBuilder.appendSuffix : specialinvoke $r3.<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: void <init>(java.lang.String)>(r1) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $r4 = specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>($r3)
org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $r4 = specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>($r3) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $r5 = r0.<org.joda.time.format.PeriodFormatterBuilder: java.util.List iElementPairs>
org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $r5 = r0.<org.joda.time.format.PeriodFormatterBuilder: java.util.List iElementPairs> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $i0 = interfaceinvoke $r5.<java.util.List: int size()>()
org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $i0 = interfaceinvoke $r5.<java.util.List: int size()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSuffix : if $i0 <= 0
org.joda.time.format.PeriodFormatterBuilder.appendSuffix : if $i0 <= 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $r6 = r0.<org.joda.time.format.PeriodFormatterBuilder: java.util.List iElementPairs>
org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $r6 = r0.<org.joda.time.format.PeriodFormatterBuilder: java.util.List iElementPairs> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $r7 = r0.<org.joda.time.format.PeriodFormatterBuilder: java.util.List iElementPairs>
org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $r7 = r0.<org.joda.time.format.PeriodFormatterBuilder: java.util.List iElementPairs> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $i1 = interfaceinvoke $r7.<java.util.List: int size()>()
org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $i1 = interfaceinvoke $r7.<java.util.List: int size()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $i2 = $i1 - 2
org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $i2 = $i1 - 2 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSuffix : r2 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>($i2)
org.joda.time.format.PeriodFormatterBuilder.appendSuffix : r2 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>($i2) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $r8 = r0.<org.joda.time.format.PeriodFormatterBuilder: java.util.List iElementPairs>
org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $r8 = r0.<org.joda.time.format.PeriodFormatterBuilder: java.util.List iElementPairs> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $r9 = r0.<org.joda.time.format.PeriodFormatterBuilder: java.util.List iElementPairs>
org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $r9 = r0.<org.joda.time.format.PeriodFormatterBuilder: java.util.List iElementPairs> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $i3 = interfaceinvoke $r9.<java.util.List: int size()>()
org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $i3 = interfaceinvoke $r9.<java.util.List: int size()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $i4 = $i3 - 1
org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $i4 = $i3 - 1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSuffix : r3 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>($i4)
org.joda.time.format.PeriodFormatterBuilder.appendSuffix : r3 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>($i4) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSuffix : goto [?= (branch)]
org.joda.time.format.PeriodFormatterBuilder.appendSuffix : goto [?= (branch)] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSuffix : if r2 == null
org.joda.time.format.PeriodFormatterBuilder.appendSuffix : if r2 == null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSuffix : if r3 == null
org.joda.time.format.PeriodFormatterBuilder.appendSuffix : if r3 == null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSuffix : if r2 != r3
org.joda.time.format.PeriodFormatterBuilder.appendSuffix : if r2 != r3 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $z0 = r2 instanceof org.joda.time.format.PeriodFormatterBuilder$FieldFormatter
org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $z0 = r2 instanceof org.joda.time.format.PeriodFormatterBuilder$FieldFormatter >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSuffix : if $z0 != 0
org.joda.time.format.PeriodFormatterBuilder.appendSuffix : if $z0 != 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSuffix : specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: void clearPrefix()>()
org.joda.time.format.PeriodFormatterBuilder.appendSuffix : specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: void clearPrefix()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $r11 = new org.joda.time.format.PeriodFormatterBuilder$FieldFormatter
org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $r11 = new org.joda.time.format.PeriodFormatterBuilder$FieldFormatter >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $r12 = (org.joda.time.format.PeriodFormatterBuilder$FieldFormatter) r2
org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $r12 = (org.joda.time.format.PeriodFormatterBuilder$FieldFormatter) r2 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSuffix : specialinvoke $r11.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void <init>(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>($r12, r1)
org.joda.time.format.PeriodFormatterBuilder.appendSuffix : specialinvoke $r11.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void <init>(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>($r12, r1) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSuffix : r4 = $r11
org.joda.time.format.PeriodFormatterBuilder.appendSuffix : r4 = $r11 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $r13 = r0.<org.joda.time.format.PeriodFormatterBuilder: java.util.List iElementPairs>
org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $r13 = r0.<org.joda.time.format.PeriodFormatterBuilder: java.util.List iElementPairs> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $r14 = r0.<org.joda.time.format.PeriodFormatterBuilder: java.util.List iElementPairs>
org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $r14 = r0.<org.joda.time.format.PeriodFormatterBuilder: java.util.List iElementPairs> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $i5 = interfaceinvoke $r14.<java.util.List: int size()>()
org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $i5 = interfaceinvoke $r14.<java.util.List: int size()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $i6 = $i5 - 2
org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $i6 = $i5 - 2 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSuffix : interfaceinvoke $r13.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i6, r4)
org.joda.time.format.PeriodFormatterBuilder.appendSuffix : interfaceinvoke $r13.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i6, r4) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $r16 = r0.<org.joda.time.format.PeriodFormatterBuilder: java.util.List iElementPairs>
org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $r16 = r0.<org.joda.time.format.PeriodFormatterBuilder: java.util.List iElementPairs> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $r17 = r0.<org.joda.time.format.PeriodFormatterBuilder: java.util.List iElementPairs>
org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $r17 = r0.<org.joda.time.format.PeriodFormatterBuilder: java.util.List iElementPairs> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $i7 = interfaceinvoke $r17.<java.util.List: int size()>()
org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $i7 = interfaceinvoke $r17.<java.util.List: int size()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $i8 = $i7 - 1
org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $i8 = $i7 - 1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSuffix : interfaceinvoke $r16.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i8, r4)
org.joda.time.format.PeriodFormatterBuilder.appendSuffix : interfaceinvoke $r16.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i8, r4) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $r19 = r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[] iFieldFormatters>
org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $r19 = r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[] iFieldFormatters> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $i9 = virtualinvoke r4.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int getFieldType()>()
org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $i9 = virtualinvoke r4.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int getFieldType()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldType : $i0 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldType : $i0 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldType : return $i0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldType : return $i0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $r19[$i9] = r4
org.joda.time.format.PeriodFormatterBuilder.appendSuffix : $r19[$i9] = r4 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSuffix : return r0
org.joda.time.format.PeriodFormatterBuilder.appendSuffix : return r0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSuffix : return $r4
org.joda.time.format.PeriodFormatterBuilder.appendSuffix : return $r4 >>>>>>>> org.joda.time.format.ISOPeriodFormat.standard : $r5 = virtualinvoke $r4.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMonths()>()
org.joda.time.format.ISOPeriodFormat.standard : $r5 = virtualinvoke $r4.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMonths()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendMonths : specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>(1)
org.joda.time.format.PeriodFormatterBuilder.appendMonths : specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>(1) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendMonths : return r0
org.joda.time.format.PeriodFormatterBuilder.appendMonths : return r0 >>>>>>>> org.joda.time.format.ISOPeriodFormat.standard : $r6 = virtualinvoke $r5.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>("M")
org.joda.time.format.ISOPeriodFormat.standard : $r6 = virtualinvoke $r5.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>("M") >>>>>>>> org.joda.time.format.ISOPeriodFormat.standard : $r7 = virtualinvoke $r6.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendWeeks()>()
org.joda.time.format.ISOPeriodFormat.standard : $r7 = virtualinvoke $r6.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendWeeks()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendWeeks : specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>(2)
org.joda.time.format.PeriodFormatterBuilder.appendWeeks : specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>(2) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendWeeks : return r0
org.joda.time.format.PeriodFormatterBuilder.appendWeeks : return r0 >>>>>>>> org.joda.time.format.ISOPeriodFormat.standard : $r8 = virtualinvoke $r7.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>("W")
org.joda.time.format.ISOPeriodFormat.standard : $r8 = virtualinvoke $r7.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>("W") >>>>>>>> org.joda.time.format.ISOPeriodFormat.standard : $r9 = virtualinvoke $r8.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendDays()>()
org.joda.time.format.ISOPeriodFormat.standard : $r9 = virtualinvoke $r8.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendDays()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendDays : specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>(3)
org.joda.time.format.PeriodFormatterBuilder.appendDays : specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>(3) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendDays : return r0
org.joda.time.format.PeriodFormatterBuilder.appendDays : return r0 >>>>>>>> org.joda.time.format.ISOPeriodFormat.standard : $r10 = virtualinvoke $r9.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>("D")
org.joda.time.format.ISOPeriodFormat.standard : $r10 = virtualinvoke $r9.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>("D") >>>>>>>> org.joda.time.format.ISOPeriodFormat.standard : $r11 = virtualinvoke $r10.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparatorIfFieldsAfter(java.lang.String)>("T")
org.joda.time.format.ISOPeriodFormat.standard : $r11 = virtualinvoke $r10.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparatorIfFieldsAfter(java.lang.String)>("T") >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSeparatorIfFieldsAfter : $r2 = specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>(r1, r1, null, 0, 1)
org.joda.time.format.PeriodFormatterBuilder.appendSeparatorIfFieldsAfter : $r2 = specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>(r1, r1, null, 0, 1) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSeparator : if r1 == null
org.joda.time.format.PeriodFormatterBuilder.appendSeparator : if r1 == null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSeparator : if r2 != null
org.joda.time.format.PeriodFormatterBuilder.appendSeparator : if r2 != null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSeparator : specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: void clearPrefix()>()
org.joda.time.format.PeriodFormatterBuilder.appendSeparator : specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: void clearPrefix()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSeparator : r4 = r0.<org.joda.time.format.PeriodFormatterBuilder: java.util.List iElementPairs>
org.joda.time.format.PeriodFormatterBuilder.appendSeparator : r4 = r0.<org.joda.time.format.PeriodFormatterBuilder: java.util.List iElementPairs> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSeparator : $i0 = interfaceinvoke r4.<java.util.List: int size()>()
org.joda.time.format.PeriodFormatterBuilder.appendSeparator : $i0 = interfaceinvoke r4.<java.util.List: int size()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSeparator : if $i0 != 0
org.joda.time.format.PeriodFormatterBuilder.appendSeparator : if $i0 != 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSeparator : r8 = null
org.joda.time.format.PeriodFormatterBuilder.appendSeparator : r8 = null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSeparator : i1 = interfaceinvoke r4.<java.util.List: int size()>()
org.joda.time.format.PeriodFormatterBuilder.appendSeparator : i1 = interfaceinvoke r4.<java.util.List: int size()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSeparator : i2 = i1 + -1
org.joda.time.format.PeriodFormatterBuilder.appendSeparator : i2 = i1 + -1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSeparator : if i2 < 0
org.joda.time.format.PeriodFormatterBuilder.appendSeparator : if i2 < 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSeparator : $r14 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i2)
org.joda.time.format.PeriodFormatterBuilder.appendSeparator : $r14 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i2) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSeparator : $z2 = $r14 instanceof org.joda.time.format.PeriodFormatterBuilder$Separator
org.joda.time.format.PeriodFormatterBuilder.appendSeparator : $z2 = $r14 instanceof org.joda.time.format.PeriodFormatterBuilder$Separator >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSeparator : if $z2 == 0
org.joda.time.format.PeriodFormatterBuilder.appendSeparator : if $z2 == 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSeparator : i1 = i2 + -1
org.joda.time.format.PeriodFormatterBuilder.appendSeparator : i1 = i2 + -1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSeparator : goto [?= i2 = i1 + -1]
org.joda.time.format.PeriodFormatterBuilder.appendSeparator : goto [?= i2 = i1 + -1] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSeparator : if r8 == null
org.joda.time.format.PeriodFormatterBuilder.appendSeparator : if r8 == null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSeparator : r9 = staticinvoke <org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>(r4)
org.joda.time.format.PeriodFormatterBuilder.appendSeparator : r9 = staticinvoke <org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>(r4) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.createComposite : $i0 = interfaceinvoke r0.<java.util.List: int size()>()
org.joda.time.format.PeriodFormatterBuilder.createComposite : $i0 = interfaceinvoke r0.<java.util.List: int size()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.createComposite : lookupswitch($i0) {     case 0:
org.joda.time.format.PeriodFormatterBuilder.createComposite : lookupswitch($i0) {     case 0: >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.createComposite : $r8 = new org.joda.time.format.PeriodFormatterBuilder$Composite
org.joda.time.format.PeriodFormatterBuilder.createComposite : $r8 = new org.joda.time.format.PeriodFormatterBuilder$Composite >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.createComposite : specialinvoke $r8.<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>(r0)
org.joda.time.format.PeriodFormatterBuilder.createComposite : specialinvoke $r8.<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>(r0) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : i0 = interfaceinvoke r1.<java.util.List: int size()>()
org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : i0 = interfaceinvoke r1.<java.util.List: int size()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : i1 = 0
org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : i1 = 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : if i1 >= i0
org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : if i1 >= i0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1)
org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : $z0 = r4 instanceof org.joda.time.format.PeriodPrinter
org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : $z0 = r4 instanceof org.joda.time.format.PeriodPrinter >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : if $z0 == 0
org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : if $z0 == 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : $z1 = r4 instanceof org.joda.time.format.PeriodFormatterBuilder$Composite
org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : $z1 = r4 instanceof org.joda.time.format.PeriodFormatterBuilder$Composite >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : if $z1 == 0
org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : if $z1 == 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r4)
org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r4) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : $i2 = i1 + 1
org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : $i2 = i1 + 1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i2)
org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i2) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : $z3 = r7 instanceof org.joda.time.format.PeriodParser
org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : $z3 = r7 instanceof org.joda.time.format.PeriodParser >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : if $z3 == 0
org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : if $z3 == 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : $z4 = r7 instanceof org.joda.time.format.PeriodFormatterBuilder$Composite
org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : $z4 = r7 instanceof org.joda.time.format.PeriodFormatterBuilder$Composite >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : if $z4 == 0
org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : if $z4 == 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r7)
org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r7) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : i1 = i1 + 2
org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : i1 = i1 + 2 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : goto [?= (branch)]
org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : goto [?= (branch)] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.createComposite : r2 = $r8
org.joda.time.format.PeriodFormatterBuilder.createComposite : r2 = $r8 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.createComposite : $r9 = newarray (java.lang.Object)[2]
org.joda.time.format.PeriodFormatterBuilder.createComposite : $r9 = newarray (java.lang.Object)[2] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.createComposite : $r9[0] = r2
org.joda.time.format.PeriodFormatterBuilder.createComposite : $r9[0] = r2 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.createComposite : $r9[1] = r2
org.joda.time.format.PeriodFormatterBuilder.createComposite : $r9[1] = r2 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.createComposite : return $r9
org.joda.time.format.PeriodFormatterBuilder.createComposite : return $r9 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSeparator : interfaceinvoke r4.<java.util.List: void clear()>()
org.joda.time.format.PeriodFormatterBuilder.appendSeparator : interfaceinvoke r4.<java.util.List: void clear()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSeparator : $r17 = new org.joda.time.format.PeriodFormatterBuilder$Separator
org.joda.time.format.PeriodFormatterBuilder.appendSeparator : $r17 = new org.joda.time.format.PeriodFormatterBuilder$Separator >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSeparator : $r18 = r9[0]
org.joda.time.format.PeriodFormatterBuilder.appendSeparator : $r18 = r9[0] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSeparator : $r19 = (org.joda.time.format.PeriodPrinter) $r18
org.joda.time.format.PeriodFormatterBuilder.appendSeparator : $r19 = (org.joda.time.format.PeriodPrinter) $r18 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSeparator : $r20 = r9[1]
org.joda.time.format.PeriodFormatterBuilder.appendSeparator : $r20 = r9[1] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSeparator : $r21 = (org.joda.time.format.PeriodParser) $r20
org.joda.time.format.PeriodFormatterBuilder.appendSeparator : $r21 = (org.joda.time.format.PeriodParser) $r20 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSeparator : specialinvoke $r17.<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>(r1, r2, r3, $r19, $r21, z0, z1)
org.joda.time.format.PeriodFormatterBuilder.appendSeparator : specialinvoke $r17.<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>(r1, r2, r3, $r19, $r21, z0, z1) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSeparator : r10 = $r17
org.joda.time.format.PeriodFormatterBuilder.appendSeparator : r10 = $r17 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSeparator : interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r10)
org.joda.time.format.PeriodFormatterBuilder.appendSeparator : interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r10) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSeparator : return r0
org.joda.time.format.PeriodFormatterBuilder.appendSeparator : return r0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSeparatorIfFieldsAfter : return $r2
org.joda.time.format.PeriodFormatterBuilder.appendSeparatorIfFieldsAfter : return $r2 >>>>>>>> org.joda.time.format.ISOPeriodFormat.standard : $r12 = virtualinvoke $r11.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendHours()>()
org.joda.time.format.ISOPeriodFormat.standard : $r12 = virtualinvoke $r11.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendHours()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendHours : specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>(4)
org.joda.time.format.PeriodFormatterBuilder.appendHours : specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>(4) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendHours : return r0
org.joda.time.format.PeriodFormatterBuilder.appendHours : return r0 >>>>>>>> org.joda.time.format.ISOPeriodFormat.standard : $r13 = virtualinvoke $r12.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>("H")
org.joda.time.format.ISOPeriodFormat.standard : $r13 = virtualinvoke $r12.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>("H") >>>>>>>> org.joda.time.format.ISOPeriodFormat.standard : $r14 = virtualinvoke $r13.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMinutes()>()
org.joda.time.format.ISOPeriodFormat.standard : $r14 = virtualinvoke $r13.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMinutes()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendMinutes : specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>(5)
org.joda.time.format.PeriodFormatterBuilder.appendMinutes : specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>(5) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendMinutes : return r0
org.joda.time.format.PeriodFormatterBuilder.appendMinutes : return r0 >>>>>>>> org.joda.time.format.ISOPeriodFormat.standard : $r15 = virtualinvoke $r14.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>("M")
org.joda.time.format.ISOPeriodFormat.standard : $r15 = virtualinvoke $r14.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>("M") >>>>>>>> org.joda.time.format.ISOPeriodFormat.standard : $r16 = virtualinvoke $r15.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSecondsWithOptionalMillis()>()
org.joda.time.format.ISOPeriodFormat.standard : $r16 = virtualinvoke $r15.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSecondsWithOptionalMillis()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSecondsWithOptionalMillis : specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>(9)
org.joda.time.format.PeriodFormatterBuilder.appendSecondsWithOptionalMillis : specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>(9) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendSecondsWithOptionalMillis : return r0
org.joda.time.format.PeriodFormatterBuilder.appendSecondsWithOptionalMillis : return r0 >>>>>>>> org.joda.time.format.ISOPeriodFormat.standard : $r17 = virtualinvoke $r16.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>("S")
org.joda.time.format.ISOPeriodFormat.standard : $r17 = virtualinvoke $r16.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>("S") >>>>>>>> org.joda.time.format.ISOPeriodFormat.standard : $r18 = virtualinvoke $r17.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>()
org.joda.time.format.ISOPeriodFormat.standard : $r18 = virtualinvoke $r17.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r2 = r0.<org.joda.time.format.PeriodFormatterBuilder: java.util.List iElementPairs>
org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r2 = r0.<org.joda.time.format.PeriodFormatterBuilder: java.util.List iElementPairs> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : $z0 = r0.<org.joda.time.format.PeriodFormatterBuilder: boolean iNotPrinter>
org.joda.time.format.PeriodFormatterBuilder.toFormatter : $z0 = r0.<org.joda.time.format.PeriodFormatterBuilder: boolean iNotPrinter> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : $z1 = r0.<org.joda.time.format.PeriodFormatterBuilder: boolean iNotParser>
org.joda.time.format.PeriodFormatterBuilder.toFormatter : $z1 = r0.<org.joda.time.format.PeriodFormatterBuilder: boolean iNotParser> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : r1 = staticinvoke <org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>($r2, $z0, $z1)
org.joda.time.format.PeriodFormatterBuilder.toFormatter : r1 = staticinvoke <org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>($r2, $z0, $z1) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : if z0 == 0
org.joda.time.format.PeriodFormatterBuilder.toFormatter : if z0 == 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : i0 = interfaceinvoke r0.<java.util.List: int size()>()
org.joda.time.format.PeriodFormatterBuilder.toFormatter : i0 = interfaceinvoke r0.<java.util.List: int size()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : if i0 < 2
org.joda.time.format.PeriodFormatterBuilder.toFormatter : if i0 < 2 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r4 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0)
org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r4 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : $z2 = $r4 instanceof org.joda.time.format.PeriodFormatterBuilder$Separator
org.joda.time.format.PeriodFormatterBuilder.toFormatter : $z2 = $r4 instanceof org.joda.time.format.PeriodFormatterBuilder$Separator >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : if $z2 == 0
org.joda.time.format.PeriodFormatterBuilder.toFormatter : if $z2 == 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r5 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0)
org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r5 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : r1 = (org.joda.time.format.PeriodFormatterBuilder$Separator) $r5
org.joda.time.format.PeriodFormatterBuilder.toFormatter : r1 = (org.joda.time.format.PeriodFormatterBuilder$Separator) $r5 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r6 = staticinvoke <org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodParser access$000(org.joda.time.format.PeriodFormatterBuilder$Separator)>(r1)
org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r6 = staticinvoke <org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodParser access$000(org.joda.time.format.PeriodFormatterBuilder$Separator)>(r1) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.access$000 : $r1 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodParser iAfterParser>
org.joda.time.format.PeriodFormatterBuilder$Separator.access$000 : $r1 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodParser iAfterParser> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.access$000 : return $r1
org.joda.time.format.PeriodFormatterBuilder$Separator.access$000 : return $r1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : if $r6 != null
org.joda.time.format.PeriodFormatterBuilder.toFormatter : if $r6 != null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r7 = staticinvoke <org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodPrinter access$100(org.joda.time.format.PeriodFormatterBuilder$Separator)>(r1)
org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r7 = staticinvoke <org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodPrinter access$100(org.joda.time.format.PeriodFormatterBuilder$Separator)>(r1) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.access$100 : $r1 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodPrinter iAfterPrinter>
org.joda.time.format.PeriodFormatterBuilder$Separator.access$100 : $r1 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodPrinter iAfterPrinter> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.access$100 : return $r1
org.joda.time.format.PeriodFormatterBuilder$Separator.access$100 : return $r1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : if $r7 != null
org.joda.time.format.PeriodFormatterBuilder.toFormatter : if $r7 != null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r8 = interfaceinvoke r0.<java.util.List: java.util.List subList(int,int)>(2, i0)
org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r8 = interfaceinvoke r0.<java.util.List: java.util.List subList(int,int)>(2, i0) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : r2 = staticinvoke <org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>($r8, z0, z1)
org.joda.time.format.PeriodFormatterBuilder.toFormatter : r2 = staticinvoke <org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>($r8, z0, z1) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : r13 = staticinvoke <org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>(r0)
org.joda.time.format.PeriodFormatterBuilder.toFormatter : r13 = staticinvoke <org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>(r0) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : if z1 == 0
org.joda.time.format.PeriodFormatterBuilder.toFormatter : if z1 == 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r20 = new org.joda.time.format.PeriodFormatter
org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r20 = new org.joda.time.format.PeriodFormatter >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r21 = r13[0]
org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r21 = r13[0] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r22 = (org.joda.time.format.PeriodPrinter) $r21
org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r22 = (org.joda.time.format.PeriodPrinter) $r21 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r23 = r13[1]
org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r23 = r13[1] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r24 = (org.joda.time.format.PeriodParser) $r23
org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r24 = (org.joda.time.format.PeriodParser) $r23 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : specialinvoke $r20.<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>($r22, $r24)
org.joda.time.format.PeriodFormatterBuilder.toFormatter : specialinvoke $r20.<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>($r22, $r24) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : return $r20
org.joda.time.format.PeriodFormatterBuilder.toFormatter : return $r20 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r9 = virtualinvoke r2.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter getPrinter()>()
org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r9 = virtualinvoke r2.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter getPrinter()>() >>>>>>>> org.joda.time.format.PeriodFormatter.getPrinter : $r1 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter iPrinter>
org.joda.time.format.PeriodFormatter.getPrinter : $r1 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter iPrinter> >>>>>>>> org.joda.time.format.PeriodFormatter.getPrinter : return $r1
org.joda.time.format.PeriodFormatter.getPrinter : return $r1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r10 = virtualinvoke r2.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser getParser()>()
org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r10 = virtualinvoke r2.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser getParser()>() >>>>>>>> org.joda.time.format.PeriodFormatter.getParser : $r1 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser iParser>
org.joda.time.format.PeriodFormatter.getParser : $r1 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser iParser> >>>>>>>> org.joda.time.format.PeriodFormatter.getParser : return $r1
org.joda.time.format.PeriodFormatter.getParser : return $r1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : r11 = virtualinvoke r1.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodFormatterBuilder$Separator finish(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>($r9, $r10)
org.joda.time.format.PeriodFormatterBuilder.toFormatter : r11 = virtualinvoke r1.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodFormatterBuilder$Separator finish(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>($r9, $r10) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.finish : r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodPrinter iAfterPrinter> = r1
org.joda.time.format.PeriodFormatterBuilder$Separator.finish : r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodPrinter iAfterPrinter> = r1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.finish : r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodParser iAfterParser> = r2
org.joda.time.format.PeriodFormatterBuilder$Separator.finish : r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodParser iAfterParser> = r2 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.finish : return r0
org.joda.time.format.PeriodFormatterBuilder$Separator.finish : return r0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r12 = new org.joda.time.format.PeriodFormatter
org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r12 = new org.joda.time.format.PeriodFormatter >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : specialinvoke $r12.<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>(r11, r11)
org.joda.time.format.PeriodFormatterBuilder.toFormatter : specialinvoke $r12.<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>(r11, r11) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : return $r12
org.joda.time.format.PeriodFormatterBuilder.toFormatter : return $r12 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r3 = r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[] iFieldFormatters>
org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r3 = r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[] iFieldFormatters> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>()
org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r5 = (org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[]) $r4
org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r5 = (org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[]) $r4 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r6 = (org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[]) $r5
org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r6 = (org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[]) $r5 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[] iFieldFormatters> = $r6
org.joda.time.format.PeriodFormatterBuilder.toFormatter : r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[] iFieldFormatters> = $r6 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : return r1
org.joda.time.format.PeriodFormatterBuilder.toFormatter : return r1 >>>>>>>> org.joda.time.format.ISOPeriodFormat.standard : <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter cStandard> = $r18
org.joda.time.format.ISOPeriodFormat.standard : <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter cStandard> = $r18 >>>>>>>> org.joda.time.format.ISOPeriodFormat.standard : $r19 = <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter cStandard>
org.joda.time.format.ISOPeriodFormat.standard : $r19 = <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter cStandard> >>>>>>>> org.joda.time.format.ISOPeriodFormat.standard : return $r19
org.joda.time.format.ISOPeriodFormat.standard : return $r19 >>>>>>>> org.joda.time.PeriodType.minutes : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cMinutes>
org.joda.time.PeriodType.minutes : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cMinutes> >>>>>>>> org.joda.time.PeriodType.minutes : if r0 != null
org.joda.time.PeriodType.minutes : if r0 != null >>>>>>>> org.joda.time.PeriodType.minutes : $r2 = new org.joda.time.PeriodType
org.joda.time.PeriodType.minutes : $r2 = new org.joda.time.PeriodType >>>>>>>> org.joda.time.PeriodType.minutes : $r3 = newarray (org.joda.time.DurationFieldType)[1]
org.joda.time.PeriodType.minutes : $r3 = newarray (org.joda.time.DurationFieldType)[1] >>>>>>>> org.joda.time.PeriodType.minutes : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>()
org.joda.time.PeriodType.minutes : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>() >>>>>>>> org.joda.time.PeriodType.minutes : $r3[0] = $r1
org.joda.time.PeriodType.minutes : $r3[0] = $r1 >>>>>>>> org.joda.time.PeriodType.minutes : $r4 = newarray (int)[8]
org.joda.time.PeriodType.minutes : $r4 = newarray (int)[8] >>>>>>>> org.joda.time.PeriodType.minutes : $r4[0] = -1
org.joda.time.PeriodType.minutes : $r4[0] = -1 >>>>>>>> org.joda.time.PeriodType.minutes : $r4[1] = -1
org.joda.time.PeriodType.minutes : $r4[1] = -1 >>>>>>>> org.joda.time.PeriodType.minutes : $r4[2] = -1
org.joda.time.PeriodType.minutes : $r4[2] = -1 >>>>>>>> org.joda.time.PeriodType.minutes : $r4[3] = -1
org.joda.time.PeriodType.minutes : $r4[3] = -1 >>>>>>>> org.joda.time.PeriodType.minutes : $r4[4] = -1
org.joda.time.PeriodType.minutes : $r4[4] = -1 >>>>>>>> org.joda.time.PeriodType.minutes : $r4[5] = 0
org.joda.time.PeriodType.minutes : $r4[5] = 0 >>>>>>>> org.joda.time.PeriodType.minutes : $r4[6] = -1
org.joda.time.PeriodType.minutes : $r4[6] = -1 >>>>>>>> org.joda.time.PeriodType.minutes : $r4[7] = -1
org.joda.time.PeriodType.minutes : $r4[7] = -1 >>>>>>>> org.joda.time.PeriodType.minutes : specialinvoke $r2.<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>("Minutes", $r3, $r4)
org.joda.time.PeriodType.minutes : specialinvoke $r2.<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>("Minutes", $r3, $r4) >>>>>>>> org.joda.time.PeriodType.minutes : r0 = $r2
org.joda.time.PeriodType.minutes : r0 = $r2 >>>>>>>> org.joda.time.PeriodType.minutes : <org.joda.time.PeriodType: org.joda.time.PeriodType cMinutes> = r0
org.joda.time.PeriodType.minutes : <org.joda.time.PeriodType: org.joda.time.PeriodType cMinutes> = r0 >>>>>>>> org.joda.time.PeriodType.minutes : return r0
org.joda.time.PeriodType.minutes : return r0 >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : $r2 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.PeriodType iParseType>
org.joda.time.format.PeriodFormatter.withParseType : $r2 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.PeriodType iParseType> >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : if r1 != $r2
org.joda.time.format.PeriodFormatter.withParseType : if r1 != $r2 >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : $r3 = new org.joda.time.format.PeriodFormatter
org.joda.time.format.PeriodFormatter.withParseType : $r3 = new org.joda.time.format.PeriodFormatter >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : $r4 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter iPrinter>
org.joda.time.format.PeriodFormatter.withParseType : $r4 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter iPrinter> >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : $r5 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser iParser>
org.joda.time.format.PeriodFormatter.withParseType : $r5 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser iParser> >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : $r6 = r0.<org.joda.time.format.PeriodFormatter: java.util.Locale iLocale>
org.joda.time.format.PeriodFormatter.withParseType : $r6 = r0.<org.joda.time.format.PeriodFormatter: java.util.Locale iLocale> >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : specialinvoke $r3.<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,java.util.Locale,org.joda.time.PeriodType)>($r4, $r5, $r6, r1)
org.joda.time.format.PeriodFormatter.withParseType : specialinvoke $r3.<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,java.util.Locale,org.joda.time.PeriodType)>($r4, $r5, $r6, r1) >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : return $r3
org.joda.time.format.PeriodFormatter.withParseType : return $r3 >>>>>>>> org.joda.time.Minutes.minutes : lookupswitch(i0) {     case -2147483648:
org.joda.time.Minutes.minutes : lookupswitch(i0) {     case -2147483648: >>>>>>>> org.joda.time.Minutes.minutes : $r6 = new org.joda.time.Minutes
org.joda.time.Minutes.minutes : $r6 = new org.joda.time.Minutes >>>>>>>> org.joda.time.Minutes.minutes : specialinvoke $r6.<org.joda.time.Minutes: void <init>(int)>(i0)
org.joda.time.Minutes.minutes : specialinvoke $r6.<org.joda.time.Minutes: void <init>(int)>(i0) >>>>>>>> org.joda.time.Minutes.minutes : return $r6
org.joda.time.Minutes.minutes : return $r6 >>>>>>>> org.joda.time.Period.toStandardMinutes : return $r1
