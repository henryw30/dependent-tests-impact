org.joda.time.DateTimeUtils.currentTimeMillis : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> >>>>>>>> org.joda.time.DateTimeUtils.currentTimeMillis : $l0 = interfaceinvoke $r0.<org.joda.time.DateTimeUtils$MillisProvider: long getMillis()>()
org.joda.time.DateTimeUtils.currentTimeMillis : $l0 = interfaceinvoke $r0.<org.joda.time.DateTimeUtils$MillisProvider: long getMillis()>() >>>>>>>> org.joda.time.DateTimeUtils$SystemMillisProvider.getMillis : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.joda.time.DateTimeUtils$SystemMillisProvider.getMillis : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.joda.time.DateTimeUtils$SystemMillisProvider.getMillis : return $l0
org.joda.time.DateTimeUtils$SystemMillisProvider.getMillis : return $l0 >>>>>>>> org.joda.time.DateTimeUtils.currentTimeMillis : return $l0
org.joda.time.DateTimeUtils.currentTimeMillis : return $l0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r0 != null
org.joda.time.chrono.ISOChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.chrono.ISOChronology.getInstance : r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>() >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63
org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>
org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0]
org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0] >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r1 == null
org.joda.time.chrono.ISOChronology.getInstance : if r1 == null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2
org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null
org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.GregorianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : return $r1
org.joda.time.chrono.AssembledChronology.getBase : return $r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : r1 = $r2
org.joda.time.chrono.BasicChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : if $r2 == null
org.joda.time.chrono.BasicChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : return $r4
org.joda.time.chrono.BasicChronology.getZone : return $r4 >>>>>>>> org.joda.time.chrono.GregorianChronology.getZone : return $r1
org.joda.time.chrono.GregorianChronology.getZone : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : return $r3
org.joda.time.chrono.AssembledChronology.getZone : return $r3 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0
org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return r1
org.joda.time.chrono.ISOChronology.getInstance : return r1 >>>>>>>> org.joda.time.base.BaseDateTime.checkChronology : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.base.BaseDateTime.checkChronology : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getChronology : if r0 != null
org.joda.time.DateTimeUtils.getChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.DateTimeUtils.getChronology : return r0 >>>>>>>> org.joda.time.base.BaseDateTime.checkChronology : return $r2
org.joda.time.base.BaseDateTime.checkChronology : return $r2 >>>>>>>> org.joda.time.DateMidnight.checkInstant : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.DateMidnight.checkInstant : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfMonth : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth>
org.joda.time.chrono.AssembledChronology.dayOfMonth : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth> >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfMonth : return $r1
org.joda.time.chrono.AssembledChronology.dayOfMonth : return $r1 >>>>>>>> org.joda.time.DateMidnight.checkInstant : $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long roundFloor(long)>(l0)
org.joda.time.DateMidnight.checkInstant : $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long roundFloor(long)>(l0) >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : if $b1 < 0
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : if $b1 < 0 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l3 = l0 % $l2
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l3 = l0 % $l2 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l4 = l0 - $l3
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l4 = l0 - $l3 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : return $l4
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : return $l4 >>>>>>>> org.joda.time.DateMidnight.checkInstant : return $l1
org.joda.time.DateMidnight.checkInstant : return $l1 >>>>>>>> org.joda.time.DateMidnight.centuryOfEra : $r1 = new org.joda.time.DateMidnight$Property
org.joda.time.DateMidnight.centuryOfEra : $r1 = new org.joda.time.DateMidnight$Property >>>>>>>> org.joda.time.DateMidnight.centuryOfEra : $r2 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>()
org.joda.time.DateMidnight.centuryOfEra : $r2 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.base.BaseDateTime.getChronology : $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology>
org.joda.time.base.BaseDateTime.getChronology : $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.base.BaseDateTime.getChronology : return $r1
org.joda.time.base.BaseDateTime.getChronology : return $r1 >>>>>>>> org.joda.time.DateMidnight.centuryOfEra : $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField centuryOfEra()>()
org.joda.time.DateMidnight.centuryOfEra : $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField centuryOfEra()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.centuryOfEra : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iCenturyOfEra>
org.joda.time.chrono.AssembledChronology.centuryOfEra : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iCenturyOfEra> >>>>>>>> org.joda.time.chrono.AssembledChronology.centuryOfEra : return $r1
org.joda.time.chrono.AssembledChronology.centuryOfEra : return $r1 >>>>>>>> org.joda.time.DateMidnight.centuryOfEra : specialinvoke $r1.<org.joda.time.DateMidnight$Property: void <init>(org.joda.time.DateMidnight,org.joda.time.DateTimeField)>(r0, $r3)
org.joda.time.DateMidnight.centuryOfEra : specialinvoke $r1.<org.joda.time.DateMidnight$Property: void <init>(org.joda.time.DateMidnight,org.joda.time.DateTimeField)>(r0, $r3) >>>>>>>> org.joda.time.DateMidnight.centuryOfEra : return $r1
org.joda.time.DateMidnight.centuryOfEra : return $r1 >>>>>>>> org.joda.time.DateMidnight.dayOfYear : $r1 = new org.joda.time.DateMidnight$Property
org.joda.time.DateMidnight.dayOfYear : $r1 = new org.joda.time.DateMidnight$Property >>>>>>>> org.joda.time.DateMidnight.dayOfYear : $r2 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>()
org.joda.time.DateMidnight.dayOfYear : $r2 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.DateMidnight.dayOfYear : $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfYear()>()
org.joda.time.DateMidnight.dayOfYear : $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfYear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfYear>
org.joda.time.chrono.AssembledChronology.dayOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfYear : return $r1
org.joda.time.chrono.AssembledChronology.dayOfYear : return $r1 >>>>>>>> org.joda.time.DateMidnight.dayOfYear : specialinvoke $r1.<org.joda.time.DateMidnight$Property: void <init>(org.joda.time.DateMidnight,org.joda.time.DateTimeField)>(r0, $r3)
org.joda.time.DateMidnight.dayOfYear : specialinvoke $r1.<org.joda.time.DateMidnight$Property: void <init>(org.joda.time.DateMidnight,org.joda.time.DateTimeField)>(r0, $r3) >>>>>>>> org.joda.time.DateMidnight.dayOfYear : return $r1
org.joda.time.DateMidnight.dayOfYear : return $r1 >>>>>>>> org.joda.time.DateMidnight$Property.roundHalfFloorCopy : $r1 = r0.<org.joda.time.DateMidnight$Property: org.joda.time.DateMidnight iInstant>
org.joda.time.DateMidnight$Property.roundHalfFloorCopy : $r1 = r0.<org.joda.time.DateMidnight$Property: org.joda.time.DateMidnight iInstant> >>>>>>>> org.joda.time.DateMidnight$Property.roundHalfFloorCopy : $r2 = r0.<org.joda.time.DateMidnight$Property: org.joda.time.DateTimeField iField>
org.joda.time.DateMidnight$Property.roundHalfFloorCopy : $r2 = r0.<org.joda.time.DateMidnight$Property: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.DateMidnight$Property.roundHalfFloorCopy : $r3 = r0.<org.joda.time.DateMidnight$Property: org.joda.time.DateMidnight iInstant>
org.joda.time.DateMidnight$Property.roundHalfFloorCopy : $r3 = r0.<org.joda.time.DateMidnight$Property: org.joda.time.DateMidnight iInstant> >>>>>>>> org.joda.time.DateMidnight$Property.roundHalfFloorCopy : $l0 = virtualinvoke $r3.<org.joda.time.DateMidnight: long getMillis()>()
org.joda.time.DateMidnight$Property.roundHalfFloorCopy : $l0 = virtualinvoke $r3.<org.joda.time.DateMidnight: long getMillis()>() >>>>>>>> org.joda.time.base.BaseDateTime.getMillis : $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis>
org.joda.time.base.BaseDateTime.getMillis : $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis> >>>>>>>> org.joda.time.base.BaseDateTime.getMillis : return $l0
org.joda.time.base.BaseDateTime.getMillis : return $l0 >>>>>>>> org.joda.time.DateMidnight$Property.roundHalfFloorCopy : $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long roundHalfFloor(long)>($l0)
org.joda.time.DateMidnight$Property.roundHalfFloorCopy : $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long roundHalfFloor(long)>($l0) >>>>>>>> org.joda.time.field.BaseDateTimeField.roundHalfFloor : l1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundFloor(long)>(l0)
org.joda.time.field.BaseDateTimeField.roundHalfFloor : l1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundFloor(long)>(l0) >>>>>>>> org.joda.time.field.BaseDateTimeField.roundHalfFloor : l2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>(l0)
org.joda.time.field.BaseDateTimeField.roundHalfFloor : l2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>(l0) >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundCeiling : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDurationDateTimeField.roundCeiling : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundCeiling : if $b1 <= 0
org.joda.time.field.PreciseDurationDateTimeField.roundCeiling : if $b1 <= 0 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundCeiling : l2 = l0 - 1L
org.joda.time.field.PreciseDurationDateTimeField.roundCeiling : l2 = l0 - 1L >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundCeiling : $l3 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.roundCeiling : $l3 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundCeiling : $l4 = l2 % $l3
org.joda.time.field.PreciseDurationDateTimeField.roundCeiling : $l4 = l2 % $l3 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundCeiling : $l5 = l2 - $l4
org.joda.time.field.PreciseDurationDateTimeField.roundCeiling : $l5 = l2 - $l4 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundCeiling : $l6 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.roundCeiling : $l6 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundCeiling : $l7 = $l5 + $l6
org.joda.time.field.PreciseDurationDateTimeField.roundCeiling : $l7 = $l5 + $l6 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundCeiling : return $l7
org.joda.time.field.PreciseDurationDateTimeField.roundCeiling : return $l7 >>>>>>>> org.joda.time.field.BaseDateTimeField.roundHalfFloor : l3 = l0 - l1
org.joda.time.field.BaseDateTimeField.roundHalfFloor : l3 = l0 - l1 >>>>>>>> org.joda.time.field.BaseDateTimeField.roundHalfFloor : l4 = l2 - l0
org.joda.time.field.BaseDateTimeField.roundHalfFloor : l4 = l2 - l0 >>>>>>>> org.joda.time.field.BaseDateTimeField.roundHalfFloor : $b5 = l3 cmp l4
org.joda.time.field.BaseDateTimeField.roundHalfFloor : $b5 = l3 cmp l4 >>>>>>>> org.joda.time.field.BaseDateTimeField.roundHalfFloor : if $b5 > 0
org.joda.time.field.BaseDateTimeField.roundHalfFloor : if $b5 > 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.roundHalfFloor : return l1
org.joda.time.field.BaseDateTimeField.roundHalfFloor : return l1 >>>>>>>> org.joda.time.DateMidnight$Property.roundHalfFloorCopy : $r4 = virtualinvoke $r1.<org.joda.time.DateMidnight: org.joda.time.DateMidnight withMillis(long)>($l1)
org.joda.time.DateMidnight$Property.roundHalfFloorCopy : $r4 = virtualinvoke $r1.<org.joda.time.DateMidnight: org.joda.time.DateMidnight withMillis(long)>($l1) >>>>>>>> org.joda.time.DateMidnight.withMillis : r1 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>()
org.joda.time.DateMidnight.withMillis : r1 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.DateMidnight.withMillis : l1 = virtualinvoke r0.<org.joda.time.DateMidnight: long checkInstant(long,org.joda.time.Chronology)>(l0, r1)
org.joda.time.DateMidnight.withMillis : l1 = virtualinvoke r0.<org.joda.time.DateMidnight: long checkInstant(long,org.joda.time.Chronology)>(l0, r1) >>>>>>>> org.joda.time.DateMidnight.withMillis : $l2 = virtualinvoke r0.<org.joda.time.DateMidnight: long getMillis()>()
org.joda.time.DateMidnight.withMillis : $l2 = virtualinvoke r0.<org.joda.time.DateMidnight: long getMillis()>() >>>>>>>> org.joda.time.DateMidnight.withMillis : $b3 = l1 cmp $l2
org.joda.time.DateMidnight.withMillis : $b3 = l1 cmp $l2 >>>>>>>> org.joda.time.DateMidnight.withMillis : if $b3 != 0
org.joda.time.DateMidnight.withMillis : if $b3 != 0 >>>>>>>> org.joda.time.DateMidnight.withMillis : $r2 = r0
org.joda.time.DateMidnight.withMillis : $r2 = r0 >>>>>>>> org.joda.time.DateMidnight.withMillis : goto [?= return $r2]
org.joda.time.DateMidnight.withMillis : goto [?= return $r2] >>>>>>>> org.joda.time.DateMidnight.withMillis : return $r2
org.joda.time.DateMidnight.withMillis : return $r2 >>>>>>>> org.joda.time.DateMidnight$Property.roundHalfFloorCopy : return $r4
