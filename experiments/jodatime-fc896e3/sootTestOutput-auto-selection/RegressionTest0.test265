org.joda.time.format.ISODateTimeFormat.basicOrdinalDateTimeNoMillis : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter bodtx> >>>>>>>> org.joda.time.format.ISODateTimeFormat.basicOrdinalDateTimeNoMillis : if $r0 != null
org.joda.time.format.ISODateTimeFormat.basicOrdinalDateTimeNoMillis : if $r0 != null >>>>>>>> org.joda.time.format.ISODateTimeFormat.basicOrdinalDateTimeNoMillis : $r7 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter bodtx>
org.joda.time.format.ISODateTimeFormat.basicOrdinalDateTimeNoMillis : $r7 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter bodtx> >>>>>>>> org.joda.time.format.ISODateTimeFormat.basicOrdinalDateTimeNoMillis : return $r7
org.joda.time.format.ISODateTimeFormat.basicOrdinalDateTimeNoMillis : return $r7 >>>>>>>> org.joda.time.format.DateTimeFormatter.getPivotYear : $r1 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>
org.joda.time.format.DateTimeFormatter.getPivotYear : $r1 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear> >>>>>>>> org.joda.time.format.DateTimeFormatter.getPivotYear : return $r1
org.joda.time.format.DateTimeFormatter.getPivotYear : return $r1 >>>>>>>> org.joda.time.LocalTime.parse : $r2 = virtualinvoke r1.<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalTime parseLocalTime(java.lang.String)>(r0)
org.joda.time.LocalTime.parse : $r2 = virtualinvoke r1.<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalTime parseLocalTime(java.lang.String)>(r0) >>>>>>>> org.joda.time.format.DateTimeFormatter.parseLocalTime : $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>(r1)
org.joda.time.format.DateTimeFormatter.parseLocalTime : $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>(r1) >>>>>>>> org.joda.time.format.DateTimeFormatter.parseLocalDateTime : r2 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser requireParser()>()
org.joda.time.format.DateTimeFormatter.parseLocalDateTime : r2 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser requireParser()>() >>>>>>>> org.joda.time.format.DateTimeFormatter.requireParser : r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser iParser>
org.joda.time.format.DateTimeFormatter.requireParser : r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser iParser> >>>>>>>> org.joda.time.format.DateTimeFormatter.requireParser : if r1 != null
org.joda.time.format.DateTimeFormatter.requireParser : if r1 != null >>>>>>>> org.joda.time.format.DateTimeFormatter.requireParser : return r1
org.joda.time.format.DateTimeFormatter.requireParser : return r1 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseLocalDateTime : $r6 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>(null)
org.joda.time.format.DateTimeFormatter.parseLocalDateTime : $r6 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>(null) >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.format.DateTimeFormatter.selectChronology : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getChronology : if r0 != null
org.joda.time.DateTimeUtils.getChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>()
org.joda.time.DateTimeUtils.getChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>() >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>() >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r0)
org.joda.time.chrono.ISOChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r0 != null
org.joda.time.chrono.ISOChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63
org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>
org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0]
org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0] >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r1 == null
org.joda.time.chrono.ISOChronology.getInstance : if r1 == null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2
org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null
org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.GregorianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : return $r1
org.joda.time.chrono.AssembledChronology.getBase : return $r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : r1 = $r2
org.joda.time.chrono.BasicChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : if $r2 == null
org.joda.time.chrono.BasicChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : return $r4
org.joda.time.chrono.BasicChronology.getZone : return $r4 >>>>>>>> org.joda.time.chrono.GregorianChronology.getZone : return $r1
org.joda.time.chrono.GregorianChronology.getZone : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : return $r3
org.joda.time.chrono.AssembledChronology.getZone : return $r3 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0
org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return r1
org.joda.time.chrono.ISOChronology.getInstance : return r1 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return $r1
org.joda.time.chrono.ISOChronology.getInstance : return $r1 >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return $r1
org.joda.time.DateTimeUtils.getChronology : return $r1 >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : $r3 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>
org.joda.time.format.DateTimeFormatter.selectChronology : $r3 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono> >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : if $r3 == null
org.joda.time.format.DateTimeFormatter.selectChronology : if $r3 == null >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : $r4 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeFormatter.selectChronology : $r4 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : if $r4 == null
org.joda.time.format.DateTimeFormatter.selectChronology : if $r4 == null >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : return r2
org.joda.time.format.DateTimeFormatter.selectChronology : return r2 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseLocalDateTime : r3 = virtualinvoke $r6.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>()
org.joda.time.format.DateTimeFormatter.parseLocalDateTime : r3 = virtualinvoke $r6.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>() >>>>>>>> org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>
org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.ISOChronology.withUTC : return $r1
org.joda.time.chrono.ISOChronology.withUTC : return $r1 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseLocalDateTime : $r7 = new org.joda.time.format.DateTimeParserBucket
org.joda.time.format.DateTimeFormatter.parseLocalDateTime : $r7 = new org.joda.time.format.DateTimeParserBucket >>>>>>>> org.joda.time.format.DateTimeFormatter.parseLocalDateTime : $r8 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>
org.joda.time.format.DateTimeFormatter.parseLocalDateTime : $r8 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale> >>>>>>>> org.joda.time.format.DateTimeFormatter.parseLocalDateTime : $r9 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>
org.joda.time.format.DateTimeFormatter.parseLocalDateTime : $r9 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear> >>>>>>>> org.joda.time.format.DateTimeFormatter.parseLocalDateTime : $i3 = r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear>
org.joda.time.format.DateTimeFormatter.parseLocalDateTime : $i3 = r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear> >>>>>>>> org.joda.time.format.DateTimeFormatter.parseLocalDateTime : specialinvoke $r7.<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>(0L, r3, $r8, $r9, $i3)
org.joda.time.format.DateTimeFormatter.parseLocalDateTime : specialinvoke $r7.<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>(0L, r3, $r8, $r9, $i3) >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.DateTimeUtils.getChronology : return r0 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseLocalDateTime : r4 = $r7
org.joda.time.format.DateTimeFormatter.parseLocalDateTime : r4 = $r7 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseLocalDateTime : i0 = interfaceinvoke r2.<org.joda.time.format.DateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>(r4, r1, 0)
org.joda.time.format.DateTimeFormatter.parseLocalDateTime : i0 = interfaceinvoke r2.<org.joda.time.format.DateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>(r4, r1, 0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimeParser[] iParsers>
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimeParser[] iParsers> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : if r3 != null
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : if r3 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : i1 = lengthof r3
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : i1 = lengthof r3 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : i2 = 0
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : i2 = 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : if i2 >= i1
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : if i2 >= i1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : if i0 < 0
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : if i0 < 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : $r5 = r3[i2]
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : $r5 = r3[i2] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : i0 = interfaceinvoke $r5.<org.joda.time.format.DateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>(r1, r2, i0)
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : i0 = interfaceinvoke $r5.<org.joda.time.format.DateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>(r1, r2, i0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i5 = r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int iMaxParsedDigits>
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i5 = r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int iMaxParsedDigits> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i6 = virtualinvoke r2.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i6 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i7 = $i6 - i0
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i7 = $i6 - i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i1 = staticinvoke <java.lang.Math: int min(int,int)>($i5, $i7)
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i1 = staticinvoke <java.lang.Math: int min(int,int)>($i5, $i7) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : z0 = 0
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : z0 = 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i2 = 0
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i2 = 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if i2 >= i1
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if i2 >= i1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i8 = i0 + i2
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i8 = i0 + i2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : c3 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i8)
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : c3 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i8) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if i2 != 0
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if i2 != 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if c3 == 45
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if c3 == 45 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if c3 != 43
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if c3 != 43 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if c3 < 48
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if c3 < 48 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if c3 <= 57
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if c3 <= 57 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i2 = i2 + 1
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i2 = i2 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if i2 < 9
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if i2 < 9 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i4 = i0
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i4 = i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if z0 == 0
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i21 = i4 + 1
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i21 = i4 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $c22 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i4)
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $c22 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i4) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i20 = $c22 - 48
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i20 = $c22 - 48 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : goto [?= i19 = i0 + i2]
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : goto [?= i19 = i0 + i2] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i19 = i0 + i2
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i19 = i0 + i2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if i21 >= i19
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if i21 >= i19 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i24 = i20 << 3
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i24 = i20 << 3 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i25 = i20 << 1
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i25 = i20 << 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i26 = $i24 + $i25
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i26 = $i24 + $i25 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i27 = i21
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i27 = i21 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i21 = i21 + 1
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i21 = i21 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $c28 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i27)
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $c28 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i27) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i29 = $i26 + $c28
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i29 = $i26 + $c28 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i20 = $i29 - 48
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i20 = $i29 - 48 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: org.joda.time.DateTimeFieldType iFieldType>
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: org.joda.time.DateTimeFieldType iFieldType> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,int)>($r6, i20)
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,int)>($r6, i20) >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : $r2 = new org.joda.time.format.DateTimeParserBucket$SavedField
org.joda.time.format.DateTimeParserBucket.saveField : $r2 = new org.joda.time.format.DateTimeParserBucket$SavedField >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : $r3 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology iChrono>
org.joda.time.format.DateTimeParserBucket.saveField : $r3 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology iChrono> >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : $r4 = virtualinvoke r1.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r3)
org.joda.time.format.DateTimeParserBucket.saveField : $r4 = virtualinvoke r1.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r3) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : tableswitch($b0) {     case 1:
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : tableswitch($b0) {     case 1: >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r7 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r7 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.year : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear>
org.joda.time.chrono.AssembledChronology.year : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.year : return $r1
org.joda.time.chrono.AssembledChronology.year : return $r1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r7
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r7 >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : specialinvoke $r2.<org.joda.time.format.DateTimeParserBucket$SavedField: void <init>(org.joda.time.DateTimeField,int)>($r4, i0)
org.joda.time.format.DateTimeParserBucket.saveField : specialinvoke $r2.<org.joda.time.format.DateTimeParserBucket$SavedField: void <init>(org.joda.time.DateTimeField,int)>($r4, i0) >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : specialinvoke r0.<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.format.DateTimeParserBucket$SavedField)>($r2)
org.joda.time.format.DateTimeParserBucket.saveField : specialinvoke r0.<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.format.DateTimeParserBucket$SavedField)>($r2) >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : r2 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields>
org.joda.time.format.DateTimeParserBucket.saveField : r2 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields> >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : i0 = r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount>
org.joda.time.format.DateTimeParserBucket.saveField : i0 = r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount> >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : $i1 = lengthof r2
org.joda.time.format.DateTimeParserBucket.saveField : $i1 = lengthof r2 >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : if i0 == $i1
org.joda.time.format.DateTimeParserBucket.saveField : if i0 == $i1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : $z0 = r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared>
org.joda.time.format.DateTimeParserBucket.saveField : $z0 = r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared> >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : if $z0 == 0
org.joda.time.format.DateTimeParserBucket.saveField : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = null
org.joda.time.format.DateTimeParserBucket.saveField : r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = null >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : r2[i0] = r1
org.joda.time.format.DateTimeParserBucket.saveField : r2[i0] = r1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : $i4 = i0 + 1
org.joda.time.format.DateTimeParserBucket.saveField : $i4 = i0 + 1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount> = $i4
org.joda.time.format.DateTimeParserBucket.saveField : r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount> = $i4 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : return i19
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : return i19 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : i2 = i2 + 1
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : i2 = i2 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$FixedNumber.parseInto : i1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>(r1, r2, i0)
org.joda.time.format.DateTimeFormatterBuilder$FixedNumber.parseInto : i1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>(r1, r2, i0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i17 = i0 ^ -1
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i17 = i0 ^ -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : return $i17
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : return $i17 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$FixedNumber.parseInto : if i1 >= 0
org.joda.time.format.DateTimeFormatterBuilder$FixedNumber.parseInto : if i1 >= 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$FixedNumber.parseInto : return i1
org.joda.time.format.DateTimeFormatterBuilder$FixedNumber.parseInto : return i1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : return i0
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : return i0 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseLocalDateTime : if i0 < 0
org.joda.time.format.DateTimeFormatter.parseLocalDateTime : if i0 < 0 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseLocalDateTime : i0 = i0 ^ -1
org.joda.time.format.DateTimeFormatter.parseLocalDateTime : i0 = i0 ^ -1 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseLocalDateTime : $r15 = new java.lang.IllegalArgumentException
org.joda.time.format.DateTimeFormatter.parseLocalDateTime : $r15 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.format.DateTimeFormatter.parseLocalDateTime : $r16 = staticinvoke <org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>(r1, i0)
org.joda.time.format.DateTimeFormatter.parseLocalDateTime : $r16 = staticinvoke <org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>(r1, i0) >>>>>>>> org.joda.time.format.FormatUtils.createErrorMessage : i1 = i0 + 32
org.joda.time.format.FormatUtils.createErrorMessage : i1 = i0 + 32 >>>>>>>> org.joda.time.format.FormatUtils.createErrorMessage : $i2 = virtualinvoke r0.<java.lang.String: int length()>()
org.joda.time.format.FormatUtils.createErrorMessage : $i2 = virtualinvoke r0.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.FormatUtils.createErrorMessage : $i3 = i1 + 3
org.joda.time.format.FormatUtils.createErrorMessage : $i3 = i1 + 3 >>>>>>>> org.joda.time.format.FormatUtils.createErrorMessage : if $i2 > $i3
org.joda.time.format.FormatUtils.createErrorMessage : if $i2 > $i3 >>>>>>>> org.joda.time.format.FormatUtils.createErrorMessage : r1 = r0
org.joda.time.format.FormatUtils.createErrorMessage : r1 = r0 >>>>>>>> org.joda.time.format.FormatUtils.createErrorMessage : goto [?= (branch)]
org.joda.time.format.FormatUtils.createErrorMessage : goto [?= (branch)] >>>>>>>> org.joda.time.format.FormatUtils.createErrorMessage : if i0 > 0
org.joda.time.format.FormatUtils.createErrorMessage : if i0 > 0 >>>>>>>> org.joda.time.format.FormatUtils.createErrorMessage : $i4 = virtualinvoke r0.<java.lang.String: int length()>()
org.joda.time.format.FormatUtils.createErrorMessage : $i4 = virtualinvoke r0.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.FormatUtils.createErrorMessage : if i0 < $i4
org.joda.time.format.FormatUtils.createErrorMessage : if i0 < $i4 >>>>>>>> org.joda.time.format.FormatUtils.createErrorMessage : $r8 = new java.lang.StringBuilder
org.joda.time.format.FormatUtils.createErrorMessage : $r8 = new java.lang.StringBuilder >>>>>>>> org.joda.time.format.FormatUtils.createErrorMessage : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()
org.joda.time.format.FormatUtils.createErrorMessage : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.format.FormatUtils.createErrorMessage : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid format: \"")
org.joda.time.format.FormatUtils.createErrorMessage : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid format: \"") >>>>>>>> org.joda.time.format.FormatUtils.createErrorMessage : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.joda.time.format.FormatUtils.createErrorMessage : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.joda.time.format.FormatUtils.createErrorMessage : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" is too short")
org.joda.time.format.FormatUtils.createErrorMessage : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" is too short") >>>>>>>> org.joda.time.format.FormatUtils.createErrorMessage : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.format.FormatUtils.createErrorMessage : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.format.FormatUtils.createErrorMessage : return $r12
org.joda.time.format.FormatUtils.createErrorMessage : return $r12 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseLocalDateTime : specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16)
org.joda.time.format.DateTimeFormatter.parseLocalDateTime : specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16) >>>>>>>> org.joda.time.format.DateTimeFormatter.parseLocalDateTime : throw $r15
