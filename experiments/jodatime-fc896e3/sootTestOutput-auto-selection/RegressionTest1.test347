org.joda.time.chrono.ISOChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63
org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>
org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0]
org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0] >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r1 == null
org.joda.time.chrono.ISOChronology.getInstance : if r1 == null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2
org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null
org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.GregorianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : return $r1
org.joda.time.chrono.AssembledChronology.getBase : return $r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : r1 = $r2
org.joda.time.chrono.BasicChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : if $r2 == null
org.joda.time.chrono.BasicChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : return $r4
org.joda.time.chrono.BasicChronology.getZone : return $r4 >>>>>>>> org.joda.time.chrono.GregorianChronology.getZone : return $r1
org.joda.time.chrono.GregorianChronology.getZone : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : return $r3
org.joda.time.chrono.AssembledChronology.getZone : return $r3 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0
org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return r1
org.joda.time.chrono.ISOChronology.getInstance : return r1 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getOffsetFromLocal : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset>
org.joda.time.tz.FixedDateTimeZone.getOffsetFromLocal : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset> >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getOffsetFromLocal : return $i1
org.joda.time.tz.FixedDateTimeZone.getOffsetFromLocal : return $i1 >>>>>>>> org.joda.time.DateTime.now : if r0 != null
org.joda.time.DateTime.now : if r0 != null >>>>>>>> org.joda.time.DateTime.now : $r2 = new org.joda.time.DateTime
org.joda.time.DateTime.now : $r2 = new org.joda.time.DateTime >>>>>>>> org.joda.time.DateTime.now : specialinvoke $r2.<org.joda.time.DateTime: void <init>(org.joda.time.DateTimeZone)>(r0)
org.joda.time.DateTime.now : specialinvoke $r2.<org.joda.time.DateTime: void <init>(org.joda.time.DateTimeZone)>(r0) >>>>>>>> org.joda.time.DateTimeUtils.currentTimeMillis : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider>
org.joda.time.DateTimeUtils.currentTimeMillis : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> >>>>>>>> org.joda.time.DateTimeUtils.currentTimeMillis : $l0 = interfaceinvoke $r0.<org.joda.time.DateTimeUtils$MillisProvider: long getMillis()>()
org.joda.time.DateTimeUtils.currentTimeMillis : $l0 = interfaceinvoke $r0.<org.joda.time.DateTimeUtils$MillisProvider: long getMillis()>() >>>>>>>> org.joda.time.DateTimeUtils$FixedMillisProvider.getMillis : $l0 = r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: long iMillis>
org.joda.time.DateTimeUtils$FixedMillisProvider.getMillis : $l0 = r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: long iMillis> >>>>>>>> org.joda.time.DateTimeUtils$FixedMillisProvider.getMillis : return $l0
org.joda.time.DateTimeUtils$FixedMillisProvider.getMillis : return $l0 >>>>>>>> org.joda.time.DateTimeUtils.currentTimeMillis : return $l0
org.joda.time.DateTimeUtils.currentTimeMillis : return $l0 >>>>>>>> org.joda.time.base.BaseDateTime.checkChronology : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.base.BaseDateTime.checkChronology : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getChronology : if r0 != null
org.joda.time.DateTimeUtils.getChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.DateTimeUtils.getChronology : return r0 >>>>>>>> org.joda.time.base.BaseDateTime.checkChronology : return $r2
org.joda.time.base.BaseDateTime.checkChronology : return $r2 >>>>>>>> org.joda.time.base.BaseDateTime.checkInstant : return l0
org.joda.time.base.BaseDateTime.checkInstant : return l0 >>>>>>>> org.joda.time.DateTime.now : return $r2
org.joda.time.DateTime.now : return $r2 >>>>>>>> org.joda.time.DateTime.minusWeeks : if i0 != 0
org.joda.time.DateTime.minusWeeks : if i0 != 0 >>>>>>>> org.joda.time.DateTime.minusWeeks : $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>()
org.joda.time.DateTime.minusWeeks : $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.base.BaseDateTime.getChronology : $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology>
org.joda.time.base.BaseDateTime.getChronology : $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.base.BaseDateTime.getChronology : return $r1
org.joda.time.base.BaseDateTime.getChronology : return $r1 >>>>>>>> org.joda.time.DateTime.minusWeeks : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField weeks()>()
org.joda.time.DateTime.minusWeeks : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField weeks()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.weeks : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks>
org.joda.time.chrono.AssembledChronology.weeks : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks> >>>>>>>> org.joda.time.chrono.AssembledChronology.weeks : return $r1
org.joda.time.chrono.AssembledChronology.weeks : return $r1 >>>>>>>> org.joda.time.DateTime.minusWeeks : $l2 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>()
org.joda.time.DateTime.minusWeeks : $l2 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>() >>>>>>>> org.joda.time.base.BaseDateTime.getMillis : $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis>
org.joda.time.base.BaseDateTime.getMillis : $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis> >>>>>>>> org.joda.time.base.BaseDateTime.getMillis : return $l0
org.joda.time.base.BaseDateTime.getMillis : return $l0 >>>>>>>> org.joda.time.DateTime.minusWeeks : l1 = virtualinvoke $r2.<org.joda.time.DurationField: long subtract(long,int)>($l2, i0)
org.joda.time.DateTime.minusWeeks : l1 = virtualinvoke $r2.<org.joda.time.DurationField: long subtract(long,int)>($l2, i0) >>>>>>>> org.joda.time.DurationField.subtract : if i1 != -2147483648
org.joda.time.DurationField.subtract : if i1 != -2147483648 >>>>>>>> org.joda.time.DurationField.subtract : $i4 = neg i1
org.joda.time.DurationField.subtract : $i4 = neg i1 >>>>>>>> org.joda.time.DurationField.subtract : $l5 = virtualinvoke r0.<org.joda.time.DurationField: long add(long,int)>(l0, $i4)
org.joda.time.DurationField.subtract : $l5 = virtualinvoke r0.<org.joda.time.DurationField: long add(long,int)>(l0, $i4) >>>>>>>> org.joda.time.field.PreciseDurationField.add : $l3 = (long) i1
org.joda.time.field.PreciseDurationField.add : $l3 = (long) i1 >>>>>>>> org.joda.time.field.PreciseDurationField.add : $l4 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis>
org.joda.time.field.PreciseDurationField.add : $l4 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationField.add : l2 = $l3 * $l4
org.joda.time.field.PreciseDurationField.add : l2 = $l3 * $l4 >>>>>>>> org.joda.time.field.PreciseDurationField.add : $l5 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, l2)
org.joda.time.field.PreciseDurationField.add : $l5 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, l2) >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : l2 = l0 + l1
org.joda.time.field.FieldUtils.safeAdd : l2 = l0 + l1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $l3 = l0 ^ l2
org.joda.time.field.FieldUtils.safeAdd : $l3 = l0 ^ l2 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $b4 = $l3 cmp 0L
org.joda.time.field.FieldUtils.safeAdd : $b4 = $l3 cmp 0L >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $b4 >= 0
org.joda.time.field.FieldUtils.safeAdd : if $b4 >= 0 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $l5 = l0 ^ l1
org.joda.time.field.FieldUtils.safeAdd : $l5 = l0 ^ l1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $b6 = $l5 cmp 0L
org.joda.time.field.FieldUtils.safeAdd : $b6 = $l5 cmp 0L >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $b6 < 0
org.joda.time.field.FieldUtils.safeAdd : if $b6 < 0 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : return l2
org.joda.time.field.FieldUtils.safeAdd : return l2 >>>>>>>> org.joda.time.field.PreciseDurationField.add : return $l5
org.joda.time.field.PreciseDurationField.add : return $l5 >>>>>>>> org.joda.time.DurationField.subtract : return $l5
org.joda.time.DurationField.subtract : return $l5 >>>>>>>> org.joda.time.DateTime.minusWeeks : $r3 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>(l1)
org.joda.time.DateTime.minusWeeks : $r3 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>(l1) >>>>>>>> org.joda.time.DateTime.withMillis : $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>()
org.joda.time.DateTime.withMillis : $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>() >>>>>>>> org.joda.time.DateTime.withMillis : $b2 = l0 cmp $l1
org.joda.time.DateTime.withMillis : $b2 = l0 cmp $l1 >>>>>>>> org.joda.time.DateTime.withMillis : if $b2 != 0
org.joda.time.DateTime.withMillis : if $b2 != 0 >>>>>>>> org.joda.time.DateTime.withMillis : $r1 = new org.joda.time.DateTime
org.joda.time.DateTime.withMillis : $r1 = new org.joda.time.DateTime >>>>>>>> org.joda.time.DateTime.withMillis : $r2 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>()
org.joda.time.DateTime.withMillis : $r2 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.DateTime.withMillis : specialinvoke $r1.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>(l0, $r2)
org.joda.time.DateTime.withMillis : specialinvoke $r1.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>(l0, $r2) >>>>>>>> org.joda.time.DateTime.withMillis : return $r1
org.joda.time.DateTime.withMillis : return $r1 >>>>>>>> org.joda.time.DateTime.minusWeeks : return $r3
org.joda.time.DateTime.minusWeeks : return $r3 >>>>>>>> org.joda.time.DateTime.millisOfDay : $r1 = new org.joda.time.DateTime$Property
org.joda.time.DateTime.millisOfDay : $r1 = new org.joda.time.DateTime$Property >>>>>>>> org.joda.time.DateTime.millisOfDay : $r2 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>()
org.joda.time.DateTime.millisOfDay : $r2 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.DateTime.millisOfDay : $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>()
org.joda.time.DateTime.millisOfDay : $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.millisOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay>
org.joda.time.chrono.AssembledChronology.millisOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.millisOfDay : return $r1
org.joda.time.chrono.AssembledChronology.millisOfDay : return $r1 >>>>>>>> org.joda.time.DateTime.millisOfDay : specialinvoke $r1.<org.joda.time.DateTime$Property: void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField)>(r0, $r3)
org.joda.time.DateTime.millisOfDay : specialinvoke $r1.<org.joda.time.DateTime$Property: void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField)>(r0, $r3) >>>>>>>> org.joda.time.DateTime.millisOfDay : return $r1
org.joda.time.DateTime.millisOfDay : return $r1 >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.getFieldType : $r1 = virtualinvoke r0.<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeField getField()>()
org.joda.time.field.AbstractReadableInstantFieldProperty.getFieldType : $r1 = virtualinvoke r0.<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeField getField()>() >>>>>>>> org.joda.time.DateTime$Property.getField : $r1 = r0.<org.joda.time.DateTime$Property: org.joda.time.DateTimeField iField>
org.joda.time.DateTime$Property.getField : $r1 = r0.<org.joda.time.DateTime$Property: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.DateTime$Property.getField : return $r1
org.joda.time.DateTime$Property.getField : return $r1 >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.getFieldType : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DateTimeFieldType getType()>()
org.joda.time.field.AbstractReadableInstantFieldProperty.getFieldType : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DateTimeFieldType getType()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.getType : $r1 = r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType iType>
org.joda.time.field.BaseDateTimeField.getType : $r1 = r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType iType> >>>>>>>> org.joda.time.field.BaseDateTimeField.getType : return $r1
org.joda.time.field.BaseDateTimeField.getType : return $r1 >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.getFieldType : return $r2
org.joda.time.field.AbstractReadableInstantFieldProperty.getFieldType : return $r2 >>>>>>>> org.joda.time.DateTimeComparator.getInstance : if r0 != null
org.joda.time.DateTimeComparator.getInstance : if r0 != null >>>>>>>> org.joda.time.DateTimeComparator.getInstance : $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>()
org.joda.time.DateTimeComparator.getInstance : $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>() >>>>>>>> org.joda.time.DateTimeFieldType.dayOfYear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_YEAR_TYPE>
org.joda.time.DateTimeFieldType.dayOfYear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_YEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.dayOfYear : return $r0
org.joda.time.DateTimeFieldType.dayOfYear : return $r0 >>>>>>>> org.joda.time.DateTimeComparator.getInstance : if r0 != $r2
org.joda.time.DateTimeComparator.getInstance : if r0 != $r2 >>>>>>>> org.joda.time.DateTimeComparator.getInstance : $r7 = new org.joda.time.DateTimeComparator
org.joda.time.DateTimeComparator.getInstance : $r7 = new org.joda.time.DateTimeComparator >>>>>>>> org.joda.time.DateTimeComparator.getInstance : specialinvoke $r7.<org.joda.time.DateTimeComparator: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType)>(r0, r1)
org.joda.time.DateTimeComparator.getInstance : specialinvoke $r7.<org.joda.time.DateTimeComparator: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType)>(r0, r1) >>>>>>>> org.joda.time.DateTimeComparator.getInstance : return $r7
org.joda.time.DateTimeComparator.getInstance : return $r7 >>>>>>>> org.joda.time.DateTimeUtils.getChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>()
org.joda.time.DateTimeUtils.getChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>() >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>() >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r0)
org.joda.time.chrono.ISOChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return $r1
org.joda.time.chrono.ISOChronology.getInstance : return $r1 >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return $r1
org.joda.time.DateTimeUtils.getChronology : return $r1 >>>>>>>> org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>
org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.ISOChronology.withUTC : return $r1
org.joda.time.chrono.ISOChronology.withUTC : return $r1 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i0 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>()
org.joda.time.chrono.BaseChronology.validate : i0 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>() >>>>>>>> org.joda.time.Partial.size : $r1 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>
org.joda.time.Partial.size : $r1 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes> >>>>>>>> org.joda.time.Partial.size : $i0 = lengthof $r1
org.joda.time.Partial.size : $i0 = lengthof $r1 >>>>>>>> org.joda.time.Partial.size : return $i0
org.joda.time.Partial.size : return $i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i1 = 0
org.joda.time.chrono.BaseChronology.validate : i1 = 0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i1 >= i0
org.joda.time.chrono.BaseChronology.validate : if i1 >= i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i2 = r2[i1]
org.joda.time.chrono.BaseChronology.validate : i2 = r2[i1] >>>>>>>> org.joda.time.chrono.BaseChronology.validate : r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i1)
org.joda.time.chrono.BaseChronology.validate : r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i1) >>>>>>>> org.joda.time.base.AbstractPartial.getField : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.Chronology getChronology()>()
org.joda.time.base.AbstractPartial.getField : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.Partial.getChronology : $r1 = r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology>
org.joda.time.Partial.getChronology : $r1 = r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.Partial.getChronology : return $r1
org.joda.time.Partial.getChronology : return $r1 >>>>>>>> org.joda.time.base.AbstractPartial.getField : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>(i0, $r1)
org.joda.time.base.AbstractPartial.getField : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>(i0, $r1) >>>>>>>> org.joda.time.Partial.getField : $r2 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>
org.joda.time.Partial.getField : $r2 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes> >>>>>>>> org.joda.time.Partial.getField : $r3 = $r2[i0]
org.joda.time.Partial.getField : $r3 = $r2[i0] >>>>>>>> org.joda.time.Partial.getField : $r4 = virtualinvoke $r3.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r1)
org.joda.time.Partial.getField : $r4 = virtualinvoke $r3.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : tableswitch($b0) {     case 1:
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : tableswitch($b0) {     case 1: >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r24 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r24 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>() >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r24
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r24 >>>>>>>> org.joda.time.Partial.getField : return $r4
org.joda.time.Partial.getField : return $r4 >>>>>>>> org.joda.time.base.AbstractPartial.getField : return $r2
org.joda.time.base.AbstractPartial.getField : return $r2 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : $i3 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMinimumValue()>()
org.joda.time.chrono.BaseChronology.validate : $i3 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMinimumValue()>() >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getMinimumValue : return 0
org.joda.time.field.PreciseDurationDateTimeField.getMinimumValue : return 0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i2 >= $i3
org.joda.time.chrono.BaseChronology.validate : if i2 >= $i3 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : $i5 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMaximumValue()>()
org.joda.time.chrono.BaseChronology.validate : $i5 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange>
org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange> >>>>>>>> org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i1 = $i0 - 1
org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i1 = $i0 - 1 >>>>>>>> org.joda.time.field.PreciseDateTimeField.getMaximumValue : return $i1
org.joda.time.field.PreciseDateTimeField.getMaximumValue : return $i1 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i2 <= $i5
org.joda.time.chrono.BaseChronology.validate : if i2 <= $i5 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i1 = i1 + 1
org.joda.time.chrono.BaseChronology.validate : i1 = i1 + 1 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : goto [?= (branch)]
org.joda.time.chrono.BaseChronology.validate : goto [?= (branch)] >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i7 = 0
org.joda.time.chrono.BaseChronology.validate : i7 = 0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i7 >= i0
org.joda.time.chrono.BaseChronology.validate : if i7 >= i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i8 = r2[i7]
org.joda.time.chrono.BaseChronology.validate : i8 = r2[i7] >>>>>>>> org.joda.time.chrono.BaseChronology.validate : r12 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i7)
org.joda.time.chrono.BaseChronology.validate : r12 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i7) >>>>>>>> org.joda.time.chrono.BaseChronology.validate : $i9 = virtualinvoke r12.<org.joda.time.DateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2)
org.joda.time.chrono.BaseChronology.validate : $i9 = virtualinvoke r12.<org.joda.time.DateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2) >>>>>>>> org.joda.time.field.BaseDateTimeField.getMinimumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>(r1)
org.joda.time.field.BaseDateTimeField.getMinimumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>(r1) >>>>>>>> org.joda.time.field.BaseDateTimeField.getMinimumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue()>()
org.joda.time.field.BaseDateTimeField.getMinimumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.getMinimumValue : return $i0
org.joda.time.field.BaseDateTimeField.getMinimumValue : return $i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i8 >= $i9
org.joda.time.chrono.BaseChronology.validate : if i8 >= $i9 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : $i11 = virtualinvoke r12.<org.joda.time.DateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2)
org.joda.time.chrono.BaseChronology.validate : $i11 = virtualinvoke r12.<org.joda.time.DateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2) >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>(r1)
org.joda.time.field.BaseDateTimeField.getMaximumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>(r1) >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue()>()
org.joda.time.field.BaseDateTimeField.getMaximumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumValue : return $i0
org.joda.time.field.BaseDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i8 <= $i11
org.joda.time.chrono.BaseChronology.validate : if i8 <= $i11 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i7 = i7 + 1
org.joda.time.chrono.BaseChronology.validate : i7 = i7 + 1 >>>>>>>> org.joda.time.Partial.plus : $r2 = virtualinvoke r0.<org.joda.time.Partial: org.joda.time.Partial withPeriodAdded(org.joda.time.ReadablePeriod,int)>(r1, 1)
org.joda.time.Partial.plus : $r2 = virtualinvoke r0.<org.joda.time.Partial: org.joda.time.Partial withPeriodAdded(org.joda.time.ReadablePeriod,int)>(r1, 1) >>>>>>>> org.joda.time.Partial.withPeriodAdded : if r1 == null
org.joda.time.Partial.withPeriodAdded : if r1 == null >>>>>>>> org.joda.time.Partial.withPeriodAdded : if i0 != 0
org.joda.time.Partial.withPeriodAdded : if i0 != 0 >>>>>>>> org.joda.time.Partial.withPeriodAdded : r2 = virtualinvoke r0.<org.joda.time.Partial: int[] getValues()>()
org.joda.time.Partial.withPeriodAdded : r2 = virtualinvoke r0.<org.joda.time.Partial: int[] getValues()>() >>>>>>>> org.joda.time.Partial.getValues : $r1 = r0.<org.joda.time.Partial: int[] iValues>
org.joda.time.Partial.getValues : $r1 = r0.<org.joda.time.Partial: int[] iValues> >>>>>>>> org.joda.time.Partial.getValues : $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>()
org.joda.time.Partial.getValues : $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.joda.time.Partial.getValues : $r3 = (int[]) $r2
org.joda.time.Partial.getValues : $r3 = (int[]) $r2 >>>>>>>> org.joda.time.Partial.getValues : $r4 = (int[]) $r3
org.joda.time.Partial.getValues : $r4 = (int[]) $r3 >>>>>>>> org.joda.time.Partial.getValues : return $r4
org.joda.time.Partial.getValues : return $r4 >>>>>>>> org.joda.time.Partial.withPeriodAdded : i1 = 0
org.joda.time.Partial.withPeriodAdded : i1 = 0 >>>>>>>> org.joda.time.Partial.withPeriodAdded : $i3 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>()
org.joda.time.Partial.withPeriodAdded : $i3 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>() >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.size : return 1
org.joda.time.base.BaseSingleFieldPeriod.size : return 1 >>>>>>>> org.joda.time.Partial.withPeriodAdded : if i1 >= $i3
org.joda.time.Partial.withPeriodAdded : if i1 >= $i3 >>>>>>>> org.joda.time.Partial.withPeriodAdded : r3 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i1)
org.joda.time.Partial.withPeriodAdded : r3 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i1) >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.getFieldType : if i0 == 0
org.joda.time.base.BaseSingleFieldPeriod.getFieldType : if i0 == 0 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.getFieldType : $r3 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType()>()
org.joda.time.base.BaseSingleFieldPeriod.getFieldType : $r3 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType()>() >>>>>>>> org.joda.time.Seconds.getFieldType : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>()
org.joda.time.Seconds.getFieldType : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>() >>>>>>>> org.joda.time.DurationFieldType.seconds : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType SECONDS_TYPE>
org.joda.time.DurationFieldType.seconds : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType SECONDS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.seconds : return $r0
org.joda.time.DurationFieldType.seconds : return $r0 >>>>>>>> org.joda.time.Seconds.getFieldType : return $r1
org.joda.time.Seconds.getFieldType : return $r1 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.getFieldType : return $r3
org.joda.time.base.BaseSingleFieldPeriod.getFieldType : return $r3 >>>>>>>> org.joda.time.Partial.withPeriodAdded : i2 = virtualinvoke r0.<org.joda.time.Partial: int indexOf(org.joda.time.DurationFieldType)>(r3)
org.joda.time.Partial.withPeriodAdded : i2 = virtualinvoke r0.<org.joda.time.Partial: int indexOf(org.joda.time.DurationFieldType)>(r3) >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : i0 = 0
org.joda.time.base.AbstractPartial.indexOf : i0 = 0 >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : i1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>()
org.joda.time.base.AbstractPartial.indexOf : i1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>() >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : if i0 >= i1
org.joda.time.base.AbstractPartial.indexOf : if i0 >= i1 >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i0)
org.joda.time.base.AbstractPartial.indexOf : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i0) >>>>>>>> org.joda.time.Partial.getFieldType : $r1 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>
org.joda.time.Partial.getFieldType : $r1 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes> >>>>>>>> org.joda.time.Partial.getFieldType : $r2 = $r1[i0]
org.joda.time.Partial.getFieldType : $r2 = $r1[i0] >>>>>>>> org.joda.time.Partial.getFieldType : return $r2
org.joda.time.Partial.getFieldType : return $r2 >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : $r3 = virtualinvoke $r2.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>()
org.joda.time.base.AbstractPartial.indexOf : $r3 = virtualinvoke $r2.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>() >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getDurationType : $r1 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType iUnitType>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getDurationType : $r1 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType iUnitType> >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getDurationType : return $r1
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getDurationType : return $r1 >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : if $r3 != r1
org.joda.time.base.AbstractPartial.indexOf : if $r3 != r1 >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : i0 = i0 + 1
org.joda.time.base.AbstractPartial.indexOf : i0 = i0 + 1 >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : goto [?= (branch)]
org.joda.time.base.AbstractPartial.indexOf : goto [?= (branch)] >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : return -1
org.joda.time.base.AbstractPartial.indexOf : return -1 >>>>>>>> org.joda.time.Partial.withPeriodAdded : if i2 < 0
org.joda.time.Partial.withPeriodAdded : if i2 < 0 >>>>>>>> org.joda.time.Partial.withPeriodAdded : i1 = i1 + 1
org.joda.time.Partial.withPeriodAdded : i1 = i1 + 1 >>>>>>>> org.joda.time.Partial.withPeriodAdded : goto [?= $i3 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>()]
org.joda.time.Partial.withPeriodAdded : goto [?= $i3 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>()] >>>>>>>> org.joda.time.Partial.withPeriodAdded : $r5 = new org.joda.time.Partial
org.joda.time.Partial.withPeriodAdded : $r5 = new org.joda.time.Partial >>>>>>>> org.joda.time.Partial.withPeriodAdded : specialinvoke $r5.<org.joda.time.Partial: void <init>(org.joda.time.Partial,int[])>(r0, r2)
org.joda.time.Partial.withPeriodAdded : specialinvoke $r5.<org.joda.time.Partial: void <init>(org.joda.time.Partial,int[])>(r0, r2) >>>>>>>> org.joda.time.Partial.withPeriodAdded : return $r5
org.joda.time.Partial.withPeriodAdded : return $r5 >>>>>>>> org.joda.time.Partial.plus : return $r2
org.joda.time.Partial.plus : return $r2 >>>>>>>> org.joda.time.Partial.getFieldTypes : $r1 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>
org.joda.time.Partial.getFieldTypes : $r1 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes> >>>>>>>> org.joda.time.Partial.getFieldTypes : $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>()
org.joda.time.Partial.getFieldTypes : $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.joda.time.Partial.getFieldTypes : $r3 = (org.joda.time.DateTimeFieldType[]) $r2
org.joda.time.Partial.getFieldTypes : $r3 = (org.joda.time.DateTimeFieldType[]) $r2 >>>>>>>> org.joda.time.Partial.getFieldTypes : $r4 = (org.joda.time.DateTimeFieldType[]) $r3
org.joda.time.Partial.getFieldTypes : $r4 = (org.joda.time.DateTimeFieldType[]) $r3 >>>>>>>> org.joda.time.Partial.getFieldTypes : return $r4
org.joda.time.Partial.getFieldTypes : return $r4 >>>>>>>> org.joda.time.Partial.getFormatter : r1 = r0.<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter[] iFormatter>
org.joda.time.Partial.getFormatter : r1 = r0.<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter[] iFormatter> >>>>>>>> org.joda.time.Partial.getFormatter : if r1 != null
org.joda.time.Partial.getFormatter : if r1 != null >>>>>>>> org.joda.time.Partial.getFormatter : $i0 = virtualinvoke r0.<org.joda.time.Partial: int size()>()
org.joda.time.Partial.getFormatter : $i0 = virtualinvoke r0.<org.joda.time.Partial: int size()>() >>>>>>>> org.joda.time.Partial.getFormatter : if $i0 != 0
org.joda.time.Partial.getFormatter : if $i0 != 0 >>>>>>>> org.joda.time.Partial.getFormatter : r1 = newarray (org.joda.time.format.DateTimeFormatter)[2]
org.joda.time.Partial.getFormatter : r1 = newarray (org.joda.time.format.DateTimeFormatter)[2] >>>>>>>> org.joda.time.Partial.getFormatter : $r3 = new java.util.ArrayList
org.joda.time.Partial.getFormatter : $r3 = new java.util.ArrayList >>>>>>>> org.joda.time.Partial.getFormatter : $r4 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>
org.joda.time.Partial.getFormatter : $r4 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes> >>>>>>>> org.joda.time.Partial.getFormatter : $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4)
org.joda.time.Partial.getFormatter : $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4) >>>>>>>> org.joda.time.Partial.getFormatter : specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>($r5)
org.joda.time.Partial.getFormatter : specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>($r5) >>>>>>>> org.joda.time.Partial.getFormatter : r2 = $r3
org.joda.time.Partial.getFormatter : r2 = $r3 >>>>>>>> org.joda.time.Partial.getFormatter : $r6 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>(r2, 1, 0)
org.joda.time.Partial.getFormatter : $r6 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>(r2, 1, 0) >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : if r0 == null
org.joda.time.format.ISODateTimeFormat.forFields : if r0 == null >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $i1 = interfaceinvoke r0.<java.util.Collection: int size()>()
org.joda.time.format.ISODateTimeFormat.forFields : $i1 = interfaceinvoke r0.<java.util.Collection: int size()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : if $i1 != 0
org.joda.time.format.ISODateTimeFormat.forFields : if $i1 != 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $r5 = new java.util.HashSet
org.joda.time.format.ISODateTimeFormat.forFields : $r5 = new java.util.HashSet >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : specialinvoke $r5.<java.util.HashSet: void <init>(java.util.Collection)>(r0)
org.joda.time.format.ISODateTimeFormat.forFields : specialinvoke $r5.<java.util.HashSet: void <init>(java.util.Collection)>(r0) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.hashCode : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.hashCode : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.hashCode : return $b0
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.hashCode : return $b0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : r1 = $r5
org.joda.time.format.ISODateTimeFormat.forFields : r1 = $r5 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : i0 = interfaceinvoke r1.<java.util.Set: int size()>()
org.joda.time.format.ISODateTimeFormat.forFields : i0 = interfaceinvoke r1.<java.util.Set: int size()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : z2 = 0
org.joda.time.format.ISODateTimeFormat.forFields : z2 = 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $r6 = new org.joda.time.format.DateTimeFormatterBuilder
org.joda.time.format.ISODateTimeFormat.forFields : $r6 = new org.joda.time.format.DateTimeFormatterBuilder >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : specialinvoke $r6.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>()
org.joda.time.format.ISODateTimeFormat.forFields : specialinvoke $r6.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : r2 = $r6
org.joda.time.format.ISODateTimeFormat.forFields : r2 = $r6 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $r7 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>()
org.joda.time.format.ISODateTimeFormat.forFields : $r7 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>() >>>>>>>> org.joda.time.DateTimeFieldType.monthOfYear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MONTH_OF_YEAR_TYPE>
org.joda.time.DateTimeFieldType.monthOfYear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MONTH_OF_YEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.monthOfYear : return $r0
org.joda.time.DateTimeFieldType.monthOfYear : return $r0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $z4 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r7)
org.joda.time.format.ISODateTimeFormat.forFields : $z4 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r7) >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : if $z4 == 0
org.joda.time.format.ISODateTimeFormat.forFields : if $z4 == 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $r8 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>()
org.joda.time.format.ISODateTimeFormat.forFields : $r8 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $z5 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r8)
org.joda.time.format.ISODateTimeFormat.forFields : $z5 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r8) >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : if $z5 == 0
org.joda.time.format.ISODateTimeFormat.forFields : if $z5 == 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $r9 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>()
org.joda.time.format.ISODateTimeFormat.forFields : $r9 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>() >>>>>>>> org.joda.time.DateTimeFieldType.weekOfWeekyear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType WEEK_OF_WEEKYEAR_TYPE>
org.joda.time.DateTimeFieldType.weekOfWeekyear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType WEEK_OF_WEEKYEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.weekOfWeekyear : return $r0
org.joda.time.DateTimeFieldType.weekOfWeekyear : return $r0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $z6 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r9)
org.joda.time.format.ISODateTimeFormat.forFields : $z6 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r9) >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : if $z6 == 0
org.joda.time.format.ISODateTimeFormat.forFields : if $z6 == 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $r10 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>()
org.joda.time.format.ISODateTimeFormat.forFields : $r10 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>() >>>>>>>> org.joda.time.DateTimeFieldType.dayOfMonth : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_MONTH_TYPE>
org.joda.time.DateTimeFieldType.dayOfMonth : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_MONTH_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.dayOfMonth : return $r0
org.joda.time.DateTimeFieldType.dayOfMonth : return $r0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $z7 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r10)
org.joda.time.format.ISODateTimeFormat.forFields : $z7 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r10) >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : if $z7 == 0
org.joda.time.format.ISODateTimeFormat.forFields : if $z7 == 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $r11 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>()
org.joda.time.format.ISODateTimeFormat.forFields : $r11 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>() >>>>>>>> org.joda.time.DateTimeFieldType.dayOfWeek : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_WEEK_TYPE>
org.joda.time.DateTimeFieldType.dayOfWeek : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_WEEK_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.dayOfWeek : return $r0
org.joda.time.DateTimeFieldType.dayOfWeek : return $r0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $z8 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r11)
org.joda.time.format.ISODateTimeFormat.forFields : $z8 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r11) >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : if $z8 == 0
org.joda.time.format.ISODateTimeFormat.forFields : if $z8 == 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $r12 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>()
org.joda.time.format.ISODateTimeFormat.forFields : $r12 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>() >>>>>>>> org.joda.time.DateTimeFieldType.year : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_TYPE>
org.joda.time.DateTimeFieldType.year : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.year : return $r0
org.joda.time.DateTimeFieldType.year : return $r0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $z9 = interfaceinvoke r1.<java.util.Set: boolean remove(java.lang.Object)>($r12)
org.joda.time.format.ISODateTimeFormat.forFields : $z9 = interfaceinvoke r1.<java.util.Set: boolean remove(java.lang.Object)>($r12) >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : if $z9 == 0
org.joda.time.format.ISODateTimeFormat.forFields : if $z9 == 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $r15 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>()
org.joda.time.format.ISODateTimeFormat.forFields : $r15 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>() >>>>>>>> org.joda.time.DateTimeFieldType.weekyear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType WEEKYEAR_TYPE>
org.joda.time.DateTimeFieldType.weekyear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType WEEKYEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.weekyear : return $r0
org.joda.time.DateTimeFieldType.weekyear : return $r0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $z10 = interfaceinvoke r1.<java.util.Set: boolean remove(java.lang.Object)>($r15)
org.joda.time.format.ISODateTimeFormat.forFields : $z10 = interfaceinvoke r1.<java.util.Set: boolean remove(java.lang.Object)>($r15) >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : if $z10 == 0
org.joda.time.format.ISODateTimeFormat.forFields : if $z10 == 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $i2 = interfaceinvoke r1.<java.util.Set: int size()>()
org.joda.time.format.ISODateTimeFormat.forFields : $i2 = interfaceinvoke r1.<java.util.Set: int size()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : if $i2 >= i0
org.joda.time.format.ISODateTimeFormat.forFields : if $i2 >= i0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $z11 = 0
org.joda.time.format.ISODateTimeFormat.forFields : $z11 = 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : z3 = $z11
org.joda.time.format.ISODateTimeFormat.forFields : z3 = $z11 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : staticinvoke <org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>(r2, r1, z0, z1, z2, z3)
org.joda.time.format.ISODateTimeFormat.forFields : staticinvoke <org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>(r2, r1, z0, z1, z2, z3) >>>>>>>> org.joda.time.format.ISODateTimeFormat.time : $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>()
org.joda.time.format.ISODateTimeFormat.time : $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>() >>>>>>>> org.joda.time.DateTimeFieldType.hourOfDay : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType HOUR_OF_DAY_TYPE>
org.joda.time.DateTimeFieldType.hourOfDay : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType HOUR_OF_DAY_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.hourOfDay : return $r0
org.joda.time.DateTimeFieldType.hourOfDay : return $r0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.time : z4 = interfaceinvoke r1.<java.util.Collection: boolean remove(java.lang.Object)>($r2)
org.joda.time.format.ISODateTimeFormat.time : z4 = interfaceinvoke r1.<java.util.Collection: boolean remove(java.lang.Object)>($r2) >>>>>>>> org.joda.time.format.ISODateTimeFormat.time : $r4 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>()
org.joda.time.format.ISODateTimeFormat.time : $r4 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>() >>>>>>>> org.joda.time.DateTimeFieldType.minuteOfHour : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MINUTE_OF_HOUR_TYPE>
org.joda.time.DateTimeFieldType.minuteOfHour : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MINUTE_OF_HOUR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.minuteOfHour : return $r0
org.joda.time.DateTimeFieldType.minuteOfHour : return $r0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.time : z5 = interfaceinvoke r1.<java.util.Collection: boolean remove(java.lang.Object)>($r4)
org.joda.time.format.ISODateTimeFormat.time : z5 = interfaceinvoke r1.<java.util.Collection: boolean remove(java.lang.Object)>($r4) >>>>>>>> org.joda.time.format.ISODateTimeFormat.time : $r5 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>()
org.joda.time.format.ISODateTimeFormat.time : $r5 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>() >>>>>>>> org.joda.time.DateTimeFieldType.secondOfMinute : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType SECOND_OF_MINUTE_TYPE>
org.joda.time.DateTimeFieldType.secondOfMinute : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType SECOND_OF_MINUTE_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.secondOfMinute : return $r0
org.joda.time.DateTimeFieldType.secondOfMinute : return $r0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.time : z6 = interfaceinvoke r1.<java.util.Collection: boolean remove(java.lang.Object)>($r5)
org.joda.time.format.ISODateTimeFormat.time : z6 = interfaceinvoke r1.<java.util.Collection: boolean remove(java.lang.Object)>($r5) >>>>>>>> org.joda.time.format.ISODateTimeFormat.time : $r6 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>()
org.joda.time.format.ISODateTimeFormat.time : $r6 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>() >>>>>>>> org.joda.time.DateTimeFieldType.millisOfSecond : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MILLIS_OF_SECOND_TYPE>
org.joda.time.DateTimeFieldType.millisOfSecond : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MILLIS_OF_SECOND_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.millisOfSecond : return $r0
org.joda.time.DateTimeFieldType.millisOfSecond : return $r0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.time : z7 = interfaceinvoke r1.<java.util.Collection: boolean remove(java.lang.Object)>($r6)
org.joda.time.format.ISODateTimeFormat.time : z7 = interfaceinvoke r1.<java.util.Collection: boolean remove(java.lang.Object)>($r6) >>>>>>>> org.joda.time.format.ISODateTimeFormat.time : if z4 != 0
org.joda.time.format.ISODateTimeFormat.time : if z4 != 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.time : if z5 != 0
org.joda.time.format.ISODateTimeFormat.time : if z5 != 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.time : if z6 != 0
org.joda.time.format.ISODateTimeFormat.time : if z6 != 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.time : if z7 != 0
org.joda.time.format.ISODateTimeFormat.time : if z7 != 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $z12 = virtualinvoke r2.<org.joda.time.format.DateTimeFormatterBuilder: boolean canBuildFormatter()>()
org.joda.time.format.ISODateTimeFormat.forFields : $z12 = virtualinvoke r2.<org.joda.time.format.DateTimeFormatterBuilder: boolean canBuildFormatter()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.canBuildFormatter : $r1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>()
org.joda.time.format.DateTimeFormatterBuilder.canBuildFormatter : $r1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter>
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if r1 != null
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if r1 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>()
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if $i0 != 2
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if $i0 != 2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r7 = new org.joda.time.format.DateTimeFormatterBuilder$Composite
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r7 = new org.joda.time.format.DateTimeFormatterBuilder$Composite >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r8 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r8 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : specialinvoke $r7.<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>($r8)
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : specialinvoke $r7.<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>($r8) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : i0 = interfaceinvoke r1.<java.util.List: int size()>()
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : i0 = interfaceinvoke r1.<java.util.List: int size()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : i1 = 0
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : i1 = 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : if i1 >= i0
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : if i1 >= i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r1 = $r7
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r1 = $r7 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter> = r1
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter> = r1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : return r1
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : return r1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.canBuildFormatter : $z0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isFormatter(java.lang.Object)>($r1)
org.joda.time.format.DateTimeFormatterBuilder.canBuildFormatter : $z0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isFormatter(java.lang.Object)>($r1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isFormatter : $z0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isPrinter(java.lang.Object)>(r1)
org.joda.time.format.DateTimeFormatterBuilder.isFormatter : $z0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isPrinter(java.lang.Object)>(r1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $z0 = r1 instanceof org.joda.time.format.DateTimePrinter
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $z0 = r1 instanceof org.joda.time.format.DateTimePrinter >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : if $z0 == 0
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $z1 = r1 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $z1 = r1 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : if $z1 == 0
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : if $z1 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $r2 = (org.joda.time.format.DateTimeFormatterBuilder$Composite) r1
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $r2 = (org.joda.time.format.DateTimeFormatterBuilder$Composite) r1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $z2 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder$Composite: boolean isPrinter()>()
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $z2 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder$Composite: boolean isPrinter()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : $r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimePrinter[] iPrinters>
org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : $r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimePrinter[] iPrinters> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : if $r1 == null
org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : if $r1 == null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : $z0 = 0
org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : $z0 = 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : return $z0
org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : return $z0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : return $z2
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : return $z2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isFormatter : if $z0 != 0
org.joda.time.format.DateTimeFormatterBuilder.isFormatter : if $z0 != 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isFormatter : $z1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isParser(java.lang.Object)>(r1)
org.joda.time.format.DateTimeFormatterBuilder.isFormatter : $z1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isParser(java.lang.Object)>(r1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isParser : $z0 = r1 instanceof org.joda.time.format.DateTimeParser
org.joda.time.format.DateTimeFormatterBuilder.isParser : $z0 = r1 instanceof org.joda.time.format.DateTimeParser >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isParser : if $z0 == 0
org.joda.time.format.DateTimeFormatterBuilder.isParser : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isParser : $z1 = r1 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite
org.joda.time.format.DateTimeFormatterBuilder.isParser : $z1 = r1 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isParser : if $z1 == 0
org.joda.time.format.DateTimeFormatterBuilder.isParser : if $z1 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isParser : $r2 = (org.joda.time.format.DateTimeFormatterBuilder$Composite) r1
org.joda.time.format.DateTimeFormatterBuilder.isParser : $r2 = (org.joda.time.format.DateTimeFormatterBuilder$Composite) r1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isParser : $z2 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder$Composite: boolean isParser()>()
org.joda.time.format.DateTimeFormatterBuilder.isParser : $z2 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder$Composite: boolean isParser()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.isParser : $r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimeParser[] iParsers>
org.joda.time.format.DateTimeFormatterBuilder$Composite.isParser : $r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimeParser[] iParsers> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.isParser : if $r1 == null
org.joda.time.format.DateTimeFormatterBuilder$Composite.isParser : if $r1 == null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.isParser : $z0 = 0
org.joda.time.format.DateTimeFormatterBuilder$Composite.isParser : $z0 = 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.isParser : return $z0
org.joda.time.format.DateTimeFormatterBuilder$Composite.isParser : return $z0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isParser : return $z2
org.joda.time.format.DateTimeFormatterBuilder.isParser : return $z2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isFormatter : if $z1 == 0
org.joda.time.format.DateTimeFormatterBuilder.isFormatter : if $z1 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isFormatter : $z2 = 0
org.joda.time.format.DateTimeFormatterBuilder.isFormatter : $z2 = 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isFormatter : return $z2
org.joda.time.format.DateTimeFormatterBuilder.isFormatter : return $z2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.canBuildFormatter : return $z0
org.joda.time.format.DateTimeFormatterBuilder.canBuildFormatter : return $z0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : if $z12 != 0
org.joda.time.format.ISODateTimeFormat.forFields : if $z12 != 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $r18 = new java.lang.IllegalArgumentException
org.joda.time.format.ISODateTimeFormat.forFields : $r18 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $r19 = new java.lang.StringBuilder
org.joda.time.format.ISODateTimeFormat.forFields : $r19 = new java.lang.StringBuilder >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : specialinvoke $r19.<java.lang.StringBuilder: void <init>()>()
org.joda.time.format.ISODateTimeFormat.forFields : specialinvoke $r19.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No valid format for fields: ")
org.joda.time.format.ISODateTimeFormat.forFields : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No valid format for fields: ") >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0)
org.joda.time.format.ISODateTimeFormat.forFields : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) >>>>>>>> org.joda.time.DateTimeFieldType.toString : $r1 = virtualinvoke r0.<org.joda.time.DateTimeFieldType: java.lang.String getName()>()
org.joda.time.DateTimeFieldType.toString : $r1 = virtualinvoke r0.<org.joda.time.DateTimeFieldType: java.lang.String getName()>() >>>>>>>> org.joda.time.DateTimeFieldType.getName : $r1 = r0.<org.joda.time.DateTimeFieldType: java.lang.String iName>
org.joda.time.DateTimeFieldType.getName : $r1 = r0.<org.joda.time.DateTimeFieldType: java.lang.String iName> >>>>>>>> org.joda.time.DateTimeFieldType.getName : return $r1
org.joda.time.DateTimeFieldType.getName : return $r1 >>>>>>>> org.joda.time.DateTimeFieldType.toString : return $r1
org.joda.time.DateTimeFieldType.toString : return $r1 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.format.ISODateTimeFormat.forFields : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r22)
org.joda.time.format.ISODateTimeFormat.forFields : specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r22) >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : throw $r18
org.joda.time.format.ISODateTimeFormat.forFields : throw $r18 >>>>>>>> org.joda.time.Partial.getFormatter : r9 = $r8
org.joda.time.Partial.getFormatter : r9 = $r8 >>>>>>>> org.joda.time.Partial.getFormatter : r0.<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter[] iFormatter> = r1
org.joda.time.Partial.getFormatter : r0.<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter[] iFormatter> = r1 >>>>>>>> org.joda.time.Partial.getFormatter : $r10 = r1[0]
org.joda.time.Partial.getFormatter : $r10 = r1[0] >>>>>>>> org.joda.time.Partial.getFormatter : return $r10
