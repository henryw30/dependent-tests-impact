org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if r1 != null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r7 = new java.util.ArrayList
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r7 = new java.util.ArrayList >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : specialinvoke $r7.<java.util.ArrayList: void <init>()>()
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : specialinvoke $r7.<java.util.ArrayList: void <init>()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r2 = $r7
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r2 = $r7 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r3 = null
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r3 = null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : l0 = -9223372036854775808L
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : l0 = -9223372036854775808L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : z1 = 0
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : z1 = 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r8 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r8 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : i1 = virtualinvoke $r8.<java.util.ArrayList: int size()>()
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : i1 = virtualinvoke $r8.<java.util.ArrayList: int size()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : i2 = 0
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : i2 = 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if i2 >= i1
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if i2 >= i1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $i6 = virtualinvoke r2.<java.util.ArrayList: int size()>()
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $i6 = virtualinvoke r2.<java.util.ArrayList: int size()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if $i6 != 0
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if $i6 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if r3 == null
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if r3 == null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r15 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone buildFixedZone(java.lang.String,java.lang.String,int,int)>(r1, "UTC", 0, 0)
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r15 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone buildFixedZone(java.lang.String,java.lang.String,int,int)>(r1, "UTC", 0, 0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.buildFixedZone : $r2 = "UTC"
org.joda.time.tz.DateTimeZoneBuilder.buildFixedZone : $r2 = "UTC" >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.buildFixedZone : $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0)
org.joda.time.tz.DateTimeZoneBuilder.buildFixedZone : $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.buildFixedZone : if $z0 == 0
org.joda.time.tz.DateTimeZoneBuilder.buildFixedZone : if $z0 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.buildFixedZone : $r4 = new org.joda.time.tz.FixedDateTimeZone
org.joda.time.tz.DateTimeZoneBuilder.buildFixedZone : $r4 = new org.joda.time.tz.FixedDateTimeZone >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.buildFixedZone : specialinvoke $r4.<org.joda.time.tz.FixedDateTimeZone: void <init>(java.lang.String,java.lang.String,int,int)>(r0, r1, i0, i1)
org.joda.time.tz.DateTimeZoneBuilder.buildFixedZone : specialinvoke $r4.<org.joda.time.tz.FixedDateTimeZone: void <init>(java.lang.String,java.lang.String,int,int)>(r0, r1, i0, i1) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.buildFixedZone : return $r4
org.joda.time.tz.DateTimeZoneBuilder.buildFixedZone : return $r4 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : return $r15
