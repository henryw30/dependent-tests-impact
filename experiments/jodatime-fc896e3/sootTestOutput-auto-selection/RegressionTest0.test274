org.joda.time.Weeks.minus : $i1 = staticinvoke <org.joda.time.field.FieldUtils: int safeNegate(int)>(i0) >>>>>>>> org.joda.time.field.FieldUtils.safeNegate : if i0 != -2147483648
org.joda.time.field.FieldUtils.safeNegate : if i0 != -2147483648 >>>>>>>> org.joda.time.field.FieldUtils.safeNegate : $i1 = neg i0
org.joda.time.field.FieldUtils.safeNegate : $i1 = neg i0 >>>>>>>> org.joda.time.field.FieldUtils.safeNegate : return $i1
org.joda.time.field.FieldUtils.safeNegate : return $i1 >>>>>>>> org.joda.time.Weeks.minus : $r1 = virtualinvoke r0.<org.joda.time.Weeks: org.joda.time.Weeks plus(int)>($i1)
org.joda.time.Weeks.minus : $r1 = virtualinvoke r0.<org.joda.time.Weeks: org.joda.time.Weeks plus(int)>($i1) >>>>>>>> org.joda.time.Weeks.plus : if i0 != 0
org.joda.time.Weeks.plus : if i0 != 0 >>>>>>>> org.joda.time.Weeks.plus : $i1 = virtualinvoke r0.<org.joda.time.Weeks: int getValue()>()
org.joda.time.Weeks.plus : $i1 = virtualinvoke r0.<org.joda.time.Weeks: int getValue()>() >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.getValue : $i0 = r0.<org.joda.time.base.BaseSingleFieldPeriod: int iPeriod>
org.joda.time.base.BaseSingleFieldPeriod.getValue : $i0 = r0.<org.joda.time.base.BaseSingleFieldPeriod: int iPeriod> >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.getValue : return $i0
org.joda.time.base.BaseSingleFieldPeriod.getValue : return $i0 >>>>>>>> org.joda.time.Weeks.plus : $i2 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>($i1, i0)
org.joda.time.Weeks.plus : $i2 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>($i1, i0) >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : i2 = i0 + i1
org.joda.time.field.FieldUtils.safeAdd : i2 = i0 + i1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $i3 = i0 ^ i2
org.joda.time.field.FieldUtils.safeAdd : $i3 = i0 ^ i2 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $i3 >= 0
org.joda.time.field.FieldUtils.safeAdd : if $i3 >= 0 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : return i2
org.joda.time.field.FieldUtils.safeAdd : return i2 >>>>>>>> org.joda.time.Weeks.plus : $r1 = staticinvoke <org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>($i2)
org.joda.time.Weeks.plus : $r1 = staticinvoke <org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>($i2) >>>>>>>> org.joda.time.Weeks.weeks : lookupswitch(i0) {     case -2147483648:
org.joda.time.Weeks.weeks : lookupswitch(i0) {     case -2147483648: >>>>>>>> org.joda.time.Weeks.weeks : $r6 = new org.joda.time.Weeks
org.joda.time.Weeks.weeks : $r6 = new org.joda.time.Weeks >>>>>>>> org.joda.time.Weeks.weeks : specialinvoke $r6.<org.joda.time.Weeks: void <init>(int)>(i0)
org.joda.time.Weeks.weeks : specialinvoke $r6.<org.joda.time.Weeks: void <init>(int)>(i0) >>>>>>>> org.joda.time.Weeks.weeks : return $r6
org.joda.time.Weeks.weeks : return $r6 >>>>>>>> org.joda.time.Weeks.plus : return $r1
org.joda.time.Weeks.plus : return $r1 >>>>>>>> org.joda.time.Weeks.minus : return $r1
org.joda.time.Weeks.minus : return $r1 >>>>>>>> org.joda.time.Hours.standardHoursIn : i0 = staticinvoke <org.joda.time.base.BaseSingleFieldPeriod: int standardPeriodIn(org.joda.time.ReadablePeriod,long)>(r0, 3600000L)
org.joda.time.Hours.standardHoursIn : i0 = staticinvoke <org.joda.time.base.BaseSingleFieldPeriod: int standardPeriodIn(org.joda.time.ReadablePeriod,long)>(r0, 3600000L) >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : if r0 != null
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : if r0 != null >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() >>>>>>>> org.joda.time.chrono.ISOChronology.getInstanceUTC : $r0 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>
org.joda.time.chrono.ISOChronology.getInstanceUTC : $r0 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstanceUTC : return $r0
org.joda.time.chrono.ISOChronology.getInstanceUTC : return $r0 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : l1 = 0L
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : l1 = 0L >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : i2 = 0
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : i2 = 0 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $i4 = interfaceinvoke r0.<org.joda.time.ReadablePeriod: int size()>()
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $i4 = interfaceinvoke r0.<org.joda.time.ReadablePeriod: int size()>() >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.size : return 1
org.joda.time.base.BaseSingleFieldPeriod.size : return 1 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : if i2 >= $i4
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : if i2 >= $i4 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : i3 = interfaceinvoke r0.<org.joda.time.ReadablePeriod: int getValue(int)>(i2)
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : i3 = interfaceinvoke r0.<org.joda.time.ReadablePeriod: int getValue(int)>(i2) >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.getValue : if i0 == 0
org.joda.time.base.BaseSingleFieldPeriod.getValue : if i0 == 0 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.getValue : $i1 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>()
org.joda.time.base.BaseSingleFieldPeriod.getValue : $i1 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>() >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.getValue : return $i1
org.joda.time.base.BaseSingleFieldPeriod.getValue : return $i1 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : if i3 == 0
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : if i3 == 0 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $r4 = interfaceinvoke r0.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i2)
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $r4 = interfaceinvoke r0.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i2) >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.getFieldType : if i0 == 0
org.joda.time.base.BaseSingleFieldPeriod.getFieldType : if i0 == 0 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.getFieldType : $r3 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType()>()
org.joda.time.base.BaseSingleFieldPeriod.getFieldType : $r3 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType()>() >>>>>>>> org.joda.time.Weeks.getFieldType : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>()
org.joda.time.Weeks.getFieldType : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>() >>>>>>>> org.joda.time.DurationFieldType.weeks : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType WEEKS_TYPE>
org.joda.time.DurationFieldType.weeks : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType WEEKS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.weeks : return $r0
org.joda.time.DurationFieldType.weeks : return $r0 >>>>>>>> org.joda.time.Weeks.getFieldType : return $r1
org.joda.time.Weeks.getFieldType : return $r1 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.getFieldType : return $r3
org.joda.time.base.BaseSingleFieldPeriod.getFieldType : return $r3 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : r2 = virtualinvoke $r4.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>(r1)
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : r2 = virtualinvoke $r4.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getChronology : if r0 != null
org.joda.time.DateTimeUtils.getChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.DateTimeUtils.getChronology : return r0 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal>
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : tableswitch($b0) {     case 1:
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : tableswitch($b0) {     case 1: >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r8 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField weeks()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r8 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField weeks()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.weeks : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks>
org.joda.time.chrono.AssembledChronology.weeks : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks> >>>>>>>> org.joda.time.chrono.AssembledChronology.weeks : return $r1
org.joda.time.chrono.AssembledChronology.weeks : return $r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r8
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r8 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $z0 = virtualinvoke r2.<org.joda.time.DurationField: boolean isPrecise()>()
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $z0 = virtualinvoke r2.<org.joda.time.DurationField: boolean isPrecise()>() >>>>>>>> org.joda.time.field.PreciseDurationField.isPrecise : return 1
org.joda.time.field.PreciseDurationField.isPrecise : return 1 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : if $z0 != 0
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : if $z0 != 0 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $l5 = virtualinvoke r2.<org.joda.time.DurationField: long getUnitMillis()>()
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $l5 = virtualinvoke r2.<org.joda.time.DurationField: long getUnitMillis()>() >>>>>>>> org.joda.time.field.PreciseDurationField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis>
org.joda.time.field.PreciseDurationField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationField.getUnitMillis : return $l0
org.joda.time.field.PreciseDurationField.getUnitMillis : return $l0 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $l6 = staticinvoke <org.joda.time.field.FieldUtils: long safeMultiply(long,int)>($l5, i3)
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $l6 = staticinvoke <org.joda.time.field.FieldUtils: long safeMultiply(long,int)>($l5, i3) >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : tableswitch(i1) {     case -1:
org.joda.time.field.FieldUtils.safeMultiply : tableswitch(i1) {     case -1: >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $l4 = (long) i1
org.joda.time.field.FieldUtils.safeMultiply : $l4 = (long) i1 >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : l2 = l0 * $l4
org.joda.time.field.FieldUtils.safeMultiply : l2 = l0 * $l4 >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $l5 = (long) i1
org.joda.time.field.FieldUtils.safeMultiply : $l5 = (long) i1 >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $l6 = l2 / $l5
org.joda.time.field.FieldUtils.safeMultiply : $l6 = l2 / $l5 >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $b7 = $l6 cmp l0
org.joda.time.field.FieldUtils.safeMultiply : $b7 = $l6 cmp l0 >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : if $b7 == 0
org.joda.time.field.FieldUtils.safeMultiply : if $b7 == 0 >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : return l2
org.joda.time.field.FieldUtils.safeMultiply : return l2 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : l1 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l1, $l6)
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : l1 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l1, $l6) >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : l2 = l0 + l1
org.joda.time.field.FieldUtils.safeAdd : l2 = l0 + l1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $l3 = l0 ^ l2
org.joda.time.field.FieldUtils.safeAdd : $l3 = l0 ^ l2 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $b4 = $l3 cmp 0L
org.joda.time.field.FieldUtils.safeAdd : $b4 = $l3 cmp 0L >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $b4 >= 0
org.joda.time.field.FieldUtils.safeAdd : if $b4 >= 0 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $l5 = l0 ^ l1
org.joda.time.field.FieldUtils.safeAdd : $l5 = l0 ^ l1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $b6 = $l5 cmp 0L
org.joda.time.field.FieldUtils.safeAdd : $b6 = $l5 cmp 0L >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $b6 < 0
org.joda.time.field.FieldUtils.safeAdd : if $b6 < 0 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : return l2
org.joda.time.field.FieldUtils.safeAdd : return l2 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : i2 = i2 + 1
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : i2 = i2 + 1 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : goto [?= $i4 = interfaceinvoke r0.<org.joda.time.ReadablePeriod: int size()>()]
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : goto [?= $i4 = interfaceinvoke r0.<org.joda.time.ReadablePeriod: int size()>()] >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $l7 = l1 / l0
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $l7 = l1 / l0 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $i8 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l7)
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $i8 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l7) >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : $b1 = -2147483648L cmp l0
org.joda.time.field.FieldUtils.safeToInt : $b1 = -2147483648L cmp l0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : if $b1 > 0
org.joda.time.field.FieldUtils.safeToInt : if $b1 > 0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : $r0 = new java.lang.ArithmeticException
org.joda.time.field.FieldUtils.safeToInt : $r0 = new java.lang.ArithmeticException >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : $r1 = new java.lang.StringBuilder
org.joda.time.field.FieldUtils.safeToInt : $r1 = new java.lang.StringBuilder >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
org.joda.time.field.FieldUtils.safeToInt : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value cannot fit in an int: ")
org.joda.time.field.FieldUtils.safeToInt : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value cannot fit in an int: ") >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0)
org.joda.time.field.FieldUtils.safeToInt : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0) >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.field.FieldUtils.safeToInt : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r4)
org.joda.time.field.FieldUtils.safeToInt : specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r4) >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : throw $r0
