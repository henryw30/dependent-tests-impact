org.joda.time.PeriodType.standard : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cStandard> >>>>>>>> org.joda.time.PeriodType.standard : if r0 != null
org.joda.time.PeriodType.standard : if r0 != null >>>>>>>> org.joda.time.PeriodType.standard : return r0
org.joda.time.PeriodType.standard : return r0 >>>>>>>> org.joda.time.base.BasePeriod.checkPeriodType : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>(r1)
org.joda.time.base.BasePeriod.checkPeriodType : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getPeriodType : if r0 != null
org.joda.time.DateTimeUtils.getPeriodType : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getPeriodType : return r0
org.joda.time.DateTimeUtils.getPeriodType : return r0 >>>>>>>> org.joda.time.base.BasePeriod.checkPeriodType : return $r2
org.joda.time.base.BasePeriod.checkPeriodType : return $r2 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $i8 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int size()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $i8 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int size()>() >>>>>>>> org.joda.time.base.AbstractPeriod.size : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.base.AbstractPeriod.size : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.base.BasePeriod.getPeriodType : $r1 = r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType>
org.joda.time.base.BasePeriod.getPeriodType : $r1 = r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> >>>>>>>> org.joda.time.base.BasePeriod.getPeriodType : return $r1
org.joda.time.base.BasePeriod.getPeriodType : return $r1 >>>>>>>> org.joda.time.base.AbstractPeriod.size : $i0 = virtualinvoke $r1.<org.joda.time.PeriodType: int size()>()
org.joda.time.base.AbstractPeriod.size : $i0 = virtualinvoke $r1.<org.joda.time.PeriodType: int size()>() >>>>>>>> org.joda.time.PeriodType.size : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.size : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes> >>>>>>>> org.joda.time.PeriodType.size : $i0 = lengthof $r1
org.joda.time.PeriodType.size : $i0 = lengthof $r1 >>>>>>>> org.joda.time.PeriodType.size : return $i0
org.joda.time.PeriodType.size : return $i0 >>>>>>>> org.joda.time.base.AbstractPeriod.size : return $i0
org.joda.time.base.AbstractPeriod.size : return $i0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : r1 = newarray (int)[$i8]
org.joda.time.base.BasePeriod.setPeriodInternal : r1 = newarray (int)[$i8] >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>() >>>>>>>> org.joda.time.DurationFieldType.years : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType YEARS_TYPE>
org.joda.time.DurationFieldType.years : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType YEARS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.years : return $r0
org.joda.time.DurationFieldType.years : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r2, r1, i0)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r2, r1, i0) >>>>>>>> org.joda.time.base.BasePeriod.checkAndUpdate : i1 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int indexOf(org.joda.time.DurationFieldType)>(r1)
org.joda.time.base.BasePeriod.checkAndUpdate : i1 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int indexOf(org.joda.time.DurationFieldType)>(r1) >>>>>>>> org.joda.time.base.AbstractPeriod.indexOf : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.base.AbstractPeriod.indexOf : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.base.AbstractPeriod.indexOf : $i0 = virtualinvoke $r2.<org.joda.time.PeriodType: int indexOf(org.joda.time.DurationFieldType)>(r1)
org.joda.time.base.AbstractPeriod.indexOf : $i0 = virtualinvoke $r2.<org.joda.time.PeriodType: int indexOf(org.joda.time.DurationFieldType)>(r1) >>>>>>>> org.joda.time.PeriodType.indexOf : i0 = 0
org.joda.time.PeriodType.indexOf : i0 = 0 >>>>>>>> org.joda.time.PeriodType.indexOf : i1 = virtualinvoke r0.<org.joda.time.PeriodType: int size()>()
org.joda.time.PeriodType.indexOf : i1 = virtualinvoke r0.<org.joda.time.PeriodType: int size()>() >>>>>>>> org.joda.time.PeriodType.indexOf : if i0 >= i1
org.joda.time.PeriodType.indexOf : if i0 >= i1 >>>>>>>> org.joda.time.PeriodType.indexOf : $r2 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.indexOf : $r2 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes> >>>>>>>> org.joda.time.PeriodType.indexOf : $r3 = $r2[i0]
org.joda.time.PeriodType.indexOf : $r3 = $r2[i0] >>>>>>>> org.joda.time.PeriodType.indexOf : if $r3 != r1
org.joda.time.PeriodType.indexOf : if $r3 != r1 >>>>>>>> org.joda.time.PeriodType.indexOf : return i0
org.joda.time.PeriodType.indexOf : return i0 >>>>>>>> org.joda.time.base.AbstractPeriod.indexOf : return $i0
org.joda.time.base.AbstractPeriod.indexOf : return $i0 >>>>>>>> org.joda.time.base.BasePeriod.checkAndUpdate : if i1 != -1
org.joda.time.base.BasePeriod.checkAndUpdate : if i1 != -1 >>>>>>>> org.joda.time.base.BasePeriod.checkAndUpdate : r2[i1] = i0
org.joda.time.base.BasePeriod.checkAndUpdate : r2[i1] = i0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r3 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r3 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>() >>>>>>>> org.joda.time.DurationFieldType.months : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MONTHS_TYPE>
org.joda.time.DurationFieldType.months : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MONTHS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.months : return $r0
org.joda.time.DurationFieldType.months : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r3, r1, i1)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r3, r1, i1) >>>>>>>> org.joda.time.PeriodType.indexOf : i0 = i0 + 1
org.joda.time.PeriodType.indexOf : i0 = i0 + 1 >>>>>>>> org.joda.time.PeriodType.indexOf : goto [?= (branch)]
org.joda.time.PeriodType.indexOf : goto [?= (branch)] >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r4 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r4 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>() >>>>>>>> org.joda.time.DurationFieldType.weeks : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType WEEKS_TYPE>
org.joda.time.DurationFieldType.weeks : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType WEEKS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.weeks : return $r0
org.joda.time.DurationFieldType.weeks : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r4, r1, i2)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r4, r1, i2) >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r5 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r5 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>() >>>>>>>> org.joda.time.DurationFieldType.days : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType DAYS_TYPE>
org.joda.time.DurationFieldType.days : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType DAYS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.days : return $r0
org.joda.time.DurationFieldType.days : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r5, r1, i3)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r5, r1, i3) >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r6 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r6 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>() >>>>>>>> org.joda.time.DurationFieldType.hours : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType HOURS_TYPE>
org.joda.time.DurationFieldType.hours : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType HOURS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.hours : return $r0
org.joda.time.DurationFieldType.hours : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r6, r1, i4)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r6, r1, i4) >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r7 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r7 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>() >>>>>>>> org.joda.time.DurationFieldType.minutes : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MINUTES_TYPE>
org.joda.time.DurationFieldType.minutes : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MINUTES_TYPE> >>>>>>>> org.joda.time.DurationFieldType.minutes : return $r0
org.joda.time.DurationFieldType.minutes : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r7, r1, i5)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r7, r1, i5) >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r8 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r8 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>() >>>>>>>> org.joda.time.DurationFieldType.seconds : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType SECONDS_TYPE>
org.joda.time.DurationFieldType.seconds : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType SECONDS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.seconds : return $r0
org.joda.time.DurationFieldType.seconds : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r8, r1, i6)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r8, r1, i6) >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r9 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r9 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>() >>>>>>>> org.joda.time.DurationFieldType.millis : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MILLIS_TYPE>
org.joda.time.DurationFieldType.millis : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MILLIS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.millis : return $r0
org.joda.time.DurationFieldType.millis : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r9, r1, i7)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r9, r1, i7) >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : return r1
org.joda.time.base.BasePeriod.setPeriodInternal : return r1 >>>>>>>> org.joda.time.Period.withPeriodType : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>(r1)
org.joda.time.Period.withPeriodType : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getPeriodType : $r1 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType standard()>()
org.joda.time.DateTimeUtils.getPeriodType : $r1 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType standard()>() >>>>>>>> org.joda.time.DateTimeUtils.getPeriodType : return $r1
org.joda.time.DateTimeUtils.getPeriodType : return $r1 >>>>>>>> org.joda.time.Period.withPeriodType : $r3 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.withPeriodType : $r3 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.withPeriodType : $z0 = virtualinvoke r2.<org.joda.time.PeriodType: boolean equals(java.lang.Object)>($r3)
org.joda.time.Period.withPeriodType : $z0 = virtualinvoke r2.<org.joda.time.PeriodType: boolean equals(java.lang.Object)>($r3) >>>>>>>> org.joda.time.PeriodType.equals : if r0 != r1
org.joda.time.PeriodType.equals : if r0 != r1 >>>>>>>> org.joda.time.PeriodType.equals : return 1
org.joda.time.PeriodType.equals : return 1 >>>>>>>> org.joda.time.Period.withPeriodType : if $z0 == 0
org.joda.time.Period.withPeriodType : if $z0 == 0 >>>>>>>> org.joda.time.Period.withPeriodType : return r0
org.joda.time.Period.withPeriodType : return r0 >>>>>>>> org.joda.time.Period.minusHours : $i1 = neg i0
org.joda.time.Period.minusHours : $i1 = neg i0 >>>>>>>> org.joda.time.Period.minusHours : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.Period plusHours(int)>($i1)
org.joda.time.Period.minusHours : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.Period plusHours(int)>($i1) >>>>>>>> org.joda.time.Period.plusHours : if i0 != 0
org.joda.time.Period.plusHours : if i0 != 0 >>>>>>>> org.joda.time.Period.plusHours : r1 = virtualinvoke r0.<org.joda.time.Period: int[] getValues()>()
org.joda.time.Period.plusHours : r1 = virtualinvoke r0.<org.joda.time.Period: int[] getValues()>() >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : $i1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int size()>()
org.joda.time.base.AbstractPeriod.getValues : $i1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int size()>() >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : r1 = newarray (int)[$i1]
org.joda.time.base.AbstractPeriod.getValues : r1 = newarray (int)[$i1] >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : i0 = 0
org.joda.time.base.AbstractPeriod.getValues : i0 = 0 >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : $i2 = lengthof r1
org.joda.time.base.AbstractPeriod.getValues : $i2 = lengthof r1 >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : if i0 >= $i2
org.joda.time.base.AbstractPeriod.getValues : if i0 >= $i2 >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : $i3 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int getValue(int)>(i0)
org.joda.time.base.AbstractPeriod.getValues : $i3 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int getValue(int)>(i0) >>>>>>>> org.joda.time.base.BasePeriod.getValue : $r1 = r0.<org.joda.time.base.BasePeriod: int[] iValues>
org.joda.time.base.BasePeriod.getValue : $r1 = r0.<org.joda.time.base.BasePeriod: int[] iValues> >>>>>>>> org.joda.time.base.BasePeriod.getValue : $i1 = $r1[i0]
org.joda.time.base.BasePeriod.getValue : $i1 = $r1[i0] >>>>>>>> org.joda.time.base.BasePeriod.getValue : return $i1
org.joda.time.base.BasePeriod.getValue : return $i1 >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : r1[i0] = $i3
org.joda.time.base.AbstractPeriod.getValues : r1[i0] = $i3 >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : i0 = i0 + 1
org.joda.time.base.AbstractPeriod.getValues : i0 = i0 + 1 >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : goto [?= $i2 = lengthof r1]
org.joda.time.base.AbstractPeriod.getValues : goto [?= $i2 = lengthof r1] >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : return r1
org.joda.time.base.AbstractPeriod.getValues : return r1 >>>>>>>> org.joda.time.Period.plusHours : $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.plusHours : $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.plusHours : $i1 = <org.joda.time.PeriodType: int HOUR_INDEX>
org.joda.time.Period.plusHours : $i1 = <org.joda.time.PeriodType: int HOUR_INDEX> >>>>>>>> org.joda.time.Period.plusHours : virtualinvoke $r2.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i1, r1, i0)
org.joda.time.Period.plusHours : virtualinvoke $r2.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i1, r1, i0) >>>>>>>> org.joda.time.PeriodType.addIndexedField : if i1 != 0
org.joda.time.PeriodType.addIndexedField : if i1 != 0 >>>>>>>> org.joda.time.PeriodType.addIndexedField : $r3 = r0.<org.joda.time.PeriodType: int[] iIndices>
org.joda.time.PeriodType.addIndexedField : $r3 = r0.<org.joda.time.PeriodType: int[] iIndices> >>>>>>>> org.joda.time.PeriodType.addIndexedField : i2 = $r3[i0]
org.joda.time.PeriodType.addIndexedField : i2 = $r3[i0] >>>>>>>> org.joda.time.PeriodType.addIndexedField : if i2 != -1
org.joda.time.PeriodType.addIndexedField : if i2 != -1 >>>>>>>> org.joda.time.PeriodType.addIndexedField : $i3 = r2[i2]
org.joda.time.PeriodType.addIndexedField : $i3 = r2[i2] >>>>>>>> org.joda.time.PeriodType.addIndexedField : $i4 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>($i3, i1)
org.joda.time.PeriodType.addIndexedField : $i4 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>($i3, i1) >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : i2 = i0 + i1
org.joda.time.field.FieldUtils.safeAdd : i2 = i0 + i1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $i3 = i0 ^ i2
org.joda.time.field.FieldUtils.safeAdd : $i3 = i0 ^ i2 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $i3 >= 0
org.joda.time.field.FieldUtils.safeAdd : if $i3 >= 0 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $i4 = i0 ^ i1
org.joda.time.field.FieldUtils.safeAdd : $i4 = i0 ^ i1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $i4 < 0
org.joda.time.field.FieldUtils.safeAdd : if $i4 < 0 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : return i2
org.joda.time.field.FieldUtils.safeAdd : return i2 >>>>>>>> org.joda.time.PeriodType.addIndexedField : r2[i2] = $i4
org.joda.time.PeriodType.addIndexedField : r2[i2] = $i4 >>>>>>>> org.joda.time.PeriodType.addIndexedField : return 1
org.joda.time.PeriodType.addIndexedField : return 1 >>>>>>>> org.joda.time.Period.plusHours : $r3 = new org.joda.time.Period
org.joda.time.Period.plusHours : $r3 = new org.joda.time.Period >>>>>>>> org.joda.time.Period.plusHours : $r4 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.plusHours : $r4 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.plusHours : specialinvoke $r3.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>(r1, $r4)
org.joda.time.Period.plusHours : specialinvoke $r3.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>(r1, $r4) >>>>>>>> org.joda.time.Period.plusHours : return $r3
org.joda.time.Period.plusHours : return $r3 >>>>>>>> org.joda.time.Period.minusHours : return $r1
org.joda.time.Period.minusHours : return $r1 >>>>>>>> org.joda.time.Period.withHours : r1 = virtualinvoke r0.<org.joda.time.Period: int[] getValues()>()
org.joda.time.Period.withHours : r1 = virtualinvoke r0.<org.joda.time.Period: int[] getValues()>() >>>>>>>> org.joda.time.Period.withHours : $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.withHours : $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.withHours : $i1 = <org.joda.time.PeriodType: int HOUR_INDEX>
org.joda.time.Period.withHours : $i1 = <org.joda.time.PeriodType: int HOUR_INDEX> >>>>>>>> org.joda.time.Period.withHours : virtualinvoke $r2.<org.joda.time.PeriodType: boolean setIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i1, r1, i0)
org.joda.time.Period.withHours : virtualinvoke $r2.<org.joda.time.PeriodType: boolean setIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i1, r1, i0) >>>>>>>> org.joda.time.PeriodType.setIndexedField : $r3 = r0.<org.joda.time.PeriodType: int[] iIndices>
org.joda.time.PeriodType.setIndexedField : $r3 = r0.<org.joda.time.PeriodType: int[] iIndices> >>>>>>>> org.joda.time.PeriodType.setIndexedField : i2 = $r3[i0]
org.joda.time.PeriodType.setIndexedField : i2 = $r3[i0] >>>>>>>> org.joda.time.PeriodType.setIndexedField : if i2 != -1
org.joda.time.PeriodType.setIndexedField : if i2 != -1 >>>>>>>> org.joda.time.PeriodType.setIndexedField : r2[i2] = i1
org.joda.time.PeriodType.setIndexedField : r2[i2] = i1 >>>>>>>> org.joda.time.PeriodType.setIndexedField : return 1
org.joda.time.PeriodType.setIndexedField : return 1 >>>>>>>> org.joda.time.Period.withHours : $r3 = new org.joda.time.Period
org.joda.time.Period.withHours : $r3 = new org.joda.time.Period >>>>>>>> org.joda.time.Period.withHours : $r4 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.withHours : $r4 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.withHours : specialinvoke $r3.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>(r1, $r4)
org.joda.time.Period.withHours : specialinvoke $r3.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>(r1, $r4) >>>>>>>> org.joda.time.Period.withHours : return $r3
org.joda.time.Period.withHours : return $r3 >>>>>>>> org.joda.time.Period.toPeriod : return r0
org.joda.time.Period.toPeriod : return r0 >>>>>>>> org.joda.time.Period.toStandardDuration : specialinvoke r0.<org.joda.time.Period: void checkYearsAndMonths(java.lang.String)>("Duration")
org.joda.time.Period.toStandardDuration : specialinvoke r0.<org.joda.time.Period: void checkYearsAndMonths(java.lang.String)>("Duration") >>>>>>>> org.joda.time.Period.checkYearsAndMonths : $i0 = virtualinvoke r0.<org.joda.time.Period: int getMonths()>()
org.joda.time.Period.checkYearsAndMonths : $i0 = virtualinvoke r0.<org.joda.time.Period: int getMonths()>() >>>>>>>> org.joda.time.Period.getMonths : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.getMonths : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.getMonths : $i0 = <org.joda.time.PeriodType: int MONTH_INDEX>
org.joda.time.Period.getMonths : $i0 = <org.joda.time.PeriodType: int MONTH_INDEX> >>>>>>>> org.joda.time.Period.getMonths : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0)
org.joda.time.Period.getMonths : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0) >>>>>>>> org.joda.time.PeriodType.getIndexedField : $r2 = r0.<org.joda.time.PeriodType: int[] iIndices>
org.joda.time.PeriodType.getIndexedField : $r2 = r0.<org.joda.time.PeriodType: int[] iIndices> >>>>>>>> org.joda.time.PeriodType.getIndexedField : i1 = $r2[i0]
org.joda.time.PeriodType.getIndexedField : i1 = $r2[i0] >>>>>>>> org.joda.time.PeriodType.getIndexedField : if i1 != -1
org.joda.time.PeriodType.getIndexedField : if i1 != -1 >>>>>>>> org.joda.time.PeriodType.getIndexedField : $i2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int getValue(int)>(i1)
org.joda.time.PeriodType.getIndexedField : $i2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int getValue(int)>(i1) >>>>>>>> org.joda.time.PeriodType.getIndexedField : return $i2
org.joda.time.PeriodType.getIndexedField : return $i2 >>>>>>>> org.joda.time.Period.getMonths : return $i1
org.joda.time.Period.getMonths : return $i1 >>>>>>>> org.joda.time.Period.checkYearsAndMonths : if $i0 == 0
org.joda.time.Period.checkYearsAndMonths : if $i0 == 0 >>>>>>>> org.joda.time.Period.checkYearsAndMonths : $i1 = virtualinvoke r0.<org.joda.time.Period: int getYears()>()
org.joda.time.Period.checkYearsAndMonths : $i1 = virtualinvoke r0.<org.joda.time.Period: int getYears()>() >>>>>>>> org.joda.time.Period.getYears : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.getYears : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.getYears : $i0 = <org.joda.time.PeriodType: int YEAR_INDEX>
org.joda.time.Period.getYears : $i0 = <org.joda.time.PeriodType: int YEAR_INDEX> >>>>>>>> org.joda.time.Period.getYears : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0)
org.joda.time.Period.getYears : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0) >>>>>>>> org.joda.time.Period.getYears : return $i1
org.joda.time.Period.getYears : return $i1 >>>>>>>> org.joda.time.Period.checkYearsAndMonths : if $i1 == 0
org.joda.time.Period.checkYearsAndMonths : if $i1 == 0 >>>>>>>> org.joda.time.Period.toStandardDuration : $i1 = virtualinvoke r0.<org.joda.time.Period: int getMillis()>()
org.joda.time.Period.toStandardDuration : $i1 = virtualinvoke r0.<org.joda.time.Period: int getMillis()>() >>>>>>>> org.joda.time.Period.getMillis : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.getMillis : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.getMillis : $i0 = <org.joda.time.PeriodType: int MILLI_INDEX>
org.joda.time.Period.getMillis : $i0 = <org.joda.time.PeriodType: int MILLI_INDEX> >>>>>>>> org.joda.time.Period.getMillis : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0)
org.joda.time.Period.getMillis : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0) >>>>>>>> org.joda.time.Period.getMillis : return $i1
org.joda.time.Period.getMillis : return $i1 >>>>>>>> org.joda.time.Period.toStandardDuration : l0 = (long) $i1
org.joda.time.Period.toStandardDuration : l0 = (long) $i1 >>>>>>>> org.joda.time.Period.toStandardDuration : $i2 = virtualinvoke r0.<org.joda.time.Period: int getSeconds()>()
org.joda.time.Period.toStandardDuration : $i2 = virtualinvoke r0.<org.joda.time.Period: int getSeconds()>() >>>>>>>> org.joda.time.Period.getSeconds : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.getSeconds : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.getSeconds : $i0 = <org.joda.time.PeriodType: int SECOND_INDEX>
org.joda.time.Period.getSeconds : $i0 = <org.joda.time.PeriodType: int SECOND_INDEX> >>>>>>>> org.joda.time.Period.getSeconds : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0)
org.joda.time.Period.getSeconds : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0) >>>>>>>> org.joda.time.Period.getSeconds : return $i1
org.joda.time.Period.getSeconds : return $i1 >>>>>>>> org.joda.time.Period.toStandardDuration : $l3 = (long) $i2
org.joda.time.Period.toStandardDuration : $l3 = (long) $i2 >>>>>>>> org.joda.time.Period.toStandardDuration : $l4 = $l3 * 1000L
org.joda.time.Period.toStandardDuration : $l4 = $l3 * 1000L >>>>>>>> org.joda.time.Period.toStandardDuration : l5 = l0 + $l4
org.joda.time.Period.toStandardDuration : l5 = l0 + $l4 >>>>>>>> org.joda.time.Period.toStandardDuration : $i6 = virtualinvoke r0.<org.joda.time.Period: int getMinutes()>()
org.joda.time.Period.toStandardDuration : $i6 = virtualinvoke r0.<org.joda.time.Period: int getMinutes()>() >>>>>>>> org.joda.time.Period.getMinutes : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.getMinutes : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.getMinutes : $i0 = <org.joda.time.PeriodType: int MINUTE_INDEX>
org.joda.time.Period.getMinutes : $i0 = <org.joda.time.PeriodType: int MINUTE_INDEX> >>>>>>>> org.joda.time.Period.getMinutes : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0)
org.joda.time.Period.getMinutes : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0) >>>>>>>> org.joda.time.Period.getMinutes : return $i1
org.joda.time.Period.getMinutes : return $i1 >>>>>>>> org.joda.time.Period.toStandardDuration : $l7 = (long) $i6
org.joda.time.Period.toStandardDuration : $l7 = (long) $i6 >>>>>>>> org.joda.time.Period.toStandardDuration : $l8 = $l7 * 60000L
org.joda.time.Period.toStandardDuration : $l8 = $l7 * 60000L >>>>>>>> org.joda.time.Period.toStandardDuration : l9 = l5 + $l8
org.joda.time.Period.toStandardDuration : l9 = l5 + $l8 >>>>>>>> org.joda.time.Period.toStandardDuration : $i10 = virtualinvoke r0.<org.joda.time.Period: int getHours()>()
org.joda.time.Period.toStandardDuration : $i10 = virtualinvoke r0.<org.joda.time.Period: int getHours()>() >>>>>>>> org.joda.time.Period.getHours : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.getHours : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.getHours : $i0 = <org.joda.time.PeriodType: int HOUR_INDEX>
org.joda.time.Period.getHours : $i0 = <org.joda.time.PeriodType: int HOUR_INDEX> >>>>>>>> org.joda.time.Period.getHours : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0)
org.joda.time.Period.getHours : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0) >>>>>>>> org.joda.time.Period.getHours : return $i1
org.joda.time.Period.getHours : return $i1 >>>>>>>> org.joda.time.Period.toStandardDuration : $l11 = (long) $i10
org.joda.time.Period.toStandardDuration : $l11 = (long) $i10 >>>>>>>> org.joda.time.Period.toStandardDuration : $l12 = $l11 * 3600000L
org.joda.time.Period.toStandardDuration : $l12 = $l11 * 3600000L >>>>>>>> org.joda.time.Period.toStandardDuration : l13 = l9 + $l12
org.joda.time.Period.toStandardDuration : l13 = l9 + $l12 >>>>>>>> org.joda.time.Period.toStandardDuration : $i14 = virtualinvoke r0.<org.joda.time.Period: int getDays()>()
org.joda.time.Period.toStandardDuration : $i14 = virtualinvoke r0.<org.joda.time.Period: int getDays()>() >>>>>>>> org.joda.time.Period.getDays : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.getDays : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.getDays : $i0 = <org.joda.time.PeriodType: int DAY_INDEX>
org.joda.time.Period.getDays : $i0 = <org.joda.time.PeriodType: int DAY_INDEX> >>>>>>>> org.joda.time.Period.getDays : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0)
org.joda.time.Period.getDays : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0) >>>>>>>> org.joda.time.Period.getDays : return $i1
org.joda.time.Period.getDays : return $i1 >>>>>>>> org.joda.time.Period.toStandardDuration : $l15 = (long) $i14
org.joda.time.Period.toStandardDuration : $l15 = (long) $i14 >>>>>>>> org.joda.time.Period.toStandardDuration : $l16 = $l15 * 86400000L
org.joda.time.Period.toStandardDuration : $l16 = $l15 * 86400000L >>>>>>>> org.joda.time.Period.toStandardDuration : l17 = l13 + $l16
org.joda.time.Period.toStandardDuration : l17 = l13 + $l16 >>>>>>>> org.joda.time.Period.toStandardDuration : $i18 = virtualinvoke r0.<org.joda.time.Period: int getWeeks()>()
org.joda.time.Period.toStandardDuration : $i18 = virtualinvoke r0.<org.joda.time.Period: int getWeeks()>() >>>>>>>> org.joda.time.Period.getWeeks : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.getWeeks : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.getWeeks : $i0 = <org.joda.time.PeriodType: int WEEK_INDEX>
org.joda.time.Period.getWeeks : $i0 = <org.joda.time.PeriodType: int WEEK_INDEX> >>>>>>>> org.joda.time.Period.getWeeks : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0)
org.joda.time.Period.getWeeks : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0) >>>>>>>> org.joda.time.Period.getWeeks : return $i1
org.joda.time.Period.getWeeks : return $i1 >>>>>>>> org.joda.time.Period.toStandardDuration : $l19 = (long) $i18
org.joda.time.Period.toStandardDuration : $l19 = (long) $i18 >>>>>>>> org.joda.time.Period.toStandardDuration : $l20 = $l19 * 604800000L
org.joda.time.Period.toStandardDuration : $l20 = $l19 * 604800000L >>>>>>>> org.joda.time.Period.toStandardDuration : l21 = l17 + $l20
org.joda.time.Period.toStandardDuration : l21 = l17 + $l20 >>>>>>>> org.joda.time.Period.toStandardDuration : $r1 = new org.joda.time.Duration
org.joda.time.Period.toStandardDuration : $r1 = new org.joda.time.Duration >>>>>>>> org.joda.time.Period.toStandardDuration : specialinvoke $r1.<org.joda.time.Duration: void <init>(long)>(l21)
org.joda.time.Period.toStandardDuration : specialinvoke $r1.<org.joda.time.Duration: void <init>(long)>(l21) >>>>>>>> org.joda.time.Period.toStandardDuration : return $r1
org.joda.time.Period.toStandardDuration : return $r1 >>>>>>>> org.joda.time.DateTimeUtils.getInstantMillis : if r0 != null
org.joda.time.DateTimeUtils.getInstantMillis : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getInstantMillis : $l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>()
org.joda.time.DateTimeUtils.getInstantMillis : $l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>() >>>>>>>> org.joda.time.DateTimeUtils.currentTimeMillis : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider>
org.joda.time.DateTimeUtils.currentTimeMillis : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> >>>>>>>> org.joda.time.DateTimeUtils.currentTimeMillis : $l0 = interfaceinvoke $r0.<org.joda.time.DateTimeUtils$MillisProvider: long getMillis()>()
org.joda.time.DateTimeUtils.currentTimeMillis : $l0 = interfaceinvoke $r0.<org.joda.time.DateTimeUtils$MillisProvider: long getMillis()>() >>>>>>>> org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : $l1 = r0.<org.joda.time.DateTimeUtils$OffsetMillisProvider: long iMillis>
org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : $l1 = r0.<org.joda.time.DateTimeUtils$OffsetMillisProvider: long iMillis> >>>>>>>> org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : $l2 = $l0 + $l1
org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : $l2 = $l0 + $l1 >>>>>>>> org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : return $l2
org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : return $l2 >>>>>>>> org.joda.time.DateTimeUtils.currentTimeMillis : return $l0
org.joda.time.DateTimeUtils.currentTimeMillis : return $l0 >>>>>>>> org.joda.time.DateTimeUtils.getInstantMillis : return $l0
org.joda.time.DateTimeUtils.getInstantMillis : return $l0 >>>>>>>> org.joda.time.DateTimeUtils.getDurationMillis : if r0 != null
org.joda.time.DateTimeUtils.getDurationMillis : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getDurationMillis : return 0L
org.joda.time.DateTimeUtils.getDurationMillis : return 0L >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : l2 = l0 + l1
org.joda.time.field.FieldUtils.safeAdd : l2 = l0 + l1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $l3 = l0 ^ l2
org.joda.time.field.FieldUtils.safeAdd : $l3 = l0 ^ l2 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $b4 = $l3 cmp 0L
org.joda.time.field.FieldUtils.safeAdd : $b4 = $l3 cmp 0L >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $b4 >= 0
org.joda.time.field.FieldUtils.safeAdd : if $b4 >= 0 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : return l2
org.joda.time.field.FieldUtils.safeAdd : return l2 >>>>>>>> org.joda.time.DateTimeUtils.getInstantChronology : if r0 != null
org.joda.time.DateTimeUtils.getInstantChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getInstantChronology : $r2 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>()
org.joda.time.DateTimeUtils.getInstantChronology : $r2 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>() >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>() >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r0)
org.joda.time.chrono.ISOChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r0 != null
org.joda.time.chrono.ISOChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63
org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>
org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0]
org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0] >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r1 == null
org.joda.time.chrono.ISOChronology.getInstance : if r1 == null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2
org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null
org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.GregorianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : return $r1
org.joda.time.chrono.AssembledChronology.getBase : return $r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : r1 = $r2
org.joda.time.chrono.BasicChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : if $r2 == null
org.joda.time.chrono.BasicChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : return $r4
org.joda.time.chrono.BasicChronology.getZone : return $r4 >>>>>>>> org.joda.time.chrono.GregorianChronology.getZone : return $r1
org.joda.time.chrono.GregorianChronology.getZone : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : return $r3
org.joda.time.chrono.AssembledChronology.getZone : return $r3 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0
org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return r1
org.joda.time.chrono.ISOChronology.getInstance : return r1 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return $r1
org.joda.time.chrono.ISOChronology.getInstance : return $r1 >>>>>>>> org.joda.time.DateTimeUtils.getInstantChronology : return $r2
org.joda.time.DateTimeUtils.getInstantChronology : return $r2 >>>>>>>> org.joda.time.chrono.BaseChronology.get : i2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>()
org.joda.time.chrono.BaseChronology.get : i2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>() >>>>>>>> org.joda.time.chrono.BaseChronology.get : r2 = newarray (int)[i2]
org.joda.time.chrono.BaseChronology.get : r2 = newarray (int)[i2] >>>>>>>> org.joda.time.chrono.BaseChronology.get : $b5 = l0 cmp l1
org.joda.time.chrono.BaseChronology.get : $b5 = l0 cmp l1 >>>>>>>> org.joda.time.chrono.BaseChronology.get : if $b5 == 0
org.joda.time.chrono.BaseChronology.get : if $b5 == 0 >>>>>>>> org.joda.time.chrono.BaseChronology.get : return r2
org.joda.time.chrono.BaseChronology.get : return r2 >>>>>>>> org.joda.time.format.DateTimeFormat.fullDate : $r0 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>(0, 4)
org.joda.time.format.DateTimeFormat.fullDate : $r0 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>(0, 4) >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : $i4 = i0 << 2
org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : $i4 = i0 << 2 >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : $i5 = $i4 + i0
org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : $i5 = $i4 + i0 >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : i2 = $i5 + i1
org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : i2 = $i5 + i1 >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : n0 = null
org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : n0 = null >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : $r3 = <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter[] cStyleCache>
org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : $r3 = <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter[] cStyleCache> >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : r0 = $r3
org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : r0 = $r3 >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : entermonitor $r3
org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : entermonitor $r3 >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : $r4 = <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter[] cStyleCache>
org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : $r4 = <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter[] cStyleCache> >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : r5 = $r4[i2]
org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : r5 = $r4[i2] >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : if r5 != null
org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : if r5 != null >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : exitmonitor r0
org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : exitmonitor r0 >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : goto [?= return r5]
org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : goto [?= return r5] >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : return r5
org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : return r5 >>>>>>>> org.joda.time.format.DateTimeFormat.fullDate : return $r0
org.joda.time.format.DateTimeFormat.fullDate : return $r0 >>>>>>>> org.joda.time.base.BaseDateTime.checkChronology : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.base.BaseDateTime.checkChronology : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getChronology : if r0 != null
org.joda.time.DateTimeUtils.getChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>()
org.joda.time.DateTimeUtils.getChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>() >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return $r1
org.joda.time.DateTimeUtils.getChronology : return $r1 >>>>>>>> org.joda.time.base.BaseDateTime.checkChronology : return $r2
org.joda.time.base.BaseDateTime.checkChronology : return $r2 >>>>>>>> org.joda.time.base.BaseDateTime.checkInstant : return l0
org.joda.time.base.BaseDateTime.checkInstant : return l0 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : r3 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser requireParser()>()
org.joda.time.format.DateTimeFormatter.parseInto : r3 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser requireParser()>() >>>>>>>> org.joda.time.format.DateTimeFormatter.requireParser : r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser iParser>
org.joda.time.format.DateTimeFormatter.requireParser : r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser iParser> >>>>>>>> org.joda.time.format.DateTimeFormatter.requireParser : if r1 != null
org.joda.time.format.DateTimeFormatter.requireParser : if r1 != null >>>>>>>> org.joda.time.format.DateTimeFormatter.requireParser : return r1
org.joda.time.format.DateTimeFormatter.requireParser : return r1 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : if r1 != null
org.joda.time.format.DateTimeFormatter.parseInto : if r1 != null >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : l1 = interfaceinvoke r1.<org.joda.time.ReadWritableInstant: long getMillis()>()
org.joda.time.format.DateTimeFormatter.parseInto : l1 = interfaceinvoke r1.<org.joda.time.ReadWritableInstant: long getMillis()>() >>>>>>>> org.joda.time.base.BaseDateTime.getMillis : $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis>
org.joda.time.base.BaseDateTime.getMillis : $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis> >>>>>>>> org.joda.time.base.BaseDateTime.getMillis : return $l0
org.joda.time.base.BaseDateTime.getMillis : return $l0 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : r4 = interfaceinvoke r1.<org.joda.time.ReadWritableInstant: org.joda.time.Chronology getChronology()>()
org.joda.time.format.DateTimeFormatter.parseInto : r4 = interfaceinvoke r1.<org.joda.time.ReadWritableInstant: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.base.BaseDateTime.getChronology : $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology>
org.joda.time.base.BaseDateTime.getChronology : $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.base.BaseDateTime.getChronology : return $r1
org.joda.time.base.BaseDateTime.getChronology : return $r1 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : $r8 = virtualinvoke r4.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.format.DateTimeFormatter.parseInto : $r8 = virtualinvoke r4.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : $i5 = virtualinvoke $r8.<org.joda.time.DateTimeZone: int getOffset(long)>(l1)
org.joda.time.format.DateTimeFormatter.parseInto : $i5 = virtualinvoke $r8.<org.joda.time.DateTimeZone: int getOffset(long)>(l1) >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getOffset : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset>
org.joda.time.tz.FixedDateTimeZone.getOffset : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset> >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getOffset : return $i1
org.joda.time.tz.FixedDateTimeZone.getOffset : return $i1 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : $l6 = (long) $i5
org.joda.time.format.DateTimeFormatter.parseInto : $l6 = (long) $i5 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : l2 = l1 + $l6
org.joda.time.format.DateTimeFormatter.parseInto : l2 = l1 + $l6 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : r9 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>(r4)
org.joda.time.format.DateTimeFormatter.parseInto : r9 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>(r4) >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.format.DateTimeFormatter.selectChronology : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.DateTimeUtils.getChronology : return r0 >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : $r3 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>
org.joda.time.format.DateTimeFormatter.selectChronology : $r3 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono> >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : if $r3 == null
org.joda.time.format.DateTimeFormatter.selectChronology : if $r3 == null >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : $r4 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeFormatter.selectChronology : $r4 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : if $r4 == null
org.joda.time.format.DateTimeFormatter.selectChronology : if $r4 == null >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : return r2
org.joda.time.format.DateTimeFormatter.selectChronology : return r2 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : $r10 = new org.joda.time.format.DateTimeParserBucket
org.joda.time.format.DateTimeFormatter.parseInto : $r10 = new org.joda.time.format.DateTimeParserBucket >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : $r11 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>
org.joda.time.format.DateTimeFormatter.parseInto : $r11 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale> >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : $r12 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>
org.joda.time.format.DateTimeFormatter.parseInto : $r12 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear> >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : $i7 = r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear>
org.joda.time.format.DateTimeFormatter.parseInto : $i7 = r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear> >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : specialinvoke $r10.<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>(l2, r9, $r11, $r12, $i7)
org.joda.time.format.DateTimeFormatter.parseInto : specialinvoke $r10.<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>(l2, r9, $r11, $r12, $i7) >>>>>>>> org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>
org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.ISOChronology.withUTC : return $r1
org.joda.time.chrono.ISOChronology.withUTC : return $r1 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : r5 = $r10
org.joda.time.format.DateTimeFormatter.parseInto : r5 = $r10 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : i3 = interfaceinvoke r3.<org.joda.time.format.DateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>(r5, r2, i0)
org.joda.time.format.DateTimeFormatter.parseInto : i3 = interfaceinvoke r3.<org.joda.time.format.DateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>(r5, r2, i0) >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.parseInto : $r4 = virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: java.util.Locale getLocale()>()
org.joda.time.format.DateTimeFormat$StyleFormatter.parseInto : $r4 = virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: java.util.Locale getLocale()>() >>>>>>>> org.joda.time.format.DateTimeParserBucket.getLocale : $r1 = r0.<org.joda.time.format.DateTimeParserBucket: java.util.Locale iLocale>
org.joda.time.format.DateTimeParserBucket.getLocale : $r1 = r0.<org.joda.time.format.DateTimeParserBucket: java.util.Locale iLocale> >>>>>>>> org.joda.time.format.DateTimeParserBucket.getLocale : return $r1
org.joda.time.format.DateTimeParserBucket.getLocale : return $r1 >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.parseInto : $r5 = specialinvoke r0.<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>($r4)
org.joda.time.format.DateTimeFormat$StyleFormatter.parseInto : $r5 = specialinvoke r0.<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>($r4) >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : if r1 != null
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : if r1 != null >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $r6 = r1
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $r6 = r1 >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : r7 = $r6
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : r7 = $r6 >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $r8 = new java.lang.StringBuilder
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $r8 = new java.lang.StringBuilder >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $i0 = r0.<org.joda.time.format.DateTimeFormat$StyleFormatter: int iType>
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $i0 = r0.<org.joda.time.format.DateTimeFormat$StyleFormatter: int iType> >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $i1 = r0.<org.joda.time.format.DateTimeFormat$StyleFormatter: int iDateStyle>
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $i1 = r0.<org.joda.time.format.DateTimeFormat$StyleFormatter: int iDateStyle> >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $i2 = $i1 << 4
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $i2 = $i1 << 4 >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $i3 = $i0 + $i2
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $i3 = $i0 + $i2 >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $i4 = r0.<org.joda.time.format.DateTimeFormat$StyleFormatter: int iTimeStyle>
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $i4 = r0.<org.joda.time.format.DateTimeFormat$StyleFormatter: int iTimeStyle> >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $i5 = $i4 << 8
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $i5 = $i4 << 8 >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $i6 = $i3 + $i5
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $i6 = $i3 + $i5 >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $r9 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i6)
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $r9 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i6) >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9)
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9) >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $r11 = virtualinvoke r7.<java.util.Locale: java.lang.String toString()>()
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $r11 = virtualinvoke r7.<java.util.Locale: java.lang.String toString()>() >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11)
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11) >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : r2 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : r2 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : n0 = null
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : n0 = null >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $r13 = <org.joda.time.format.DateTimeFormat$StyleFormatter: java.util.Map cCache>
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $r13 = <org.joda.time.format.DateTimeFormat$StyleFormatter: java.util.Map cCache> >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : r3 = $r13
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : r3 = $r13 >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : entermonitor $r13
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : entermonitor $r13 >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $r14 = <org.joda.time.format.DateTimeFormat$StyleFormatter: java.util.Map cCache>
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $r14 = <org.joda.time.format.DateTimeFormat$StyleFormatter: java.util.Map cCache> >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $r15 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2)
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $r15 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : r16 = (org.joda.time.format.DateTimeFormatter) $r15
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : r16 = (org.joda.time.format.DateTimeFormatter) $r15 >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : if r16 != null
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : if r16 != null >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : exitmonitor r3
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : exitmonitor r3 >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : goto [?= return r16]
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : goto [?= return r16] >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : return r16
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : return r16 >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.parseInto : r3 = virtualinvoke $r5.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>()
org.joda.time.format.DateTimeFormat$StyleFormatter.parseInto : r3 = virtualinvoke $r5.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>() >>>>>>>> org.joda.time.format.DateTimeFormatter.getParser : $r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser iParser>
org.joda.time.format.DateTimeFormatter.getParser : $r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser iParser> >>>>>>>> org.joda.time.format.DateTimeFormatter.getParser : return $r1
org.joda.time.format.DateTimeFormatter.getParser : return $r1 >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.parseInto : $i1 = interfaceinvoke r3.<org.joda.time.format.DateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>(r1, r2, i0)
org.joda.time.format.DateTimeFormat$StyleFormatter.parseInto : $i1 = interfaceinvoke r3.<org.joda.time.format.DateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>(r1, r2, i0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimeParser[] iParsers>
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimeParser[] iParsers> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : if r3 != null
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : if r3 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : i1 = lengthof r3
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : i1 = lengthof r3 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : i2 = 0
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : i2 = 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : if i2 >= i1
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : if i2 >= i1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : if i0 < 0
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : if i0 < 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : $r5 = r3[i2]
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : $r5 = r3[i2] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : i0 = interfaceinvoke $r5.<org.joda.time.format.DateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>(r1, r2, i0)
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : i0 = interfaceinvoke $r5.<org.joda.time.format.DateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>(r1, r2, i0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : r3 = virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: java.util.Locale getLocale()>()
org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : r3 = virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: java.util.Locale getLocale()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : n0 = null
org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : n0 = null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : z0 = 0
org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : z0 = 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : $r11 = <org.joda.time.format.DateTimeFormatterBuilder$TextField: java.util.Map cParseCache>
org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : $r11 = <org.joda.time.format.DateTimeFormatterBuilder$TextField: java.util.Map cParseCache> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : r4 = $r11
org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : r4 = $r11 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : entermonitor $r11
org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : entermonitor $r11 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : $r12 = <org.joda.time.format.DateTimeFormatterBuilder$TextField: java.util.Map cParseCache>
org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : $r12 = <org.joda.time.format.DateTimeFormatterBuilder$TextField: java.util.Map cParseCache> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : $r13 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3)
org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : $r13 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : r5 = (java.util.Map) $r13
org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : r5 = (java.util.Map) $r13 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : if r5 != null
org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : if r5 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : $r17 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: org.joda.time.DateTimeFieldType iFieldType>
org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : $r17 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: org.joda.time.DateTimeFieldType iFieldType> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : $r18 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r17)
org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : $r18 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r17) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.hashCode : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.hashCode : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.hashCode : return $b0
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.hashCode : return $b0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : r6 = (java.lang.Object[]) $r18
org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : r6 = (java.lang.Object[]) $r18 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : if r6 != null
org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : if r6 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : $r43 = r6[0]
org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : $r43 = r6[0] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : r20 = (java.util.Set) $r43
org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : r20 = (java.util.Set) $r43 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : $r44 = r6[1]
org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : $r44 = r6[1] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : $r45 = (java.lang.Integer) $r44
org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : $r45 = (java.lang.Integer) $r44 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : i6 = virtualinvoke $r45.<java.lang.Integer: int intValue()>()
org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : i6 = virtualinvoke $r45.<java.lang.Integer: int intValue()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : exitmonitor r4
org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : exitmonitor r4 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : goto [?= $i7 = virtualinvoke r2.<java.lang.String: int length()>()]
org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : goto [?= $i7 = virtualinvoke r2.<java.lang.String: int length()>()] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : $i7 = virtualinvoke r2.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : $i7 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : $i8 = i0 + i6
org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : $i8 = i0 + i6 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : i9 = staticinvoke <java.lang.Math: int min(int,int)>($i7, $i8)
org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : i9 = staticinvoke <java.lang.Math: int min(int,int)>($i7, $i8) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : i10 = i9
org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : i10 = i9 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : if i10 <= i0
org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : if i10 <= i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : $i11 = i0 ^ -1
org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : $i11 = i0 ^ -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : return $i11
org.joda.time.format.DateTimeFormatterBuilder$TextField.parseInto : return $i11 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : i2 = i2 + 1
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : i2 = i2 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : return i0
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : return i0 >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.parseInto : return $i1
org.joda.time.format.DateTimeFormat$StyleFormatter.parseInto : return $i1 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : $l8 = virtualinvoke r5.<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.String)>(0, r2)
org.joda.time.format.DateTimeFormatter.parseInto : $l8 = virtualinvoke r5.<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.String)>(0, r2) >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : r2 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields>
org.joda.time.format.DateTimeParserBucket.computeMillis : r2 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields> >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : i0 = r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount>
org.joda.time.format.DateTimeParserBucket.computeMillis : i0 = r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount> >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $z1 = r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared>
org.joda.time.format.DateTimeParserBucket.computeMillis : $z1 = r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared> >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : if $z1 == 0
org.joda.time.format.DateTimeParserBucket.computeMillis : if $z1 == 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : staticinvoke <org.joda.time.format.DateTimeParserBucket: void sort(org.joda.time.format.DateTimeParserBucket$SavedField[],int)>(r2, i0)
org.joda.time.format.DateTimeParserBucket.computeMillis : staticinvoke <org.joda.time.format.DateTimeParserBucket: void sort(org.joda.time.format.DateTimeParserBucket$SavedField[],int)>(r2, i0) >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : if i0 <= 10
org.joda.time.format.DateTimeParserBucket.sort : if i0 <= 10 >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : i1 = 0
org.joda.time.format.DateTimeParserBucket.sort : i1 = 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : if i1 >= i0
org.joda.time.format.DateTimeParserBucket.sort : if i1 >= i0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : if i0 <= 0
org.joda.time.format.DateTimeParserBucket.computeMillis : if i0 <= 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : l5 = r0.<org.joda.time.format.DateTimeParserBucket: long iMillis>
org.joda.time.format.DateTimeParserBucket.computeMillis : l5 = r0.<org.joda.time.format.DateTimeParserBucket: long iMillis> >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : i6 = 0
org.joda.time.format.DateTimeParserBucket.computeMillis : i6 = 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : if i6 >= i0
org.joda.time.format.DateTimeParserBucket.computeMillis : if i6 >= i0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : if z0 == 0
org.joda.time.format.DateTimeParserBucket.computeMillis : if z0 == 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : goto [?= $r27 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>]
org.joda.time.format.DateTimeParserBucket.computeMillis : goto [?= $r27 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>] >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $r27 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>
org.joda.time.format.DateTimeParserBucket.computeMillis : $r27 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset> >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : if $r27 == null
org.joda.time.format.DateTimeParserBucket.computeMillis : if $r27 == null >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $r29 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeParserBucket.computeMillis : $r29 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : if $r29 == null
org.joda.time.format.DateTimeParserBucket.computeMillis : if $r29 == null >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $r30 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeParserBucket.computeMillis : $r30 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : i12 = virtualinvoke $r30.<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>(l5)
org.joda.time.format.DateTimeParserBucket.computeMillis : i12 = virtualinvoke $r30.<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>(l5) >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getOffsetFromLocal : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset>
org.joda.time.tz.FixedDateTimeZone.getOffsetFromLocal : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset> >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getOffsetFromLocal : return $i1
org.joda.time.tz.FixedDateTimeZone.getOffsetFromLocal : return $i1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $l13 = (long) i12
org.joda.time.format.DateTimeParserBucket.computeMillis : $l13 = (long) i12 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : l5 = l5 - $l13
org.joda.time.format.DateTimeParserBucket.computeMillis : l5 = l5 - $l13 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $r31 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeParserBucket.computeMillis : $r31 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $i14 = virtualinvoke $r31.<org.joda.time.DateTimeZone: int getOffset(long)>(l5)
org.joda.time.format.DateTimeParserBucket.computeMillis : $i14 = virtualinvoke $r31.<org.joda.time.DateTimeZone: int getOffset(long)>(l5) >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : if i12 == $i14
org.joda.time.format.DateTimeParserBucket.computeMillis : if i12 == $i14 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : return l5
org.joda.time.format.DateTimeParserBucket.computeMillis : return l5 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : interfaceinvoke r1.<org.joda.time.ReadWritableInstant: void setMillis(long)>($l8)
org.joda.time.format.DateTimeFormatter.parseInto : interfaceinvoke r1.<org.joda.time.ReadWritableInstant: void setMillis(long)>($l8) >>>>>>>> org.joda.time.MutableDateTime.setMillis : $i1 = r0.<org.joda.time.MutableDateTime: int iRoundingMode>
org.joda.time.MutableDateTime.setMillis : $i1 = r0.<org.joda.time.MutableDateTime: int iRoundingMode> >>>>>>>> org.joda.time.MutableDateTime.setMillis : tableswitch($i1) {     case 0:
org.joda.time.MutableDateTime.setMillis : tableswitch($i1) {     case 0: >>>>>>>> org.joda.time.MutableDateTime.setMillis : goto [?= specialinvoke r0.<org.joda.time.base.BaseDateTime: void setMillis(long)>(l0)]
org.joda.time.MutableDateTime.setMillis : goto [?= specialinvoke r0.<org.joda.time.base.BaseDateTime: void setMillis(long)>(l0)] >>>>>>>> org.joda.time.MutableDateTime.setMillis : specialinvoke r0.<org.joda.time.base.BaseDateTime: void setMillis(long)>(l0)
org.joda.time.MutableDateTime.setMillis : specialinvoke r0.<org.joda.time.base.BaseDateTime: void setMillis(long)>(l0) >>>>>>>> org.joda.time.base.BaseDateTime.setMillis : $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology>
org.joda.time.base.BaseDateTime.setMillis : $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.base.BaseDateTime.setMillis : $l1 = virtualinvoke r0.<org.joda.time.base.BaseDateTime: long checkInstant(long,org.joda.time.Chronology)>(l0, $r1)
org.joda.time.base.BaseDateTime.setMillis : $l1 = virtualinvoke r0.<org.joda.time.base.BaseDateTime: long checkInstant(long,org.joda.time.Chronology)>(l0, $r1) >>>>>>>> org.joda.time.base.BaseDateTime.setMillis : r0.<org.joda.time.base.BaseDateTime: long iMillis> = $l1
org.joda.time.base.BaseDateTime.setMillis : r0.<org.joda.time.base.BaseDateTime: long iMillis> = $l1 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : $z0 = r0.<org.joda.time.format.DateTimeFormatter: boolean iOffsetParsed>
org.joda.time.format.DateTimeFormatter.parseInto : $z0 = r0.<org.joda.time.format.DateTimeFormatter: boolean iOffsetParsed> >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : if $z0 == 0
org.joda.time.format.DateTimeFormatter.parseInto : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : $r15 = virtualinvoke r5.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone getZone()>()
org.joda.time.format.DateTimeFormatter.parseInto : $r15 = virtualinvoke r5.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.format.DateTimeParserBucket.getZone : $r1 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeParserBucket.getZone : $r1 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.format.DateTimeParserBucket.getZone : return $r1
org.joda.time.format.DateTimeParserBucket.getZone : return $r1 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : if $r15 == null
org.joda.time.format.DateTimeFormatter.parseInto : if $r15 == null >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : $r16 = virtualinvoke r5.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone getZone()>()
org.joda.time.format.DateTimeFormatter.parseInto : $r16 = virtualinvoke r5.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : r9 = virtualinvoke r9.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>($r16)
org.joda.time.format.DateTimeFormatter.parseInto : r9 = virtualinvoke r9.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>($r16) >>>>>>>> org.joda.time.chrono.ISOChronology.withZone : if r1 != null
org.joda.time.chrono.ISOChronology.withZone : if r1 != null >>>>>>>> org.joda.time.chrono.ISOChronology.withZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.ISOChronology.withZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.ISOChronology.withZone : if r1 != $r2
org.joda.time.chrono.ISOChronology.withZone : if r1 != $r2 >>>>>>>> org.joda.time.chrono.ISOChronology.withZone : return r0
org.joda.time.chrono.ISOChronology.withZone : return r0 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : interfaceinvoke r1.<org.joda.time.ReadWritableInstant: void setChronology(org.joda.time.Chronology)>(r9)
org.joda.time.format.DateTimeFormatter.parseInto : interfaceinvoke r1.<org.joda.time.ReadWritableInstant: void setChronology(org.joda.time.Chronology)>(r9) >>>>>>>> org.joda.time.MutableDateTime.setChronology : specialinvoke r0.<org.joda.time.base.BaseDateTime: void setChronology(org.joda.time.Chronology)>(r1)
org.joda.time.MutableDateTime.setChronology : specialinvoke r0.<org.joda.time.base.BaseDateTime: void setChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.base.BaseDateTime.setChronology : $r2 = virtualinvoke r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology checkChronology(org.joda.time.Chronology)>(r1)
org.joda.time.base.BaseDateTime.setChronology : $r2 = virtualinvoke r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology checkChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.base.BaseDateTime.setChronology : r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology> = $r2
org.joda.time.base.BaseDateTime.setChronology : r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology> = $r2 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : $r17 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeFormatter.parseInto : $r17 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : if $r17 == null
org.joda.time.format.DateTimeFormatter.parseInto : if $r17 == null >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : return i3
org.joda.time.format.DateTimeFormatter.parseInto : return i3 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.chrono.ISOChronology.getInstance : r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>() >>>>>>>> org.joda.time.DateMidnight.checkInstant : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.DateMidnight.checkInstant : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfMonth : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth>
org.joda.time.chrono.AssembledChronology.dayOfMonth : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth> >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfMonth : return $r1
org.joda.time.chrono.AssembledChronology.dayOfMonth : return $r1 >>>>>>>> org.joda.time.DateMidnight.checkInstant : $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long roundFloor(long)>(l0)
org.joda.time.DateMidnight.checkInstant : $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long roundFloor(long)>(l0) >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : if $b1 < 0
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : if $b1 < 0 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l3 = l0 % $l2
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l3 = l0 % $l2 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l4 = l0 - $l3
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l4 = l0 - $l3 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : return $l4
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : return $l4 >>>>>>>> org.joda.time.DateMidnight.checkInstant : return $l1
org.joda.time.DateMidnight.checkInstant : return $l1 >>>>>>>> org.joda.time.DateMidnight.plusDays : if i0 != 0
org.joda.time.DateMidnight.plusDays : if i0 != 0 >>>>>>>> org.joda.time.DateMidnight.plusDays : $r1 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>()
org.joda.time.DateMidnight.plusDays : $r1 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.DateMidnight.plusDays : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField days()>()
org.joda.time.DateMidnight.plusDays : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField days()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.days : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays>
org.joda.time.chrono.AssembledChronology.days : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays> >>>>>>>> org.joda.time.chrono.AssembledChronology.days : return $r1
org.joda.time.chrono.AssembledChronology.days : return $r1 >>>>>>>> org.joda.time.DateMidnight.plusDays : $l2 = virtualinvoke r0.<org.joda.time.DateMidnight: long getMillis()>()
org.joda.time.DateMidnight.plusDays : $l2 = virtualinvoke r0.<org.joda.time.DateMidnight: long getMillis()>() >>>>>>>> org.joda.time.DateMidnight.plusDays : l1 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>($l2, i0)
org.joda.time.DateMidnight.plusDays : l1 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>($l2, i0) >>>>>>>> org.joda.time.field.PreciseDurationField.add : $l3 = (long) i1
org.joda.time.field.PreciseDurationField.add : $l3 = (long) i1 >>>>>>>> org.joda.time.field.PreciseDurationField.add : $l4 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis>
org.joda.time.field.PreciseDurationField.add : $l4 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationField.add : l2 = $l3 * $l4
org.joda.time.field.PreciseDurationField.add : l2 = $l3 * $l4 >>>>>>>> org.joda.time.field.PreciseDurationField.add : $l5 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, l2)
org.joda.time.field.PreciseDurationField.add : $l5 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, l2) >>>>>>>> org.joda.time.field.PreciseDurationField.add : return $l5
org.joda.time.field.PreciseDurationField.add : return $l5 >>>>>>>> org.joda.time.DateMidnight.plusDays : $r3 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.DateMidnight withMillis(long)>(l1)
org.joda.time.DateMidnight.plusDays : $r3 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.DateMidnight withMillis(long)>(l1) >>>>>>>> org.joda.time.DateMidnight.withMillis : r1 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>()
org.joda.time.DateMidnight.withMillis : r1 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.DateMidnight.withMillis : l1 = virtualinvoke r0.<org.joda.time.DateMidnight: long checkInstant(long,org.joda.time.Chronology)>(l0, r1)
org.joda.time.DateMidnight.withMillis : l1 = virtualinvoke r0.<org.joda.time.DateMidnight: long checkInstant(long,org.joda.time.Chronology)>(l0, r1) >>>>>>>> org.joda.time.DateMidnight.withMillis : $l2 = virtualinvoke r0.<org.joda.time.DateMidnight: long getMillis()>()
org.joda.time.DateMidnight.withMillis : $l2 = virtualinvoke r0.<org.joda.time.DateMidnight: long getMillis()>() >>>>>>>> org.joda.time.DateMidnight.withMillis : $b3 = l1 cmp $l2
org.joda.time.DateMidnight.withMillis : $b3 = l1 cmp $l2 >>>>>>>> org.joda.time.DateMidnight.withMillis : if $b3 != 0
org.joda.time.DateMidnight.withMillis : if $b3 != 0 >>>>>>>> org.joda.time.DateMidnight.withMillis : $r2 = new org.joda.time.DateMidnight
org.joda.time.DateMidnight.withMillis : $r2 = new org.joda.time.DateMidnight >>>>>>>> org.joda.time.DateMidnight.withMillis : specialinvoke $r2.<org.joda.time.DateMidnight: void <init>(long,org.joda.time.Chronology)>(l1, r1)
org.joda.time.DateMidnight.withMillis : specialinvoke $r2.<org.joda.time.DateMidnight: void <init>(long,org.joda.time.Chronology)>(l1, r1) >>>>>>>> org.joda.time.DateMidnight.withMillis : return $r2
org.joda.time.DateMidnight.withMillis : return $r2 >>>>>>>> org.joda.time.DateMidnight.plusDays : return $r3
org.joda.time.DateMidnight.plusDays : return $r3 >>>>>>>> org.joda.time.MutablePeriod.setPeriod : if r1 != r2
org.joda.time.MutablePeriod.setPeriod : if r1 != r2 >>>>>>>> org.joda.time.MutablePeriod.setPeriod : l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r1)
org.joda.time.MutablePeriod.setPeriod : l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getInstantMillis : $l1 = interfaceinvoke r0.<org.joda.time.ReadableInstant: long getMillis()>()
org.joda.time.DateTimeUtils.getInstantMillis : $l1 = interfaceinvoke r0.<org.joda.time.ReadableInstant: long getMillis()>() >>>>>>>> org.joda.time.DateTimeUtils.getInstantMillis : return $l1
org.joda.time.DateTimeUtils.getInstantMillis : return $l1 >>>>>>>> org.joda.time.MutablePeriod.setPeriod : l1 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r2)
org.joda.time.MutablePeriod.setPeriod : l1 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r2) >>>>>>>> org.joda.time.MutablePeriod.setPeriod : r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getIntervalChronology(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>(r1, r2)
org.joda.time.MutablePeriod.setPeriod : r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getIntervalChronology(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>(r1, r2) >>>>>>>> org.joda.time.DateTimeUtils.getIntervalChronology : r2 = null
org.joda.time.DateTimeUtils.getIntervalChronology : r2 = null >>>>>>>> org.joda.time.DateTimeUtils.getIntervalChronology : if r0 == null
org.joda.time.DateTimeUtils.getIntervalChronology : if r0 == null >>>>>>>> org.joda.time.DateTimeUtils.getIntervalChronology : r2 = interfaceinvoke r0.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>()
org.joda.time.DateTimeUtils.getIntervalChronology : r2 = interfaceinvoke r0.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.DateTimeUtils.getIntervalChronology : goto [?= (branch)]
org.joda.time.DateTimeUtils.getIntervalChronology : goto [?= (branch)] >>>>>>>> org.joda.time.DateTimeUtils.getIntervalChronology : if r2 != null
org.joda.time.DateTimeUtils.getIntervalChronology : if r2 != null >>>>>>>> org.joda.time.DateTimeUtils.getIntervalChronology : return r2
org.joda.time.DateTimeUtils.getIntervalChronology : return r2 >>>>>>>> org.joda.time.MutablePeriod.setPeriod : virtualinvoke r0.<org.joda.time.MutablePeriod: void setPeriod(long,long,org.joda.time.Chronology)>(l0, l1, r3)
org.joda.time.MutablePeriod.setPeriod : virtualinvoke r0.<org.joda.time.MutablePeriod: void setPeriod(long,long,org.joda.time.Chronology)>(l0, l1, r3) >>>>>>>> org.joda.time.MutablePeriod.setPeriod : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.MutablePeriod.setPeriod : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.MutablePeriod.setPeriod : $r3 = virtualinvoke r2.<org.joda.time.Chronology: int[] get(org.joda.time.ReadablePeriod,long,long)>(r0, l0, l1)
org.joda.time.MutablePeriod.setPeriod : $r3 = virtualinvoke r2.<org.joda.time.Chronology: int[] get(org.joda.time.ReadablePeriod,long,long)>(r0, l0, l1) >>>>>>>> org.joda.time.chrono.BaseChronology.get : i3 = 0
org.joda.time.chrono.BaseChronology.get : i3 = 0 >>>>>>>> org.joda.time.chrono.BaseChronology.get : if i3 >= i2
org.joda.time.chrono.BaseChronology.get : if i3 >= i2 >>>>>>>> org.joda.time.chrono.BaseChronology.get : $r4 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i3)
org.joda.time.chrono.BaseChronology.get : $r4 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i3) >>>>>>>> org.joda.time.base.AbstractPeriod.getFieldType : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.base.AbstractPeriod.getFieldType : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.base.AbstractPeriod.getFieldType : $r2 = virtualinvoke $r1.<org.joda.time.PeriodType: org.joda.time.DurationFieldType getFieldType(int)>(i0)
org.joda.time.base.AbstractPeriod.getFieldType : $r2 = virtualinvoke $r1.<org.joda.time.PeriodType: org.joda.time.DurationFieldType getFieldType(int)>(i0) >>>>>>>> org.joda.time.PeriodType.getFieldType : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.getFieldType : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes> >>>>>>>> org.joda.time.PeriodType.getFieldType : $r2 = $r1[i0]
org.joda.time.PeriodType.getFieldType : $r2 = $r1[i0] >>>>>>>> org.joda.time.PeriodType.getFieldType : return $r2
org.joda.time.PeriodType.getFieldType : return $r2 >>>>>>>> org.joda.time.base.AbstractPeriod.getFieldType : return $r2
org.joda.time.base.AbstractPeriod.getFieldType : return $r2 >>>>>>>> org.joda.time.chrono.BaseChronology.get : r3 = virtualinvoke $r4.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>(r0)
org.joda.time.chrono.BaseChronology.get : r3 = virtualinvoke $r4.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>(r0) >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal>
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : tableswitch($b0) {     case 1:
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : tableswitch($b0) {     case 1: >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r6 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField years()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r6 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField years()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.years : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears>
org.joda.time.chrono.AssembledChronology.years : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears> >>>>>>>> org.joda.time.chrono.AssembledChronology.years : return $r1
org.joda.time.chrono.AssembledChronology.years : return $r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r6
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r6 >>>>>>>> org.joda.time.chrono.BaseChronology.get : i4 = virtualinvoke r3.<org.joda.time.DurationField: int getDifference(long,long)>(l1, l0)
org.joda.time.chrono.BaseChronology.get : i4 = virtualinvoke r3.<org.joda.time.DurationField: int getDifference(long,long)>(l1, l0) >>>>>>>> org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getDifference : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: org.joda.time.field.ImpreciseDateTimeField this$0>
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getDifference : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: org.joda.time.field.ImpreciseDateTimeField this$0> >>>>>>>> org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getDifference : $i2 = virtualinvoke $r1.<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>(l0, l1)
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getDifference : $i2 = virtualinvoke $r1.<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>(l0, l1) >>>>>>>> org.joda.time.field.ImpreciseDateTimeField.getDifference : $l2 = virtualinvoke r0.<org.joda.time.field.ImpreciseDateTimeField: long getDifferenceAsLong(long,long)>(l0, l1)
org.joda.time.field.ImpreciseDateTimeField.getDifference : $l2 = virtualinvoke r0.<org.joda.time.field.ImpreciseDateTimeField: long getDifferenceAsLong(long,long)>(l0, l1) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : $b2 = l0 cmp l1
org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : $b2 = l0 cmp l1 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : if $b2 >= 0
org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : if $b2 >= 0 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : $r2 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : $r2 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : $l5 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: long getYearDifference(long,long)>(l0, l1)
org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : $l5 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: long getYearDifference(long,long)>(l0, l1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicGJChronology.getYearDifference : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerYearDividedByTwo()>()
org.joda.time.chrono.BasicChronology.getYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerYearDividedByTwo()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getAverageMillisPerYearDividedByTwo : return 15778476000L
org.joda.time.chrono.GregorianChronology.getAverageMillisPerYearDividedByTwo : return 15778476000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l7 = l0 >> 1
org.joda.time.chrono.BasicChronology.getYear : $l7 = l0 >> 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getApproxMillisAtEpochDividedByTwo()>()
org.joda.time.chrono.BasicChronology.getYear : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getApproxMillisAtEpochDividedByTwo()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getApproxMillisAtEpochDividedByTwo : return 31083597720000L
org.joda.time.chrono.GregorianChronology.getApproxMillisAtEpochDividedByTwo : return 31083597720000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l2 = $l7 + $l8
org.joda.time.chrono.BasicChronology.getYear : l2 = $l7 + $l8 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b9 = l2 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : $b9 = l2 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b9 >= 0
org.joda.time.chrono.BasicChronology.getYear : if $b9 >= 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l11 = l2 / l1
org.joda.time.chrono.BasicChronology.getYear : $l11 = l2 / l1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : i3 = (int) $l11
org.joda.time.chrono.BasicChronology.getYear : i3 = (int) $l11 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i3)
org.joda.time.chrono.BasicChronology.getYear : l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i3) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearMillis : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $r2 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache>
org.joda.time.chrono.BasicChronology.getYearInfo : $r2 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $i1 = i0 & 1023
org.joda.time.chrono.BasicChronology.getYearInfo : $i1 = i0 & 1023 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r2[$i1]
org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r2[$i1] >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : if r1 == null
org.joda.time.chrono.BasicChronology.getYearInfo : if r1 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $i2 = r1.<org.joda.time.chrono.BasicChronology$YearInfo: int iYear>
org.joda.time.chrono.BasicChronology.getYearInfo : $i2 = r1.<org.joda.time.chrono.BasicChronology$YearInfo: int iYear> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : if $i2 == i0
org.joda.time.chrono.BasicChronology.getYearInfo : if $i2 == i0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : return r1
org.joda.time.chrono.BasicChronology.getYearInfo : return r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : $l1 = $r1.<org.joda.time.chrono.BasicChronology$YearInfo: long iFirstDayMillis>
org.joda.time.chrono.BasicChronology.getYearMillis : $l1 = $r1.<org.joda.time.chrono.BasicChronology$YearInfo: long iFirstDayMillis> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : return $l1
org.joda.time.chrono.BasicChronology.getYearMillis : return $l1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l5 = l0 - l4
org.joda.time.chrono.BasicChronology.getYear : l5 = l0 - l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b12 = l5 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : $b12 = l5 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b12 >= 0
org.joda.time.chrono.BasicChronology.getYear : if $b12 >= 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b13 = l5 cmp 31536000000L
org.joda.time.chrono.BasicChronology.getYear : $b13 = l5 cmp 31536000000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b13 < 0
org.joda.time.chrono.BasicChronology.getYear : if $b13 < 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : return i3
org.joda.time.chrono.BasicChronology.getYear : return i3 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : i3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getYear(long)>(l1)
org.joda.time.chrono.BasicGJChronology.getYearDifference : i3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getYear(long)>(l1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : $l7 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i2)
org.joda.time.chrono.BasicGJChronology.getYearDifference : $l7 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i2) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : l4 = l0 - $l7
org.joda.time.chrono.BasicGJChronology.getYearDifference : l4 = l0 - $l7 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i3)
org.joda.time.chrono.BasicGJChronology.getYearDifference : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i3) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : l5 = l1 - $l8
org.joda.time.chrono.BasicGJChronology.getYearDifference : l5 = l1 - $l8 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : $b9 = l5 cmp 5097600000L
org.joda.time.chrono.BasicGJChronology.getYearDifference : $b9 = l5 cmp 5097600000L >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : if $b9 < 0
org.joda.time.chrono.BasicGJChronology.getYearDifference : if $b9 < 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i3)
org.joda.time.chrono.BasicGJChronology.getYearDifference : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i3) >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : $i1 = i0 & 3
org.joda.time.chrono.GregorianChronology.isLeapYear : $i1 = i0 & 3 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : if $i1 != 0
org.joda.time.chrono.GregorianChronology.isLeapYear : if $i1 != 0 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : $z0 = 0
org.joda.time.chrono.GregorianChronology.isLeapYear : $z0 = 0 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : return $z0
org.joda.time.chrono.GregorianChronology.isLeapYear : return $z0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.getYearDifference : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : $b10 = l4 cmp 5097600000L
org.joda.time.chrono.BasicGJChronology.getYearDifference : $b10 = l4 cmp 5097600000L >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : if $b10 < 0
org.joda.time.chrono.BasicGJChronology.getYearDifference : if $b10 < 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : $z2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i2)
org.joda.time.chrono.BasicGJChronology.getYearDifference : $z2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i2) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : if $z2 == 0
org.joda.time.chrono.BasicGJChronology.getYearDifference : if $z2 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : i6 = i2 - i3
org.joda.time.chrono.BasicGJChronology.getYearDifference : i6 = i2 - i3 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : $b11 = l4 cmp l5
org.joda.time.chrono.BasicGJChronology.getYearDifference : $b11 = l4 cmp l5 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : if $b11 >= 0
org.joda.time.chrono.BasicGJChronology.getYearDifference : if $b11 >= 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : $l12 = (long) i6
org.joda.time.chrono.BasicGJChronology.getYearDifference : $l12 = (long) i6 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : return $l12
org.joda.time.chrono.BasicGJChronology.getYearDifference : return $l12 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : return $l5
org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : return $l5 >>>>>>>> org.joda.time.field.ImpreciseDateTimeField.getDifference : $i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l2)
org.joda.time.field.ImpreciseDateTimeField.getDifference : $i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l2) >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : $b1 = -2147483648L cmp l0
org.joda.time.field.FieldUtils.safeToInt : $b1 = -2147483648L cmp l0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : if $b1 > 0
org.joda.time.field.FieldUtils.safeToInt : if $b1 > 0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : $b2 = l0 cmp 2147483647L
org.joda.time.field.FieldUtils.safeToInt : $b2 = l0 cmp 2147483647L >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : if $b2 > 0
org.joda.time.field.FieldUtils.safeToInt : if $b2 > 0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : $i3 = (int) l0
org.joda.time.field.FieldUtils.safeToInt : $i3 = (int) l0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : return $i3
org.joda.time.field.FieldUtils.safeToInt : return $i3 >>>>>>>> org.joda.time.field.ImpreciseDateTimeField.getDifference : return $i3
org.joda.time.field.ImpreciseDateTimeField.getDifference : return $i3 >>>>>>>> org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getDifference : return $i2
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getDifference : return $i2 >>>>>>>> org.joda.time.chrono.BaseChronology.get : l0 = virtualinvoke r3.<org.joda.time.DurationField: long add(long,int)>(l0, i4)
org.joda.time.chrono.BaseChronology.get : l0 = virtualinvoke r3.<org.joda.time.DurationField: long add(long,int)>(l0, i4) >>>>>>>> org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.add : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: org.joda.time.field.ImpreciseDateTimeField this$0>
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.add : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: org.joda.time.field.ImpreciseDateTimeField this$0> >>>>>>>> org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.add : $l2 = virtualinvoke $r1.<org.joda.time.field.ImpreciseDateTimeField: long add(long,int)>(l0, i1)
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.add : $l2 = virtualinvoke $r1.<org.joda.time.field.ImpreciseDateTimeField: long add(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.add : if i1 != 0
org.joda.time.chrono.BasicYearDateTimeField.add : if i1 != 0 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.add : return l0
org.joda.time.chrono.BasicYearDateTimeField.add : return l0 >>>>>>>> org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.add : return $l2
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.add : return $l2 >>>>>>>> org.joda.time.chrono.BaseChronology.get : r2[i3] = i4
org.joda.time.chrono.BaseChronology.get : r2[i3] = i4 >>>>>>>> org.joda.time.chrono.BaseChronology.get : i3 = i3 + 1
org.joda.time.chrono.BaseChronology.get : i3 = i3 + 1 >>>>>>>> org.joda.time.chrono.BaseChronology.get : goto [?= (branch)]
org.joda.time.chrono.BaseChronology.get : goto [?= (branch)] >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r7 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField months()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r7 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField months()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.months : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths>
org.joda.time.chrono.AssembledChronology.months : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths> >>>>>>>> org.joda.time.chrono.AssembledChronology.months : return $r1
org.joda.time.chrono.AssembledChronology.months : return $r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r7
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r7 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $b10 = l0 cmp l1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $b10 = l0 cmp l1 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : if $b10 >= 0
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : if $b10 >= 0 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i3 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i2)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i3 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i2) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i1)
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l4 = l0 - $l3
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l4 = l0 - $l3 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l5 = $l4 >> 10
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l5 = $l4 >> 10 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : i2 = (int) $l5
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : i2 = (int) $l5 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1)
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 15271875
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 15271875 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 7593750
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 7593750 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 10125000
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 10125000 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 12740625
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 12740625 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 6
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 6 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : goto [?= return $b6]
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : goto [?= return $b6] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : return $b6
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : return $b6 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i4 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l1)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i4 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l1) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i5 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l1, i4)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i5 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l1, i4) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $i14 = i2 - i4
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $i14 = i2 - i4 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l15 = (long) $i14
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l15 = (long) $i14 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $i16 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $i16 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l17 = (long) $i16
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l17 = (long) $i16 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l18 = $l15 * $l17
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l18 = $l15 * $l17 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l19 = (long) i3
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l19 = (long) i3 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l20 = $l18 + $l19
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l20 = $l18 + $l19 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l21 = (long) i5
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l21 = (long) i5 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : l6 = $l20 - $l21
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : l6 = $l20 - $l21 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i7 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i2, i3)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i7 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i2, i3) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1)
org.joda.time.chrono.BasicChronology.getDayOfMonth : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i1, i2)
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i1, i2) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0)
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: long[] MIN_TOTAL_MILLIS_BY_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: long[] MIN_TOTAL_MILLIS_BY_MONTH_ARRAY> >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $i4 = i1 - 1
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $i4 = i1 - 1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $l5 = $r2[$i4]
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $l5 = $r2[$i4] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : return $l5
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : return $l5 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : l5 = l3 + $l4
org.joda.time.chrono.BasicChronology.getDayOfMonth : l5 = l3 + $l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $l6 = l0 - l5
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l6 = l0 - l5 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $l7 = $l6 / 86400000L
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l7 = $l6 / 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $i8 = (int) $l7
org.joda.time.chrono.BasicChronology.getDayOfMonth : $i8 = (int) $l7 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $i9 = $i8 + 1
org.joda.time.chrono.BasicChronology.getDayOfMonth : $i9 = $i8 + 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i9
org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i9 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r6 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r6 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $i22 = virtualinvoke $r6.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i2, i3)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $i22 = virtualinvoke $r6.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i2, i3) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0)
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: int[] MIN_DAYS_PER_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: int[] MIN_DAYS_PER_MONTH_ARRAY> >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i4 = i1 - 1
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i4 = i1 - 1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i5 = $r2[$i4]
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i5 = $r2[$i4] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : return $i5
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : return $i5 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : if i7 != $i22
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : if i7 != $i22 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r7 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r7 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i8 = virtualinvoke $r7.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l1, i4, i5)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i8 = virtualinvoke $r7.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l1, i4, i5) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : if i8 <= i7
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : if i8 <= i7 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r10 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r10 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l23 = virtualinvoke $r10.<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>(i2, i3)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l23 = virtualinvoke $r10.<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>(i2, i3) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthMillis : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearMonthMillis : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthMillis : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1)
org.joda.time.chrono.BasicChronology.getYearMonthMillis : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthMillis : l4 = l2 + $l3
org.joda.time.chrono.BasicChronology.getYearMonthMillis : l4 = l2 + $l3 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthMillis : return l4
org.joda.time.chrono.BasicChronology.getYearMonthMillis : return l4 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : l24 = l0 - $l23
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : l24 = l0 - $l23 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r11 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r11 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l25 = virtualinvoke $r11.<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>(i4, i5)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l25 = virtualinvoke $r11.<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>(i4, i5) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : l9 = l1 - $l25
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : l9 = l1 - $l25 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $b26 = l24 cmp l9
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $b26 = l24 cmp l9 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : if $b26 >= 0
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : if $b26 >= 0 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : return l6
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : return l6 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : if i1 != 0
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : if i1 != 0 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : return l0
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : return l0 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r8 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField weeks()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r8 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField weeks()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.weeks : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks>
org.joda.time.chrono.AssembledChronology.weeks : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks> >>>>>>>> org.joda.time.chrono.AssembledChronology.weeks : return $r1
org.joda.time.chrono.AssembledChronology.weeks : return $r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r8
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r8 >>>>>>>> org.joda.time.field.BaseDurationField.getDifference : $l2 = virtualinvoke r0.<org.joda.time.field.BaseDurationField: long getDifferenceAsLong(long,long)>(l0, l1)
org.joda.time.field.BaseDurationField.getDifference : $l2 = virtualinvoke r0.<org.joda.time.field.BaseDurationField: long getDifferenceAsLong(long,long)>(l0, l1) >>>>>>>> org.joda.time.field.PreciseDurationField.getDifferenceAsLong : l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeSubtract(long,long)>(l0, l1)
org.joda.time.field.PreciseDurationField.getDifferenceAsLong : l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeSubtract(long,long)>(l0, l1) >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : l2 = l0 - l1
org.joda.time.field.FieldUtils.safeSubtract : l2 = l0 - l1 >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : $l3 = l0 ^ l2
org.joda.time.field.FieldUtils.safeSubtract : $l3 = l0 ^ l2 >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : $b4 = $l3 cmp 0L
org.joda.time.field.FieldUtils.safeSubtract : $b4 = $l3 cmp 0L >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : if $b4 >= 0
org.joda.time.field.FieldUtils.safeSubtract : if $b4 >= 0 >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : return l2
org.joda.time.field.FieldUtils.safeSubtract : return l2 >>>>>>>> org.joda.time.field.PreciseDurationField.getDifferenceAsLong : $l3 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis>
org.joda.time.field.PreciseDurationField.getDifferenceAsLong : $l3 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationField.getDifferenceAsLong : $l4 = l2 / $l3
org.joda.time.field.PreciseDurationField.getDifferenceAsLong : $l4 = l2 / $l3 >>>>>>>> org.joda.time.field.PreciseDurationField.getDifferenceAsLong : return $l4
org.joda.time.field.PreciseDurationField.getDifferenceAsLong : return $l4 >>>>>>>> org.joda.time.field.BaseDurationField.getDifference : $i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l2)
org.joda.time.field.BaseDurationField.getDifference : $i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l2) >>>>>>>> org.joda.time.field.BaseDurationField.getDifference : return $i3
org.joda.time.field.BaseDurationField.getDifference : return $i3 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField days()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField days()>() >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r9
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r9 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r11 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField hours()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r11 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField hours()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.hours : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours>
org.joda.time.chrono.AssembledChronology.hours : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours> >>>>>>>> org.joda.time.chrono.AssembledChronology.hours : return $r1
org.joda.time.chrono.AssembledChronology.hours : return $r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r11
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r11 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r12 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField minutes()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r12 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField minutes()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.minutes : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes>
org.joda.time.chrono.AssembledChronology.minutes : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes> >>>>>>>> org.joda.time.chrono.AssembledChronology.minutes : return $r1
org.joda.time.chrono.AssembledChronology.minutes : return $r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r12
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r12 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r13 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField seconds()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r13 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField seconds()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.seconds : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iSeconds>
org.joda.time.chrono.AssembledChronology.seconds : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iSeconds> >>>>>>>> org.joda.time.chrono.AssembledChronology.seconds : return $r1
org.joda.time.chrono.AssembledChronology.seconds : return $r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r13
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r13 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r14 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField millis()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r14 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField millis()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.millis : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMillis>
org.joda.time.chrono.AssembledChronology.millis : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMillis> >>>>>>>> org.joda.time.chrono.AssembledChronology.millis : return $r1
org.joda.time.chrono.AssembledChronology.millis : return $r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r14
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r14 >>>>>>>> org.joda.time.field.MillisDurationField.getDifference : $l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeSubtract(long,long)>(l0, l1)
org.joda.time.field.MillisDurationField.getDifference : $l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeSubtract(long,long)>(l0, l1) >>>>>>>> org.joda.time.field.MillisDurationField.getDifference : $i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l2)
org.joda.time.field.MillisDurationField.getDifference : $i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l2) >>>>>>>> org.joda.time.field.MillisDurationField.getDifference : return $i3
org.joda.time.field.MillisDurationField.getDifference : return $i3 >>>>>>>> org.joda.time.field.MillisDurationField.add : $l2 = (long) i1
org.joda.time.field.MillisDurationField.add : $l2 = (long) i1 >>>>>>>> org.joda.time.field.MillisDurationField.add : $l3 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, $l2)
org.joda.time.field.MillisDurationField.add : $l3 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, $l2) >>>>>>>> org.joda.time.field.MillisDurationField.add : return $l3
org.joda.time.field.MillisDurationField.add : return $l3 >>>>>>>> org.joda.time.MutablePeriod.setPeriod : virtualinvoke r0.<org.joda.time.MutablePeriod: void setValues(int[])>($r3)
org.joda.time.MutablePeriod.setPeriod : virtualinvoke r0.<org.joda.time.MutablePeriod: void setValues(int[])>($r3) >>>>>>>> org.joda.time.base.BasePeriod.setValues : $r2 = r0.<org.joda.time.base.BasePeriod: int[] iValues>
org.joda.time.base.BasePeriod.setValues : $r2 = r0.<org.joda.time.base.BasePeriod: int[] iValues> >>>>>>>> org.joda.time.base.BasePeriod.setValues : $r3 = r0.<org.joda.time.base.BasePeriod: int[] iValues>
org.joda.time.base.BasePeriod.setValues : $r3 = r0.<org.joda.time.base.BasePeriod: int[] iValues> >>>>>>>> org.joda.time.base.BasePeriod.setValues : $i0 = lengthof $r3
org.joda.time.base.BasePeriod.setValues : $i0 = lengthof $r3 >>>>>>>> org.joda.time.base.BasePeriod.setValues : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r2, 0, $i0)
org.joda.time.base.BasePeriod.setValues : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r2, 0, $i0) >>>>>>>> org.joda.time.chrono.CopticChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>(r0, 4)
org.joda.time.chrono.CopticChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>(r0, 4) >>>>>>>> org.joda.time.chrono.CopticChronology.getInstance : if r0 != null
org.joda.time.chrono.CopticChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.CopticChronology.getInstance : r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.chrono.CopticChronology.getInstance : r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>() >>>>>>>> org.joda.time.chrono.CopticChronology.getInstance : $r6 = <org.joda.time.chrono.CopticChronology: java.util.Map cCache>
org.joda.time.chrono.CopticChronology.getInstance : $r6 = <org.joda.time.chrono.CopticChronology: java.util.Map cCache> >>>>>>>> org.joda.time.chrono.CopticChronology.getInstance : r1 = $r6
org.joda.time.chrono.CopticChronology.getInstance : r1 = $r6 >>>>>>>> org.joda.time.chrono.CopticChronology.getInstance : entermonitor $r6
org.joda.time.chrono.CopticChronology.getInstance : entermonitor $r6 >>>>>>>> org.joda.time.chrono.CopticChronology.getInstance : $r7 = <org.joda.time.chrono.CopticChronology: java.util.Map cCache>
org.joda.time.chrono.CopticChronology.getInstance : $r7 = <org.joda.time.chrono.CopticChronology: java.util.Map cCache> >>>>>>>> org.joda.time.chrono.CopticChronology.getInstance : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
org.joda.time.chrono.CopticChronology.getInstance : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $r1 = virtualinvoke r0.<org.joda.time.tz.FixedDateTimeZone: java.lang.String getID()>()
org.joda.time.tz.FixedDateTimeZone.hashCode : $r1 = virtualinvoke r0.<org.joda.time.tz.FixedDateTimeZone: java.lang.String getID()>() >>>>>>>> org.joda.time.DateTimeZone.getID : $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>
org.joda.time.DateTimeZone.getID : $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID> >>>>>>>> org.joda.time.DateTimeZone.getID : return $r1
org.joda.time.DateTimeZone.getID : return $r1 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>()
org.joda.time.tz.FixedDateTimeZone.hashCode : $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>() >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iStandardOffset>
org.joda.time.tz.FixedDateTimeZone.hashCode : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iStandardOffset> >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i2 = 37 * $i1
org.joda.time.tz.FixedDateTimeZone.hashCode : $i2 = 37 * $i1 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i3 = $i0 + $i2
org.joda.time.tz.FixedDateTimeZone.hashCode : $i3 = $i0 + $i2 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i4 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset>
org.joda.time.tz.FixedDateTimeZone.hashCode : $i4 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset> >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i5 = 31 * $i4
org.joda.time.tz.FixedDateTimeZone.hashCode : $i5 = 31 * $i4 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i6 = $i3 + $i5
org.joda.time.tz.FixedDateTimeZone.hashCode : $i6 = $i3 + $i5 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : return $i6
org.joda.time.tz.FixedDateTimeZone.hashCode : return $i6 >>>>>>>> org.joda.time.chrono.CopticChronology.getInstance : r2 = (org.joda.time.chrono.CopticChronology[]) $r8
org.joda.time.chrono.CopticChronology.getInstance : r2 = (org.joda.time.chrono.CopticChronology[]) $r8 >>>>>>>> org.joda.time.chrono.CopticChronology.getInstance : if r2 != null
org.joda.time.chrono.CopticChronology.getInstance : if r2 != null >>>>>>>> org.joda.time.chrono.CopticChronology.getInstance : $i1 = i0 - 1
org.joda.time.chrono.CopticChronology.getInstance : $i1 = i0 - 1 >>>>>>>> org.joda.time.chrono.CopticChronology.getInstance : r3 = r2[$i1]
org.joda.time.chrono.CopticChronology.getInstance : r3 = r2[$i1] >>>>>>>> org.joda.time.chrono.CopticChronology.getInstance : goto [?= (branch)]
org.joda.time.chrono.CopticChronology.getInstance : goto [?= (branch)] >>>>>>>> org.joda.time.chrono.CopticChronology.getInstance : if r3 != null
org.joda.time.chrono.CopticChronology.getInstance : if r3 != null >>>>>>>> org.joda.time.chrono.CopticChronology.getInstance : exitmonitor r1
org.joda.time.chrono.CopticChronology.getInstance : exitmonitor r1 >>>>>>>> org.joda.time.chrono.CopticChronology.getInstance : goto [?= return r3]
org.joda.time.chrono.CopticChronology.getInstance : goto [?= return r3] >>>>>>>> org.joda.time.chrono.CopticChronology.getInstance : return r3
org.joda.time.chrono.CopticChronology.getInstance : return r3 >>>>>>>> org.joda.time.chrono.CopticChronology.getInstance : return $r1
org.joda.time.chrono.CopticChronology.getInstance : return $r1 >>>>>>>> org.joda.time.chrono.CopticChronology.toString : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: java.lang.String toString()>()
org.joda.time.chrono.CopticChronology.toString : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: java.lang.String toString()>() >>>>>>>> org.joda.time.chrono.BasicChronology.toString : $r1 = new java.lang.StringBuffer
org.joda.time.chrono.BasicChronology.toString : $r1 = new java.lang.StringBuffer >>>>>>>> org.joda.time.chrono.BasicChronology.toString : specialinvoke $r1.<java.lang.StringBuffer: void <init>(int)>(60)
org.joda.time.chrono.BasicChronology.toString : specialinvoke $r1.<java.lang.StringBuffer: void <init>(int)>(60) >>>>>>>> org.joda.time.chrono.BasicChronology.toString : r2 = $r1
org.joda.time.chrono.BasicChronology.toString : r2 = $r1 >>>>>>>> org.joda.time.chrono.BasicChronology.toString : $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()
org.joda.time.chrono.BasicChronology.toString : $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.joda.time.chrono.BasicChronology.toString : r3 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>()
org.joda.time.chrono.BasicChronology.toString : r3 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>() >>>>>>>> org.joda.time.chrono.BasicChronology.toString : i0 = virtualinvoke r3.<java.lang.String: int lastIndexOf(int)>(46)
org.joda.time.chrono.BasicChronology.toString : i0 = virtualinvoke r3.<java.lang.String: int lastIndexOf(int)>(46) >>>>>>>> org.joda.time.chrono.BasicChronology.toString : if i0 < 0
org.joda.time.chrono.BasicChronology.toString : if i0 < 0 >>>>>>>> org.joda.time.chrono.BasicChronology.toString : $i1 = i0 + 1
org.joda.time.chrono.BasicChronology.toString : $i1 = i0 + 1 >>>>>>>> org.joda.time.chrono.BasicChronology.toString : r3 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>($i1)
org.joda.time.chrono.BasicChronology.toString : r3 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>($i1) >>>>>>>> org.joda.time.chrono.BasicChronology.toString : virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3)
org.joda.time.chrono.BasicChronology.toString : virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3) >>>>>>>> org.joda.time.chrono.BasicChronology.toString : virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91)
org.joda.time.chrono.BasicChronology.toString : virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91) >>>>>>>> org.joda.time.chrono.BasicChronology.toString : r4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.BasicChronology.toString : r4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.CopticChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.CopticChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.BasicChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.CopticChronology.getZone : return $r1
org.joda.time.chrono.CopticChronology.getZone : return $r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : return $r3
org.joda.time.chrono.BasicChronology.getZone : return $r3 >>>>>>>> org.joda.time.chrono.BasicChronology.toString : if r4 == null
org.joda.time.chrono.BasicChronology.toString : if r4 == null >>>>>>>> org.joda.time.chrono.BasicChronology.toString : $r8 = virtualinvoke r4.<org.joda.time.DateTimeZone: java.lang.String getID()>()
org.joda.time.chrono.BasicChronology.toString : $r8 = virtualinvoke r4.<org.joda.time.DateTimeZone: java.lang.String getID()>() >>>>>>>> org.joda.time.chrono.BasicChronology.toString : virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8)
org.joda.time.chrono.BasicChronology.toString : virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8) >>>>>>>> org.joda.time.chrono.BasicChronology.toString : $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMinimumDaysInFirstWeek()>()
org.joda.time.chrono.BasicChronology.toString : $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMinimumDaysInFirstWeek()>() >>>>>>>> org.joda.time.chrono.CopticChronology.getMinimumDaysInFirstWeek : $i0 = specialinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: int getMinimumDaysInFirstWeek()>()
org.joda.time.chrono.CopticChronology.getMinimumDaysInFirstWeek : $i0 = specialinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: int getMinimumDaysInFirstWeek()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getMinimumDaysInFirstWeek : $i0 = r0.<org.joda.time.chrono.BasicChronology: int iMinDaysInFirstWeek>
org.joda.time.chrono.BasicChronology.getMinimumDaysInFirstWeek : $i0 = r0.<org.joda.time.chrono.BasicChronology: int iMinDaysInFirstWeek> >>>>>>>> org.joda.time.chrono.BasicChronology.getMinimumDaysInFirstWeek : return $i0
org.joda.time.chrono.BasicChronology.getMinimumDaysInFirstWeek : return $i0 >>>>>>>> org.joda.time.chrono.CopticChronology.getMinimumDaysInFirstWeek : return $i0
org.joda.time.chrono.CopticChronology.getMinimumDaysInFirstWeek : return $i0 >>>>>>>> org.joda.time.chrono.BasicChronology.toString : if $i2 == 4
org.joda.time.chrono.BasicChronology.toString : if $i2 == 4 >>>>>>>> org.joda.time.chrono.BasicChronology.toString : virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93)
org.joda.time.chrono.BasicChronology.toString : virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93) >>>>>>>> org.joda.time.chrono.BasicChronology.toString : $r13 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>()
org.joda.time.chrono.BasicChronology.toString : $r13 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> org.joda.time.chrono.BasicChronology.toString : return $r13
org.joda.time.chrono.BasicChronology.toString : return $r13 >>>>>>>> org.joda.time.chrono.CopticChronology.toString : return $r1
org.joda.time.chrono.CopticChronology.toString : return $r1 >>>>>>>> org.joda.time.MutablePeriod.setPeriod : $r3 = virtualinvoke r2.<org.joda.time.Chronology: int[] get(org.joda.time.ReadablePeriod,long)>(r0, l0)
org.joda.time.MutablePeriod.setPeriod : $r3 = virtualinvoke r2.<org.joda.time.Chronology: int[] get(org.joda.time.ReadablePeriod,long)>(r0, l0) >>>>>>>> org.joda.time.chrono.BaseChronology.get : i1 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>()
org.joda.time.chrono.BaseChronology.get : i1 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>() >>>>>>>> org.joda.time.chrono.BaseChronology.get : r2 = newarray (int)[i1]
org.joda.time.chrono.BaseChronology.get : r2 = newarray (int)[i1] >>>>>>>> org.joda.time.chrono.BaseChronology.get : $b5 = l0 cmp 0L
org.joda.time.chrono.BaseChronology.get : $b5 = l0 cmp 0L >>>>>>>> org.joda.time.base.BaseDuration.toPeriod : $r2 = new org.joda.time.Period
org.joda.time.base.BaseDuration.toPeriod : $r2 = new org.joda.time.Period >>>>>>>> org.joda.time.base.BaseDuration.toPeriod : $l0 = virtualinvoke r0.<org.joda.time.base.BaseDuration: long getMillis()>()
org.joda.time.base.BaseDuration.toPeriod : $l0 = virtualinvoke r0.<org.joda.time.base.BaseDuration: long getMillis()>() >>>>>>>> org.joda.time.base.BaseDuration.getMillis : $l0 = r0.<org.joda.time.base.BaseDuration: long iMillis>
org.joda.time.base.BaseDuration.getMillis : $l0 = r0.<org.joda.time.base.BaseDuration: long iMillis> >>>>>>>> org.joda.time.base.BaseDuration.getMillis : return $l0
org.joda.time.base.BaseDuration.getMillis : return $l0 >>>>>>>> org.joda.time.base.BaseDuration.toPeriod : specialinvoke $r2.<org.joda.time.Period: void <init>(long,org.joda.time.Chronology)>($l0, r1)
org.joda.time.base.BaseDuration.toPeriod : specialinvoke $r2.<org.joda.time.Period: void <init>(long,org.joda.time.Chronology)>($l0, r1) >>>>>>>> org.joda.time.chrono.BaseChronology.get : l2 = 0L
org.joda.time.chrono.BaseChronology.get : l2 = 0L >>>>>>>> org.joda.time.chrono.BaseChronology.get : if i3 >= i1
org.joda.time.chrono.BaseChronology.get : if i3 >= i1 >>>>>>>> org.joda.time.chrono.BaseChronology.get : $z0 = virtualinvoke r3.<org.joda.time.DurationField: boolean isPrecise()>()
org.joda.time.chrono.BaseChronology.get : $z0 = virtualinvoke r3.<org.joda.time.DurationField: boolean isPrecise()>() >>>>>>>> org.joda.time.field.DecoratedDurationField.isPrecise : $r1 = r0.<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField iField>
org.joda.time.field.DecoratedDurationField.isPrecise : $r1 = r0.<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField iField> >>>>>>>> org.joda.time.field.DecoratedDurationField.isPrecise : $z0 = virtualinvoke $r1.<org.joda.time.DurationField: boolean isPrecise()>()
org.joda.time.field.DecoratedDurationField.isPrecise : $z0 = virtualinvoke $r1.<org.joda.time.DurationField: boolean isPrecise()>() >>>>>>>> org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.isPrecise : return 0
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.isPrecise : return 0 >>>>>>>> org.joda.time.field.DecoratedDurationField.isPrecise : return $z0
org.joda.time.field.DecoratedDurationField.isPrecise : return $z0 >>>>>>>> org.joda.time.chrono.BaseChronology.get : if $z0 == 0
org.joda.time.chrono.BaseChronology.get : if $z0 == 0 >>>>>>>> org.joda.time.field.PreciseDurationField.isPrecise : return 1
org.joda.time.field.PreciseDurationField.isPrecise : return 1 >>>>>>>> org.joda.time.chrono.BaseChronology.get : i4 = virtualinvoke r3.<org.joda.time.DurationField: int getDifference(long,long)>(l0, l2)
org.joda.time.chrono.BaseChronology.get : i4 = virtualinvoke r3.<org.joda.time.DurationField: int getDifference(long,long)>(l0, l2) >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDurationField.getDifference : $r1 = r0.<org.joda.time.chrono.LimitChronology$LimitDurationField: org.joda.time.chrono.LimitChronology this$0>
org.joda.time.chrono.LimitChronology$LimitDurationField.getDifference : $r1 = r0.<org.joda.time.chrono.LimitChronology$LimitDurationField: org.joda.time.chrono.LimitChronology this$0> >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDurationField.getDifference : virtualinvoke $r1.<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>(l0, "minuend")
org.joda.time.chrono.LimitChronology$LimitDurationField.getDifference : virtualinvoke $r1.<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>(l0, "minuend") >>>>>>>> org.joda.time.chrono.LimitChronology.checkLimits : $r3 = r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime iLowerLimit>
org.joda.time.chrono.LimitChronology.checkLimits : $r3 = r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime iLowerLimit> >>>>>>>> org.joda.time.chrono.LimitChronology.checkLimits : r2 = $r3
org.joda.time.chrono.LimitChronology.checkLimits : r2 = $r3 >>>>>>>> org.joda.time.chrono.LimitChronology.checkLimits : if $r3 == null
org.joda.time.chrono.LimitChronology.checkLimits : if $r3 == null >>>>>>>> org.joda.time.chrono.LimitChronology.checkLimits : $l1 = virtualinvoke r2.<org.joda.time.DateTime: long getMillis()>()
org.joda.time.chrono.LimitChronology.checkLimits : $l1 = virtualinvoke r2.<org.joda.time.DateTime: long getMillis()>() >>>>>>>> org.joda.time.chrono.LimitChronology.checkLimits : $b2 = l0 cmp $l1
org.joda.time.chrono.LimitChronology.checkLimits : $b2 = l0 cmp $l1 >>>>>>>> org.joda.time.chrono.LimitChronology.checkLimits : if $b2 >= 0
org.joda.time.chrono.LimitChronology.checkLimits : if $b2 >= 0 >>>>>>>> org.joda.time.chrono.LimitChronology.checkLimits : $r5 = r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime iUpperLimit>
org.joda.time.chrono.LimitChronology.checkLimits : $r5 = r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime iUpperLimit> >>>>>>>> org.joda.time.chrono.LimitChronology.checkLimits : r6 = $r5
org.joda.time.chrono.LimitChronology.checkLimits : r6 = $r5 >>>>>>>> org.joda.time.chrono.LimitChronology.checkLimits : if $r5 == null
org.joda.time.chrono.LimitChronology.checkLimits : if $r5 == null >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDurationField.getDifference : $r2 = r0.<org.joda.time.chrono.LimitChronology$LimitDurationField: org.joda.time.chrono.LimitChronology this$0>
org.joda.time.chrono.LimitChronology$LimitDurationField.getDifference : $r2 = r0.<org.joda.time.chrono.LimitChronology$LimitDurationField: org.joda.time.chrono.LimitChronology this$0> >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDurationField.getDifference : virtualinvoke $r2.<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>(l1, "subtrahend")
org.joda.time.chrono.LimitChronology$LimitDurationField.getDifference : virtualinvoke $r2.<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>(l1, "subtrahend") >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDurationField.getDifference : $r3 = virtualinvoke r0.<org.joda.time.chrono.LimitChronology$LimitDurationField: org.joda.time.DurationField getWrappedField()>()
org.joda.time.chrono.LimitChronology$LimitDurationField.getDifference : $r3 = virtualinvoke r0.<org.joda.time.chrono.LimitChronology$LimitDurationField: org.joda.time.DurationField getWrappedField()>() >>>>>>>> org.joda.time.field.DecoratedDurationField.getWrappedField : $r1 = r0.<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField iField>
org.joda.time.field.DecoratedDurationField.getWrappedField : $r1 = r0.<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField iField> >>>>>>>> org.joda.time.field.DecoratedDurationField.getWrappedField : return $r1
org.joda.time.field.DecoratedDurationField.getWrappedField : return $r1 >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDurationField.getDifference : $i2 = virtualinvoke $r3.<org.joda.time.DurationField: int getDifference(long,long)>(l0, l1)
org.joda.time.chrono.LimitChronology$LimitDurationField.getDifference : $i2 = virtualinvoke $r3.<org.joda.time.DurationField: int getDifference(long,long)>(l0, l1) >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDurationField.getDifference : return $i2
org.joda.time.chrono.LimitChronology$LimitDurationField.getDifference : return $i2 >>>>>>>> org.joda.time.chrono.BaseChronology.get : l2 = virtualinvoke r3.<org.joda.time.DurationField: long add(long,int)>(l2, i4)
org.joda.time.chrono.BaseChronology.get : l2 = virtualinvoke r3.<org.joda.time.DurationField: long add(long,int)>(l2, i4) >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDurationField.add : $r1 = r0.<org.joda.time.chrono.LimitChronology$LimitDurationField: org.joda.time.chrono.LimitChronology this$0>
org.joda.time.chrono.LimitChronology$LimitDurationField.add : $r1 = r0.<org.joda.time.chrono.LimitChronology$LimitDurationField: org.joda.time.chrono.LimitChronology this$0> >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDurationField.add : virtualinvoke $r1.<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>(l0, null)
org.joda.time.chrono.LimitChronology$LimitDurationField.add : virtualinvoke $r1.<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>(l0, null) >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDurationField.add : $r2 = virtualinvoke r0.<org.joda.time.chrono.LimitChronology$LimitDurationField: org.joda.time.DurationField getWrappedField()>()
org.joda.time.chrono.LimitChronology$LimitDurationField.add : $r2 = virtualinvoke r0.<org.joda.time.chrono.LimitChronology$LimitDurationField: org.joda.time.DurationField getWrappedField()>() >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDurationField.add : l2 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>(l0, i1)
org.joda.time.chrono.LimitChronology$LimitDurationField.add : l2 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDurationField.add : $r3 = r0.<org.joda.time.chrono.LimitChronology$LimitDurationField: org.joda.time.chrono.LimitChronology this$0>
org.joda.time.chrono.LimitChronology$LimitDurationField.add : $r3 = r0.<org.joda.time.chrono.LimitChronology$LimitDurationField: org.joda.time.chrono.LimitChronology this$0> >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDurationField.add : virtualinvoke $r3.<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>(l2, "resulting")
org.joda.time.chrono.LimitChronology$LimitDurationField.add : virtualinvoke $r3.<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>(l2, "resulting") >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDurationField.add : return l2
org.joda.time.chrono.LimitChronology$LimitDurationField.add : return l2 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $l5 = l0 ^ l1
org.joda.time.field.FieldUtils.safeAdd : $l5 = l0 ^ l1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $b6 = $l5 cmp 0L
org.joda.time.field.FieldUtils.safeAdd : $b6 = $l5 cmp 0L >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $b6 < 0
org.joda.time.field.FieldUtils.safeAdd : if $b6 < 0 >>>>>>>> org.joda.time.field.MillisDurationField.isPrecise : return 1
org.joda.time.field.MillisDurationField.isPrecise : return 1 >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : $l5 = l0 ^ l1
org.joda.time.field.FieldUtils.safeSubtract : $l5 = l0 ^ l1 >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : $b6 = $l5 cmp 0L
org.joda.time.field.FieldUtils.safeSubtract : $b6 = $l5 cmp 0L >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : if $b6 >= 0
org.joda.time.field.FieldUtils.safeSubtract : if $b6 >= 0 >>>>>>>> org.joda.time.base.BaseDuration.toPeriod : return $r2
org.joda.time.base.BaseDuration.toPeriod : return $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.clockhourOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfDay>
org.joda.time.chrono.AssembledChronology.clockhourOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.clockhourOfDay : return $r1
org.joda.time.chrono.AssembledChronology.clockhourOfDay : return $r1 >>>>>>>> org.joda.time.convert.ConverterManager.getInstance : $r0 = <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager INSTANCE>
org.joda.time.convert.ConverterManager.getInstance : $r0 = <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager INSTANCE> >>>>>>>> org.joda.time.convert.ConverterManager.getInstance : if $r0 != null
org.joda.time.convert.ConverterManager.getInstance : if $r0 != null >>>>>>>> org.joda.time.convert.ConverterManager.getInstance : $r2 = <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager INSTANCE>
org.joda.time.convert.ConverterManager.getInstance : $r2 = <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager INSTANCE> >>>>>>>> org.joda.time.convert.ConverterManager.getInstance : return $r2
org.joda.time.convert.ConverterManager.getInstance : return $r2 >>>>>>>> org.joda.time.convert.ConverterManager.getIntervalConverter : $r4 = r0.<org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterSet iIntervalConverters>
org.joda.time.convert.ConverterManager.getIntervalConverter : $r4 = r0.<org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterSet iIntervalConverters> >>>>>>>> org.joda.time.convert.ConverterManager.getIntervalConverter : if r1 != null
org.joda.time.convert.ConverterManager.getIntervalConverter : if r1 != null >>>>>>>> org.joda.time.convert.ConverterManager.getIntervalConverter : $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
org.joda.time.convert.ConverterManager.getIntervalConverter : $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.joda.time.convert.ConverterManager.getIntervalConverter : $r6 = virtualinvoke $r4.<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>($r5)
org.joda.time.convert.ConverterManager.getIntervalConverter : $r6 = virtualinvoke $r4.<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>($r5) >>>>>>>> org.joda.time.convert.ConverterSet.select : r2 = r0.<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet$Entry[] iSelectEntries>
org.joda.time.convert.ConverterSet.select : r2 = r0.<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet$Entry[] iSelectEntries> >>>>>>>> org.joda.time.convert.ConverterSet.select : i0 = lengthof r2
org.joda.time.convert.ConverterSet.select : i0 = lengthof r2 >>>>>>>> org.joda.time.convert.ConverterSet.select : if r1 != null
org.joda.time.convert.ConverterSet.select : if r1 != null >>>>>>>> org.joda.time.convert.ConverterSet.select : $i5 = virtualinvoke r1.<java.lang.Object: int hashCode()>()
org.joda.time.convert.ConverterSet.select : $i5 = virtualinvoke r1.<java.lang.Object: int hashCode()>() >>>>>>>> org.joda.time.convert.ConverterSet.select : $i6 = i0 - 1
org.joda.time.convert.ConverterSet.select : $i6 = i0 - 1 >>>>>>>> org.joda.time.convert.ConverterSet.select : $i4 = $i5 & $i6
org.joda.time.convert.ConverterSet.select : $i4 = $i5 & $i6 >>>>>>>> org.joda.time.convert.ConverterSet.select : i1 = $i4
org.joda.time.convert.ConverterSet.select : i1 = $i4 >>>>>>>> org.joda.time.convert.ConverterSet.select : $r6 = r2[i1]
org.joda.time.convert.ConverterSet.select : $r6 = r2[i1] >>>>>>>> org.joda.time.convert.ConverterSet.select : r3 = $r6
org.joda.time.convert.ConverterSet.select : r3 = $r6 >>>>>>>> org.joda.time.convert.ConverterSet.select : if $r6 == null
org.joda.time.convert.ConverterSet.select : if $r6 == null >>>>>>>> org.joda.time.convert.ConverterSet.select : r4 = staticinvoke <org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>(r0, r1)
org.joda.time.convert.ConverterSet.select : r4 = staticinvoke <org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>(r0, r1) >>>>>>>> org.joda.time.convert.ConverterSet.selectSlow : r2 = r0.<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter[] iConverters>
org.joda.time.convert.ConverterSet.selectSlow : r2 = r0.<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter[] iConverters> >>>>>>>> org.joda.time.convert.ConverterSet.selectSlow : i0 = lengthof r2
org.joda.time.convert.ConverterSet.selectSlow : i0 = lengthof r2 >>>>>>>> org.joda.time.convert.ConverterSet.selectSlow : i1 = i0
org.joda.time.convert.ConverterSet.selectSlow : i1 = i0 >>>>>>>> org.joda.time.convert.ConverterSet.selectSlow : i1 = i1 + -1
org.joda.time.convert.ConverterSet.selectSlow : i1 = i1 + -1 >>>>>>>> org.joda.time.convert.ConverterSet.selectSlow : if i1 < 0
org.joda.time.convert.ConverterSet.selectSlow : if i1 < 0 >>>>>>>> org.joda.time.convert.ConverterSet.selectSlow : r3 = r2[i1]
org.joda.time.convert.ConverterSet.selectSlow : r3 = r2[i1] >>>>>>>> org.joda.time.convert.ConverterSet.selectSlow : r4 = interfaceinvoke r3.<org.joda.time.convert.Converter: java.lang.Class getSupportedType()>()
org.joda.time.convert.ConverterSet.selectSlow : r4 = interfaceinvoke r3.<org.joda.time.convert.Converter: java.lang.Class getSupportedType()>() >>>>>>>> org.joda.time.convert.NullConverter.getSupportedType : return null
org.joda.time.convert.NullConverter.getSupportedType : return null >>>>>>>> org.joda.time.convert.ConverterSet.selectSlow : if r4 != r1
org.joda.time.convert.ConverterSet.selectSlow : if r4 != r1 >>>>>>>> org.joda.time.convert.ConverterSet.selectSlow : if r4 == null
org.joda.time.convert.ConverterSet.selectSlow : if r4 == null >>>>>>>> org.joda.time.convert.ConverterSet.selectSlow : r0 = virtualinvoke r0.<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet remove(int,org.joda.time.convert.Converter[])>(i1, null)
org.joda.time.convert.ConverterSet.selectSlow : r0 = virtualinvoke r0.<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet remove(int,org.joda.time.convert.Converter[])>(i1, null) >>>>>>>> org.joda.time.convert.ConverterSet.remove : r2 = r0.<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter[] iConverters>
org.joda.time.convert.ConverterSet.remove : r2 = r0.<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter[] iConverters> >>>>>>>> org.joda.time.convert.ConverterSet.remove : i1 = lengthof r2
org.joda.time.convert.ConverterSet.remove : i1 = lengthof r2 >>>>>>>> org.joda.time.convert.ConverterSet.remove : if i0 < i1
org.joda.time.convert.ConverterSet.remove : if i0 < i1 >>>>>>>> org.joda.time.convert.ConverterSet.remove : if r1 == null
org.joda.time.convert.ConverterSet.remove : if r1 == null >>>>>>>> org.joda.time.convert.ConverterSet.remove : $i4 = i1 - 1
org.joda.time.convert.ConverterSet.remove : $i4 = i1 - 1 >>>>>>>> org.joda.time.convert.ConverterSet.remove : r3 = newarray (org.joda.time.convert.Converter)[$i4]
org.joda.time.convert.ConverterSet.remove : r3 = newarray (org.joda.time.convert.Converter)[$i4] >>>>>>>> org.joda.time.convert.ConverterSet.remove : i2 = 0
org.joda.time.convert.ConverterSet.remove : i2 = 0 >>>>>>>> org.joda.time.convert.ConverterSet.remove : i3 = 0
org.joda.time.convert.ConverterSet.remove : i3 = 0 >>>>>>>> org.joda.time.convert.ConverterSet.remove : if i3 >= i1
org.joda.time.convert.ConverterSet.remove : if i3 >= i1 >>>>>>>> org.joda.time.convert.ConverterSet.remove : if i3 == i0
org.joda.time.convert.ConverterSet.remove : if i3 == i0 >>>>>>>> org.joda.time.convert.ConverterSet.remove : $i5 = i2
org.joda.time.convert.ConverterSet.remove : $i5 = i2 >>>>>>>> org.joda.time.convert.ConverterSet.remove : i2 = i2 + 1
org.joda.time.convert.ConverterSet.remove : i2 = i2 + 1 >>>>>>>> org.joda.time.convert.ConverterSet.remove : $r6 = r2[i3]
org.joda.time.convert.ConverterSet.remove : $r6 = r2[i3] >>>>>>>> org.joda.time.convert.ConverterSet.remove : r3[$i5] = $r6
org.joda.time.convert.ConverterSet.remove : r3[$i5] = $r6 >>>>>>>> org.joda.time.convert.ConverterSet.remove : i3 = i3 + 1
org.joda.time.convert.ConverterSet.remove : i3 = i3 + 1 >>>>>>>> org.joda.time.convert.ConverterSet.remove : goto [?= (branch)]
org.joda.time.convert.ConverterSet.remove : goto [?= (branch)] >>>>>>>> org.joda.time.convert.ConverterSet.remove : $r7 = new org.joda.time.convert.ConverterSet
org.joda.time.convert.ConverterSet.remove : $r7 = new org.joda.time.convert.ConverterSet >>>>>>>> org.joda.time.convert.ConverterSet.remove : specialinvoke $r7.<org.joda.time.convert.ConverterSet: void <init>(org.joda.time.convert.Converter[])>(r3)
org.joda.time.convert.ConverterSet.remove : specialinvoke $r7.<org.joda.time.convert.ConverterSet: void <init>(org.joda.time.convert.Converter[])>(r3) >>>>>>>> org.joda.time.convert.ConverterSet.remove : return $r7
org.joda.time.convert.ConverterSet.remove : return $r7 >>>>>>>> org.joda.time.convert.ConverterSet.selectSlow : goto [?= i1 = i1 + -1]
org.joda.time.convert.ConverterSet.selectSlow : goto [?= i1 = i1 + -1] >>>>>>>> org.joda.time.convert.StringConverter.getSupportedType : return class "java/lang/String"
org.joda.time.convert.StringConverter.getSupportedType : return class "java/lang/String" >>>>>>>> org.joda.time.convert.ConverterSet.selectSlow : if r1 == null
org.joda.time.convert.ConverterSet.selectSlow : if r1 == null >>>>>>>> org.joda.time.convert.ConverterSet.selectSlow : $z0 = virtualinvoke r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1)
org.joda.time.convert.ConverterSet.selectSlow : $z0 = virtualinvoke r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1) >>>>>>>> org.joda.time.convert.ConverterSet.selectSlow : if $z0 != 0
org.joda.time.convert.ConverterSet.selectSlow : if $z0 != 0 >>>>>>>> org.joda.time.convert.ReadableIntervalConverter.getSupportedType : return class "org/joda/time/ReadableInterval"
org.joda.time.convert.ReadableIntervalConverter.getSupportedType : return class "org/joda/time/ReadableInterval" >>>>>>>> org.joda.time.convert.ConverterSet.selectSlow : if i0 != 0
org.joda.time.convert.ConverterSet.selectSlow : if i0 != 0 >>>>>>>> org.joda.time.convert.ConverterSet.selectSlow : return null
org.joda.time.convert.ConverterSet.selectSlow : return null >>>>>>>> org.joda.time.convert.ConverterSet.select : $r9 = new org.joda.time.convert.ConverterSet$Entry
org.joda.time.convert.ConverterSet.select : $r9 = new org.joda.time.convert.ConverterSet$Entry >>>>>>>> org.joda.time.convert.ConverterSet.select : specialinvoke $r9.<org.joda.time.convert.ConverterSet$Entry: void <init>(java.lang.Class,org.joda.time.convert.Converter)>(r1, r4)
org.joda.time.convert.ConverterSet.select : specialinvoke $r9.<org.joda.time.convert.ConverterSet$Entry: void <init>(java.lang.Class,org.joda.time.convert.Converter)>(r1, r4) >>>>>>>> org.joda.time.convert.ConverterSet.select : r10 = $r9
org.joda.time.convert.ConverterSet.select : r10 = $r9 >>>>>>>> org.joda.time.convert.ConverterSet.select : $r11 = virtualinvoke r2.<java.lang.Object: java.lang.Object clone()>()
org.joda.time.convert.ConverterSet.select : $r11 = virtualinvoke r2.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.joda.time.convert.ConverterSet.select : $r12 = (org.joda.time.convert.ConverterSet$Entry[]) $r11
org.joda.time.convert.ConverterSet.select : $r12 = (org.joda.time.convert.ConverterSet$Entry[]) $r11 >>>>>>>> org.joda.time.convert.ConverterSet.select : r13 = (org.joda.time.convert.ConverterSet$Entry[]) $r12
org.joda.time.convert.ConverterSet.select : r13 = (org.joda.time.convert.ConverterSet$Entry[]) $r12 >>>>>>>> org.joda.time.convert.ConverterSet.select : r13[i1] = r10
org.joda.time.convert.ConverterSet.select : r13[i1] = r10 >>>>>>>> org.joda.time.convert.ConverterSet.select : i2 = 0
org.joda.time.convert.ConverterSet.select : i2 = 0 >>>>>>>> org.joda.time.convert.ConverterSet.select : if i2 >= i0
org.joda.time.convert.ConverterSet.select : if i2 >= i0 >>>>>>>> org.joda.time.convert.ConverterSet.select : $r14 = r13[i2]
org.joda.time.convert.ConverterSet.select : $r14 = r13[i2] >>>>>>>> org.joda.time.convert.ConverterSet.select : if $r14 != null
org.joda.time.convert.ConverterSet.select : if $r14 != null >>>>>>>> org.joda.time.convert.ConverterSet.select : i2 = i2 + 1
org.joda.time.convert.ConverterSet.select : i2 = i2 + 1 >>>>>>>> org.joda.time.convert.ConverterSet.select : goto [?= (branch)]
org.joda.time.convert.ConverterSet.select : goto [?= (branch)] >>>>>>>> org.joda.time.convert.ConverterSet.select : r0.<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet$Entry[] iSelectEntries> = r13
org.joda.time.convert.ConverterSet.select : r0.<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet$Entry[] iSelectEntries> = r13 >>>>>>>> org.joda.time.convert.ConverterSet.select : return r4
org.joda.time.convert.ConverterSet.select : return r4 >>>>>>>> org.joda.time.convert.ConverterManager.getIntervalConverter : r2 = (org.joda.time.convert.IntervalConverter) $r6
org.joda.time.convert.ConverterManager.getIntervalConverter : r2 = (org.joda.time.convert.IntervalConverter) $r6 >>>>>>>> org.joda.time.convert.ConverterManager.getIntervalConverter : if r2 == null
org.joda.time.convert.ConverterManager.getIntervalConverter : if r2 == null >>>>>>>> org.joda.time.convert.ConverterManager.getIntervalConverter : $r7 = new java.lang.IllegalArgumentException
org.joda.time.convert.ConverterManager.getIntervalConverter : $r7 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.convert.ConverterManager.getIntervalConverter : $r3 = new java.lang.StringBuilder
org.joda.time.convert.ConverterManager.getIntervalConverter : $r3 = new java.lang.StringBuilder >>>>>>>> org.joda.time.convert.ConverterManager.getIntervalConverter : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
org.joda.time.convert.ConverterManager.getIntervalConverter : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.convert.ConverterManager.getIntervalConverter : $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No interval converter found for type: ")
org.joda.time.convert.ConverterManager.getIntervalConverter : $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No interval converter found for type: ") >>>>>>>> org.joda.time.convert.ConverterManager.getIntervalConverter : $r11 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
org.joda.time.convert.ConverterManager.getIntervalConverter : $r11 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.joda.time.convert.ConverterManager.getIntervalConverter : $r10 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>()
org.joda.time.convert.ConverterManager.getIntervalConverter : $r10 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>() >>>>>>>> org.joda.time.convert.ConverterManager.getIntervalConverter : $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10)
org.joda.time.convert.ConverterManager.getIntervalConverter : $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10) >>>>>>>> org.joda.time.convert.ConverterManager.getIntervalConverter : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.convert.ConverterManager.getIntervalConverter : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.convert.ConverterManager.getIntervalConverter : specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13)
org.joda.time.convert.ConverterManager.getIntervalConverter : specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13) >>>>>>>> org.joda.time.convert.ConverterManager.getIntervalConverter : throw $r7
