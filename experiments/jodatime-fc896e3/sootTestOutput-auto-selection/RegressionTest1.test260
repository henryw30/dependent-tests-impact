org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>() >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r0)
org.joda.time.chrono.ISOChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r0 != null
org.joda.time.chrono.ISOChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63
org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>
org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0]
org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0] >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r1 == null
org.joda.time.chrono.ISOChronology.getInstance : if r1 == null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2
org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null
org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.GregorianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : return $r1
org.joda.time.chrono.AssembledChronology.getBase : return $r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : r1 = $r2
org.joda.time.chrono.BasicChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : if $r2 == null
org.joda.time.chrono.BasicChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : return $r4
org.joda.time.chrono.BasicChronology.getZone : return $r4 >>>>>>>> org.joda.time.chrono.GregorianChronology.getZone : return $r1
org.joda.time.chrono.GregorianChronology.getZone : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : return $r3
org.joda.time.chrono.AssembledChronology.getZone : return $r3 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0
org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return r1
org.joda.time.chrono.ISOChronology.getInstance : return r1 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return $r1
org.joda.time.chrono.ISOChronology.getInstance : return $r1 >>>>>>>> org.joda.time.DateTimeUtils.getChronology : if r0 != null
org.joda.time.DateTimeUtils.getChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.DateTimeUtils.getChronology : return r0 >>>>>>>> org.joda.time.DateTimeZone.getMillisKeepLocal : if r1 != null
org.joda.time.DateTimeZone.getMillisKeepLocal : if r1 != null >>>>>>>> org.joda.time.DateTimeZone.getMillisKeepLocal : if r1 != r0
org.joda.time.DateTimeZone.getMillisKeepLocal : if r1 != r0 >>>>>>>> org.joda.time.DateTimeZone.getMillisKeepLocal : return l0
org.joda.time.DateTimeZone.getMillisKeepLocal : return l0 >>>>>>>> org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>
org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.ISOChronology.withUTC : return $r1
org.joda.time.chrono.ISOChronology.withUTC : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfMonth : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth>
org.joda.time.chrono.AssembledChronology.dayOfMonth : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth> >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfMonth : return $r1
org.joda.time.chrono.AssembledChronology.dayOfMonth : return $r1 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : if $b1 < 0
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : if $b1 < 0 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l3 = l0 % $l2
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l3 = l0 % $l2 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l4 = l0 - $l3
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l4 = l0 - $l3 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : return $l4
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : return $l4 >>>>>>>> org.joda.time.LocalDate.weekyear : $r1 = new org.joda.time.LocalDate$Property
org.joda.time.LocalDate.weekyear : $r1 = new org.joda.time.LocalDate$Property >>>>>>>> org.joda.time.LocalDate.weekyear : $r2 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalDate.weekyear : $r2 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.LocalDate.getChronology : $r1 = r0.<org.joda.time.LocalDate: org.joda.time.Chronology iChronology>
org.joda.time.LocalDate.getChronology : $r1 = r0.<org.joda.time.LocalDate: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.LocalDate.getChronology : return $r1
org.joda.time.LocalDate.getChronology : return $r1 >>>>>>>> org.joda.time.LocalDate.weekyear : $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyear()>()
org.joda.time.LocalDate.weekyear : $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.weekyear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyear>
org.joda.time.chrono.AssembledChronology.weekyear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyear> >>>>>>>> org.joda.time.chrono.AssembledChronology.weekyear : return $r1
org.joda.time.chrono.AssembledChronology.weekyear : return $r1 >>>>>>>> org.joda.time.LocalDate.weekyear : specialinvoke $r1.<org.joda.time.LocalDate$Property: void <init>(org.joda.time.LocalDate,org.joda.time.DateTimeField)>(r0, $r3)
org.joda.time.LocalDate.weekyear : specialinvoke $r1.<org.joda.time.LocalDate$Property: void <init>(org.joda.time.LocalDate,org.joda.time.DateTimeField)>(r0, $r3) >>>>>>>> org.joda.time.LocalDate.weekyear : return $r1
org.joda.time.LocalDate.weekyear : return $r1 >>>>>>>> org.joda.time.LocalDate$Property.roundHalfCeilingCopy : $r1 = r0.<org.joda.time.LocalDate$Property: org.joda.time.LocalDate iInstant>
org.joda.time.LocalDate$Property.roundHalfCeilingCopy : $r1 = r0.<org.joda.time.LocalDate$Property: org.joda.time.LocalDate iInstant> >>>>>>>> org.joda.time.LocalDate$Property.roundHalfCeilingCopy : $r2 = r0.<org.joda.time.LocalDate$Property: org.joda.time.DateTimeField iField>
org.joda.time.LocalDate$Property.roundHalfCeilingCopy : $r2 = r0.<org.joda.time.LocalDate$Property: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.LocalDate$Property.roundHalfCeilingCopy : $r3 = r0.<org.joda.time.LocalDate$Property: org.joda.time.LocalDate iInstant>
org.joda.time.LocalDate$Property.roundHalfCeilingCopy : $r3 = r0.<org.joda.time.LocalDate$Property: org.joda.time.LocalDate iInstant> >>>>>>>> org.joda.time.LocalDate$Property.roundHalfCeilingCopy : $l0 = virtualinvoke $r3.<org.joda.time.LocalDate: long getLocalMillis()>()
org.joda.time.LocalDate$Property.roundHalfCeilingCopy : $l0 = virtualinvoke $r3.<org.joda.time.LocalDate: long getLocalMillis()>() >>>>>>>> org.joda.time.LocalDate.getLocalMillis : $l0 = r0.<org.joda.time.LocalDate: long iLocalMillis>
org.joda.time.LocalDate.getLocalMillis : $l0 = r0.<org.joda.time.LocalDate: long iLocalMillis> >>>>>>>> org.joda.time.LocalDate.getLocalMillis : return $l0
org.joda.time.LocalDate.getLocalMillis : return $l0 >>>>>>>> org.joda.time.LocalDate$Property.roundHalfCeilingCopy : $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long roundHalfCeiling(long)>($l0)
org.joda.time.LocalDate$Property.roundHalfCeilingCopy : $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long roundHalfCeiling(long)>($l0) >>>>>>>> org.joda.time.field.BaseDateTimeField.roundHalfCeiling : l1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundFloor(long)>(l0)
org.joda.time.field.BaseDateTimeField.roundHalfCeiling : l1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundFloor(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.roundFloor : $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.roundFloor : $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.roundFloor : $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField weekOfWeekyear()>()
org.joda.time.chrono.BasicWeekyearDateTimeField.roundFloor : $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField weekOfWeekyear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.weekOfWeekyear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekOfWeekyear>
org.joda.time.chrono.AssembledChronology.weekOfWeekyear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekOfWeekyear> >>>>>>>> org.joda.time.chrono.AssembledChronology.weekOfWeekyear : return $r1
org.joda.time.chrono.AssembledChronology.weekOfWeekyear : return $r1 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.roundFloor : l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long roundFloor(long)>(l0)
org.joda.time.chrono.BasicWeekyearDateTimeField.roundFloor : l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long roundFloor(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.roundFloor : $l1 = l0 + 259200000L
org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.roundFloor : $l1 = l0 + 259200000L >>>>>>>> org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.roundFloor : $l2 = specialinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>($l1)
org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.roundFloor : $l2 = specialinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>($l1) >>>>>>>> org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.roundFloor : $l3 = $l2 - 259200000L
org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.roundFloor : $l3 = $l2 - 259200000L >>>>>>>> org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.roundFloor : return $l3
org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.roundFloor : return $l3 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.roundFloor : $r3 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.roundFloor : $r3 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.roundFloor : i1 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long)>(l2)
org.joda.time.chrono.BasicWeekyearDateTimeField.roundFloor : i1 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long)>(l2) >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerYearDividedByTwo()>()
org.joda.time.chrono.BasicChronology.getYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerYearDividedByTwo()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getAverageMillisPerYearDividedByTwo : return 15778476000L
org.joda.time.chrono.GregorianChronology.getAverageMillisPerYearDividedByTwo : return 15778476000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l7 = l0 >> 1
org.joda.time.chrono.BasicChronology.getYear : $l7 = l0 >> 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getApproxMillisAtEpochDividedByTwo()>()
org.joda.time.chrono.BasicChronology.getYear : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getApproxMillisAtEpochDividedByTwo()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getApproxMillisAtEpochDividedByTwo : return 31083597720000L
org.joda.time.chrono.GregorianChronology.getApproxMillisAtEpochDividedByTwo : return 31083597720000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l2 = $l7 + $l8
org.joda.time.chrono.BasicChronology.getYear : l2 = $l7 + $l8 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b9 = l2 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : $b9 = l2 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b9 >= 0
org.joda.time.chrono.BasicChronology.getYear : if $b9 >= 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l11 = l2 / l1
org.joda.time.chrono.BasicChronology.getYear : $l11 = l2 / l1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : i3 = (int) $l11
org.joda.time.chrono.BasicChronology.getYear : i3 = (int) $l11 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i3)
org.joda.time.chrono.BasicChronology.getYear : l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i3) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearMillis : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $r2 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache>
org.joda.time.chrono.BasicChronology.getYearInfo : $r2 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $i1 = i0 & 1023
org.joda.time.chrono.BasicChronology.getYearInfo : $i1 = i0 & 1023 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r2[$i1]
org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r2[$i1] >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : if r1 == null
org.joda.time.chrono.BasicChronology.getYearInfo : if r1 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $i2 = r1.<org.joda.time.chrono.BasicChronology$YearInfo: int iYear>
org.joda.time.chrono.BasicChronology.getYearInfo : $i2 = r1.<org.joda.time.chrono.BasicChronology$YearInfo: int iYear> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : if $i2 == i0
org.joda.time.chrono.BasicChronology.getYearInfo : if $i2 == i0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : return r1
org.joda.time.chrono.BasicChronology.getYearInfo : return r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : $l1 = $r1.<org.joda.time.chrono.BasicChronology$YearInfo: long iFirstDayMillis>
org.joda.time.chrono.BasicChronology.getYearMillis : $l1 = $r1.<org.joda.time.chrono.BasicChronology$YearInfo: long iFirstDayMillis> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : return $l1
org.joda.time.chrono.BasicChronology.getYearMillis : return $l1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l5 = l0 - l4
org.joda.time.chrono.BasicChronology.getYear : l5 = l0 - l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b12 = l5 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : $b12 = l5 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b12 >= 0
org.joda.time.chrono.BasicChronology.getYear : if $b12 >= 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b13 = l5 cmp 31536000000L
org.joda.time.chrono.BasicChronology.getYear : $b13 = l5 cmp 31536000000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b13 < 0
org.joda.time.chrono.BasicChronology.getYear : if $b13 < 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : return i3
org.joda.time.chrono.BasicChronology.getYear : return i3 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long,int)>(l0, $i1)
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long,int)>(l0, $i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>(i1)
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0)
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDayOfWeek(long)>(l1)
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDayOfWeek(long)>(l1) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $b2 = l0 cmp 0L
org.joda.time.chrono.BasicChronology.getDayOfWeek : $b2 = l0 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : if $b2 < 0
org.joda.time.chrono.BasicChronology.getDayOfWeek : if $b2 < 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $l3 = l0 - 86399999L
org.joda.time.chrono.BasicChronology.getDayOfWeek : $l3 = l0 - 86399999L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : l1 = $l3 / 86400000L
org.joda.time.chrono.BasicChronology.getDayOfWeek : l1 = $l3 / 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $b4 = l1 cmp -3L
org.joda.time.chrono.BasicChronology.getDayOfWeek : $b4 = l1 cmp -3L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : if $b4 >= 0
org.joda.time.chrono.BasicChronology.getDayOfWeek : if $b4 >= 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $l5 = l1 + 4L
org.joda.time.chrono.BasicChronology.getDayOfWeek : $l5 = l1 + 4L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $l6 = $l5 % 7L
org.joda.time.chrono.BasicChronology.getDayOfWeek : $l6 = $l5 % 7L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $i7 = (int) $l6
org.joda.time.chrono.BasicChronology.getDayOfWeek : $i7 = (int) $l6 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $i8 = 7 + $i7
org.joda.time.chrono.BasicChronology.getDayOfWeek : $i8 = 7 + $i7 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : return $i8
org.joda.time.chrono.BasicChronology.getDayOfWeek : return $i8 >>>>>>>> org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $i3 = r0.<org.joda.time.chrono.BasicChronology: int iMinDaysInFirstWeek>
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $i3 = r0.<org.joda.time.chrono.BasicChronology: int iMinDaysInFirstWeek> >>>>>>>> org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $i4 = 8 - $i3
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $i4 = 8 - $i3 >>>>>>>> org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : if i2 <= $i4
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : if i2 <= $i4 >>>>>>>> org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $i9 = i2 - 1
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $i9 = i2 - 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $l10 = (long) $i9
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $l10 = (long) $i9 >>>>>>>> org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $l11 = $l10 * 86400000L
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $l11 = $l10 * 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $l12 = l1 - $l11
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $l12 = l1 - $l11 >>>>>>>> org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : return $l12
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : return $l12 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $b4 = l0 cmp l2
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $b4 = l0 cmp l2 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : if $b4 >= 0
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : if $b4 >= 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $i7 = i1 + 1
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $i7 = i1 + 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>($i7)
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>($i7) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : l1 = l0 / 86400000L
org.joda.time.chrono.BasicChronology.getDayOfWeek : l1 = l0 / 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : goto [?= $l9 = l1 + 3L]
org.joda.time.chrono.BasicChronology.getDayOfWeek : goto [?= $l9 = l1 + 3L] >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $l9 = l1 + 3L
org.joda.time.chrono.BasicChronology.getDayOfWeek : $l9 = l1 + 3L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $l10 = $l9 % 7L
org.joda.time.chrono.BasicChronology.getDayOfWeek : $l10 = $l9 % 7L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $i11 = (int) $l10
org.joda.time.chrono.BasicChronology.getDayOfWeek : $i11 = (int) $l10 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $i12 = 1 + $i11
org.joda.time.chrono.BasicChronology.getDayOfWeek : $i12 = 1 + $i11 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : return $i12
org.joda.time.chrono.BasicChronology.getDayOfWeek : return $i12 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $b8 = l0 cmp l3
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $b8 = l0 cmp l3 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : if $b8 < 0
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : if $b8 < 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : return 1
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : return 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : return $i2
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : return $i2 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.roundFloor : if i1 <= 1
org.joda.time.chrono.BasicWeekyearDateTimeField.roundFloor : if i1 <= 1 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.roundFloor : return l2
org.joda.time.chrono.BasicWeekyearDateTimeField.roundFloor : return l2 >>>>>>>> org.joda.time.field.BaseDateTimeField.roundHalfCeiling : l2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>(l0)
org.joda.time.field.BaseDateTimeField.roundHalfCeiling : l2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>(l0) >>>>>>>> org.joda.time.field.BaseDateTimeField.roundCeiling : l1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundFloor(long)>(l0)
org.joda.time.field.BaseDateTimeField.roundCeiling : l1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundFloor(long)>(l0) >>>>>>>> org.joda.time.field.BaseDateTimeField.roundCeiling : $b2 = l1 cmp l0
org.joda.time.field.BaseDateTimeField.roundCeiling : $b2 = l1 cmp l0 >>>>>>>> org.joda.time.field.BaseDateTimeField.roundCeiling : if $b2 == 0
org.joda.time.field.BaseDateTimeField.roundCeiling : if $b2 == 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.roundCeiling : l0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long add(long,int)>(l1, 1)
org.joda.time.field.BaseDateTimeField.roundCeiling : l0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long add(long,int)>(l1, 1) >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.add : if i1 != 0
org.joda.time.chrono.BasicWeekyearDateTimeField.add : if i1 != 0 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.add : $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>(l0)
org.joda.time.chrono.BasicWeekyearDateTimeField.add : $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getWeekyear(long)>(l0)
org.joda.time.chrono.BasicWeekyearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getWeekyear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekyear : i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicChronology.getWeekyear : i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekyear : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long,int)>(l0, i1)
org.joda.time.chrono.BasicChronology.getWeekyear : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekyear : if i2 != 1
org.joda.time.chrono.BasicChronology.getWeekyear : if i2 != 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekyear : $l3 = l0 + 604800000L
org.joda.time.chrono.BasicChronology.getWeekyear : $l3 = l0 + 604800000L >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekyear : $i4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>($l3)
org.joda.time.chrono.BasicChronology.getWeekyear : $i4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>($l3) >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekyear : return $i4
org.joda.time.chrono.BasicChronology.getWeekyear : return $i4 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.get : return $i1
org.joda.time.chrono.BasicWeekyearDateTimeField.get : return $i1 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.add : $i3 = $i2 + i1
org.joda.time.chrono.BasicWeekyearDateTimeField.add : $i3 = $i2 + i1 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.add : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>(l0, $i3)
org.joda.time.chrono.BasicWeekyearDateTimeField.add : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>(l0, $i3) >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $i11 = staticinvoke <java.lang.Math: int abs(int)>(i1)
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $i11 = staticinvoke <java.lang.Math: int abs(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $i12 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMinYear()>()
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $i12 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMinYear()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getMinYear : return -292275054
org.joda.time.chrono.GregorianChronology.getMinYear : return -292275054 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r2 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r2 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $i13 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getMaxYear()>()
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $i13 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getMaxYear()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getMaxYear : return 292278993
org.joda.time.chrono.GregorianChronology.getMaxYear : return 292278993 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, $i11, $i12, $i13)
org.joda.time.chrono.BasicWeekyearDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, $i11, $i12, $i13) >>>>>>>> org.joda.time.field.FieldUtils.verifyValueBounds : if i0 < i1
org.joda.time.field.FieldUtils.verifyValueBounds : if i0 < i1 >>>>>>>> org.joda.time.field.FieldUtils.verifyValueBounds : if i0 <= i2
org.joda.time.field.FieldUtils.verifyValueBounds : if i0 <= i2 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>(l0)
org.joda.time.chrono.BasicWeekyearDateTimeField.set : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : if i2 != i1
org.joda.time.chrono.BasicWeekyearDateTimeField.set : if i2 != i1 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r3 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r3 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : i3 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getDayOfWeek(long)>(l0)
org.joda.time.chrono.BasicWeekyearDateTimeField.set : i3 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getDayOfWeek(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r4 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r4 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : i4 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>(i2)
org.joda.time.chrono.BasicWeekyearDateTimeField.set : i4 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>(i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getWeeksInYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>(i0)
org.joda.time.chrono.BasicChronology.getWeeksInYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getWeeksInYear : $i3 = i0 + 1
org.joda.time.chrono.BasicChronology.getWeeksInYear : $i3 = i0 + 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeeksInYear : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>($i3)
org.joda.time.chrono.BasicChronology.getWeeksInYear : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>($i3) >>>>>>>> org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $i5 = 8 - i2
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $i5 = 8 - i2 >>>>>>>> org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $l6 = (long) $i5
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $l6 = (long) $i5 >>>>>>>> org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $l7 = $l6 * 86400000L
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $l7 = $l6 * 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $l8 = l1 + $l7
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $l8 = l1 + $l7 >>>>>>>> org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : return $l8
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : return $l8 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeeksInYear : $l4 = l2 - l1
org.joda.time.chrono.BasicChronology.getWeeksInYear : $l4 = l2 - l1 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeeksInYear : $l5 = $l4 / 604800000L
org.joda.time.chrono.BasicChronology.getWeeksInYear : $l5 = $l4 / 604800000L >>>>>>>> org.joda.time.chrono.BasicChronology.getWeeksInYear : $i6 = (int) $l5
org.joda.time.chrono.BasicChronology.getWeeksInYear : $i6 = (int) $l5 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeeksInYear : return $i6
org.joda.time.chrono.BasicChronology.getWeeksInYear : return $i6 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r5 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r5 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : i5 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>(i1)
org.joda.time.chrono.BasicWeekyearDateTimeField.set : i5 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : if i5 >= i4
org.joda.time.chrono.BasicWeekyearDateTimeField.set : if i5 >= i4 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $i14 = i5
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $i14 = i5 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : goto [?= i6 = $i14]
org.joda.time.chrono.BasicWeekyearDateTimeField.set : goto [?= i6 = $i14] >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : i6 = $i14
org.joda.time.chrono.BasicWeekyearDateTimeField.set : i6 = $i14 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r6 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r6 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : i7 = virtualinvoke $r6.<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long)>(l0)
org.joda.time.chrono.BasicWeekyearDateTimeField.set : i7 = virtualinvoke $r6.<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : if i7 <= i6
org.joda.time.chrono.BasicWeekyearDateTimeField.set : if i7 <= i6 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : l8 = l0
org.joda.time.chrono.BasicWeekyearDateTimeField.set : l8 = l0 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r7 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r7 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : l15 = virtualinvoke $r7.<org.joda.time.chrono.BasicChronology: long setYear(long,int)>(l8, i1)
org.joda.time.chrono.BasicWeekyearDateTimeField.set : l15 = virtualinvoke $r7.<org.joda.time.chrono.BasicChronology: long setYear(long,int)>(l8, i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicGJChronology.setYear : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : i3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getDayOfYear(long,int)>(l0, i2)
org.joda.time.chrono.BasicGJChronology.setYear : i3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getDayOfYear(long,int)>(l0, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1)
org.joda.time.chrono.BasicChronology.getDayOfYear : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : $l3 = l0 - l2
org.joda.time.chrono.BasicChronology.getDayOfYear : $l3 = l0 - l2 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : $l4 = $l3 / 86400000L
org.joda.time.chrono.BasicChronology.getDayOfYear : $l4 = $l3 / 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : $i5 = (int) $l4
org.joda.time.chrono.BasicChronology.getDayOfYear : $i5 = (int) $l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : $i6 = $i5 + 1
org.joda.time.chrono.BasicChronology.getDayOfYear : $i6 = $i5 + 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : return $i6
org.joda.time.chrono.BasicChronology.getDayOfYear : return $i6 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : i4 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getMillisOfDay(long)>(l0)
org.joda.time.chrono.BasicGJChronology.setYear : i4 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getMillisOfDay(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $b1 = l0 cmp 0L
org.joda.time.chrono.BasicChronology.getMillisOfDay : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : if $b1 < 0
org.joda.time.chrono.BasicChronology.getMillisOfDay : if $b1 < 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $l4 = l0 + 1L
org.joda.time.chrono.BasicChronology.getMillisOfDay : $l4 = l0 + 1L >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $l5 = $l4 % 86400000L
org.joda.time.chrono.BasicChronology.getMillisOfDay : $l5 = $l4 % 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $i6 = (int) $l5
org.joda.time.chrono.BasicChronology.getMillisOfDay : $i6 = (int) $l5 >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $i7 = 86399999 + $i6
org.joda.time.chrono.BasicChronology.getMillisOfDay : $i7 = 86399999 + $i6 >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : return $i7
org.joda.time.chrono.BasicChronology.getMillisOfDay : return $i7 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : if i3 <= 59
org.joda.time.chrono.BasicGJChronology.setYear : if i3 <= 59 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i2)
org.joda.time.chrono.BasicGJChronology.setYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i2) >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : $i1 = i0 & 3
org.joda.time.chrono.GregorianChronology.isLeapYear : $i1 = i0 & 3 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : if $i1 != 0
org.joda.time.chrono.GregorianChronology.isLeapYear : if $i1 != 0 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : $z0 = 0
org.joda.time.chrono.GregorianChronology.isLeapYear : $z0 = 0 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : return $z0
org.joda.time.chrono.GregorianChronology.isLeapYear : return $z0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.setYear : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : $z2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1)
org.joda.time.chrono.BasicGJChronology.setYear : $z2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : if $z2 == 0
org.joda.time.chrono.BasicGJChronology.setYear : if $z2 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : l5 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMonthDayMillis(int,int,int)>(i1, 1, i3)
org.joda.time.chrono.BasicGJChronology.setYear : l5 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMonthDayMillis(int,int,int)>(i1, 1, i3) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1)
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0)
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: long[] MIN_TOTAL_MILLIS_BY_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: long[] MIN_TOTAL_MILLIS_BY_MONTH_ARRAY> >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $i4 = i1 - 1
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $i4 = i1 - 1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $l5 = $r2[$i4]
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $l5 = $r2[$i4] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : return $l5
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : return $l5 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l5 = l3 + $l4
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l5 = l3 + $l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $i6 = i2 - 1
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $i6 = i2 - 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l7 = (long) $i6
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l7 = (long) $i6 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l8 = $l7 * 86400000L
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l8 = $l7 * 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l9 = l5 + $l8
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l9 = l5 + $l8 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : return $l9
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : return $l9 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : $l6 = (long) i4
org.joda.time.chrono.BasicGJChronology.setYear : $l6 = (long) i4 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : l7 = l5 + $l6
org.joda.time.chrono.BasicGJChronology.setYear : l7 = l5 + $l6 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : return l7
org.joda.time.chrono.BasicGJChronology.setYear : return l7 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : i9 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>(l15)
org.joda.time.chrono.BasicWeekyearDateTimeField.set : i9 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>(l15) >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $l9 = l0 - l2
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $l9 = l0 - l2 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $l10 = $l9 / 604800000L
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $l10 = $l9 / 604800000L >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $i11 = (int) $l10
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $i11 = (int) $l10 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $i12 = $i11 + 1
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $i12 = $i11 + 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : return $i12
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : return $i12 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekyear : if i2 <= 51
org.joda.time.chrono.BasicChronology.getWeekyear : if i2 <= 51 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekyear : $l5 = l0 - 1209600000L
org.joda.time.chrono.BasicChronology.getWeekyear : $l5 = l0 - 1209600000L >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekyear : $i6 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>($l5)
org.joda.time.chrono.BasicChronology.getWeekyear : $i6 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>($l5) >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekyear : return $i6
org.joda.time.chrono.BasicChronology.getWeekyear : return $i6 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : if i9 >= i1
org.joda.time.chrono.BasicWeekyearDateTimeField.set : if i9 >= i1 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : if i9 <= i1
org.joda.time.chrono.BasicWeekyearDateTimeField.set : if i9 <= i1 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r8 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r8 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : i10 = virtualinvoke $r8.<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long)>(l15)
org.joda.time.chrono.BasicWeekyearDateTimeField.set : i10 = virtualinvoke $r8.<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long)>(l15) >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $i16 = i7 - i10
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $i16 = i7 - i10 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $l17 = (long) $i16
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $l17 = (long) $i16 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $l18 = $l17 * 604800000L
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $l18 = $l17 * 604800000L >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : l19 = l15 + $l18
org.joda.time.chrono.BasicWeekyearDateTimeField.set : l19 = l15 + $l18 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r9 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r9 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r10 = virtualinvoke $r9.<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField dayOfWeek()>()
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r10 = virtualinvoke $r9.<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField dayOfWeek()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfWeek : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfWeek>
org.joda.time.chrono.AssembledChronology.dayOfWeek : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfWeek> >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfWeek : return $r1
org.joda.time.chrono.AssembledChronology.dayOfWeek : return $r1 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : l20 = virtualinvoke $r10.<org.joda.time.DateTimeField: long set(long,int)>(l19, i3)
org.joda.time.chrono.BasicWeekyearDateTimeField.set : l20 = virtualinvoke $r10.<org.joda.time.DateTimeField: long set(long,int)>(l19, i3) >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>()
org.joda.time.field.PreciseDurationDateTimeField.set : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>() >>>>>>>> org.joda.time.chrono.GJDayOfWeekDateTimeField.getMinimumValue : return 1
org.joda.time.chrono.GJDayOfWeekDateTimeField.getMinimumValue : return 1 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $i3 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMaximumValueForSet(long,int)>(l0, i1)
org.joda.time.field.PreciseDurationDateTimeField.set : $i3 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMaximumValueForSet(long,int)>(l0, i1) >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getMaximumValueForSet : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMaximumValue(long)>(l0)
org.joda.time.field.PreciseDurationDateTimeField.getMaximumValueForSet : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMaximumValue(long)>(l0) >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumValue : $i1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue()>()
org.joda.time.field.BaseDateTimeField.getMaximumValue : $i1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.chrono.GJDayOfWeekDateTimeField.getMaximumValue : return 7
org.joda.time.chrono.GJDayOfWeekDateTimeField.getMaximumValue : return 7 >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumValue : return $i1
org.joda.time.field.BaseDateTimeField.getMaximumValue : return $i1 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getMaximumValueForSet : return $i2
org.joda.time.field.PreciseDurationDateTimeField.getMaximumValueForSet : return $i2 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3)
org.joda.time.field.PreciseDurationDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3) >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $i4 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int get(long)>(l0)
org.joda.time.field.PreciseDurationDateTimeField.set : $i4 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.chrono.GJDayOfWeekDateTimeField.get : $r1 = r0.<org.joda.time.chrono.GJDayOfWeekDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.GJDayOfWeekDateTimeField.get : $r1 = r0.<org.joda.time.chrono.GJDayOfWeekDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.GJDayOfWeekDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDayOfWeek(long)>(l0)
org.joda.time.chrono.GJDayOfWeekDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDayOfWeek(long)>(l0) >>>>>>>> org.joda.time.chrono.GJDayOfWeekDateTimeField.get : return $i1
org.joda.time.chrono.GJDayOfWeekDateTimeField.get : return $i1 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $i5 = i1 - $i4
org.joda.time.field.PreciseDurationDateTimeField.set : $i5 = i1 - $i4 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $l6 = (long) $i5
org.joda.time.field.PreciseDurationDateTimeField.set : $l6 = (long) $i5 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $l7 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.set : $l7 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $l8 = $l6 * $l7
org.joda.time.field.PreciseDurationDateTimeField.set : $l8 = $l6 * $l7 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $l9 = l0 + $l8
org.joda.time.field.PreciseDurationDateTimeField.set : $l9 = l0 + $l8 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : return $l9
org.joda.time.field.PreciseDurationDateTimeField.set : return $l9 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : return l20
org.joda.time.chrono.BasicWeekyearDateTimeField.set : return l20 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.add : return $l4
org.joda.time.chrono.BasicWeekyearDateTimeField.add : return $l4 >>>>>>>> org.joda.time.field.BaseDateTimeField.roundCeiling : return l0
org.joda.time.field.BaseDateTimeField.roundCeiling : return l0 >>>>>>>> org.joda.time.field.BaseDateTimeField.roundHalfCeiling : l3 = l0 - l1
org.joda.time.field.BaseDateTimeField.roundHalfCeiling : l3 = l0 - l1 >>>>>>>> org.joda.time.field.BaseDateTimeField.roundHalfCeiling : l4 = l2 - l0
org.joda.time.field.BaseDateTimeField.roundHalfCeiling : l4 = l2 - l0 >>>>>>>> org.joda.time.field.BaseDateTimeField.roundHalfCeiling : $b5 = l4 cmp l3
org.joda.time.field.BaseDateTimeField.roundHalfCeiling : $b5 = l4 cmp l3 >>>>>>>> org.joda.time.field.BaseDateTimeField.roundHalfCeiling : if $b5 > 0
org.joda.time.field.BaseDateTimeField.roundHalfCeiling : if $b5 > 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.roundHalfCeiling : return l1
org.joda.time.field.BaseDateTimeField.roundHalfCeiling : return l1 >>>>>>>> org.joda.time.LocalDate$Property.roundHalfCeilingCopy : $r4 = virtualinvoke $r1.<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>($l1)
org.joda.time.LocalDate$Property.roundHalfCeilingCopy : $r4 = virtualinvoke $r1.<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>($l1) >>>>>>>> org.joda.time.LocalDate.withLocalMillis : $r1 = r0.<org.joda.time.LocalDate: org.joda.time.Chronology iChronology>
org.joda.time.LocalDate.withLocalMillis : $r1 = r0.<org.joda.time.LocalDate: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.LocalDate.withLocalMillis : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.LocalDate.withLocalMillis : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>() >>>>>>>> org.joda.time.LocalDate.withLocalMillis : l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long roundFloor(long)>(l0)
org.joda.time.LocalDate.withLocalMillis : l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long roundFloor(long)>(l0) >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : l5 = l0 + 1L
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : l5 = l0 + 1L >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l6 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l6 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l7 = l5 % $l6
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l7 = l5 % $l6 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l8 = l5 - $l7
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l8 = l5 - $l7 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l9 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l9 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l10 = $l8 - $l9
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l10 = $l8 - $l9 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : return $l10
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : return $l10 >>>>>>>> org.joda.time.LocalDate.withLocalMillis : $l2 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>()
org.joda.time.LocalDate.withLocalMillis : $l2 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>() >>>>>>>> org.joda.time.LocalDate.withLocalMillis : $b3 = l1 cmp $l2
org.joda.time.LocalDate.withLocalMillis : $b3 = l1 cmp $l2 >>>>>>>> org.joda.time.LocalDate.withLocalMillis : if $b3 != 0
org.joda.time.LocalDate.withLocalMillis : if $b3 != 0 >>>>>>>> org.joda.time.LocalDate.withLocalMillis : $r3 = new org.joda.time.LocalDate
org.joda.time.LocalDate.withLocalMillis : $r3 = new org.joda.time.LocalDate >>>>>>>> org.joda.time.LocalDate.withLocalMillis : $r4 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalDate.withLocalMillis : $r4 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.LocalDate.withLocalMillis : specialinvoke $r3.<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>(l1, $r4)
org.joda.time.LocalDate.withLocalMillis : specialinvoke $r3.<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>(l1, $r4) >>>>>>>> org.joda.time.LocalDate.withLocalMillis : return $r3
org.joda.time.LocalDate.withLocalMillis : return $r3 >>>>>>>> org.joda.time.LocalDate$Property.roundHalfCeilingCopy : return $r4
org.joda.time.LocalDate$Property.roundHalfCeilingCopy : return $r4 >>>>>>>> org.joda.time.LocalDate$Property.roundHalfFloorCopy : $r1 = r0.<org.joda.time.LocalDate$Property: org.joda.time.LocalDate iInstant>
org.joda.time.LocalDate$Property.roundHalfFloorCopy : $r1 = r0.<org.joda.time.LocalDate$Property: org.joda.time.LocalDate iInstant> >>>>>>>> org.joda.time.LocalDate$Property.roundHalfFloorCopy : $r2 = r0.<org.joda.time.LocalDate$Property: org.joda.time.DateTimeField iField>
org.joda.time.LocalDate$Property.roundHalfFloorCopy : $r2 = r0.<org.joda.time.LocalDate$Property: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.LocalDate$Property.roundHalfFloorCopy : $r3 = r0.<org.joda.time.LocalDate$Property: org.joda.time.LocalDate iInstant>
org.joda.time.LocalDate$Property.roundHalfFloorCopy : $r3 = r0.<org.joda.time.LocalDate$Property: org.joda.time.LocalDate iInstant> >>>>>>>> org.joda.time.LocalDate$Property.roundHalfFloorCopy : $l0 = virtualinvoke $r3.<org.joda.time.LocalDate: long getLocalMillis()>()
org.joda.time.LocalDate$Property.roundHalfFloorCopy : $l0 = virtualinvoke $r3.<org.joda.time.LocalDate: long getLocalMillis()>() >>>>>>>> org.joda.time.LocalDate$Property.roundHalfFloorCopy : $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long roundHalfFloor(long)>($l0)
org.joda.time.LocalDate$Property.roundHalfFloorCopy : $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long roundHalfFloor(long)>($l0) >>>>>>>> org.joda.time.field.BaseDateTimeField.roundHalfFloor : l1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundFloor(long)>(l0)
org.joda.time.field.BaseDateTimeField.roundHalfFloor : l1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundFloor(long)>(l0) >>>>>>>> org.joda.time.field.BaseDateTimeField.roundHalfFloor : l2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>(l0)
org.joda.time.field.BaseDateTimeField.roundHalfFloor : l2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>(l0) >>>>>>>> org.joda.time.field.BaseDateTimeField.roundHalfFloor : l3 = l0 - l1
org.joda.time.field.BaseDateTimeField.roundHalfFloor : l3 = l0 - l1 >>>>>>>> org.joda.time.field.BaseDateTimeField.roundHalfFloor : l4 = l2 - l0
org.joda.time.field.BaseDateTimeField.roundHalfFloor : l4 = l2 - l0 >>>>>>>> org.joda.time.field.BaseDateTimeField.roundHalfFloor : $b5 = l3 cmp l4
org.joda.time.field.BaseDateTimeField.roundHalfFloor : $b5 = l3 cmp l4 >>>>>>>> org.joda.time.field.BaseDateTimeField.roundHalfFloor : if $b5 > 0
org.joda.time.field.BaseDateTimeField.roundHalfFloor : if $b5 > 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.roundHalfFloor : return l1
org.joda.time.field.BaseDateTimeField.roundHalfFloor : return l1 >>>>>>>> org.joda.time.LocalDate$Property.roundHalfFloorCopy : $r4 = virtualinvoke $r1.<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>($l1)
org.joda.time.LocalDate$Property.roundHalfFloorCopy : $r4 = virtualinvoke $r1.<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>($l1) >>>>>>>> org.joda.time.LocalDate$Property.roundHalfFloorCopy : return $r4
org.joda.time.LocalDate$Property.roundHalfFloorCopy : return $r4 >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.get : $r1 = virtualinvoke r0.<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeField getField()>()
org.joda.time.field.AbstractReadableInstantFieldProperty.get : $r1 = virtualinvoke r0.<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeField getField()>() >>>>>>>> org.joda.time.LocalDate$Property.getField : $r1 = r0.<org.joda.time.LocalDate$Property: org.joda.time.DateTimeField iField>
org.joda.time.LocalDate$Property.getField : $r1 = r0.<org.joda.time.LocalDate$Property: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.LocalDate$Property.getField : return $r1
org.joda.time.LocalDate$Property.getField : return $r1 >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.get : $l0 = virtualinvoke r0.<org.joda.time.field.AbstractReadableInstantFieldProperty: long getMillis()>()
org.joda.time.field.AbstractReadableInstantFieldProperty.get : $l0 = virtualinvoke r0.<org.joda.time.field.AbstractReadableInstantFieldProperty: long getMillis()>() >>>>>>>> org.joda.time.LocalDate$Property.getMillis : $r1 = r0.<org.joda.time.LocalDate$Property: org.joda.time.LocalDate iInstant>
org.joda.time.LocalDate$Property.getMillis : $r1 = r0.<org.joda.time.LocalDate$Property: org.joda.time.LocalDate iInstant> >>>>>>>> org.joda.time.LocalDate$Property.getMillis : $l0 = virtualinvoke $r1.<org.joda.time.LocalDate: long getLocalMillis()>()
org.joda.time.LocalDate$Property.getMillis : $l0 = virtualinvoke $r1.<org.joda.time.LocalDate: long getLocalMillis()>() >>>>>>>> org.joda.time.LocalDate$Property.getMillis : return $l0
org.joda.time.LocalDate$Property.getMillis : return $l0 >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.get : $i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>($l0)
org.joda.time.field.AbstractReadableInstantFieldProperty.get : $i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>($l0) >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.get : return $i1
