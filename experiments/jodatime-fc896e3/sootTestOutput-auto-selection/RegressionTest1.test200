org.joda.time.format.DateTimeFormat.mediumDate : $r0 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>(2, 4) >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : $i4 = i0 << 2
org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : $i4 = i0 << 2 >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : $i5 = $i4 + i0
org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : $i5 = $i4 + i0 >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : i2 = $i5 + i1
org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : i2 = $i5 + i1 >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : n0 = null
org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : n0 = null >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : $r3 = <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter[] cStyleCache>
org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : $r3 = <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter[] cStyleCache> >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : r0 = $r3
org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : r0 = $r3 >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : entermonitor $r3
org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : entermonitor $r3 >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : $r4 = <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter[] cStyleCache>
org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : $r4 = <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter[] cStyleCache> >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : r5 = $r4[i2]
org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : r5 = $r4[i2] >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : if r5 != null
org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : if r5 != null >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : exitmonitor r0
org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : exitmonitor r0 >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : goto [?= return r5]
org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : goto [?= return r5] >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : return r5
org.joda.time.format.DateTimeFormat.createFormatterForStyleIndex : return r5 >>>>>>>> org.joda.time.format.DateTimeFormat.mediumDate : return $r0
org.joda.time.format.DateTimeFormat.mediumDate : return $r0 >>>>>>>> org.joda.time.format.DateTimeFormatter.getChronology : $r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>
org.joda.time.format.DateTimeFormatter.getChronology : $r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono> >>>>>>>> org.joda.time.format.DateTimeFormatter.getChronology : return $r1
org.joda.time.format.DateTimeFormatter.getChronology : return $r1 >>>>>>>> org.joda.time.DateTimeUtils.currentTimeMillis : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider>
org.joda.time.DateTimeUtils.currentTimeMillis : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> >>>>>>>> org.joda.time.DateTimeUtils.currentTimeMillis : $l0 = interfaceinvoke $r0.<org.joda.time.DateTimeUtils$MillisProvider: long getMillis()>()
org.joda.time.DateTimeUtils.currentTimeMillis : $l0 = interfaceinvoke $r0.<org.joda.time.DateTimeUtils$MillisProvider: long getMillis()>() >>>>>>>> org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : $l1 = r0.<org.joda.time.DateTimeUtils$OffsetMillisProvider: long iMillis>
org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : $l1 = r0.<org.joda.time.DateTimeUtils$OffsetMillisProvider: long iMillis> >>>>>>>> org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : $l2 = $l0 + $l1
org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : $l2 = $l0 + $l1 >>>>>>>> org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : return $l2
org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : return $l2 >>>>>>>> org.joda.time.DateTimeUtils.currentTimeMillis : return $l0
org.joda.time.DateTimeUtils.currentTimeMillis : return $l0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r0 != null
org.joda.time.chrono.ISOChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.chrono.ISOChronology.getInstance : r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>() >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63
org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>
org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0]
org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0] >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r1 == null
org.joda.time.chrono.ISOChronology.getInstance : if r1 == null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2
org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null
org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.GregorianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : return $r1
org.joda.time.chrono.AssembledChronology.getBase : return $r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : r1 = $r2
org.joda.time.chrono.BasicChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : if $r2 == null
org.joda.time.chrono.BasicChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : return $r4
org.joda.time.chrono.BasicChronology.getZone : return $r4 >>>>>>>> org.joda.time.chrono.GregorianChronology.getZone : return $r1
org.joda.time.chrono.GregorianChronology.getZone : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : return $r3
org.joda.time.chrono.AssembledChronology.getZone : return $r3 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0
org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return r1
org.joda.time.chrono.ISOChronology.getInstance : return r1 >>>>>>>> org.joda.time.base.BaseDateTime.checkChronology : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.base.BaseDateTime.checkChronology : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getChronology : if r0 != null
org.joda.time.DateTimeUtils.getChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.DateTimeUtils.getChronology : return r0 >>>>>>>> org.joda.time.base.BaseDateTime.checkChronology : return $r2
org.joda.time.base.BaseDateTime.checkChronology : return $r2 >>>>>>>> org.joda.time.DateMidnight.checkInstant : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.DateMidnight.checkInstant : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfMonth : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth>
org.joda.time.chrono.AssembledChronology.dayOfMonth : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth> >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfMonth : return $r1
org.joda.time.chrono.AssembledChronology.dayOfMonth : return $r1 >>>>>>>> org.joda.time.DateMidnight.checkInstant : $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long roundFloor(long)>(l0)
org.joda.time.DateMidnight.checkInstant : $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long roundFloor(long)>(l0) >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : if $b1 < 0
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : if $b1 < 0 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l3 = l0 % $l2
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l3 = l0 % $l2 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l4 = l0 - $l3
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l4 = l0 - $l3 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : return $l4
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : return $l4 >>>>>>>> org.joda.time.DateMidnight.checkInstant : return $l1
org.joda.time.DateMidnight.checkInstant : return $l1 >>>>>>>> org.joda.time.base.AbstractDateTime.getDayOfWeek : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: org.joda.time.Chronology getChronology()>()
org.joda.time.base.AbstractDateTime.getDayOfWeek : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.base.BaseDateTime.getChronology : $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology>
org.joda.time.base.BaseDateTime.getChronology : $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.base.BaseDateTime.getChronology : return $r1
org.joda.time.base.BaseDateTime.getChronology : return $r1 >>>>>>>> org.joda.time.base.AbstractDateTime.getDayOfWeek : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>()
org.joda.time.base.AbstractDateTime.getDayOfWeek : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfWeek : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfWeek>
org.joda.time.chrono.AssembledChronology.dayOfWeek : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfWeek> >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfWeek : return $r1
org.joda.time.chrono.AssembledChronology.dayOfWeek : return $r1 >>>>>>>> org.joda.time.base.AbstractDateTime.getDayOfWeek : $l0 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: long getMillis()>()
org.joda.time.base.AbstractDateTime.getDayOfWeek : $l0 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: long getMillis()>() >>>>>>>> org.joda.time.base.BaseDateTime.getMillis : $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis>
org.joda.time.base.BaseDateTime.getMillis : $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis> >>>>>>>> org.joda.time.base.BaseDateTime.getMillis : return $l0
org.joda.time.base.BaseDateTime.getMillis : return $l0 >>>>>>>> org.joda.time.base.AbstractDateTime.getDayOfWeek : $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0)
org.joda.time.base.AbstractDateTime.getDayOfWeek : $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0) >>>>>>>> org.joda.time.chrono.GJDayOfWeekDateTimeField.get : $r1 = r0.<org.joda.time.chrono.GJDayOfWeekDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.GJDayOfWeekDateTimeField.get : $r1 = r0.<org.joda.time.chrono.GJDayOfWeekDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.GJDayOfWeekDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDayOfWeek(long)>(l0)
org.joda.time.chrono.GJDayOfWeekDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDayOfWeek(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $b2 = l0 cmp 0L
org.joda.time.chrono.BasicChronology.getDayOfWeek : $b2 = l0 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : if $b2 < 0
org.joda.time.chrono.BasicChronology.getDayOfWeek : if $b2 < 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : l1 = l0 / 86400000L
org.joda.time.chrono.BasicChronology.getDayOfWeek : l1 = l0 / 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : goto [?= $l9 = l1 + 3L]
org.joda.time.chrono.BasicChronology.getDayOfWeek : goto [?= $l9 = l1 + 3L] >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $l9 = l1 + 3L
org.joda.time.chrono.BasicChronology.getDayOfWeek : $l9 = l1 + 3L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $l10 = $l9 % 7L
org.joda.time.chrono.BasicChronology.getDayOfWeek : $l10 = $l9 % 7L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $i11 = (int) $l10
org.joda.time.chrono.BasicChronology.getDayOfWeek : $i11 = (int) $l10 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $i12 = 1 + $i11
org.joda.time.chrono.BasicChronology.getDayOfWeek : $i12 = 1 + $i11 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : return $i12
org.joda.time.chrono.BasicChronology.getDayOfWeek : return $i12 >>>>>>>> org.joda.time.chrono.GJDayOfWeekDateTimeField.get : return $i1
org.joda.time.chrono.GJDayOfWeekDateTimeField.get : return $i1 >>>>>>>> org.joda.time.base.AbstractDateTime.getDayOfWeek : return $i1
org.joda.time.base.AbstractDateTime.getDayOfWeek : return $i1 >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : $r3 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>(r2)
org.joda.time.format.DateTimeFormatter.printTo : $r3 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>(r2) >>>>>>>> org.joda.time.format.DateTimeFormatter.print : $r2 = new java.lang.StringBuffer
org.joda.time.format.DateTimeFormatter.print : $r2 = new java.lang.StringBuffer >>>>>>>> org.joda.time.format.DateTimeFormatter.print : $r4 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter requirePrinter()>()
org.joda.time.format.DateTimeFormatter.print : $r4 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter requirePrinter()>() >>>>>>>> org.joda.time.format.DateTimeFormatter.requirePrinter : r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter iPrinter>
org.joda.time.format.DateTimeFormatter.requirePrinter : r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter iPrinter> >>>>>>>> org.joda.time.format.DateTimeFormatter.requirePrinter : if r1 != null
org.joda.time.format.DateTimeFormatter.requirePrinter : if r1 != null >>>>>>>> org.joda.time.format.DateTimeFormatter.requirePrinter : return r1
org.joda.time.format.DateTimeFormatter.requirePrinter : return r1 >>>>>>>> org.joda.time.format.DateTimeFormatter.print : $i0 = interfaceinvoke $r4.<org.joda.time.format.DateTimePrinter: int estimatePrintedLength()>()
org.joda.time.format.DateTimeFormatter.print : $i0 = interfaceinvoke $r4.<org.joda.time.format.DateTimePrinter: int estimatePrintedLength()>() >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.estimatePrintedLength : return 40
org.joda.time.format.DateTimeFormat$StyleFormatter.estimatePrintedLength : return 40 >>>>>>>> org.joda.time.format.DateTimeFormatter.print : specialinvoke $r2.<java.lang.StringBuffer: void <init>(int)>($i0)
org.joda.time.format.DateTimeFormatter.print : specialinvoke $r2.<java.lang.StringBuffer: void <init>(int)>($i0) >>>>>>>> org.joda.time.format.DateTimeFormatter.print : r3 = $r2
org.joda.time.format.DateTimeFormatter.print : r3 = $r2 >>>>>>>> org.joda.time.format.DateTimeFormatter.print : virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadableInstant)>(r3, r1)
org.joda.time.format.DateTimeFormatter.print : virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadableInstant)>(r3, r1) >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r2)
org.joda.time.format.DateTimeFormatter.printTo : l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r2) >>>>>>>> org.joda.time.DateTimeUtils.getInstantMillis : if r0 != null
org.joda.time.DateTimeUtils.getInstantMillis : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getInstantMillis : $l1 = interfaceinvoke r0.<org.joda.time.ReadableInstant: long getMillis()>()
org.joda.time.DateTimeUtils.getInstantMillis : $l1 = interfaceinvoke r0.<org.joda.time.ReadableInstant: long getMillis()>() >>>>>>>> org.joda.time.DateTimeUtils.getInstantMillis : return $l1
org.joda.time.DateTimeUtils.getInstantMillis : return $l1 >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>(r2)
org.joda.time.format.DateTimeFormatter.printTo : r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>(r2) >>>>>>>> org.joda.time.DateTimeUtils.getInstantChronology : if r0 != null
org.joda.time.DateTimeUtils.getInstantChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getInstantChronology : r1 = interfaceinvoke r0.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>()
org.joda.time.DateTimeUtils.getInstantChronology : r1 = interfaceinvoke r0.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.DateTimeUtils.getInstantChronology : if r1 != null
org.joda.time.DateTimeUtils.getInstantChronology : if r1 != null >>>>>>>> org.joda.time.DateTimeUtils.getInstantChronology : return r1
org.joda.time.DateTimeUtils.getInstantChronology : return r1 >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : specialinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology)>(r1, l0, r3)
org.joda.time.format.DateTimeFormatter.printTo : specialinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology)>(r1, l0, r3) >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : r3 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter requirePrinter()>()
org.joda.time.format.DateTimeFormatter.printTo : r3 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter requirePrinter()>() >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : r5 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>(r2)
org.joda.time.format.DateTimeFormatter.printTo : r5 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>(r2) >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.format.DateTimeFormatter.selectChronology : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : $r3 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>
org.joda.time.format.DateTimeFormatter.selectChronology : $r3 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono> >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : if $r3 == null
org.joda.time.format.DateTimeFormatter.selectChronology : if $r3 == null >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : $r4 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeFormatter.selectChronology : $r4 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : if $r4 == null
org.joda.time.format.DateTimeFormatter.selectChronology : if $r4 == null >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : return r2
org.joda.time.format.DateTimeFormatter.selectChronology : return r2 >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : r4 = virtualinvoke r5.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.format.DateTimeFormatter.printTo : r4 = virtualinvoke r5.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : i1 = virtualinvoke r4.<org.joda.time.DateTimeZone: int getOffset(long)>(l0)
org.joda.time.format.DateTimeFormatter.printTo : i1 = virtualinvoke r4.<org.joda.time.DateTimeZone: int getOffset(long)>(l0) >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getOffset : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset>
org.joda.time.tz.FixedDateTimeZone.getOffset : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset> >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getOffset : return $i1
org.joda.time.tz.FixedDateTimeZone.getOffset : return $i1 >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : $l3 = (long) i1
org.joda.time.format.DateTimeFormatter.printTo : $l3 = (long) i1 >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : l2 = l0 + $l3
org.joda.time.format.DateTimeFormatter.printTo : l2 = l0 + $l3 >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : $l4 = l0 ^ l2
org.joda.time.format.DateTimeFormatter.printTo : $l4 = l0 ^ l2 >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : $b5 = $l4 cmp 0L
org.joda.time.format.DateTimeFormatter.printTo : $b5 = $l4 cmp 0L >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : if $b5 >= 0
org.joda.time.format.DateTimeFormatter.printTo : if $b5 >= 0 >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : $r6 = virtualinvoke r5.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>()
org.joda.time.format.DateTimeFormatter.printTo : $r6 = virtualinvoke r5.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>() >>>>>>>> org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>
org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.ISOChronology.withUTC : return $r1
org.joda.time.chrono.ISOChronology.withUTC : return $r1 >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : $r7 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>
org.joda.time.format.DateTimeFormatter.printTo : $r7 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale> >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : interfaceinvoke r3.<org.joda.time.format.DateTimePrinter: void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>(r1, l2, $r6, i1, r4, $r7)
org.joda.time.format.DateTimeFormatter.printTo : interfaceinvoke r3.<org.joda.time.format.DateTimePrinter: void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>(r1, l2, $r6, i1, r4, $r7) >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.printTo : $r6 = specialinvoke r0.<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>(r4)
org.joda.time.format.DateTimeFormat$StyleFormatter.printTo : $r6 = specialinvoke r0.<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>(r4) >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : if r1 != null
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : if r1 != null >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $r6 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>()
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $r6 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>() >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : goto [?= r7 = $r6]
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : goto [?= r7 = $r6] >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : r7 = $r6
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : r7 = $r6 >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $r8 = new java.lang.StringBuilder
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $r8 = new java.lang.StringBuilder >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $i0 = r0.<org.joda.time.format.DateTimeFormat$StyleFormatter: int iType>
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $i0 = r0.<org.joda.time.format.DateTimeFormat$StyleFormatter: int iType> >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $i1 = r0.<org.joda.time.format.DateTimeFormat$StyleFormatter: int iDateStyle>
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $i1 = r0.<org.joda.time.format.DateTimeFormat$StyleFormatter: int iDateStyle> >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $i2 = $i1 << 4
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $i2 = $i1 << 4 >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $i3 = $i0 + $i2
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $i3 = $i0 + $i2 >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $i4 = r0.<org.joda.time.format.DateTimeFormat$StyleFormatter: int iTimeStyle>
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $i4 = r0.<org.joda.time.format.DateTimeFormat$StyleFormatter: int iTimeStyle> >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $i5 = $i4 << 8
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $i5 = $i4 << 8 >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $i6 = $i3 + $i5
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $i6 = $i3 + $i5 >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $r9 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i6)
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $r9 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i6) >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9)
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9) >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $r11 = virtualinvoke r7.<java.util.Locale: java.lang.String toString()>()
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $r11 = virtualinvoke r7.<java.util.Locale: java.lang.String toString()>() >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11)
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11) >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : r2 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : r2 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : n0 = null
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : n0 = null >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $r13 = <org.joda.time.format.DateTimeFormat$StyleFormatter: java.util.Map cCache>
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $r13 = <org.joda.time.format.DateTimeFormat$StyleFormatter: java.util.Map cCache> >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : r3 = $r13
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : r3 = $r13 >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : entermonitor $r13
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : entermonitor $r13 >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $r14 = <org.joda.time.format.DateTimeFormat$StyleFormatter: java.util.Map cCache>
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $r14 = <org.joda.time.format.DateTimeFormat$StyleFormatter: java.util.Map cCache> >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $r15 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2)
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $r15 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : r16 = (org.joda.time.format.DateTimeFormatter) $r15
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : r16 = (org.joda.time.format.DateTimeFormatter) $r15 >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : if r16 != null
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : if r16 != null >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : r4 = virtualinvoke r0.<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>(r7)
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : r4 = virtualinvoke r0.<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>(r7) >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getPattern : r2 = null
org.joda.time.format.DateTimeFormat$StyleFormatter.getPattern : r2 = null >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getPattern : $i0 = r0.<org.joda.time.format.DateTimeFormat$StyleFormatter: int iType>
org.joda.time.format.DateTimeFormat$StyleFormatter.getPattern : $i0 = r0.<org.joda.time.format.DateTimeFormat$StyleFormatter: int iType> >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getPattern : tableswitch($i0) {     case 0:
org.joda.time.format.DateTimeFormat$StyleFormatter.getPattern : tableswitch($i0) {     case 0: >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getPattern : $i1 = r0.<org.joda.time.format.DateTimeFormat$StyleFormatter: int iDateStyle>
org.joda.time.format.DateTimeFormat$StyleFormatter.getPattern : $i1 = r0.<org.joda.time.format.DateTimeFormat$StyleFormatter: int iDateStyle> >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getPattern : r2 = staticinvoke <java.text.DateFormat: java.text.DateFormat getDateInstance(int,java.util.Locale)>($i1, r1)
org.joda.time.format.DateTimeFormat$StyleFormatter.getPattern : r2 = staticinvoke <java.text.DateFormat: java.text.DateFormat getDateInstance(int,java.util.Locale)>($i1, r1) >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getPattern : goto [?= $z0 = r2 instanceof java.text.SimpleDateFormat]
org.joda.time.format.DateTimeFormat$StyleFormatter.getPattern : goto [?= $z0 = r2 instanceof java.text.SimpleDateFormat] >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getPattern : $z0 = r2 instanceof java.text.SimpleDateFormat
org.joda.time.format.DateTimeFormat$StyleFormatter.getPattern : $z0 = r2 instanceof java.text.SimpleDateFormat >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getPattern : if $z0 != 0
org.joda.time.format.DateTimeFormat$StyleFormatter.getPattern : if $z0 != 0 >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getPattern : $r8 = (java.text.SimpleDateFormat) r2
org.joda.time.format.DateTimeFormat$StyleFormatter.getPattern : $r8 = (java.text.SimpleDateFormat) r2 >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getPattern : $r9 = virtualinvoke $r8.<java.text.SimpleDateFormat: java.lang.String toPattern()>()
org.joda.time.format.DateTimeFormat$StyleFormatter.getPattern : $r9 = virtualinvoke $r8.<java.text.SimpleDateFormat: java.lang.String toPattern()>() >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getPattern : return $r9
org.joda.time.format.DateTimeFormat$StyleFormatter.getPattern : return $r9 >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : r16 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>(r4)
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : r16 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>(r4) >>>>>>>> org.joda.time.format.DateTimeFormat.forPattern : $r1 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>(r0)
org.joda.time.format.DateTimeFormat.forPattern : $r1 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>(r0) >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : if r0 == null
org.joda.time.format.DateTimeFormat.createFormatterForPattern : if r0 == null >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : $i0 = virtualinvoke r0.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormat.createFormatterForPattern : $i0 = virtualinvoke r0.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : if $i0 != 0
org.joda.time.format.DateTimeFormat.createFormatterForPattern : if $i0 != 0 >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : n0 = null
org.joda.time.format.DateTimeFormat.createFormatterForPattern : n0 = null >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : $r5 = <org.joda.time.format.DateTimeFormat: java.util.Map cPatternedCache>
org.joda.time.format.DateTimeFormat.createFormatterForPattern : $r5 = <org.joda.time.format.DateTimeFormat: java.util.Map cPatternedCache> >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : r1 = $r5
org.joda.time.format.DateTimeFormat.createFormatterForPattern : r1 = $r5 >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : entermonitor $r5
org.joda.time.format.DateTimeFormat.createFormatterForPattern : entermonitor $r5 >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : $r6 = <org.joda.time.format.DateTimeFormat: java.util.Map cPatternedCache>
org.joda.time.format.DateTimeFormat.createFormatterForPattern : $r6 = <org.joda.time.format.DateTimeFormat: java.util.Map cPatternedCache> >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
org.joda.time.format.DateTimeFormat.createFormatterForPattern : $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : r8 = (org.joda.time.format.DateTimeFormatter) $r7
org.joda.time.format.DateTimeFormat.createFormatterForPattern : r8 = (org.joda.time.format.DateTimeFormatter) $r7 >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : if r8 != null
org.joda.time.format.DateTimeFormat.createFormatterForPattern : if r8 != null >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : $r9 = new org.joda.time.format.DateTimeFormatterBuilder
org.joda.time.format.DateTimeFormat.createFormatterForPattern : $r9 = new org.joda.time.format.DateTimeFormatterBuilder >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : specialinvoke $r9.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>()
org.joda.time.format.DateTimeFormat.createFormatterForPattern : specialinvoke $r9.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>() >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : r2 = $r9
org.joda.time.format.DateTimeFormat.createFormatterForPattern : r2 = $r9 >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : staticinvoke <org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>(r2, r0)
org.joda.time.format.DateTimeFormat.createFormatterForPattern : staticinvoke <org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>(r2, r0) >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : i0 = virtualinvoke r1.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormat.parsePatternTo : i0 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : r2 = newarray (int)[1]
org.joda.time.format.DateTimeFormat.parsePatternTo : r2 = newarray (int)[1] >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : i1 = 0
org.joda.time.format.DateTimeFormat.parsePatternTo : i1 = 0 >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : if i1 >= i0
org.joda.time.format.DateTimeFormat.parsePatternTo : if i1 >= i0 >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : r2[0] = i1
org.joda.time.format.DateTimeFormat.parsePatternTo : r2[0] = i1 >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : r3 = staticinvoke <org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>(r1, r2)
org.joda.time.format.DateTimeFormat.parsePatternTo : r3 = staticinvoke <org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>(r1, r2) >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : $r2 = new java.lang.StringBuffer
org.joda.time.format.DateTimeFormat.parseToken : $r2 = new java.lang.StringBuffer >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>()
org.joda.time.format.DateTimeFormat.parseToken : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : r3 = $r2
org.joda.time.format.DateTimeFormat.parseToken : r3 = $r2 >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : i0 = r1[0]
org.joda.time.format.DateTimeFormat.parseToken : i0 = r1[0] >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : i1 = virtualinvoke r0.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormat.parseToken : i1 = virtualinvoke r0.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0)
org.joda.time.format.DateTimeFormat.parseToken : c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0) >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : if c2 < 65
org.joda.time.format.DateTimeFormat.parseToken : if c2 < 65 >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : if c2 <= 90
org.joda.time.format.DateTimeFormat.parseToken : if c2 <= 90 >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2)
org.joda.time.format.DateTimeFormat.parseToken : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2) >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : $i4 = i0 + 1
org.joda.time.format.DateTimeFormat.parseToken : $i4 = i0 + 1 >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : if $i4 >= i1
org.joda.time.format.DateTimeFormat.parseToken : if $i4 >= i1 >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : $i5 = i0 + 1
org.joda.time.format.DateTimeFormat.parseToken : $i5 = i0 + 1 >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i5)
org.joda.time.format.DateTimeFormat.parseToken : c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i5) >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : if c3 != c2
org.joda.time.format.DateTimeFormat.parseToken : if c3 != c2 >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : i0 = i0 + 1
org.joda.time.format.DateTimeFormat.parseToken : i0 = i0 + 1 >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : goto [?= $i4 = i0 + 1]
org.joda.time.format.DateTimeFormat.parseToken : goto [?= $i4 = i0 + 1] >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : r1[0] = i0
org.joda.time.format.DateTimeFormat.parseToken : r1[0] = i0 >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : $r9 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
org.joda.time.format.DateTimeFormat.parseToken : $r9 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : return $r9
org.joda.time.format.DateTimeFormat.parseToken : return $r9 >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : i4 = r2[0]
org.joda.time.format.DateTimeFormat.parsePatternTo : i4 = r2[0] >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : i2 = virtualinvoke r3.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormat.parsePatternTo : i2 = virtualinvoke r3.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : if i2 != 0
org.joda.time.format.DateTimeFormat.parsePatternTo : if i2 != 0 >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : c3 = virtualinvoke r3.<java.lang.String: char charAt(int)>(0)
org.joda.time.format.DateTimeFormat.parsePatternTo : c3 = virtualinvoke r3.<java.lang.String: char charAt(int)>(0) >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : tableswitch(c3) {     case 39:
org.joda.time.format.DateTimeFormat.parsePatternTo : tableswitch(c3) {     case 39: >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : if i2 < 3
org.joda.time.format.DateTimeFormat.parsePatternTo : if i2 < 3 >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : if i2 < 4
org.joda.time.format.DateTimeFormat.parsePatternTo : if i2 < 4 >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearShortText()>()
org.joda.time.format.DateTimeFormat.parsePatternTo : virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearShortText()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendMonthOfYearShortText : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>()
org.joda.time.format.DateTimeFormatterBuilder.appendMonthOfYearShortText : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>() >>>>>>>> org.joda.time.DateTimeFieldType.monthOfYear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MONTH_OF_YEAR_TYPE>
org.joda.time.DateTimeFieldType.monthOfYear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MONTH_OF_YEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.monthOfYear : return $r0
org.joda.time.DateTimeFieldType.monthOfYear : return $r0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendMonthOfYearShortText : $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendShortText(org.joda.time.DateTimeFieldType)>($r1)
org.joda.time.format.DateTimeFormatterBuilder.appendMonthOfYearShortText : $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendShortText(org.joda.time.DateTimeFieldType)>($r1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendShortText : if r1 != null
org.joda.time.format.DateTimeFormatterBuilder.appendShortText : if r1 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendShortText : $r3 = new org.joda.time.format.DateTimeFormatterBuilder$TextField
org.joda.time.format.DateTimeFormatterBuilder.appendShortText : $r3 = new org.joda.time.format.DateTimeFormatterBuilder$TextField >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendShortText : specialinvoke $r3.<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <init>(org.joda.time.DateTimeFieldType,boolean)>(r1, 1)
org.joda.time.format.DateTimeFormatterBuilder.appendShortText : specialinvoke $r3.<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <init>(org.joda.time.DateTimeFieldType,boolean)>(r1, 1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendShortText : $r4 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r3)
org.joda.time.format.DateTimeFormatterBuilder.appendShortText : $r4 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r3) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.append0 : r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter> = null
org.joda.time.format.DateTimeFormatterBuilder.append0 : r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter> = null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.append0 : $r2 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>
org.joda.time.format.DateTimeFormatterBuilder.append0 : $r2 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.append0 : virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)
org.joda.time.format.DateTimeFormatterBuilder.append0 : virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.append0 : $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>
org.joda.time.format.DateTimeFormatterBuilder.append0 : $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.append0 : virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)
org.joda.time.format.DateTimeFormatterBuilder.append0 : virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.append0 : return r0
org.joda.time.format.DateTimeFormatterBuilder.append0 : return r0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendShortText : return $r4
org.joda.time.format.DateTimeFormatterBuilder.appendShortText : return $r4 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendMonthOfYearShortText : return $r2
org.joda.time.format.DateTimeFormatterBuilder.appendMonthOfYearShortText : return $r2 >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : goto [?= i1 = i4 + 1]
org.joda.time.format.DateTimeFormat.parsePatternTo : goto [?= i1 = i4 + 1] >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : i1 = i4 + 1
org.joda.time.format.DateTimeFormat.parsePatternTo : i1 = i4 + 1 >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : goto [?= (branch)]
org.joda.time.format.DateTimeFormat.parsePatternTo : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : if c2 < 97
org.joda.time.format.DateTimeFormat.parseToken : if c2 < 97 >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39)
org.joda.time.format.DateTimeFormat.parseToken : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39) >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : z0 = 0
org.joda.time.format.DateTimeFormat.parseToken : z0 = 0 >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : if i0 >= i1
org.joda.time.format.DateTimeFormat.parseToken : if i0 >= i1 >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : c6 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0)
org.joda.time.format.DateTimeFormat.parseToken : c6 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0) >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : if c6 != 39
org.joda.time.format.DateTimeFormat.parseToken : if c6 != 39 >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : if z0 != 0
org.joda.time.format.DateTimeFormat.parseToken : if z0 != 0 >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : if c6 < 65
org.joda.time.format.DateTimeFormat.parseToken : if c6 < 65 >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : if c6 < 97
org.joda.time.format.DateTimeFormat.parseToken : if c6 < 97 >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c6)
org.joda.time.format.DateTimeFormat.parseToken : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c6) >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : goto [?= (branch)]
org.joda.time.format.DateTimeFormat.parseToken : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : if c6 <= 90
org.joda.time.format.DateTimeFormat.parseToken : if c6 <= 90 >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : if c6 > 122
org.joda.time.format.DateTimeFormat.parseToken : if c6 > 122 >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : i0 = i0 + -1
org.joda.time.format.DateTimeFormat.parseToken : i0 = i0 + -1 >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : goto [?= r1[0] = i0]
org.joda.time.format.DateTimeFormat.parseToken : goto [?= r1[0] = i0] >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : r41 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>(1)
org.joda.time.format.DateTimeFormat.parsePatternTo : r41 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>(1) >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : $i24 = virtualinvoke r41.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormat.parsePatternTo : $i24 = virtualinvoke r41.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : if $i24 != 1
org.joda.time.format.DateTimeFormat.parsePatternTo : if $i24 != 1 >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : $c25 = virtualinvoke r41.<java.lang.String: char charAt(int)>(0)
org.joda.time.format.DateTimeFormat.parsePatternTo : $c25 = virtualinvoke r41.<java.lang.String: char charAt(int)>(0) >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>($c25)
org.joda.time.format.DateTimeFormat.parsePatternTo : virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>($c25) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendLiteral : $r1 = new org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral
org.joda.time.format.DateTimeFormatterBuilder.appendLiteral : $r1 = new org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendLiteral : specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void <init>(char)>(c0)
org.joda.time.format.DateTimeFormatterBuilder.appendLiteral : specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void <init>(char)>(c0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendLiteral : $r2 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r1)
org.joda.time.format.DateTimeFormatterBuilder.appendLiteral : $r2 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendLiteral : return $r2
org.joda.time.format.DateTimeFormatterBuilder.appendLiteral : return $r2 >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : if c2 > 122
org.joda.time.format.DateTimeFormat.parseToken : if c2 > 122 >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>(i2)
org.joda.time.format.DateTimeFormat.parsePatternTo : virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>(i2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDayOfMonth : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>()
org.joda.time.format.DateTimeFormatterBuilder.appendDayOfMonth : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>() >>>>>>>> org.joda.time.DateTimeFieldType.dayOfMonth : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_MONTH_TYPE>
org.joda.time.DateTimeFieldType.dayOfMonth : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_MONTH_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.dayOfMonth : return $r0
org.joda.time.DateTimeFieldType.dayOfMonth : return $r0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDayOfMonth : $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, 2)
org.joda.time.format.DateTimeFormatterBuilder.appendDayOfMonth : $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, 2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : if r1 != null
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : if r1 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : if i1 >= i0
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : if i1 >= i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : if i0 < 0
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : if i0 < 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : if i1 > 0
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : if i1 > 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : if i0 > 1
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : if i0 > 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : $r4 = new org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : $r4 = new org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : specialinvoke $r4.<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>(r1, i1, 0)
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : specialinvoke $r4.<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>(r1, i1, 0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : $r5 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r4)
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : $r5 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r4) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : return $r5
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : return $r5 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDayOfMonth : return $r2
org.joda.time.format.DateTimeFormatterBuilder.appendDayOfMonth : return $r2 >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : $r43 = new java.lang.String
org.joda.time.format.DateTimeFormat.parsePatternTo : $r43 = new java.lang.String >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : specialinvoke $r43.<java.lang.String: void <init>(java.lang.String)>(r41)
org.joda.time.format.DateTimeFormat.parsePatternTo : specialinvoke $r43.<java.lang.String: void <init>(java.lang.String)>(r41) >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>($r43)
org.joda.time.format.DateTimeFormat.parsePatternTo : virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>($r43) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendLiteral : if r1 != null
org.joda.time.format.DateTimeFormatterBuilder.appendLiteral : if r1 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendLiteral : $i0 = virtualinvoke r1.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder.appendLiteral : $i0 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendLiteral : lookupswitch($i0) {     case 0:
org.joda.time.format.DateTimeFormatterBuilder.appendLiteral : lookupswitch($i0) {     case 0: >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendLiteral : $r5 = new org.joda.time.format.DateTimeFormatterBuilder$StringLiteral
org.joda.time.format.DateTimeFormatterBuilder.appendLiteral : $r5 = new org.joda.time.format.DateTimeFormatterBuilder$StringLiteral >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendLiteral : specialinvoke $r5.<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void <init>(java.lang.String)>(r1)
org.joda.time.format.DateTimeFormatterBuilder.appendLiteral : specialinvoke $r5.<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void <init>(java.lang.String)>(r1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendLiteral : $r6 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r5)
org.joda.time.format.DateTimeFormatterBuilder.appendLiteral : $r6 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r5) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendLiteral : return $r6
org.joda.time.format.DateTimeFormatterBuilder.appendLiteral : return $r6 >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : if i2 != 2
org.joda.time.format.DateTimeFormat.parsePatternTo : if i2 != 2 >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : i16 = 9
org.joda.time.format.DateTimeFormat.parsePatternTo : i16 = 9 >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : $i17 = i4 + 1
org.joda.time.format.DateTimeFormat.parsePatternTo : $i17 = i4 + 1 >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : if $i17 >= i0
org.joda.time.format.DateTimeFormat.parsePatternTo : if $i17 >= i0 >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : lookupswitch(c3) {     case 89:
org.joda.time.format.DateTimeFormat.parsePatternTo : lookupswitch(c3) {     case 89: >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYear(int,int)>(i2, i16)
org.joda.time.format.DateTimeFormat.parsePatternTo : virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYear(int,int)>(i2, i16) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendYear : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>()
org.joda.time.format.DateTimeFormatterBuilder.appendYear : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>() >>>>>>>> org.joda.time.DateTimeFieldType.year : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_TYPE>
org.joda.time.DateTimeFieldType.year : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.year : return $r0
org.joda.time.DateTimeFieldType.year : return $r0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendYear : $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, i1)
org.joda.time.format.DateTimeFormatterBuilder.appendYear : $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, i1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : if r1 != null
org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : if r1 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : if i1 >= i0
org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : if i1 >= i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : if i0 < 0
org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : if i0 < 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : if i1 > 0
org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : if i1 > 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : if i0 > 1
org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : if i0 > 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : $r6 = new org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber
org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : $r6 = new org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : specialinvoke $r6.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean,int)>(r1, i1, 1, i0)
org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : specialinvoke $r6.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean,int)>(r1, i1, 1, i0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : $r7 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r6)
org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : $r7 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r6) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : return $r7
org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : return $r7 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendYear : return $r2
org.joda.time.format.DateTimeFormatterBuilder.appendYear : return $r2 >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : r8 = virtualinvoke r2.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>()
org.joda.time.format.DateTimeFormat.createFormatterForPattern : r8 = virtualinvoke r2.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>()
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter>
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if r1 != null
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if r1 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>()
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if $i0 != 2
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if $i0 != 2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r7 = new org.joda.time.format.DateTimeFormatterBuilder$Composite
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r7 = new org.joda.time.format.DateTimeFormatterBuilder$Composite >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r8 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r8 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : specialinvoke $r7.<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>($r8)
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : specialinvoke $r7.<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>($r8) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : i0 = interfaceinvoke r1.<java.util.List: int size()>()
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : i0 = interfaceinvoke r1.<java.util.List: int size()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : i1 = 0
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : i1 = 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : if i1 >= i0
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : if i1 >= i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1)
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $z0 = r4 instanceof org.joda.time.format.DateTimePrinter
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $z0 = r4 instanceof org.joda.time.format.DateTimePrinter >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : if $z0 == 0
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $z1 = r4 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $z1 = r4 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : if $z1 == 0
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : if $z1 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r4)
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r4) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $i2 = i1 + 1
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $i2 = i1 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i2)
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $z3 = r7 instanceof org.joda.time.format.DateTimeParser
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $z3 = r7 instanceof org.joda.time.format.DateTimeParser >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : if $z3 == 0
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : if $z3 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $z4 = r7 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $z4 = r7 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : if $z4 == 0
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : if $z4 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r7)
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r7) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : i1 = i1 + 2
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : i1 = i1 + 2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TextField.estimatePrintedLength : $z0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: boolean iShort>
org.joda.time.format.DateTimeFormatterBuilder$TextField.estimatePrintedLength : $z0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: boolean iShort> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TextField.estimatePrintedLength : if $z0 == 0
org.joda.time.format.DateTimeFormatterBuilder$TextField.estimatePrintedLength : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TextField.estimatePrintedLength : $b0 = 6
org.joda.time.format.DateTimeFormatterBuilder$TextField.estimatePrintedLength : $b0 = 6 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TextField.estimatePrintedLength : goto [?= return $b0]
org.joda.time.format.DateTimeFormatterBuilder$TextField.estimatePrintedLength : goto [?= return $b0] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TextField.estimatePrintedLength : return $b0
org.joda.time.format.DateTimeFormatterBuilder$TextField.estimatePrintedLength : return $b0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.estimatePrintedLength : return 1
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.estimatePrintedLength : return 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber.estimatePrintedLength : $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: int iMaxParsedDigits>
org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber.estimatePrintedLength : $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: int iMaxParsedDigits> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber.estimatePrintedLength : return $i0
org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber.estimatePrintedLength : return $i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.estimatePrintedLength : $r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: java.lang.String iValue>
org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.estimatePrintedLength : $r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: java.lang.String iValue> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.estimatePrintedLength : $i0 = virtualinvoke $r1.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.estimatePrintedLength : $i0 = virtualinvoke $r1.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.estimatePrintedLength : return $i0
org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.estimatePrintedLength : return $i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.estimatePrintedLength : $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int iMaxParsedDigits>
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.estimatePrintedLength : $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int iMaxParsedDigits> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.estimatePrintedLength : return $i0
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.estimatePrintedLength : return $i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TextField.estimateParsedLength : $i0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: int estimatePrintedLength()>()
org.joda.time.format.DateTimeFormatterBuilder$TextField.estimateParsedLength : $i0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: int estimatePrintedLength()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TextField.estimateParsedLength : return $i0
org.joda.time.format.DateTimeFormatterBuilder$TextField.estimateParsedLength : return $i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.estimateParsedLength : return 1
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.estimateParsedLength : return 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.estimateParsedLength : $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int iMaxParsedDigits>
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.estimateParsedLength : $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int iMaxParsedDigits> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.estimateParsedLength : return $i0
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.estimateParsedLength : return $i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.estimateParsedLength : $r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: java.lang.String iValue>
org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.estimateParsedLength : $r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: java.lang.String iValue> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.estimateParsedLength : $i0 = virtualinvoke $r1.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.estimateParsedLength : $i0 = virtualinvoke $r1.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.estimateParsedLength : return $i0
org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.estimateParsedLength : return $i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r1 = $r7
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r1 = $r7 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter> = r1
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter> = r1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : return r1
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : return r1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r2 = null
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r2 = null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : $z0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isPrinter(java.lang.Object)>(r1)
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : $z0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isPrinter(java.lang.Object)>(r1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $z0 = r1 instanceof org.joda.time.format.DateTimePrinter
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $z0 = r1 instanceof org.joda.time.format.DateTimePrinter >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : if $z0 == 0
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $z1 = r1 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $z1 = r1 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : if $z1 == 0
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : if $z1 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $r2 = (org.joda.time.format.DateTimeFormatterBuilder$Composite) r1
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $r2 = (org.joda.time.format.DateTimeFormatterBuilder$Composite) r1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $z2 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder$Composite: boolean isPrinter()>()
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $z2 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder$Composite: boolean isPrinter()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : $r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimePrinter[] iPrinters>
org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : $r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimePrinter[] iPrinters> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : if $r1 == null
org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : if $r1 == null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : $z0 = 1
org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : $z0 = 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : goto [?= return $z0]
org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : goto [?= return $z0] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : return $z0
org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : return $z0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : return $z2
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : return $z2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : if $z0 == 0
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r2 = (org.joda.time.format.DateTimePrinter) r1
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r2 = (org.joda.time.format.DateTimePrinter) r1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r3 = null
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r3 = null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : $z1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isParser(java.lang.Object)>(r1)
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : $z1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isParser(java.lang.Object)>(r1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isParser : $z0 = r1 instanceof org.joda.time.format.DateTimeParser
org.joda.time.format.DateTimeFormatterBuilder.isParser : $z0 = r1 instanceof org.joda.time.format.DateTimeParser >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isParser : if $z0 == 0
org.joda.time.format.DateTimeFormatterBuilder.isParser : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isParser : $z1 = r1 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite
org.joda.time.format.DateTimeFormatterBuilder.isParser : $z1 = r1 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isParser : if $z1 == 0
org.joda.time.format.DateTimeFormatterBuilder.isParser : if $z1 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isParser : $r2 = (org.joda.time.format.DateTimeFormatterBuilder$Composite) r1
org.joda.time.format.DateTimeFormatterBuilder.isParser : $r2 = (org.joda.time.format.DateTimeFormatterBuilder$Composite) r1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isParser : $z2 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder$Composite: boolean isParser()>()
org.joda.time.format.DateTimeFormatterBuilder.isParser : $z2 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder$Composite: boolean isParser()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.isParser : $r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimeParser[] iParsers>
org.joda.time.format.DateTimeFormatterBuilder$Composite.isParser : $r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimeParser[] iParsers> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.isParser : if $r1 == null
org.joda.time.format.DateTimeFormatterBuilder$Composite.isParser : if $r1 == null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.isParser : $z0 = 1
org.joda.time.format.DateTimeFormatterBuilder$Composite.isParser : $z0 = 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.isParser : goto [?= return $z0]
org.joda.time.format.DateTimeFormatterBuilder$Composite.isParser : goto [?= return $z0] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.isParser : return $z0
org.joda.time.format.DateTimeFormatterBuilder$Composite.isParser : return $z0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isParser : return $z2
org.joda.time.format.DateTimeFormatterBuilder.isParser : return $z2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : if $z1 == 0
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : if $z1 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r3 = (org.joda.time.format.DateTimeParser) r1
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r3 = (org.joda.time.format.DateTimeParser) r1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : if r2 != null
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : if r2 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : $r4 = new org.joda.time.format.DateTimeFormatter
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : $r4 = new org.joda.time.format.DateTimeFormatter >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : specialinvoke $r4.<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser)>(r2, r3)
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : specialinvoke $r4.<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser)>(r2, r3) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : return $r4
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : return $r4 >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : $r10 = <org.joda.time.format.DateTimeFormat: java.util.Map cPatternedCache>
org.joda.time.format.DateTimeFormat.createFormatterForPattern : $r10 = <org.joda.time.format.DateTimeFormat: java.util.Map cPatternedCache> >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r8)
org.joda.time.format.DateTimeFormat.createFormatterForPattern : interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r8) >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : exitmonitor r1
org.joda.time.format.DateTimeFormat.createFormatterForPattern : exitmonitor r1 >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : goto [?= return r8]
org.joda.time.format.DateTimeFormat.createFormatterForPattern : goto [?= return r8] >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : return r8
org.joda.time.format.DateTimeFormat.createFormatterForPattern : return r8 >>>>>>>> org.joda.time.format.DateTimeFormat.forPattern : return $r1
org.joda.time.format.DateTimeFormat.forPattern : return $r1 >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $r17 = <org.joda.time.format.DateTimeFormat$StyleFormatter: java.util.Map cCache>
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : $r17 = <org.joda.time.format.DateTimeFormat$StyleFormatter: java.util.Map cCache> >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r16)
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r16) >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : exitmonitor r3
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : exitmonitor r3 >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : goto [?= return r16]
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : goto [?= return r16] >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : return r16
org.joda.time.format.DateTimeFormat$StyleFormatter.getFormatter : return r16 >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.printTo : r5 = virtualinvoke $r6.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter getPrinter()>()
org.joda.time.format.DateTimeFormat$StyleFormatter.printTo : r5 = virtualinvoke $r6.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter getPrinter()>() >>>>>>>> org.joda.time.format.DateTimeFormatter.getPrinter : $r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter iPrinter>
org.joda.time.format.DateTimeFormatter.getPrinter : $r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter iPrinter> >>>>>>>> org.joda.time.format.DateTimeFormatter.getPrinter : return $r1
org.joda.time.format.DateTimeFormatter.getPrinter : return $r1 >>>>>>>> org.joda.time.format.DateTimeFormat$StyleFormatter.printTo : interfaceinvoke r5.<org.joda.time.format.DateTimePrinter: void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>(r1, l0, r2, i1, r3, r4)
org.joda.time.format.DateTimeFormat$StyleFormatter.printTo : interfaceinvoke r5.<org.joda.time.format.DateTimePrinter: void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>(r1, l0, r2, i1, r3, r4) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : r5 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimePrinter[] iPrinters>
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : r5 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimePrinter[] iPrinters> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : if r5 != null
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : if r5 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : if r4 != null
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : if r4 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : r4 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>()
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : r4 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : i2 = lengthof r5
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : i2 = lengthof r5 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : i3 = 0
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : i3 = 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : if i3 >= i2
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : if i3 >= i2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : $r7 = r5[i3]
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : $r7 = r5[i3] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : interfaceinvoke $r7.<org.joda.time.format.DateTimePrinter: void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>(r1, l0, r2, i1, r3, r4)
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : interfaceinvoke $r7.<org.joda.time.format.DateTimePrinter: void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>(r1, l0, r2, i1, r3, r4) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TextField.printTo : $r6 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(long,org.joda.time.Chronology,java.util.Locale)>(l0, r2, r4)
org.joda.time.format.DateTimeFormatterBuilder$TextField.printTo : $r6 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(long,org.joda.time.Chronology,java.util.Locale)>(l0, r2, r4) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TextField.print : $r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: org.joda.time.DateTimeFieldType iFieldType>
org.joda.time.format.DateTimeFormatterBuilder$TextField.print : $r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: org.joda.time.DateTimeFieldType iFieldType> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TextField.print : r3 = virtualinvoke $r4.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r1)
org.joda.time.format.DateTimeFormatterBuilder$TextField.print : r3 = virtualinvoke $r4.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : tableswitch($b0) {     case 1:
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : tableswitch($b0) {     case 1: >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.monthOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear>
org.joda.time.chrono.AssembledChronology.monthOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.monthOfYear : return $r1
org.joda.time.chrono.AssembledChronology.monthOfYear : return $r1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r9
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r9 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TextField.print : $z0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: boolean iShort>
org.joda.time.format.DateTimeFormatterBuilder$TextField.print : $z0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: boolean iShort> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TextField.print : if $z0 == 0
org.joda.time.format.DateTimeFormatterBuilder$TextField.print : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TextField.print : $r5 = virtualinvoke r3.<org.joda.time.DateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>(l0, r2)
org.joda.time.format.DateTimeFormatterBuilder$TextField.print : $r5 = virtualinvoke r3.<org.joda.time.DateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>(l0, r2) >>>>>>>> org.joda.time.field.BaseDateTimeField.getAsShortText : $i1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int get(long)>(l0)
org.joda.time.field.BaseDateTimeField.getAsShortText : $i1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long)>(l0)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getMonthOfYear : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicChronology.getMonthOfYear : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerYearDividedByTwo()>()
org.joda.time.chrono.BasicChronology.getYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerYearDividedByTwo()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getAverageMillisPerYearDividedByTwo : return 15778476000L
org.joda.time.chrono.GregorianChronology.getAverageMillisPerYearDividedByTwo : return 15778476000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l7 = l0 >> 1
org.joda.time.chrono.BasicChronology.getYear : $l7 = l0 >> 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getApproxMillisAtEpochDividedByTwo()>()
org.joda.time.chrono.BasicChronology.getYear : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getApproxMillisAtEpochDividedByTwo()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getApproxMillisAtEpochDividedByTwo : return 31083597720000L
org.joda.time.chrono.GregorianChronology.getApproxMillisAtEpochDividedByTwo : return 31083597720000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l2 = $l7 + $l8
org.joda.time.chrono.BasicChronology.getYear : l2 = $l7 + $l8 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b9 = l2 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : $b9 = l2 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b9 >= 0
org.joda.time.chrono.BasicChronology.getYear : if $b9 >= 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l11 = l2 / l1
org.joda.time.chrono.BasicChronology.getYear : $l11 = l2 / l1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : i3 = (int) $l11
org.joda.time.chrono.BasicChronology.getYear : i3 = (int) $l11 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i3)
org.joda.time.chrono.BasicChronology.getYear : l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i3) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearMillis : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $r2 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache>
org.joda.time.chrono.BasicChronology.getYearInfo : $r2 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $i1 = i0 & 1023
org.joda.time.chrono.BasicChronology.getYearInfo : $i1 = i0 & 1023 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r2[$i1]
org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r2[$i1] >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : if r1 == null
org.joda.time.chrono.BasicChronology.getYearInfo : if r1 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $i2 = r1.<org.joda.time.chrono.BasicChronology$YearInfo: int iYear>
org.joda.time.chrono.BasicChronology.getYearInfo : $i2 = r1.<org.joda.time.chrono.BasicChronology$YearInfo: int iYear> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : if $i2 == i0
org.joda.time.chrono.BasicChronology.getYearInfo : if $i2 == i0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : return r1
org.joda.time.chrono.BasicChronology.getYearInfo : return r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : $l1 = $r1.<org.joda.time.chrono.BasicChronology$YearInfo: long iFirstDayMillis>
org.joda.time.chrono.BasicChronology.getYearMillis : $l1 = $r1.<org.joda.time.chrono.BasicChronology$YearInfo: long iFirstDayMillis> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : return $l1
org.joda.time.chrono.BasicChronology.getYearMillis : return $l1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l5 = l0 - l4
org.joda.time.chrono.BasicChronology.getYear : l5 = l0 - l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b12 = l5 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : $b12 = l5 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b12 >= 0
org.joda.time.chrono.BasicChronology.getYear : if $b12 >= 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b13 = l5 cmp 31536000000L
org.joda.time.chrono.BasicChronology.getYear : $b13 = l5 cmp 31536000000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b13 < 0
org.joda.time.chrono.BasicChronology.getYear : if $b13 < 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : return i3
org.joda.time.chrono.BasicChronology.getYear : return i3 >>>>>>>> org.joda.time.chrono.BasicChronology.getMonthOfYear : $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, $i1)
org.joda.time.chrono.BasicChronology.getMonthOfYear : $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, $i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i1)
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l4 = l0 - $l3
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l4 = l0 - $l3 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l5 = $l4 >> 10
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l5 = $l4 >> 10 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : i2 = (int) $l5
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : i2 = (int) $l5 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1)
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1) >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : $i1 = i0 & 3
org.joda.time.chrono.GregorianChronology.isLeapYear : $i1 = i0 & 3 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : if $i1 != 0
org.joda.time.chrono.GregorianChronology.isLeapYear : if $i1 != 0 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : $z0 = 0
org.joda.time.chrono.GregorianChronology.isLeapYear : $z0 = 0 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : return $z0
org.joda.time.chrono.GregorianChronology.isLeapYear : return $z0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 15271875
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 15271875 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 7593750
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 7593750 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 10125000
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 10125000 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 12740625
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 12740625 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 6
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 6 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : goto [?= return $b6]
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : goto [?= return $b6] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : return $b6
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : return $b6 >>>>>>>> org.joda.time.chrono.BasicChronology.getMonthOfYear : return $i2
org.joda.time.chrono.BasicChronology.getMonthOfYear : return $i2 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : return $i1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : return $i1 >>>>>>>> org.joda.time.field.BaseDateTimeField.getAsShortText : $r2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>($i1, r1)
org.joda.time.field.BaseDateTimeField.getAsShortText : $r2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>($i1, r1) >>>>>>>> org.joda.time.chrono.GJMonthOfYearDateTimeField.getAsShortText : $r2 = staticinvoke <org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>(r1)
org.joda.time.chrono.GJMonthOfYearDateTimeField.getAsShortText : $r2 = staticinvoke <org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>(r1) >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.forLocale : if r0 != null
org.joda.time.chrono.GJLocaleSymbols.forLocale : if r0 != null >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.forLocale : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.GJLocaleSymbols.forLocale : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0) >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.forLocale : i0 = $i1 & 63
org.joda.time.chrono.GJLocaleSymbols.forLocale : i0 = $i1 & 63 >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.forLocale : $r4 = <org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols[] cFastCache>
org.joda.time.chrono.GJLocaleSymbols.forLocale : $r4 = <org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols[] cFastCache> >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.forLocale : r1 = $r4[i0]
org.joda.time.chrono.GJLocaleSymbols.forLocale : r1 = $r4[i0] >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.forLocale : if r1 == null
org.joda.time.chrono.GJLocaleSymbols.forLocale : if r1 == null >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.forLocale : $r5 = r1.<org.joda.time.chrono.GJLocaleSymbols: java.lang.ref.WeakReference iLocale>
org.joda.time.chrono.GJLocaleSymbols.forLocale : $r5 = r1.<org.joda.time.chrono.GJLocaleSymbols: java.lang.ref.WeakReference iLocale> >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.forLocale : $r6 = virtualinvoke $r5.<java.lang.ref.WeakReference: java.lang.Object get()>()
org.joda.time.chrono.GJLocaleSymbols.forLocale : $r6 = virtualinvoke $r5.<java.lang.ref.WeakReference: java.lang.Object get()>() >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.forLocale : if $r6 != r0
org.joda.time.chrono.GJLocaleSymbols.forLocale : if $r6 != r0 >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.forLocale : return r1
org.joda.time.chrono.GJLocaleSymbols.forLocale : return r1 >>>>>>>> org.joda.time.chrono.GJMonthOfYearDateTimeField.getAsShortText : $r3 = virtualinvoke $r2.<org.joda.time.chrono.GJLocaleSymbols: java.lang.String monthOfYearValueToShortText(int)>(i0)
org.joda.time.chrono.GJMonthOfYearDateTimeField.getAsShortText : $r3 = virtualinvoke $r2.<org.joda.time.chrono.GJLocaleSymbols: java.lang.String monthOfYearValueToShortText(int)>(i0) >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.monthOfYearValueToShortText : $r1 = r0.<org.joda.time.chrono.GJLocaleSymbols: java.lang.String[] iShortMonths>
org.joda.time.chrono.GJLocaleSymbols.monthOfYearValueToShortText : $r1 = r0.<org.joda.time.chrono.GJLocaleSymbols: java.lang.String[] iShortMonths> >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.monthOfYearValueToShortText : $r2 = $r1[i0]
org.joda.time.chrono.GJLocaleSymbols.monthOfYearValueToShortText : $r2 = $r1[i0] >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.monthOfYearValueToShortText : return $r2
org.joda.time.chrono.GJLocaleSymbols.monthOfYearValueToShortText : return $r2 >>>>>>>> org.joda.time.chrono.GJMonthOfYearDateTimeField.getAsShortText : return $r3
org.joda.time.chrono.GJMonthOfYearDateTimeField.getAsShortText : return $r3 >>>>>>>> org.joda.time.field.BaseDateTimeField.getAsShortText : return $r2
org.joda.time.field.BaseDateTimeField.getAsShortText : return $r2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TextField.print : return $r5
org.joda.time.format.DateTimeFormatterBuilder$TextField.print : return $r5 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TextField.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6)
org.joda.time.format.DateTimeFormatterBuilder$TextField.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TextField.printTo : goto [?= return]
org.joda.time.format.DateTimeFormatterBuilder$TextField.printTo : goto [?= return] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : i3 = i3 + 1
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : i3 = i3 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.printTo : $c2 = r0.<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: char iValue>
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.printTo : $c2 = r0.<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: char iValue> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2)
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber.printTo : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: org.joda.time.DateTimeFieldType iFieldType>
org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber.printTo : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: org.joda.time.DateTimeFieldType iFieldType> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber.printTo : r5 = virtualinvoke $r6.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r2)
org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber.printTo : r5 = virtualinvoke $r6.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r2) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r10 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r10 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>() >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r10
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r10 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber.printTo : $i2 = virtualinvoke r5.<org.joda.time.DateTimeField: int get(long)>(l0)
org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber.printTo : $i2 = virtualinvoke r5.<org.joda.time.DateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long)>(l0)
org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicChronology.getDayOfMonth : i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i1)
org.joda.time.chrono.BasicChronology.getDayOfMonth : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i1, i2)
org.joda.time.chrono.BasicChronology.getDayOfMonth : $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i1, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1)
org.joda.time.chrono.BasicChronology.getDayOfMonth : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i1, i2)
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i1, i2) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0)
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: long[] MIN_TOTAL_MILLIS_BY_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: long[] MIN_TOTAL_MILLIS_BY_MONTH_ARRAY> >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $i4 = i1 - 1
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $i4 = i1 - 1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $l5 = $r2[$i4]
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $l5 = $r2[$i4] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : return $l5
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : return $l5 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : l5 = l3 + $l4
org.joda.time.chrono.BasicChronology.getDayOfMonth : l5 = l3 + $l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $l6 = l0 - l5
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l6 = l0 - l5 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $l7 = $l6 / 86400000L
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l7 = $l6 / 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $i8 = (int) $l7
org.joda.time.chrono.BasicChronology.getDayOfMonth : $i8 = (int) $l7 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $i9 = $i8 + 1
org.joda.time.chrono.BasicChronology.getDayOfMonth : $i9 = $i8 + 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i9
org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i9 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i3
org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i3 >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : return $i1
org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : return $i1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber.printTo : staticinvoke <org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.StringBuffer,int)>(r1, $i2)
org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber.printTo : staticinvoke <org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.StringBuffer,int)>(r1, $i2) >>>>>>>> org.joda.time.format.FormatUtils.appendUnpaddedInteger : if i0 >= 0
org.joda.time.format.FormatUtils.appendUnpaddedInteger : if i0 >= 0 >>>>>>>> org.joda.time.format.FormatUtils.appendUnpaddedInteger : if i0 >= 10
org.joda.time.format.FormatUtils.appendUnpaddedInteger : if i0 >= 10 >>>>>>>> org.joda.time.format.FormatUtils.appendUnpaddedInteger : $i2 = i0 + 48
org.joda.time.format.FormatUtils.appendUnpaddedInteger : $i2 = i0 + 48 >>>>>>>> org.joda.time.format.FormatUtils.appendUnpaddedInteger : $c3 = (char) $i2
org.joda.time.format.FormatUtils.appendUnpaddedInteger : $c3 = (char) $i2 >>>>>>>> org.joda.time.format.FormatUtils.appendUnpaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3)
org.joda.time.format.FormatUtils.appendUnpaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3) >>>>>>>> org.joda.time.format.FormatUtils.appendUnpaddedInteger : goto [?= return]
org.joda.time.format.FormatUtils.appendUnpaddedInteger : goto [?= return] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber.printTo : goto [?= return]
org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber.printTo : goto [?= return] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.printTo : $r5 = r0.<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: java.lang.String iValue>
org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.printTo : $r5 = r0.<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: java.lang.String iValue> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5)
org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: org.joda.time.DateTimeFieldType iFieldType>
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: org.joda.time.DateTimeFieldType iFieldType> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : r5 = virtualinvoke $r6.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r2)
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : r5 = virtualinvoke $r6.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r2) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r7 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r7 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.year : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear>
org.joda.time.chrono.AssembledChronology.year : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.year : return $r1
org.joda.time.chrono.AssembledChronology.year : return $r1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r7
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r7 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $i2 = virtualinvoke r5.<org.joda.time.DateTimeField: int get(long)>(l0)
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $i2 = virtualinvoke r5.<org.joda.time.DateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.get : return $i1
org.joda.time.chrono.BasicYearDateTimeField.get : return $i1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $i3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int iMinPrintedDigits>
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $i3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int iMinPrintedDigits> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, $i2, $i3)
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, $i2, $i3) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 0
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 0 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 10
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 10 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 100
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 100 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 1000
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 1000 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 10000
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 10000 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : i15 = 4
org.joda.time.format.FormatUtils.appendPaddedInteger : i15 = 4 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= (branch)]
org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= (branch)] >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= i15
org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= i15 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $r10 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0)
org.joda.time.format.FormatUtils.appendPaddedInteger : $r10 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10)
org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : goto [?= return]
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : goto [?= return] >>>>>>>> org.joda.time.format.DateTimeFormatter.print : $r5 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
org.joda.time.format.DateTimeFormatter.print : $r5 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> org.joda.time.format.DateTimeFormatter.print : return $r5
org.joda.time.format.DateTimeFormatter.print : return $r5 >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r3)
