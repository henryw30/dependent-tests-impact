org.joda.time.chrono.ISOChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.chrono.ISOChronology.getInstance : r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>() >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63
org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>
org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0]
org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0] >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r1 == null
org.joda.time.chrono.ISOChronology.getInstance : if r1 == null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2
org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null
org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.GregorianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : return $r1
org.joda.time.chrono.AssembledChronology.getBase : return $r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : r1 = $r2
org.joda.time.chrono.BasicChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : if $r2 == null
org.joda.time.chrono.BasicChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : return $r4
org.joda.time.chrono.BasicChronology.getZone : return $r4 >>>>>>>> org.joda.time.chrono.GregorianChronology.getZone : return $r1
org.joda.time.chrono.GregorianChronology.getZone : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : return $r3
org.joda.time.chrono.AssembledChronology.getZone : return $r3 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0
org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return r1
org.joda.time.chrono.ISOChronology.getInstance : return r1 >>>>>>>> org.joda.time.DateTimeUtils.currentTimeMillis : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider>
org.joda.time.DateTimeUtils.currentTimeMillis : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> >>>>>>>> org.joda.time.DateTimeUtils.currentTimeMillis : $l0 = interfaceinvoke $r0.<org.joda.time.DateTimeUtils$MillisProvider: long getMillis()>()
org.joda.time.DateTimeUtils.currentTimeMillis : $l0 = interfaceinvoke $r0.<org.joda.time.DateTimeUtils$MillisProvider: long getMillis()>() >>>>>>>> org.joda.time.DateTimeUtils$SystemMillisProvider.getMillis : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.joda.time.DateTimeUtils$SystemMillisProvider.getMillis : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.joda.time.DateTimeUtils$SystemMillisProvider.getMillis : return $l0
org.joda.time.DateTimeUtils$SystemMillisProvider.getMillis : return $l0 >>>>>>>> org.joda.time.DateTimeUtils.currentTimeMillis : return $l0
org.joda.time.DateTimeUtils.currentTimeMillis : return $l0 >>>>>>>> org.joda.time.DateTimeUtils.getChronology : if r0 != null
org.joda.time.DateTimeUtils.getChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.DateTimeUtils.getChronology : return r0 >>>>>>>> org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>
org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.ISOChronology.withUTC : return $r1
org.joda.time.chrono.ISOChronology.withUTC : return $r1 >>>>>>>> org.joda.time.chrono.BaseChronology.get : i1 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>()
org.joda.time.chrono.BaseChronology.get : i1 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>() >>>>>>>> org.joda.time.TimeOfDay.size : return 4
org.joda.time.TimeOfDay.size : return 4 >>>>>>>> org.joda.time.chrono.BaseChronology.get : r2 = newarray (int)[i1]
org.joda.time.chrono.BaseChronology.get : r2 = newarray (int)[i1] >>>>>>>> org.joda.time.chrono.BaseChronology.get : i2 = 0
org.joda.time.chrono.BaseChronology.get : i2 = 0 >>>>>>>> org.joda.time.chrono.BaseChronology.get : if i2 >= i1
org.joda.time.chrono.BaseChronology.get : if i2 >= i1 >>>>>>>> org.joda.time.chrono.BaseChronology.get : $r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i2)
org.joda.time.chrono.BaseChronology.get : $r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i2) >>>>>>>> org.joda.time.TimeOfDay.getFieldType : $r1 = <org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType[] FIELD_TYPES>
org.joda.time.TimeOfDay.getFieldType : $r1 = <org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType[] FIELD_TYPES> >>>>>>>> org.joda.time.TimeOfDay.getFieldType : $r2 = $r1[i0]
org.joda.time.TimeOfDay.getFieldType : $r2 = $r1[i0] >>>>>>>> org.joda.time.TimeOfDay.getFieldType : return $r2
org.joda.time.TimeOfDay.getFieldType : return $r2 >>>>>>>> org.joda.time.chrono.BaseChronology.get : $r4 = virtualinvoke $r3.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r0)
org.joda.time.chrono.BaseChronology.get : $r4 = virtualinvoke $r3.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r0) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : tableswitch($b0) {     case 1:
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : tableswitch($b0) {     case 1: >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r19 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r19 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.hourOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay>
org.joda.time.chrono.AssembledChronology.hourOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.hourOfDay : return $r1
org.joda.time.chrono.AssembledChronology.hourOfDay : return $r1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r19
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r19 >>>>>>>> org.joda.time.chrono.BaseChronology.get : $i3 = virtualinvoke $r4.<org.joda.time.DateTimeField: int get(long)>(l0)
org.joda.time.chrono.BaseChronology.get : $i3 = virtualinvoke $r4.<org.joda.time.DateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDateTimeField.get : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : if $b1 < 0
org.joda.time.field.PreciseDateTimeField.get : if $b1 < 0 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: long getUnitMillis()>()
org.joda.time.field.PreciseDateTimeField.get : $l2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: long getUnitMillis()>() >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : return $l0
org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : return $l0 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l3 = l0 / $l2
org.joda.time.field.PreciseDateTimeField.get : $l3 = l0 / $l2 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $i4 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange>
org.joda.time.field.PreciseDateTimeField.get : $i4 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange> >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l5 = (long) $i4
org.joda.time.field.PreciseDateTimeField.get : $l5 = (long) $i4 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l6 = $l3 % $l5
org.joda.time.field.PreciseDateTimeField.get : $l6 = $l3 % $l5 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $i7 = (int) $l6
org.joda.time.field.PreciseDateTimeField.get : $i7 = (int) $l6 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : return $i7
org.joda.time.field.PreciseDateTimeField.get : return $i7 >>>>>>>> org.joda.time.chrono.BaseChronology.get : r2[i2] = $i3
org.joda.time.chrono.BaseChronology.get : r2[i2] = $i3 >>>>>>>> org.joda.time.chrono.BaseChronology.get : i2 = i2 + 1
org.joda.time.chrono.BaseChronology.get : i2 = i2 + 1 >>>>>>>> org.joda.time.chrono.BaseChronology.get : goto [?= (branch)]
org.joda.time.chrono.BaseChronology.get : goto [?= (branch)] >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r21 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r21 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.minuteOfHour : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour>
org.joda.time.chrono.AssembledChronology.minuteOfHour : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour> >>>>>>>> org.joda.time.chrono.AssembledChronology.minuteOfHour : return $r1
org.joda.time.chrono.AssembledChronology.minuteOfHour : return $r1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r21
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r21 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r23 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r23 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.secondOfMinute : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute>
org.joda.time.chrono.AssembledChronology.secondOfMinute : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute> >>>>>>>> org.joda.time.chrono.AssembledChronology.secondOfMinute : return $r1
org.joda.time.chrono.AssembledChronology.secondOfMinute : return $r1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r23
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r23 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r25 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r25 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.millisOfSecond : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond>
org.joda.time.chrono.AssembledChronology.millisOfSecond : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond> >>>>>>>> org.joda.time.chrono.AssembledChronology.millisOfSecond : return $r1
org.joda.time.chrono.AssembledChronology.millisOfSecond : return $r1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r25
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r25 >>>>>>>> org.joda.time.chrono.BaseChronology.get : return r2
org.joda.time.chrono.BaseChronology.get : return r2 >>>>>>>> org.joda.time.TimeOfDay.getFieldTypes : $r1 = <org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType[] FIELD_TYPES>
org.joda.time.TimeOfDay.getFieldTypes : $r1 = <org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType[] FIELD_TYPES> >>>>>>>> org.joda.time.TimeOfDay.getFieldTypes : $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>()
org.joda.time.TimeOfDay.getFieldTypes : $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.joda.time.TimeOfDay.getFieldTypes : $r3 = (org.joda.time.DateTimeFieldType[]) $r2
org.joda.time.TimeOfDay.getFieldTypes : $r3 = (org.joda.time.DateTimeFieldType[]) $r2 >>>>>>>> org.joda.time.TimeOfDay.getFieldTypes : $r4 = (org.joda.time.DateTimeFieldType[]) $r3
org.joda.time.TimeOfDay.getFieldTypes : $r4 = (org.joda.time.DateTimeFieldType[]) $r3 >>>>>>>> org.joda.time.TimeOfDay.getFieldTypes : return $r4
org.joda.time.TimeOfDay.getFieldTypes : return $r4 >>>>>>>> org.joda.time.TimeOfDay.getMillisOfSecond : $i0 = virtualinvoke r0.<org.joda.time.TimeOfDay: int getValue(int)>(3)
org.joda.time.TimeOfDay.getMillisOfSecond : $i0 = virtualinvoke r0.<org.joda.time.TimeOfDay: int getValue(int)>(3) >>>>>>>> org.joda.time.base.BasePartial.getValue : $r1 = r0.<org.joda.time.base.BasePartial: int[] iValues>
org.joda.time.base.BasePartial.getValue : $r1 = r0.<org.joda.time.base.BasePartial: int[] iValues> >>>>>>>> org.joda.time.base.BasePartial.getValue : $i1 = $r1[i0]
org.joda.time.base.BasePartial.getValue : $i1 = $r1[i0] >>>>>>>> org.joda.time.base.BasePartial.getValue : return $i1
org.joda.time.base.BasePartial.getValue : return $i1 >>>>>>>> org.joda.time.TimeOfDay.getMillisOfSecond : return $i0
org.joda.time.TimeOfDay.getMillisOfSecond : return $i0 >>>>>>>> org.joda.time.TimeOfDay.plusSeconds : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>()
org.joda.time.TimeOfDay.plusSeconds : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>() >>>>>>>> org.joda.time.DurationFieldType.seconds : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType SECONDS_TYPE>
org.joda.time.DurationFieldType.seconds : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType SECONDS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.seconds : return $r0
org.joda.time.DurationFieldType.seconds : return $r0 >>>>>>>> org.joda.time.TimeOfDay.plusSeconds : $r2 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withFieldAdded(org.joda.time.DurationFieldType,int)>($r1, i0)
org.joda.time.TimeOfDay.plusSeconds : $r2 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withFieldAdded(org.joda.time.DurationFieldType,int)>($r1, i0) >>>>>>>> org.joda.time.TimeOfDay.withFieldAdded : i1 = virtualinvoke r0.<org.joda.time.TimeOfDay: int indexOfSupported(org.joda.time.DurationFieldType)>(r1)
org.joda.time.TimeOfDay.withFieldAdded : i1 = virtualinvoke r0.<org.joda.time.TimeOfDay: int indexOfSupported(org.joda.time.DurationFieldType)>(r1) >>>>>>>> org.joda.time.base.AbstractPartial.indexOfSupported : i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DurationFieldType)>(r1)
org.joda.time.base.AbstractPartial.indexOfSupported : i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DurationFieldType)>(r1) >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : i0 = 0
org.joda.time.base.AbstractPartial.indexOf : i0 = 0 >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : i1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>()
org.joda.time.base.AbstractPartial.indexOf : i1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>() >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : if i0 >= i1
org.joda.time.base.AbstractPartial.indexOf : if i0 >= i1 >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i0)
org.joda.time.base.AbstractPartial.indexOf : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i0) >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : $r3 = virtualinvoke $r2.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>()
org.joda.time.base.AbstractPartial.indexOf : $r3 = virtualinvoke $r2.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>() >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getDurationType : $r1 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType iUnitType>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getDurationType : $r1 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType iUnitType> >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getDurationType : return $r1
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getDurationType : return $r1 >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : if $r3 != r1
org.joda.time.base.AbstractPartial.indexOf : if $r3 != r1 >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : i0 = i0 + 1
org.joda.time.base.AbstractPartial.indexOf : i0 = i0 + 1 >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : goto [?= (branch)]
org.joda.time.base.AbstractPartial.indexOf : goto [?= (branch)] >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : return i0
org.joda.time.base.AbstractPartial.indexOf : return i0 >>>>>>>> org.joda.time.base.AbstractPartial.indexOfSupported : if i0 != -1
org.joda.time.base.AbstractPartial.indexOfSupported : if i0 != -1 >>>>>>>> org.joda.time.base.AbstractPartial.indexOfSupported : return i0
org.joda.time.base.AbstractPartial.indexOfSupported : return i0 >>>>>>>> org.joda.time.TimeOfDay.withFieldAdded : if i0 != 0
org.joda.time.TimeOfDay.withFieldAdded : if i0 != 0 >>>>>>>> org.joda.time.TimeOfDay.withFieldAdded : r2 = virtualinvoke r0.<org.joda.time.TimeOfDay: int[] getValues()>()
org.joda.time.TimeOfDay.withFieldAdded : r2 = virtualinvoke r0.<org.joda.time.TimeOfDay: int[] getValues()>() >>>>>>>> org.joda.time.base.BasePartial.getValues : $r1 = r0.<org.joda.time.base.BasePartial: int[] iValues>
org.joda.time.base.BasePartial.getValues : $r1 = r0.<org.joda.time.base.BasePartial: int[] iValues> >>>>>>>> org.joda.time.base.BasePartial.getValues : $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>()
org.joda.time.base.BasePartial.getValues : $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.joda.time.base.BasePartial.getValues : $r3 = (int[]) $r2
org.joda.time.base.BasePartial.getValues : $r3 = (int[]) $r2 >>>>>>>> org.joda.time.base.BasePartial.getValues : $r4 = (int[]) $r3
org.joda.time.base.BasePartial.getValues : $r4 = (int[]) $r3 >>>>>>>> org.joda.time.base.BasePartial.getValues : return $r4
org.joda.time.base.BasePartial.getValues : return $r4 >>>>>>>> org.joda.time.TimeOfDay.withFieldAdded : $r3 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int)>(i1)
org.joda.time.TimeOfDay.withFieldAdded : $r3 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int)>(i1) >>>>>>>> org.joda.time.base.AbstractPartial.getField : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.Chronology getChronology()>()
org.joda.time.base.AbstractPartial.getField : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.base.BasePartial.getChronology : $r1 = r0.<org.joda.time.base.BasePartial: org.joda.time.Chronology iChronology>
org.joda.time.base.BasePartial.getChronology : $r1 = r0.<org.joda.time.base.BasePartial: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.base.BasePartial.getChronology : return $r1
org.joda.time.base.BasePartial.getChronology : return $r1 >>>>>>>> org.joda.time.base.AbstractPartial.getField : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>(i0, $r1)
org.joda.time.base.AbstractPartial.getField : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>(i0, $r1) >>>>>>>> org.joda.time.TimeOfDay.getField : tableswitch(i0) {     case 0:
org.joda.time.TimeOfDay.getField : tableswitch(i0) {     case 0: >>>>>>>> org.joda.time.TimeOfDay.getField : $r5 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>()
org.joda.time.TimeOfDay.getField : $r5 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>() >>>>>>>> org.joda.time.TimeOfDay.getField : return $r5
org.joda.time.TimeOfDay.getField : return $r5 >>>>>>>> org.joda.time.base.AbstractPartial.getField : return $r2
org.joda.time.base.AbstractPartial.getField : return $r2 >>>>>>>> org.joda.time.TimeOfDay.withFieldAdded : r4 = virtualinvoke $r3.<org.joda.time.DateTimeField: int[] addWrapPartial(org.joda.time.ReadablePartial,int,int[],int)>(r0, i1, r2, i0)
org.joda.time.TimeOfDay.withFieldAdded : r4 = virtualinvoke $r3.<org.joda.time.DateTimeField: int[] addWrapPartial(org.joda.time.ReadablePartial,int,int[],int)>(r0, i1, r2, i0) >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : if i1 != 0
org.joda.time.field.BaseDateTimeField.addWrapPartial : if i1 != 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : r3 = null
org.joda.time.field.BaseDateTimeField.addWrapPartial : r3 = null >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : if i1 <= 0
org.joda.time.field.BaseDateTimeField.addWrapPartial : if i1 <= 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : i2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2)
org.joda.time.field.BaseDateTimeField.addWrapPartial : i2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2) >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>(r1)
org.joda.time.field.BaseDateTimeField.getMaximumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>(r1) >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue()>()
org.joda.time.field.BaseDateTimeField.getMaximumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange>
org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange> >>>>>>>> org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i1 = $i0 - 1
org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i1 = $i0 - 1 >>>>>>>> org.joda.time.field.PreciseDateTimeField.getMaximumValue : return $i1
org.joda.time.field.PreciseDateTimeField.getMaximumValue : return $i1 >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumValue : return $i0
org.joda.time.field.BaseDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $i4 = r2[i0]
org.joda.time.field.BaseDateTimeField.addWrapPartial : $i4 = r2[i0] >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $i5 = $i4 + i1
org.joda.time.field.BaseDateTimeField.addWrapPartial : $i5 = $i4 + i1 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : l3 = (long) $i5
org.joda.time.field.BaseDateTimeField.addWrapPartial : l3 = (long) $i5 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $l6 = (long) i2
org.joda.time.field.BaseDateTimeField.addWrapPartial : $l6 = (long) i2 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $b7 = l3 cmp $l6
org.joda.time.field.BaseDateTimeField.addWrapPartial : $b7 = l3 cmp $l6 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : if $b7 > 0
org.joda.time.field.BaseDateTimeField.addWrapPartial : if $b7 > 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $i8 = (int) l3
org.joda.time.field.BaseDateTimeField.addWrapPartial : $i8 = (int) l3 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : r2[i0] = $i8
org.joda.time.field.BaseDateTimeField.addWrapPartial : r2[i0] = $i8 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : goto [?= (branch)]
org.joda.time.field.BaseDateTimeField.addWrapPartial : goto [?= (branch)] >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : if i1 >= 0
org.joda.time.field.BaseDateTimeField.addWrapPartial : if i1 >= 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $i36 = r2[i0]
org.joda.time.field.BaseDateTimeField.addWrapPartial : $i36 = r2[i0] >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $r14 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r1, i0, r2, $i36)
org.joda.time.field.BaseDateTimeField.addWrapPartial : $r14 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r1, i0, r2, $i36) >>>>>>>> org.joda.time.field.BaseDateTimeField.set : $i3 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2)
org.joda.time.field.BaseDateTimeField.set : $i3 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2) >>>>>>>> org.joda.time.field.BaseDateTimeField.getMinimumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>(r1)
org.joda.time.field.BaseDateTimeField.getMinimumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>(r1) >>>>>>>> org.joda.time.field.BaseDateTimeField.getMinimumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue()>()
org.joda.time.field.BaseDateTimeField.getMinimumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue()>() >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getMinimumValue : return 0
org.joda.time.field.PreciseDurationDateTimeField.getMinimumValue : return 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.getMinimumValue : return $i0
org.joda.time.field.BaseDateTimeField.getMinimumValue : return $i0 >>>>>>>> org.joda.time.field.BaseDateTimeField.set : $i4 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2)
org.joda.time.field.BaseDateTimeField.set : $i4 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2) >>>>>>>> org.joda.time.field.BaseDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i3, $i4)
org.joda.time.field.BaseDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i3, $i4) >>>>>>>> org.joda.time.field.FieldUtils.verifyValueBounds : if i0 < i1
org.joda.time.field.FieldUtils.verifyValueBounds : if i0 < i1 >>>>>>>> org.joda.time.field.FieldUtils.verifyValueBounds : if i0 <= i2
org.joda.time.field.FieldUtils.verifyValueBounds : if i0 <= i2 >>>>>>>> org.joda.time.field.BaseDateTimeField.set : r2[i0] = i1
org.joda.time.field.BaseDateTimeField.set : r2[i0] = i1 >>>>>>>> org.joda.time.field.BaseDateTimeField.set : i2 = i0 + 1
org.joda.time.field.BaseDateTimeField.set : i2 = i0 + 1 >>>>>>>> org.joda.time.field.BaseDateTimeField.set : $i5 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>()
org.joda.time.field.BaseDateTimeField.set : $i5 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.set : if i2 >= $i5
org.joda.time.field.BaseDateTimeField.set : if i2 >= $i5 >>>>>>>> org.joda.time.field.BaseDateTimeField.set : r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i2)
org.joda.time.field.BaseDateTimeField.set : r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i2) >>>>>>>> org.joda.time.TimeOfDay.getField : $r6 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>()
org.joda.time.TimeOfDay.getField : $r6 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>() >>>>>>>> org.joda.time.TimeOfDay.getField : return $r6
org.joda.time.TimeOfDay.getField : return $r6 >>>>>>>> org.joda.time.field.BaseDateTimeField.set : $i6 = r2[i2]
org.joda.time.field.BaseDateTimeField.set : $i6 = r2[i2] >>>>>>>> org.joda.time.field.BaseDateTimeField.set : $i7 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2)
org.joda.time.field.BaseDateTimeField.set : $i7 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2) >>>>>>>> org.joda.time.field.BaseDateTimeField.set : if $i6 <= $i7
org.joda.time.field.BaseDateTimeField.set : if $i6 <= $i7 >>>>>>>> org.joda.time.field.BaseDateTimeField.set : $i9 = r2[i2]
org.joda.time.field.BaseDateTimeField.set : $i9 = r2[i2] >>>>>>>> org.joda.time.field.BaseDateTimeField.set : $i10 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2)
org.joda.time.field.BaseDateTimeField.set : $i10 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2) >>>>>>>> org.joda.time.field.BaseDateTimeField.set : if $i9 >= $i10
org.joda.time.field.BaseDateTimeField.set : if $i9 >= $i10 >>>>>>>> org.joda.time.field.BaseDateTimeField.set : i2 = i2 + 1
org.joda.time.field.BaseDateTimeField.set : i2 = i2 + 1 >>>>>>>> org.joda.time.field.BaseDateTimeField.set : goto [?= $i5 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>()]
org.joda.time.field.BaseDateTimeField.set : goto [?= $i5 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>()] >>>>>>>> org.joda.time.field.BaseDateTimeField.set : return r2
org.joda.time.field.BaseDateTimeField.set : return r2 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : return $r14
org.joda.time.field.BaseDateTimeField.addWrapPartial : return $r14 >>>>>>>> org.joda.time.TimeOfDay.withFieldAdded : $r5 = new org.joda.time.TimeOfDay
org.joda.time.TimeOfDay.withFieldAdded : $r5 = new org.joda.time.TimeOfDay >>>>>>>> org.joda.time.TimeOfDay.withFieldAdded : specialinvoke $r5.<org.joda.time.TimeOfDay: void <init>(org.joda.time.TimeOfDay,int[])>(r0, r4)
org.joda.time.TimeOfDay.withFieldAdded : specialinvoke $r5.<org.joda.time.TimeOfDay: void <init>(org.joda.time.TimeOfDay,int[])>(r0, r4) >>>>>>>> org.joda.time.TimeOfDay.withFieldAdded : return $r5
org.joda.time.TimeOfDay.withFieldAdded : return $r5 >>>>>>>> org.joda.time.TimeOfDay.plusSeconds : return $r2
org.joda.time.TimeOfDay.plusSeconds : return $r2 >>>>>>>> org.joda.time.TimeOfDay.getSecondOfMinute : $i0 = virtualinvoke r0.<org.joda.time.TimeOfDay: int getValue(int)>(2)
org.joda.time.TimeOfDay.getSecondOfMinute : $i0 = virtualinvoke r0.<org.joda.time.TimeOfDay: int getValue(int)>(2) >>>>>>>> org.joda.time.TimeOfDay.getSecondOfMinute : return $i0
org.joda.time.TimeOfDay.getSecondOfMinute : return $i0 >>>>>>>> org.joda.time.TimeOfDay.toDateTimeToday : $r1 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.DateTime toDateTimeToday(org.joda.time.DateTimeZone)>(null)
org.joda.time.TimeOfDay.toDateTimeToday : $r1 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.DateTime toDateTimeToday(org.joda.time.DateTimeZone)>(null) >>>>>>>> org.joda.time.TimeOfDay.toDateTimeToday : $r3 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.Chronology getChronology()>()
org.joda.time.TimeOfDay.toDateTimeToday : $r3 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.TimeOfDay.toDateTimeToday : r2 = virtualinvoke $r3.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>(r1)
org.joda.time.TimeOfDay.toDateTimeToday : r2 = virtualinvoke $r3.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>(r1) >>>>>>>> org.joda.time.chrono.ISOChronology.withZone : if r1 != null
org.joda.time.chrono.ISOChronology.withZone : if r1 != null >>>>>>>> org.joda.time.chrono.ISOChronology.withZone : r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.chrono.ISOChronology.withZone : r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>() >>>>>>>> org.joda.time.chrono.ISOChronology.withZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.ISOChronology.withZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.ISOChronology.withZone : if r1 != $r2
org.joda.time.chrono.ISOChronology.withZone : if r1 != $r2 >>>>>>>> org.joda.time.chrono.ISOChronology.withZone : return r0
org.joda.time.chrono.ISOChronology.withZone : return r0 >>>>>>>> org.joda.time.TimeOfDay.toDateTimeToday : l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>()
org.joda.time.TimeOfDay.toDateTimeToday : l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>() >>>>>>>> org.joda.time.TimeOfDay.toDateTimeToday : l1 = virtualinvoke r2.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>(r0, l0)
org.joda.time.TimeOfDay.toDateTimeToday : l1 = virtualinvoke r2.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>(r0, l0) >>>>>>>> org.joda.time.chrono.BaseChronology.set : i1 = 0
org.joda.time.chrono.BaseChronology.set : i1 = 0 >>>>>>>> org.joda.time.chrono.BaseChronology.set : i2 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>()
org.joda.time.chrono.BaseChronology.set : i2 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>() >>>>>>>> org.joda.time.chrono.BaseChronology.set : if i1 >= i2
org.joda.time.chrono.BaseChronology.set : if i1 >= i2 >>>>>>>> org.joda.time.chrono.BaseChronology.set : $r2 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i1)
org.joda.time.chrono.BaseChronology.set : $r2 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i1) >>>>>>>> org.joda.time.chrono.BaseChronology.set : $r3 = virtualinvoke $r2.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r0)
org.joda.time.chrono.BaseChronology.set : $r3 = virtualinvoke $r2.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r0) >>>>>>>> org.joda.time.chrono.BaseChronology.set : $i3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int getValue(int)>(i1)
org.joda.time.chrono.BaseChronology.set : $i3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int getValue(int)>(i1) >>>>>>>> org.joda.time.chrono.BaseChronology.set : l0 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,int)>(l0, $i3)
org.joda.time.chrono.BaseChronology.set : l0 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,int)>(l0, $i3) >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int getMinimumValue()>()
org.joda.time.field.PreciseDateTimeField.set : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int getMinimumValue()>() >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $i3 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>()
org.joda.time.field.PreciseDateTimeField.set : $i3 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3)
org.joda.time.field.PreciseDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3) >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $i4 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int get(long)>(l0)
org.joda.time.field.PreciseDateTimeField.set : $i4 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $i5 = i1 - $i4
org.joda.time.field.PreciseDateTimeField.set : $i5 = i1 - $i4 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $l6 = (long) $i5
org.joda.time.field.PreciseDateTimeField.set : $l6 = (long) $i5 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $l7 = r0.<org.joda.time.field.PreciseDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDateTimeField.set : $l7 = r0.<org.joda.time.field.PreciseDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $l8 = $l6 * $l7
org.joda.time.field.PreciseDateTimeField.set : $l8 = $l6 * $l7 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $l9 = l0 + $l8
org.joda.time.field.PreciseDateTimeField.set : $l9 = l0 + $l8 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : return $l9
org.joda.time.field.PreciseDateTimeField.set : return $l9 >>>>>>>> org.joda.time.chrono.BaseChronology.set : i1 = i1 + 1
org.joda.time.chrono.BaseChronology.set : i1 = i1 + 1 >>>>>>>> org.joda.time.chrono.BaseChronology.set : goto [?= (branch)]
org.joda.time.chrono.BaseChronology.set : goto [?= (branch)] >>>>>>>> org.joda.time.chrono.BaseChronology.set : return l0
org.joda.time.chrono.BaseChronology.set : return l0 >>>>>>>> org.joda.time.TimeOfDay.toDateTimeToday : $r4 = new org.joda.time.DateTime
org.joda.time.TimeOfDay.toDateTimeToday : $r4 = new org.joda.time.DateTime >>>>>>>> org.joda.time.TimeOfDay.toDateTimeToday : specialinvoke $r4.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>(l1, r2)
org.joda.time.TimeOfDay.toDateTimeToday : specialinvoke $r4.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>(l1, r2) >>>>>>>> org.joda.time.base.BaseDateTime.checkChronology : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.base.BaseDateTime.checkChronology : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.base.BaseDateTime.checkChronology : return $r2
org.joda.time.base.BaseDateTime.checkChronology : return $r2 >>>>>>>> org.joda.time.base.BaseDateTime.checkInstant : return l0
org.joda.time.base.BaseDateTime.checkInstant : return l0 >>>>>>>> org.joda.time.TimeOfDay.toDateTimeToday : return $r4
org.joda.time.TimeOfDay.toDateTimeToday : return $r4 >>>>>>>> org.joda.time.TimeOfDay.toDateTimeToday : return $r1
org.joda.time.TimeOfDay.toDateTimeToday : return $r1 >>>>>>>> org.joda.time.DateTimeUtils.getChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>()
org.joda.time.DateTimeUtils.getChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>() >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>() >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r0)
org.joda.time.chrono.ISOChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return $r1
org.joda.time.chrono.ISOChronology.getInstance : return $r1 >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return $r1
org.joda.time.DateTimeUtils.getChronology : return $r1 >>>>>>>> org.joda.time.base.AbstractDateTime.toGregorianCalendar : r1 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: org.joda.time.DateTimeZone getZone()>()
org.joda.time.base.AbstractDateTime.toGregorianCalendar : r1 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.base.AbstractInstant.getZone : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: org.joda.time.Chronology getChronology()>()
org.joda.time.base.AbstractInstant.getZone : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.base.BaseDateTime.getChronology : $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology>
org.joda.time.base.BaseDateTime.getChronology : $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.base.BaseDateTime.getChronology : return $r1
org.joda.time.base.BaseDateTime.getChronology : return $r1 >>>>>>>> org.joda.time.base.AbstractInstant.getZone : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.base.AbstractInstant.getZone : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.base.AbstractInstant.getZone : return $r2
org.joda.time.base.AbstractInstant.getZone : return $r2 >>>>>>>> org.joda.time.base.AbstractDateTime.toGregorianCalendar : $r3 = new java.util.GregorianCalendar
org.joda.time.base.AbstractDateTime.toGregorianCalendar : $r3 = new java.util.GregorianCalendar >>>>>>>> org.joda.time.base.AbstractDateTime.toGregorianCalendar : $r4 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.util.TimeZone toTimeZone()>()
org.joda.time.base.AbstractDateTime.toGregorianCalendar : $r4 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.util.TimeZone toTimeZone()>() >>>>>>>> org.joda.time.tz.FixedDateTimeZone.toTimeZone : r1 = virtualinvoke r0.<org.joda.time.tz.FixedDateTimeZone: java.lang.String getID()>()
org.joda.time.tz.FixedDateTimeZone.toTimeZone : r1 = virtualinvoke r0.<org.joda.time.tz.FixedDateTimeZone: java.lang.String getID()>() >>>>>>>> org.joda.time.DateTimeZone.getID : $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>
org.joda.time.DateTimeZone.getID : $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID> >>>>>>>> org.joda.time.DateTimeZone.getID : return $r1
org.joda.time.DateTimeZone.getID : return $r1 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.toTimeZone : $i0 = virtualinvoke r1.<java.lang.String: int length()>()
org.joda.time.tz.FixedDateTimeZone.toTimeZone : $i0 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> org.joda.time.tz.FixedDateTimeZone.toTimeZone : if $i0 != 6
org.joda.time.tz.FixedDateTimeZone.toTimeZone : if $i0 != 6 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.toTimeZone : $r8 = new java.util.SimpleTimeZone
org.joda.time.tz.FixedDateTimeZone.toTimeZone : $r8 = new java.util.SimpleTimeZone >>>>>>>> org.joda.time.tz.FixedDateTimeZone.toTimeZone : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset>
org.joda.time.tz.FixedDateTimeZone.toTimeZone : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset> >>>>>>>> org.joda.time.tz.FixedDateTimeZone.toTimeZone : $r9 = virtualinvoke r0.<org.joda.time.tz.FixedDateTimeZone: java.lang.String getID()>()
org.joda.time.tz.FixedDateTimeZone.toTimeZone : $r9 = virtualinvoke r0.<org.joda.time.tz.FixedDateTimeZone: java.lang.String getID()>() >>>>>>>> org.joda.time.tz.FixedDateTimeZone.toTimeZone : specialinvoke $r8.<java.util.SimpleTimeZone: void <init>(int,java.lang.String)>($i1, $r9)
org.joda.time.tz.FixedDateTimeZone.toTimeZone : specialinvoke $r8.<java.util.SimpleTimeZone: void <init>(int,java.lang.String)>($i1, $r9) >>>>>>>> org.joda.time.tz.FixedDateTimeZone.toTimeZone : return $r8
org.joda.time.tz.FixedDateTimeZone.toTimeZone : return $r8 >>>>>>>> org.joda.time.base.AbstractDateTime.toGregorianCalendar : specialinvoke $r3.<java.util.GregorianCalendar: void <init>(java.util.TimeZone)>($r4)
org.joda.time.base.AbstractDateTime.toGregorianCalendar : specialinvoke $r3.<java.util.GregorianCalendar: void <init>(java.util.TimeZone)>($r4) >>>>>>>> org.joda.time.base.AbstractDateTime.toGregorianCalendar : r2 = $r3
org.joda.time.base.AbstractDateTime.toGregorianCalendar : r2 = $r3 >>>>>>>> org.joda.time.base.AbstractDateTime.toGregorianCalendar : $r5 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: java.util.Date toDate()>()
org.joda.time.base.AbstractDateTime.toGregorianCalendar : $r5 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: java.util.Date toDate()>() >>>>>>>> org.joda.time.base.AbstractInstant.toDate : $r1 = new java.util.Date
org.joda.time.base.AbstractInstant.toDate : $r1 = new java.util.Date >>>>>>>> org.joda.time.base.AbstractInstant.toDate : $l0 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: long getMillis()>()
org.joda.time.base.AbstractInstant.toDate : $l0 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: long getMillis()>() >>>>>>>> org.joda.time.base.BaseDateTime.getMillis : $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis>
org.joda.time.base.BaseDateTime.getMillis : $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis> >>>>>>>> org.joda.time.base.BaseDateTime.getMillis : return $l0
org.joda.time.base.BaseDateTime.getMillis : return $l0 >>>>>>>> org.joda.time.base.AbstractInstant.toDate : specialinvoke $r1.<java.util.Date: void <init>(long)>($l0)
org.joda.time.base.AbstractInstant.toDate : specialinvoke $r1.<java.util.Date: void <init>(long)>($l0) >>>>>>>> org.joda.time.base.AbstractInstant.toDate : return $r1
org.joda.time.base.AbstractInstant.toDate : return $r1 >>>>>>>> org.joda.time.base.AbstractDateTime.toGregorianCalendar : virtualinvoke r2.<java.util.GregorianCalendar: void setTime(java.util.Date)>($r5)
org.joda.time.base.AbstractDateTime.toGregorianCalendar : virtualinvoke r2.<java.util.GregorianCalendar: void setTime(java.util.Date)>($r5) >>>>>>>> org.joda.time.base.AbstractDateTime.toGregorianCalendar : return r2
org.joda.time.base.AbstractDateTime.toGregorianCalendar : return r2 >>>>>>>> org.joda.time.LocalTime.fromCalendarFields : if r0 != null
org.joda.time.LocalTime.fromCalendarFields : if r0 != null >>>>>>>> org.joda.time.LocalTime.fromCalendarFields : $r2 = new org.joda.time.LocalTime
org.joda.time.LocalTime.fromCalendarFields : $r2 = new org.joda.time.LocalTime >>>>>>>> org.joda.time.LocalTime.fromCalendarFields : $i0 = virtualinvoke r0.<java.util.Calendar: int get(int)>(11)
org.joda.time.LocalTime.fromCalendarFields : $i0 = virtualinvoke r0.<java.util.Calendar: int get(int)>(11) >>>>>>>> org.joda.time.LocalTime.fromCalendarFields : $i1 = virtualinvoke r0.<java.util.Calendar: int get(int)>(12)
org.joda.time.LocalTime.fromCalendarFields : $i1 = virtualinvoke r0.<java.util.Calendar: int get(int)>(12) >>>>>>>> org.joda.time.LocalTime.fromCalendarFields : $i2 = virtualinvoke r0.<java.util.Calendar: int get(int)>(13)
org.joda.time.LocalTime.fromCalendarFields : $i2 = virtualinvoke r0.<java.util.Calendar: int get(int)>(13) >>>>>>>> org.joda.time.LocalTime.fromCalendarFields : $i3 = virtualinvoke r0.<java.util.Calendar: int get(int)>(14)
org.joda.time.LocalTime.fromCalendarFields : $i3 = virtualinvoke r0.<java.util.Calendar: int get(int)>(14) >>>>>>>> org.joda.time.LocalTime.fromCalendarFields : specialinvoke $r2.<org.joda.time.LocalTime: void <init>(int,int,int,int)>($i0, $i1, $i2, $i3)
org.joda.time.LocalTime.fromCalendarFields : specialinvoke $r2.<org.joda.time.LocalTime: void <init>(int,int,int,int)>($i0, $i1, $i2, $i3) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstanceUTC : $r0 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>
org.joda.time.chrono.ISOChronology.getInstanceUTC : $r0 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstanceUTC : return $r0
org.joda.time.chrono.ISOChronology.getInstanceUTC : return $r0 >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : r1 = $r2
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : r1 = $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : if $r2 == null
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : if $r2 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $i5 = r0.<org.joda.time.chrono.AssembledChronology: int iBaseFlags>
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $i5 = r0.<org.joda.time.chrono.AssembledChronology: int iBaseFlags> >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $i6 = $i5 & 1
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $i6 = $i5 & 1 >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : if $i6 != 1
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : if $i6 != 1 >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $l7 = virtualinvoke r1.<org.joda.time.Chronology: long getDateTimeMillis(long,int,int,int,int)>(l0, i1, i2, i3, i4)
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $l7 = virtualinvoke r1.<org.joda.time.Chronology: long getDateTimeMillis(long,int,int,int,int)>(l0, i1, i2, i3, i4) >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $l8 = specialinvoke r0.<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>(l0, i1, i2, i3, i4)
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $l8 = specialinvoke r0.<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>(l0, i1, i2, i3, i4) >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r1 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>()
org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r1 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>() >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : l5 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,int)>(l0, i1)
org.joda.time.chrono.BaseChronology.getDateTimeMillis : l5 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>()
org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>() >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : l6 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>(l5, i2)
org.joda.time.chrono.BaseChronology.getDateTimeMillis : l6 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>(l5, i2) >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r3 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>()
org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r3 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>() >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : l7 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,int)>(l6, i3)
org.joda.time.chrono.BaseChronology.getDateTimeMillis : l7 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,int)>(l6, i3) >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r4 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>()
org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r4 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>() >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : $l8 = virtualinvoke $r4.<org.joda.time.DateTimeField: long set(long,int)>(l7, i4)
org.joda.time.chrono.BaseChronology.getDateTimeMillis : $l8 = virtualinvoke $r4.<org.joda.time.DateTimeField: long set(long,int)>(l7, i4) >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : return $l8
org.joda.time.chrono.BaseChronology.getDateTimeMillis : return $l8 >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : return $l8
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : return $l8 >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : return $l7
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : return $l7 >>>>>>>> org.joda.time.LocalTime.fromCalendarFields : return $r2
org.joda.time.LocalTime.fromCalendarFields : return $r2 >>>>>>>> org.joda.time.format.ISODateTimeFormat.tTimeNoMillis : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter ttx>
org.joda.time.format.ISODateTimeFormat.tTimeNoMillis : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter ttx> >>>>>>>> org.joda.time.format.ISODateTimeFormat.tTimeNoMillis : if $r0 != null
org.joda.time.format.ISODateTimeFormat.tTimeNoMillis : if $r0 != null >>>>>>>> org.joda.time.format.ISODateTimeFormat.tTimeNoMillis : $r7 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter ttx>
org.joda.time.format.ISODateTimeFormat.tTimeNoMillis : $r7 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter ttx> >>>>>>>> org.joda.time.format.ISODateTimeFormat.tTimeNoMillis : return $r7
org.joda.time.format.ISODateTimeFormat.tTimeNoMillis : return $r7 >>>>>>>> org.joda.time.base.AbstractPartial.toString : if r1 != null
org.joda.time.base.AbstractPartial.toString : if r1 != null >>>>>>>> org.joda.time.base.AbstractPartial.toString : $r3 = virtualinvoke r1.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>(r0)
org.joda.time.base.AbstractPartial.toString : $r3 = virtualinvoke r1.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>(r0) >>>>>>>> org.joda.time.format.DateTimeFormatter.print : $r2 = new java.lang.StringBuffer
org.joda.time.format.DateTimeFormatter.print : $r2 = new java.lang.StringBuffer >>>>>>>> org.joda.time.format.DateTimeFormatter.print : $r4 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter requirePrinter()>()
org.joda.time.format.DateTimeFormatter.print : $r4 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter requirePrinter()>() >>>>>>>> org.joda.time.format.DateTimeFormatter.requirePrinter : r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter iPrinter>
org.joda.time.format.DateTimeFormatter.requirePrinter : r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter iPrinter> >>>>>>>> org.joda.time.format.DateTimeFormatter.requirePrinter : if r1 != null
org.joda.time.format.DateTimeFormatter.requirePrinter : if r1 != null >>>>>>>> org.joda.time.format.DateTimeFormatter.requirePrinter : return r1
org.joda.time.format.DateTimeFormatter.requirePrinter : return r1 >>>>>>>> org.joda.time.format.DateTimeFormatter.print : $i0 = interfaceinvoke $r4.<org.joda.time.format.DateTimePrinter: int estimatePrintedLength()>()
org.joda.time.format.DateTimeFormatter.print : $i0 = interfaceinvoke $r4.<org.joda.time.format.DateTimePrinter: int estimatePrintedLength()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.estimatePrintedLength : $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: int iPrintedLengthEstimate>
org.joda.time.format.DateTimeFormatterBuilder$Composite.estimatePrintedLength : $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: int iPrintedLengthEstimate> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.estimatePrintedLength : return $i0
org.joda.time.format.DateTimeFormatterBuilder$Composite.estimatePrintedLength : return $i0 >>>>>>>> org.joda.time.format.DateTimeFormatter.print : specialinvoke $r2.<java.lang.StringBuffer: void <init>(int)>($i0)
org.joda.time.format.DateTimeFormatter.print : specialinvoke $r2.<java.lang.StringBuffer: void <init>(int)>($i0) >>>>>>>> org.joda.time.format.DateTimeFormatter.print : r3 = $r2
org.joda.time.format.DateTimeFormatter.print : r3 = $r2 >>>>>>>> org.joda.time.format.DateTimeFormatter.print : virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial)>(r3, r1)
org.joda.time.format.DateTimeFormatter.print : virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial)>(r3, r1) >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : r3 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter requirePrinter()>()
org.joda.time.format.DateTimeFormatter.printTo : r3 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter requirePrinter()>() >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : if r2 != null
org.joda.time.format.DateTimeFormatter.printTo : if r2 != null >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : $r5 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>
org.joda.time.format.DateTimeFormatter.printTo : $r5 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale> >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : interfaceinvoke r3.<org.joda.time.format.DateTimePrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale)>(r1, r2, $r5)
org.joda.time.format.DateTimeFormatter.printTo : interfaceinvoke r3.<org.joda.time.format.DateTimePrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale)>(r1, r2, $r5) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimePrinter[] iPrinters>
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimePrinter[] iPrinters> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : if r4 != null
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : if r4 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : if r3 != null
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : if r3 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : r3 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>()
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : r3 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : i0 = lengthof r4
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : i0 = lengthof r4 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : i1 = 0
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : i1 = 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : if i1 >= i0
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : if i1 >= i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : $r6 = r4[i1]
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : $r6 = r4[i1] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : interfaceinvoke $r6.<org.joda.time.format.DateTimePrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale)>(r1, r2, r3)
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : interfaceinvoke $r6.<org.joda.time.format.DateTimePrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale)>(r1, r2, r3) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.printTo : $c0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: char iValue>
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.printTo : $c0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: char iValue> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c0)
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : i1 = i1 + 1
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : i1 = i1 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $r5 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: org.joda.time.DateTimeFieldType iFieldType>
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $r5 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: org.joda.time.DateTimeFieldType iFieldType> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $z0 = interfaceinvoke r2.<org.joda.time.ReadablePartial: boolean isSupported(org.joda.time.DateTimeFieldType)>($r5)
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $z0 = interfaceinvoke r2.<org.joda.time.ReadablePartial: boolean isSupported(org.joda.time.DateTimeFieldType)>($r5) >>>>>>>> org.joda.time.LocalTime.isSupported : if r1 != null
org.joda.time.LocalTime.isSupported : if r1 != null >>>>>>>> org.joda.time.LocalTime.isSupported : $r3 = virtualinvoke r1.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>()
org.joda.time.LocalTime.isSupported : $r3 = virtualinvoke r1.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>() >>>>>>>> org.joda.time.LocalTime.isSupported : $z0 = virtualinvoke r0.<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>($r3)
org.joda.time.LocalTime.isSupported : $z0 = virtualinvoke r0.<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>($r3) >>>>>>>> org.joda.time.LocalTime.isSupported : $r3 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalTime.isSupported : $r3 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.LocalTime.getChronology : $r1 = r0.<org.joda.time.LocalTime: org.joda.time.Chronology iChronology>
org.joda.time.LocalTime.getChronology : $r1 = r0.<org.joda.time.LocalTime: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.LocalTime.getChronology : return $r1
org.joda.time.LocalTime.getChronology : return $r1 >>>>>>>> org.joda.time.LocalTime.isSupported : r2 = virtualinvoke r1.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r3)
org.joda.time.LocalTime.isSupported : r2 = virtualinvoke r1.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r3) >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal>
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : tableswitch($b0) {     case 1:
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : tableswitch($b0) {     case 1: >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r11 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField hours()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r11 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField hours()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.hours : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours>
org.joda.time.chrono.AssembledChronology.hours : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours> >>>>>>>> org.joda.time.chrono.AssembledChronology.hours : return $r1
org.joda.time.chrono.AssembledChronology.hours : return $r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r11
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r11 >>>>>>>> org.joda.time.LocalTime.isSupported : $r4 = <org.joda.time.LocalTime: java.util.Set TIME_DURATION_TYPES>
org.joda.time.LocalTime.isSupported : $r4 = <org.joda.time.LocalTime: java.util.Set TIME_DURATION_TYPES> >>>>>>>> org.joda.time.LocalTime.isSupported : $z0 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>(r1)
org.joda.time.LocalTime.isSupported : $z0 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>(r1) >>>>>>>> org.joda.time.LocalTime.isSupported : if $z0 != 0
org.joda.time.LocalTime.isSupported : if $z0 != 0 >>>>>>>> org.joda.time.LocalTime.isSupported : $z1 = virtualinvoke r2.<org.joda.time.DurationField: boolean isSupported()>()
org.joda.time.LocalTime.isSupported : $z1 = virtualinvoke r2.<org.joda.time.DurationField: boolean isSupported()>() >>>>>>>> org.joda.time.field.BaseDurationField.isSupported : return 1
org.joda.time.field.BaseDurationField.isSupported : return 1 >>>>>>>> org.joda.time.LocalTime.isSupported : return $z1
org.joda.time.LocalTime.isSupported : return $z1 >>>>>>>> org.joda.time.LocalTime.isSupported : r2 = virtualinvoke r1.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getRangeDurationType()>()
org.joda.time.LocalTime.isSupported : r2 = virtualinvoke r1.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getRangeDurationType()>() >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getRangeDurationType : $r1 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType iRangeType>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getRangeDurationType : $r1 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType iRangeType> >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getRangeDurationType : return $r1
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getRangeDurationType : return $r1 >>>>>>>> org.joda.time.LocalTime.isSupported : $z1 = virtualinvoke r0.<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>(r2)
org.joda.time.LocalTime.isSupported : $z1 = virtualinvoke r0.<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>(r2) >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField days()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField days()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.days : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays>
org.joda.time.chrono.AssembledChronology.days : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays> >>>>>>>> org.joda.time.chrono.AssembledChronology.days : return $r1
org.joda.time.chrono.AssembledChronology.days : return $r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r9
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r9 >>>>>>>> org.joda.time.LocalTime.isSupported : $l0 = virtualinvoke r2.<org.joda.time.DurationField: long getUnitMillis()>()
org.joda.time.LocalTime.isSupported : $l0 = virtualinvoke r2.<org.joda.time.DurationField: long getUnitMillis()>() >>>>>>>> org.joda.time.field.PreciseDurationField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis>
org.joda.time.field.PreciseDurationField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationField.getUnitMillis : return $l0
org.joda.time.field.PreciseDurationField.getUnitMillis : return $l0 >>>>>>>> org.joda.time.LocalTime.isSupported : $r5 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalTime.isSupported : $r5 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.LocalTime.isSupported : $r6 = virtualinvoke $r5.<org.joda.time.Chronology: org.joda.time.DurationField days()>()
org.joda.time.LocalTime.isSupported : $r6 = virtualinvoke $r5.<org.joda.time.Chronology: org.joda.time.DurationField days()>() >>>>>>>> org.joda.time.LocalTime.isSupported : $l1 = virtualinvoke $r6.<org.joda.time.DurationField: long getUnitMillis()>()
org.joda.time.LocalTime.isSupported : $l1 = virtualinvoke $r6.<org.joda.time.DurationField: long getUnitMillis()>() >>>>>>>> org.joda.time.LocalTime.isSupported : $b2 = $l0 cmp $l1
org.joda.time.LocalTime.isSupported : $b2 = $l0 cmp $l1 >>>>>>>> org.joda.time.LocalTime.isSupported : if $b2 >= 0
org.joda.time.LocalTime.isSupported : if $b2 >= 0 >>>>>>>> org.joda.time.LocalTime.isSupported : return 0
org.joda.time.LocalTime.isSupported : return 0 >>>>>>>> org.joda.time.LocalTime.isSupported : if $z1 != 0
org.joda.time.LocalTime.isSupported : if $z1 != 0 >>>>>>>> org.joda.time.LocalTime.isSupported : $r4 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>()
org.joda.time.LocalTime.isSupported : $r4 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>() >>>>>>>> org.joda.time.DurationFieldType.days : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType DAYS_TYPE>
org.joda.time.DurationFieldType.days : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType DAYS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.days : return $r0
org.joda.time.DurationFieldType.days : return $r0 >>>>>>>> org.joda.time.LocalTime.isSupported : if r2 != $r4
org.joda.time.LocalTime.isSupported : if r2 != $r4 >>>>>>>> org.joda.time.LocalTime.isSupported : $z2 = 1
org.joda.time.LocalTime.isSupported : $z2 = 1 >>>>>>>> org.joda.time.LocalTime.isSupported : goto [?= return $z2]
org.joda.time.LocalTime.isSupported : goto [?= return $z2] >>>>>>>> org.joda.time.LocalTime.isSupported : return $z2
org.joda.time.LocalTime.isSupported : return $z2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : if $z0 == 0
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: org.joda.time.DateTimeFieldType iFieldType>
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: org.joda.time.DateTimeFieldType iFieldType> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $i0 = interfaceinvoke r2.<org.joda.time.ReadablePartial: int get(org.joda.time.DateTimeFieldType)>($r6)
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $i0 = interfaceinvoke r2.<org.joda.time.ReadablePartial: int get(org.joda.time.DateTimeFieldType)>($r6) >>>>>>>> org.joda.time.LocalTime.get : if r1 != null
org.joda.time.LocalTime.get : if r1 != null >>>>>>>> org.joda.time.LocalTime.get : $z0 = virtualinvoke r0.<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DateTimeFieldType)>(r1)
org.joda.time.LocalTime.get : $z0 = virtualinvoke r0.<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DateTimeFieldType)>(r1) >>>>>>>> org.joda.time.LocalTime.get : if $z0 != 0
org.joda.time.LocalTime.get : if $z0 != 0 >>>>>>>> org.joda.time.LocalTime.get : $r9 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalTime.get : $r9 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.LocalTime.get : $r10 = virtualinvoke r1.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r9)
org.joda.time.LocalTime.get : $r10 = virtualinvoke r1.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r9) >>>>>>>> org.joda.time.LocalTime.get : $l0 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>()
org.joda.time.LocalTime.get : $l0 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>() >>>>>>>> org.joda.time.LocalTime.getLocalMillis : $l0 = r0.<org.joda.time.LocalTime: long iLocalMillis>
org.joda.time.LocalTime.getLocalMillis : $l0 = r0.<org.joda.time.LocalTime: long iLocalMillis> >>>>>>>> org.joda.time.LocalTime.getLocalMillis : return $l0
org.joda.time.LocalTime.getLocalMillis : return $l0 >>>>>>>> org.joda.time.LocalTime.get : $i1 = virtualinvoke $r10.<org.joda.time.DateTimeField: int get(long)>($l0)
org.joda.time.LocalTime.get : $i1 = virtualinvoke $r10.<org.joda.time.DateTimeField: int get(long)>($l0) >>>>>>>> org.joda.time.LocalTime.get : return $i1
org.joda.time.LocalTime.get : return $i1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $i1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int iMinPrintedDigits>
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $i1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int iMinPrintedDigits> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, $i0, $i1)
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, $i0, $i1) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 0
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 0 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 10
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 10 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 100
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 100 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= 2
org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= 2 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i5 = i0 + 1
org.joda.time.format.FormatUtils.appendPaddedInteger : $i5 = i0 + 1 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i6 = $i5 * 13421772
org.joda.time.format.FormatUtils.appendPaddedInteger : $i6 = $i5 * 13421772 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : i2 = $i6 >> 27
org.joda.time.format.FormatUtils.appendPaddedInteger : i2 = $i6 >> 27 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i7 = i2 + 48
org.joda.time.format.FormatUtils.appendPaddedInteger : $i7 = i2 + 48 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $c8 = (char) $i7
org.joda.time.format.FormatUtils.appendPaddedInteger : $c8 = (char) $i7 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c8)
org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c8) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i9 = i2 << 3
org.joda.time.format.FormatUtils.appendPaddedInteger : $i9 = i2 << 3 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i10 = i0 - $i9
org.joda.time.format.FormatUtils.appendPaddedInteger : $i10 = i0 - $i9 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i11 = i2 << 1
org.joda.time.format.FormatUtils.appendPaddedInteger : $i11 = i2 << 1 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i12 = $i10 - $i11
org.joda.time.format.FormatUtils.appendPaddedInteger : $i12 = $i10 - $i11 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i13 = $i12 + 48
org.joda.time.format.FormatUtils.appendPaddedInteger : $i13 = $i12 + 48 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $c14 = (char) $i13
org.joda.time.format.FormatUtils.appendPaddedInteger : $c14 = (char) $i13 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c14)
org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c14) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= return]
org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= return] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : goto [?= return]
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : goto [?= return] >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r12 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField minutes()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r12 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField minutes()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.minutes : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes>
org.joda.time.chrono.AssembledChronology.minutes : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes> >>>>>>>> org.joda.time.chrono.AssembledChronology.minutes : return $r1
org.joda.time.chrono.AssembledChronology.minutes : return $r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r12
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r12 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= 1
org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= 1 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48)
org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : i1 = i1 + -1
org.joda.time.format.FormatUtils.appendPaddedInteger : i1 = i1 + -1 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= (branch)]
org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= (branch)] >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i3 = i0 + 48
org.joda.time.format.FormatUtils.appendPaddedInteger : $i3 = i0 + 48 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $c4 = (char) $i3
org.joda.time.format.FormatUtils.appendPaddedInteger : $c4 = (char) $i3 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4)
org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4) >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r13 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField seconds()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r13 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField seconds()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.seconds : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iSeconds>
org.joda.time.chrono.AssembledChronology.seconds : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iSeconds> >>>>>>>> org.joda.time.chrono.AssembledChronology.seconds : return $r1
org.joda.time.chrono.AssembledChronology.seconds : return $r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r13
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r13 >>>>>>>> org.joda.time.format.DateTimeFormatter.print : $r5 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
org.joda.time.format.DateTimeFormatter.print : $r5 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> org.joda.time.format.DateTimeFormatter.print : return $r5
org.joda.time.format.DateTimeFormatter.print : return $r5 >>>>>>>> org.joda.time.base.AbstractPartial.toString : return $r3
org.joda.time.base.AbstractPartial.toString : return $r3 >>>>>>>> org.joda.time.base.AbstractPartial.isBefore : if r1 != null
org.joda.time.base.AbstractPartial.isBefore : if r1 != null >>>>>>>> org.joda.time.base.AbstractPartial.isBefore : $i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>(r1)
org.joda.time.base.AbstractPartial.isBefore : $i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>(r1) >>>>>>>> org.joda.time.base.AbstractPartial.compareTo : if r0 != r1
org.joda.time.base.AbstractPartial.compareTo : if r0 != r1 >>>>>>>> org.joda.time.base.AbstractPartial.compareTo : $i2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>()
org.joda.time.base.AbstractPartial.compareTo : $i2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>() >>>>>>>> org.joda.time.base.AbstractPartial.compareTo : $i3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>()
org.joda.time.base.AbstractPartial.compareTo : $i3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>() >>>>>>>> org.joda.time.LocalTime.size : return 4
org.joda.time.LocalTime.size : return 4 >>>>>>>> org.joda.time.base.AbstractPartial.compareTo : if $i2 == $i3
org.joda.time.base.AbstractPartial.compareTo : if $i2 == $i3 >>>>>>>> org.joda.time.base.AbstractPartial.compareTo : i0 = 0
org.joda.time.base.AbstractPartial.compareTo : i0 = 0 >>>>>>>> org.joda.time.base.AbstractPartial.compareTo : i1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>()
org.joda.time.base.AbstractPartial.compareTo : i1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>() >>>>>>>> org.joda.time.base.AbstractPartial.compareTo : if i0 >= i1
org.joda.time.base.AbstractPartial.compareTo : if i0 >= i1 >>>>>>>> org.joda.time.base.AbstractPartial.compareTo : $r3 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i0)
org.joda.time.base.AbstractPartial.compareTo : $r3 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i0) >>>>>>>> org.joda.time.base.AbstractPartial.compareTo : $r4 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i0)
org.joda.time.base.AbstractPartial.compareTo : $r4 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i0) >>>>>>>> org.joda.time.base.AbstractPartial.getFieldType : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.Chronology getChronology()>()
org.joda.time.base.AbstractPartial.getFieldType : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.base.AbstractPartial.getFieldType : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>(i0, $r1)
org.joda.time.base.AbstractPartial.getFieldType : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>(i0, $r1) >>>>>>>> org.joda.time.LocalTime.getField : tableswitch(i0) {     case 0:
org.joda.time.LocalTime.getField : tableswitch(i0) {     case 0: >>>>>>>> org.joda.time.LocalTime.getField : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>()
org.joda.time.LocalTime.getField : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>() >>>>>>>> org.joda.time.LocalTime.getField : return $r3
org.joda.time.LocalTime.getField : return $r3 >>>>>>>> org.joda.time.base.AbstractPartial.getFieldType : $r3 = virtualinvoke $r2.<org.joda.time.DateTimeField: org.joda.time.DateTimeFieldType getType()>()
org.joda.time.base.AbstractPartial.getFieldType : $r3 = virtualinvoke $r2.<org.joda.time.DateTimeField: org.joda.time.DateTimeFieldType getType()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.getType : $r1 = r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType iType>
org.joda.time.field.BaseDateTimeField.getType : $r1 = r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType iType> >>>>>>>> org.joda.time.field.BaseDateTimeField.getType : return $r1
org.joda.time.field.BaseDateTimeField.getType : return $r1 >>>>>>>> org.joda.time.base.AbstractPartial.getFieldType : return $r3
org.joda.time.base.AbstractPartial.getFieldType : return $r3 >>>>>>>> org.joda.time.base.AbstractPartial.compareTo : if $r3 == $r4
org.joda.time.base.AbstractPartial.compareTo : if $r3 == $r4 >>>>>>>> org.joda.time.base.AbstractPartial.compareTo : i0 = i0 + 1
org.joda.time.base.AbstractPartial.compareTo : i0 = i0 + 1 >>>>>>>> org.joda.time.base.AbstractPartial.compareTo : goto [?= (branch)]
org.joda.time.base.AbstractPartial.compareTo : goto [?= (branch)] >>>>>>>> org.joda.time.LocalTime.getField : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>()
org.joda.time.LocalTime.getField : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>() >>>>>>>> org.joda.time.LocalTime.getField : return $r4
org.joda.time.LocalTime.getField : return $r4 >>>>>>>> org.joda.time.LocalTime.getField : $r5 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>()
org.joda.time.LocalTime.getField : $r5 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>() >>>>>>>> org.joda.time.LocalTime.getField : return $r5
org.joda.time.LocalTime.getField : return $r5 >>>>>>>> org.joda.time.LocalTime.getField : $r6 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>()
org.joda.time.LocalTime.getField : $r6 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>() >>>>>>>> org.joda.time.LocalTime.getField : return $r6
org.joda.time.LocalTime.getField : return $r6 >>>>>>>> org.joda.time.base.AbstractPartial.compareTo : i4 = 0
org.joda.time.base.AbstractPartial.compareTo : i4 = 0 >>>>>>>> org.joda.time.base.AbstractPartial.compareTo : i5 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>()
org.joda.time.base.AbstractPartial.compareTo : i5 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>() >>>>>>>> org.joda.time.base.AbstractPartial.compareTo : if i4 >= i5
org.joda.time.base.AbstractPartial.compareTo : if i4 >= i5 >>>>>>>> org.joda.time.base.AbstractPartial.compareTo : $i6 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int getValue(int)>(i4)
org.joda.time.base.AbstractPartial.compareTo : $i6 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int getValue(int)>(i4) >>>>>>>> org.joda.time.base.AbstractPartial.compareTo : $i7 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int getValue(int)>(i4)
org.joda.time.base.AbstractPartial.compareTo : $i7 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int getValue(int)>(i4) >>>>>>>> org.joda.time.LocalTime.getValue : tableswitch(i0) {     case 0:
org.joda.time.LocalTime.getValue : tableswitch(i0) {     case 0: >>>>>>>> org.joda.time.LocalTime.getValue : $r2 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalTime.getValue : $r2 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.LocalTime.getValue : $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>()
org.joda.time.LocalTime.getValue : $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>() >>>>>>>> org.joda.time.LocalTime.getValue : $l1 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>()
org.joda.time.LocalTime.getValue : $l1 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>() >>>>>>>> org.joda.time.LocalTime.getValue : $i2 = virtualinvoke $r3.<org.joda.time.DateTimeField: int get(long)>($l1)
org.joda.time.LocalTime.getValue : $i2 = virtualinvoke $r3.<org.joda.time.DateTimeField: int get(long)>($l1) >>>>>>>> org.joda.time.LocalTime.getValue : return $i2
org.joda.time.LocalTime.getValue : return $i2 >>>>>>>> org.joda.time.base.AbstractPartial.compareTo : if $i6 <= $i7
org.joda.time.base.AbstractPartial.compareTo : if $i6 <= $i7 >>>>>>>> org.joda.time.base.AbstractPartial.compareTo : $i8 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int getValue(int)>(i4)
org.joda.time.base.AbstractPartial.compareTo : $i8 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int getValue(int)>(i4) >>>>>>>> org.joda.time.base.AbstractPartial.compareTo : $i9 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int getValue(int)>(i4)
org.joda.time.base.AbstractPartial.compareTo : $i9 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int getValue(int)>(i4) >>>>>>>> org.joda.time.base.AbstractPartial.compareTo : if $i8 >= $i9
org.joda.time.base.AbstractPartial.compareTo : if $i8 >= $i9 >>>>>>>> org.joda.time.base.AbstractPartial.compareTo : i4 = i4 + 1
org.joda.time.base.AbstractPartial.compareTo : i4 = i4 + 1 >>>>>>>> org.joda.time.LocalTime.getValue : $r4 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalTime.getValue : $r4 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.LocalTime.getValue : $r5 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>()
org.joda.time.LocalTime.getValue : $r5 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>() >>>>>>>> org.joda.time.LocalTime.getValue : $l3 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>()
org.joda.time.LocalTime.getValue : $l3 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>() >>>>>>>> org.joda.time.LocalTime.getValue : $i4 = virtualinvoke $r5.<org.joda.time.DateTimeField: int get(long)>($l3)
org.joda.time.LocalTime.getValue : $i4 = virtualinvoke $r5.<org.joda.time.DateTimeField: int get(long)>($l3) >>>>>>>> org.joda.time.LocalTime.getValue : return $i4
org.joda.time.LocalTime.getValue : return $i4 >>>>>>>> org.joda.time.LocalTime.getValue : $r6 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalTime.getValue : $r6 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.LocalTime.getValue : $r7 = virtualinvoke $r6.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>()
org.joda.time.LocalTime.getValue : $r7 = virtualinvoke $r6.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>() >>>>>>>> org.joda.time.LocalTime.getValue : $l5 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>()
org.joda.time.LocalTime.getValue : $l5 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>() >>>>>>>> org.joda.time.LocalTime.getValue : $i6 = virtualinvoke $r7.<org.joda.time.DateTimeField: int get(long)>($l5)
org.joda.time.LocalTime.getValue : $i6 = virtualinvoke $r7.<org.joda.time.DateTimeField: int get(long)>($l5) >>>>>>>> org.joda.time.LocalTime.getValue : return $i6
org.joda.time.LocalTime.getValue : return $i6 >>>>>>>> org.joda.time.base.AbstractPartial.compareTo : return 1
org.joda.time.base.AbstractPartial.compareTo : return 1 >>>>>>>> org.joda.time.base.AbstractPartial.isBefore : if $i0 >= 0
org.joda.time.base.AbstractPartial.isBefore : if $i0 >= 0 >>>>>>>> org.joda.time.base.AbstractPartial.isBefore : $z0 = 0
org.joda.time.base.AbstractPartial.isBefore : $z0 = 0 >>>>>>>> org.joda.time.base.AbstractPartial.isBefore : return $z0
org.joda.time.base.AbstractPartial.isBefore : return $z0 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getOffsetFromLocal : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset>
org.joda.time.tz.FixedDateTimeZone.getOffsetFromLocal : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset> >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getOffsetFromLocal : return $i1
org.joda.time.tz.FixedDateTimeZone.getOffsetFromLocal : return $i1 >>>>>>>> org.joda.time.DateTime.now : if r0 != null
org.joda.time.DateTime.now : if r0 != null >>>>>>>> org.joda.time.DateTime.now : $r2 = new org.joda.time.DateTime
org.joda.time.DateTime.now : $r2 = new org.joda.time.DateTime >>>>>>>> org.joda.time.DateTime.now : specialinvoke $r2.<org.joda.time.DateTime: void <init>(org.joda.time.DateTimeZone)>(r0)
org.joda.time.DateTime.now : specialinvoke $r2.<org.joda.time.DateTime: void <init>(org.joda.time.DateTimeZone)>(r0) >>>>>>>> org.joda.time.DateTime.now : return $r2
org.joda.time.DateTime.now : return $r2 >>>>>>>> org.joda.time.DateTime.minusWeeks : if i0 != 0
org.joda.time.DateTime.minusWeeks : if i0 != 0 >>>>>>>> org.joda.time.DateTime.minusWeeks : $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>()
org.joda.time.DateTime.minusWeeks : $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.DateTime.minusWeeks : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField weeks()>()
org.joda.time.DateTime.minusWeeks : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField weeks()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.weeks : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks>
org.joda.time.chrono.AssembledChronology.weeks : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks> >>>>>>>> org.joda.time.chrono.AssembledChronology.weeks : return $r1
org.joda.time.chrono.AssembledChronology.weeks : return $r1 >>>>>>>> org.joda.time.DateTime.minusWeeks : $l2 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>()
org.joda.time.DateTime.minusWeeks : $l2 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>() >>>>>>>> org.joda.time.DateTime.minusWeeks : l1 = virtualinvoke $r2.<org.joda.time.DurationField: long subtract(long,int)>($l2, i0)
org.joda.time.DateTime.minusWeeks : l1 = virtualinvoke $r2.<org.joda.time.DurationField: long subtract(long,int)>($l2, i0) >>>>>>>> org.joda.time.DurationField.subtract : if i1 != -2147483648
org.joda.time.DurationField.subtract : if i1 != -2147483648 >>>>>>>> org.joda.time.DurationField.subtract : $i4 = neg i1
org.joda.time.DurationField.subtract : $i4 = neg i1 >>>>>>>> org.joda.time.DurationField.subtract : $l5 = virtualinvoke r0.<org.joda.time.DurationField: long add(long,int)>(l0, $i4)
org.joda.time.DurationField.subtract : $l5 = virtualinvoke r0.<org.joda.time.DurationField: long add(long,int)>(l0, $i4) >>>>>>>> org.joda.time.field.PreciseDurationField.add : $l3 = (long) i1
org.joda.time.field.PreciseDurationField.add : $l3 = (long) i1 >>>>>>>> org.joda.time.field.PreciseDurationField.add : $l4 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis>
org.joda.time.field.PreciseDurationField.add : $l4 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationField.add : l2 = $l3 * $l4
org.joda.time.field.PreciseDurationField.add : l2 = $l3 * $l4 >>>>>>>> org.joda.time.field.PreciseDurationField.add : $l5 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, l2)
org.joda.time.field.PreciseDurationField.add : $l5 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, l2) >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : l2 = l0 + l1
org.joda.time.field.FieldUtils.safeAdd : l2 = l0 + l1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $l3 = l0 ^ l2
org.joda.time.field.FieldUtils.safeAdd : $l3 = l0 ^ l2 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $b4 = $l3 cmp 0L
org.joda.time.field.FieldUtils.safeAdd : $b4 = $l3 cmp 0L >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $b4 >= 0
org.joda.time.field.FieldUtils.safeAdd : if $b4 >= 0 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : return l2
org.joda.time.field.FieldUtils.safeAdd : return l2 >>>>>>>> org.joda.time.field.PreciseDurationField.add : return $l5
org.joda.time.field.PreciseDurationField.add : return $l5 >>>>>>>> org.joda.time.DurationField.subtract : return $l5
org.joda.time.DurationField.subtract : return $l5 >>>>>>>> org.joda.time.DateTime.minusWeeks : $r3 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>(l1)
org.joda.time.DateTime.minusWeeks : $r3 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>(l1) >>>>>>>> org.joda.time.DateTime.withMillis : $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>()
org.joda.time.DateTime.withMillis : $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>() >>>>>>>> org.joda.time.DateTime.withMillis : $b2 = l0 cmp $l1
org.joda.time.DateTime.withMillis : $b2 = l0 cmp $l1 >>>>>>>> org.joda.time.DateTime.withMillis : if $b2 != 0
org.joda.time.DateTime.withMillis : if $b2 != 0 >>>>>>>> org.joda.time.DateTime.withMillis : $r1 = new org.joda.time.DateTime
org.joda.time.DateTime.withMillis : $r1 = new org.joda.time.DateTime >>>>>>>> org.joda.time.DateTime.withMillis : $r2 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>()
org.joda.time.DateTime.withMillis : $r2 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.DateTime.withMillis : specialinvoke $r1.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>(l0, $r2)
org.joda.time.DateTime.withMillis : specialinvoke $r1.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>(l0, $r2) >>>>>>>> org.joda.time.DateTime.withMillis : return $r1
org.joda.time.DateTime.withMillis : return $r1 >>>>>>>> org.joda.time.DateTime.minusWeeks : return $r3
org.joda.time.DateTime.minusWeeks : return $r3 >>>>>>>> org.joda.time.DateTime.millisOfDay : $r1 = new org.joda.time.DateTime$Property
org.joda.time.DateTime.millisOfDay : $r1 = new org.joda.time.DateTime$Property >>>>>>>> org.joda.time.DateTime.millisOfDay : $r2 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>()
org.joda.time.DateTime.millisOfDay : $r2 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.DateTime.millisOfDay : $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>()
org.joda.time.DateTime.millisOfDay : $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.millisOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay>
org.joda.time.chrono.AssembledChronology.millisOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.millisOfDay : return $r1
org.joda.time.chrono.AssembledChronology.millisOfDay : return $r1 >>>>>>>> org.joda.time.DateTime.millisOfDay : specialinvoke $r1.<org.joda.time.DateTime$Property: void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField)>(r0, $r3)
org.joda.time.DateTime.millisOfDay : specialinvoke $r1.<org.joda.time.DateTime$Property: void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField)>(r0, $r3) >>>>>>>> org.joda.time.DateTime.millisOfDay : return $r1
org.joda.time.DateTime.millisOfDay : return $r1 >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.getFieldType : $r1 = virtualinvoke r0.<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeField getField()>()
org.joda.time.field.AbstractReadableInstantFieldProperty.getFieldType : $r1 = virtualinvoke r0.<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeField getField()>() >>>>>>>> org.joda.time.DateTime$Property.getField : $r1 = r0.<org.joda.time.DateTime$Property: org.joda.time.DateTimeField iField>
org.joda.time.DateTime$Property.getField : $r1 = r0.<org.joda.time.DateTime$Property: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.DateTime$Property.getField : return $r1
org.joda.time.DateTime$Property.getField : return $r1 >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.getFieldType : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DateTimeFieldType getType()>()
org.joda.time.field.AbstractReadableInstantFieldProperty.getFieldType : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DateTimeFieldType getType()>() >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.getFieldType : return $r2
org.joda.time.field.AbstractReadableInstantFieldProperty.getFieldType : return $r2 >>>>>>>> org.joda.time.DateTimeComparator.getInstance : if r0 != null
org.joda.time.DateTimeComparator.getInstance : if r0 != null >>>>>>>> org.joda.time.DateTimeComparator.getInstance : $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>()
org.joda.time.DateTimeComparator.getInstance : $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>() >>>>>>>> org.joda.time.DateTimeFieldType.dayOfYear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_YEAR_TYPE>
org.joda.time.DateTimeFieldType.dayOfYear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_YEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.dayOfYear : return $r0
org.joda.time.DateTimeFieldType.dayOfYear : return $r0 >>>>>>>> org.joda.time.DateTimeComparator.getInstance : if r0 != $r2
org.joda.time.DateTimeComparator.getInstance : if r0 != $r2 >>>>>>>> org.joda.time.DateTimeComparator.getInstance : $r7 = new org.joda.time.DateTimeComparator
org.joda.time.DateTimeComparator.getInstance : $r7 = new org.joda.time.DateTimeComparator >>>>>>>> org.joda.time.DateTimeComparator.getInstance : specialinvoke $r7.<org.joda.time.DateTimeComparator: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType)>(r0, r1)
org.joda.time.DateTimeComparator.getInstance : specialinvoke $r7.<org.joda.time.DateTimeComparator: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType)>(r0, r1) >>>>>>>> org.joda.time.DateTimeComparator.getInstance : return $r7
org.joda.time.DateTimeComparator.getInstance : return $r7 >>>>>>>> org.joda.time.TimeOfDay.minusSeconds : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>()
org.joda.time.TimeOfDay.minusSeconds : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>() >>>>>>>> org.joda.time.TimeOfDay.minusSeconds : $i1 = staticinvoke <org.joda.time.field.FieldUtils: int safeNegate(int)>(i0)
org.joda.time.TimeOfDay.minusSeconds : $i1 = staticinvoke <org.joda.time.field.FieldUtils: int safeNegate(int)>(i0) >>>>>>>> org.joda.time.field.FieldUtils.safeNegate : if i0 != -2147483648
org.joda.time.field.FieldUtils.safeNegate : if i0 != -2147483648 >>>>>>>> org.joda.time.field.FieldUtils.safeNegate : $i1 = neg i0
org.joda.time.field.FieldUtils.safeNegate : $i1 = neg i0 >>>>>>>> org.joda.time.field.FieldUtils.safeNegate : return $i1
org.joda.time.field.FieldUtils.safeNegate : return $i1 >>>>>>>> org.joda.time.TimeOfDay.minusSeconds : $r2 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withFieldAdded(org.joda.time.DurationFieldType,int)>($r1, $i1)
org.joda.time.TimeOfDay.minusSeconds : $r2 = virtualinvoke r0.<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withFieldAdded(org.joda.time.DurationFieldType,int)>($r1, $i1) >>>>>>>> org.joda.time.TimeOfDay.withFieldAdded : return r0
org.joda.time.TimeOfDay.withFieldAdded : return r0 >>>>>>>> org.joda.time.TimeOfDay.minusSeconds : return $r2
org.joda.time.TimeOfDay.minusSeconds : return $r2 >>>>>>>> org.joda.time.TimeOfDay.secondOfMinute : $r1 = new org.joda.time.TimeOfDay$Property
org.joda.time.TimeOfDay.secondOfMinute : $r1 = new org.joda.time.TimeOfDay$Property >>>>>>>> org.joda.time.TimeOfDay.secondOfMinute : specialinvoke $r1.<org.joda.time.TimeOfDay$Property: void <init>(org.joda.time.TimeOfDay,int)>(r0, 2)
org.joda.time.TimeOfDay.secondOfMinute : specialinvoke $r1.<org.joda.time.TimeOfDay$Property: void <init>(org.joda.time.TimeOfDay,int)>(r0, 2) >>>>>>>> org.joda.time.TimeOfDay.secondOfMinute : return $r1
org.joda.time.TimeOfDay.secondOfMinute : return $r1 >>>>>>>> org.joda.time.TimeOfDay.millisOfSecond : $r1 = new org.joda.time.TimeOfDay$Property
org.joda.time.TimeOfDay.millisOfSecond : $r1 = new org.joda.time.TimeOfDay$Property >>>>>>>> org.joda.time.TimeOfDay.millisOfSecond : specialinvoke $r1.<org.joda.time.TimeOfDay$Property: void <init>(org.joda.time.TimeOfDay,int)>(r0, 3)
org.joda.time.TimeOfDay.millisOfSecond : specialinvoke $r1.<org.joda.time.TimeOfDay$Property: void <init>(org.joda.time.TimeOfDay,int)>(r0, 3) >>>>>>>> org.joda.time.TimeOfDay.millisOfSecond : return $r1
org.joda.time.TimeOfDay.millisOfSecond : return $r1 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.getMaximumTextLength : $r2 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.DateTimeField getField()>()
org.joda.time.field.AbstractPartialFieldProperty.getMaximumTextLength : $r2 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.DateTimeField getField()>() >>>>>>>> org.joda.time.TimeOfDay$Property.getField : $r1 = r0.<org.joda.time.TimeOfDay$Property: org.joda.time.TimeOfDay iTimeOfDay>
org.joda.time.TimeOfDay$Property.getField : $r1 = r0.<org.joda.time.TimeOfDay$Property: org.joda.time.TimeOfDay iTimeOfDay> >>>>>>>> org.joda.time.TimeOfDay$Property.getField : $i0 = r0.<org.joda.time.TimeOfDay$Property: int iFieldIndex>
org.joda.time.TimeOfDay$Property.getField : $i0 = r0.<org.joda.time.TimeOfDay$Property: int iFieldIndex> >>>>>>>> org.joda.time.TimeOfDay$Property.getField : $r2 = virtualinvoke $r1.<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int)>($i0)
org.joda.time.TimeOfDay$Property.getField : $r2 = virtualinvoke $r1.<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int)>($i0) >>>>>>>> org.joda.time.TimeOfDay$Property.getField : return $r2
org.joda.time.TimeOfDay$Property.getField : return $r2 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.getMaximumTextLength : $i0 = virtualinvoke $r2.<org.joda.time.DateTimeField: int getMaximumTextLength(java.util.Locale)>(r1)
org.joda.time.field.AbstractPartialFieldProperty.getMaximumTextLength : $i0 = virtualinvoke $r2.<org.joda.time.DateTimeField: int getMaximumTextLength(java.util.Locale)>(r1) >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumTextLength : i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue()>()
org.joda.time.field.BaseDateTimeField.getMaximumTextLength : i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumTextLength : if i0 < 0
org.joda.time.field.BaseDateTimeField.getMaximumTextLength : if i0 < 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumTextLength : if i0 >= 10
org.joda.time.field.BaseDateTimeField.getMaximumTextLength : if i0 >= 10 >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumTextLength : if i0 >= 100
org.joda.time.field.BaseDateTimeField.getMaximumTextLength : if i0 >= 100 >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumTextLength : if i0 >= 1000
org.joda.time.field.BaseDateTimeField.getMaximumTextLength : if i0 >= 1000 >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumTextLength : return 3
org.joda.time.field.BaseDateTimeField.getMaximumTextLength : return 3 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.getMaximumTextLength : return $i0
org.joda.time.field.AbstractPartialFieldProperty.getMaximumTextLength : return $i0 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.getFieldType : $r1 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.DateTimeField getField()>()
org.joda.time.field.AbstractPartialFieldProperty.getFieldType : $r1 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.DateTimeField getField()>() >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.getFieldType : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DateTimeFieldType getType()>()
org.joda.time.field.AbstractPartialFieldProperty.getFieldType : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DateTimeFieldType getType()>() >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.getFieldType : return $r2
org.joda.time.field.AbstractPartialFieldProperty.getFieldType : return $r2 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r14 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField millis()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r14 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField millis()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.millis : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMillis>
org.joda.time.chrono.AssembledChronology.millis : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMillis> >>>>>>>> org.joda.time.chrono.AssembledChronology.millis : return $r1
org.joda.time.chrono.AssembledChronology.millis : return $r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r14
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r14 >>>>>>>> org.joda.time.field.MillisDurationField.isSupported : return 1
org.joda.time.field.MillisDurationField.isSupported : return 1 >>>>>>>> org.joda.time.TimeOfDay.withField : i1 = virtualinvoke r0.<org.joda.time.TimeOfDay: int indexOfSupported(org.joda.time.DateTimeFieldType)>(r1)
org.joda.time.TimeOfDay.withField : i1 = virtualinvoke r0.<org.joda.time.TimeOfDay: int indexOfSupported(org.joda.time.DateTimeFieldType)>(r1) >>>>>>>> org.joda.time.base.AbstractPartial.indexOfSupported : i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>(r1)
org.joda.time.base.AbstractPartial.indexOfSupported : i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>(r1) >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : if $r2 != r1
org.joda.time.base.AbstractPartial.indexOf : if $r2 != r1 >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : return -1
org.joda.time.base.AbstractPartial.indexOf : return -1 >>>>>>>> org.joda.time.base.AbstractPartial.indexOfSupported : $r3 = new java.lang.IllegalArgumentException
org.joda.time.base.AbstractPartial.indexOfSupported : $r3 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.base.AbstractPartial.indexOfSupported : $r2 = new java.lang.StringBuilder
org.joda.time.base.AbstractPartial.indexOfSupported : $r2 = new java.lang.StringBuilder >>>>>>>> org.joda.time.base.AbstractPartial.indexOfSupported : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.joda.time.base.AbstractPartial.indexOfSupported : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.base.AbstractPartial.indexOfSupported : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field \'")
org.joda.time.base.AbstractPartial.indexOfSupported : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field \'") >>>>>>>> org.joda.time.base.AbstractPartial.indexOfSupported : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1)
org.joda.time.base.AbstractPartial.indexOfSupported : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) >>>>>>>> org.joda.time.DateTimeFieldType.toString : $r1 = virtualinvoke r0.<org.joda.time.DateTimeFieldType: java.lang.String getName()>()
org.joda.time.DateTimeFieldType.toString : $r1 = virtualinvoke r0.<org.joda.time.DateTimeFieldType: java.lang.String getName()>() >>>>>>>> org.joda.time.DateTimeFieldType.getName : $r1 = r0.<org.joda.time.DateTimeFieldType: java.lang.String iName>
org.joda.time.DateTimeFieldType.getName : $r1 = r0.<org.joda.time.DateTimeFieldType: java.lang.String iName> >>>>>>>> org.joda.time.DateTimeFieldType.getName : return $r1
org.joda.time.DateTimeFieldType.getName : return $r1 >>>>>>>> org.joda.time.DateTimeFieldType.toString : return $r1
org.joda.time.DateTimeFieldType.toString : return $r1 >>>>>>>> org.joda.time.base.AbstractPartial.indexOfSupported : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not supported")
org.joda.time.base.AbstractPartial.indexOfSupported : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not supported") >>>>>>>> org.joda.time.base.AbstractPartial.indexOfSupported : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.base.AbstractPartial.indexOfSupported : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.base.AbstractPartial.indexOfSupported : specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7)
org.joda.time.base.AbstractPartial.indexOfSupported : specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7) >>>>>>>> org.joda.time.base.AbstractPartial.indexOfSupported : throw $r3
