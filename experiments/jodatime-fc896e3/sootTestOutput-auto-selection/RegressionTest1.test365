org.joda.time.DateTimeUtils.currentTimeMillis : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> >>>>>>>> org.joda.time.DateTimeUtils.currentTimeMillis : $l0 = interfaceinvoke $r0.<org.joda.time.DateTimeUtils$MillisProvider: long getMillis()>()
org.joda.time.DateTimeUtils.currentTimeMillis : $l0 = interfaceinvoke $r0.<org.joda.time.DateTimeUtils$MillisProvider: long getMillis()>() >>>>>>>> org.joda.time.DateTimeUtils$FixedMillisProvider.getMillis : $l0 = r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: long iMillis>
org.joda.time.DateTimeUtils$FixedMillisProvider.getMillis : $l0 = r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: long iMillis> >>>>>>>> org.joda.time.DateTimeUtils$FixedMillisProvider.getMillis : return $l0
org.joda.time.DateTimeUtils$FixedMillisProvider.getMillis : return $l0 >>>>>>>> org.joda.time.DateTimeUtils.currentTimeMillis : return $l0
org.joda.time.DateTimeUtils.currentTimeMillis : return $l0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r0 != null
org.joda.time.chrono.ISOChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.chrono.ISOChronology.getInstance : r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>() >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63
org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>
org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0]
org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0] >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r1 == null
org.joda.time.chrono.ISOChronology.getInstance : if r1 == null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2
org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null
org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.GregorianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : return $r1
org.joda.time.chrono.AssembledChronology.getBase : return $r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : r1 = $r2
org.joda.time.chrono.BasicChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : if $r2 == null
org.joda.time.chrono.BasicChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : return $r4
org.joda.time.chrono.BasicChronology.getZone : return $r4 >>>>>>>> org.joda.time.chrono.GregorianChronology.getZone : return $r1
org.joda.time.chrono.GregorianChronology.getZone : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : return $r3
org.joda.time.chrono.AssembledChronology.getZone : return $r3 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0
org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return r1
org.joda.time.chrono.ISOChronology.getInstance : return r1 >>>>>>>> org.joda.time.base.BaseDateTime.checkChronology : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.base.BaseDateTime.checkChronology : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getChronology : if r0 != null
org.joda.time.DateTimeUtils.getChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.DateTimeUtils.getChronology : return r0 >>>>>>>> org.joda.time.base.BaseDateTime.checkChronology : return $r2
org.joda.time.base.BaseDateTime.checkChronology : return $r2 >>>>>>>> org.joda.time.DateMidnight.checkInstant : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.DateMidnight.checkInstant : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfMonth : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth>
org.joda.time.chrono.AssembledChronology.dayOfMonth : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth> >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfMonth : return $r1
org.joda.time.chrono.AssembledChronology.dayOfMonth : return $r1 >>>>>>>> org.joda.time.DateMidnight.checkInstant : $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long roundFloor(long)>(l0)
org.joda.time.DateMidnight.checkInstant : $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long roundFloor(long)>(l0) >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : if $b1 < 0
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : if $b1 < 0 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l3 = l0 % $l2
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l3 = l0 % $l2 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l4 = l0 - $l3
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l4 = l0 - $l3 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : return $l4
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : return $l4 >>>>>>>> org.joda.time.DateMidnight.checkInstant : return $l1
org.joda.time.DateMidnight.checkInstant : return $l1 >>>>>>>> org.joda.time.DateMidnight.centuryOfEra : $r1 = new org.joda.time.DateMidnight$Property
org.joda.time.DateMidnight.centuryOfEra : $r1 = new org.joda.time.DateMidnight$Property >>>>>>>> org.joda.time.DateMidnight.centuryOfEra : $r2 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>()
org.joda.time.DateMidnight.centuryOfEra : $r2 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.base.BaseDateTime.getChronology : $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology>
org.joda.time.base.BaseDateTime.getChronology : $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.base.BaseDateTime.getChronology : return $r1
org.joda.time.base.BaseDateTime.getChronology : return $r1 >>>>>>>> org.joda.time.DateMidnight.centuryOfEra : $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField centuryOfEra()>()
org.joda.time.DateMidnight.centuryOfEra : $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField centuryOfEra()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.centuryOfEra : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iCenturyOfEra>
org.joda.time.chrono.AssembledChronology.centuryOfEra : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iCenturyOfEra> >>>>>>>> org.joda.time.chrono.AssembledChronology.centuryOfEra : return $r1
org.joda.time.chrono.AssembledChronology.centuryOfEra : return $r1 >>>>>>>> org.joda.time.DateMidnight.centuryOfEra : specialinvoke $r1.<org.joda.time.DateMidnight$Property: void <init>(org.joda.time.DateMidnight,org.joda.time.DateTimeField)>(r0, $r3)
org.joda.time.DateMidnight.centuryOfEra : specialinvoke $r1.<org.joda.time.DateMidnight$Property: void <init>(org.joda.time.DateMidnight,org.joda.time.DateTimeField)>(r0, $r3) >>>>>>>> org.joda.time.DateMidnight.centuryOfEra : return $r1
org.joda.time.DateMidnight.centuryOfEra : return $r1 >>>>>>>> org.joda.time.DateMidnight$Property.addWrapFieldToCopy : $r1 = r0.<org.joda.time.DateMidnight$Property: org.joda.time.DateMidnight iInstant>
org.joda.time.DateMidnight$Property.addWrapFieldToCopy : $r1 = r0.<org.joda.time.DateMidnight$Property: org.joda.time.DateMidnight iInstant> >>>>>>>> org.joda.time.DateMidnight$Property.addWrapFieldToCopy : $r2 = r0.<org.joda.time.DateMidnight$Property: org.joda.time.DateTimeField iField>
org.joda.time.DateMidnight$Property.addWrapFieldToCopy : $r2 = r0.<org.joda.time.DateMidnight$Property: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.DateMidnight$Property.addWrapFieldToCopy : $r3 = r0.<org.joda.time.DateMidnight$Property: org.joda.time.DateMidnight iInstant>
org.joda.time.DateMidnight$Property.addWrapFieldToCopy : $r3 = r0.<org.joda.time.DateMidnight$Property: org.joda.time.DateMidnight iInstant> >>>>>>>> org.joda.time.DateMidnight$Property.addWrapFieldToCopy : $l1 = virtualinvoke $r3.<org.joda.time.DateMidnight: long getMillis()>()
org.joda.time.DateMidnight$Property.addWrapFieldToCopy : $l1 = virtualinvoke $r3.<org.joda.time.DateMidnight: long getMillis()>() >>>>>>>> org.joda.time.base.BaseDateTime.getMillis : $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis>
org.joda.time.base.BaseDateTime.getMillis : $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis> >>>>>>>> org.joda.time.base.BaseDateTime.getMillis : return $l0
org.joda.time.base.BaseDateTime.getMillis : return $l0 >>>>>>>> org.joda.time.DateMidnight$Property.addWrapFieldToCopy : $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long addWrapField(long,int)>($l1, i0)
org.joda.time.DateMidnight$Property.addWrapFieldToCopy : $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long addWrapField(long,int)>($l1, i0) >>>>>>>> org.joda.time.field.DividedDateTimeField.addWrapField : $i2 = virtualinvoke r0.<org.joda.time.field.DividedDateTimeField: int get(long)>(l0)
org.joda.time.field.DividedDateTimeField.addWrapField : $i2 = virtualinvoke r0.<org.joda.time.field.DividedDateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.field.DividedDateTimeField.get : $r1 = virtualinvoke r0.<org.joda.time.field.DividedDateTimeField: org.joda.time.DateTimeField getWrappedField()>()
org.joda.time.field.DividedDateTimeField.get : $r1 = virtualinvoke r0.<org.joda.time.field.DividedDateTimeField: org.joda.time.DateTimeField getWrappedField()>() >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getWrappedField : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DecoratedDateTimeField.getWrappedField : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getWrappedField : return $r1
org.joda.time.field.DecoratedDateTimeField.getWrappedField : return $r1 >>>>>>>> org.joda.time.field.DividedDateTimeField.get : i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>(l0)
org.joda.time.field.DividedDateTimeField.get : i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.chrono.ISOYearOfEraDateTimeField.get : $r1 = virtualinvoke r0.<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DateTimeField getWrappedField()>()
org.joda.time.chrono.ISOYearOfEraDateTimeField.get : $r1 = virtualinvoke r0.<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DateTimeField getWrappedField()>() >>>>>>>> org.joda.time.chrono.ISOYearOfEraDateTimeField.get : i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>(l0)
org.joda.time.chrono.ISOYearOfEraDateTimeField.get : i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerYearDividedByTwo()>()
org.joda.time.chrono.BasicChronology.getYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerYearDividedByTwo()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getAverageMillisPerYearDividedByTwo : return 15778476000L
org.joda.time.chrono.GregorianChronology.getAverageMillisPerYearDividedByTwo : return 15778476000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l7 = l0 >> 1
org.joda.time.chrono.BasicChronology.getYear : $l7 = l0 >> 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getApproxMillisAtEpochDividedByTwo()>()
org.joda.time.chrono.BasicChronology.getYear : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getApproxMillisAtEpochDividedByTwo()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getApproxMillisAtEpochDividedByTwo : return 31083597720000L
org.joda.time.chrono.GregorianChronology.getApproxMillisAtEpochDividedByTwo : return 31083597720000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l2 = $l7 + $l8
org.joda.time.chrono.BasicChronology.getYear : l2 = $l7 + $l8 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b9 = l2 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : $b9 = l2 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b9 >= 0
org.joda.time.chrono.BasicChronology.getYear : if $b9 >= 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l11 = l2 / l1
org.joda.time.chrono.BasicChronology.getYear : $l11 = l2 / l1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : i3 = (int) $l11
org.joda.time.chrono.BasicChronology.getYear : i3 = (int) $l11 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i3)
org.joda.time.chrono.BasicChronology.getYear : l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i3) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearMillis : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $r2 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache>
org.joda.time.chrono.BasicChronology.getYearInfo : $r2 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $i1 = i0 & 1023
org.joda.time.chrono.BasicChronology.getYearInfo : $i1 = i0 & 1023 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r2[$i1]
org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r2[$i1] >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : if r1 == null
org.joda.time.chrono.BasicChronology.getYearInfo : if r1 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $i2 = r1.<org.joda.time.chrono.BasicChronology$YearInfo: int iYear>
org.joda.time.chrono.BasicChronology.getYearInfo : $i2 = r1.<org.joda.time.chrono.BasicChronology$YearInfo: int iYear> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : if $i2 == i0
org.joda.time.chrono.BasicChronology.getYearInfo : if $i2 == i0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : return r1
org.joda.time.chrono.BasicChronology.getYearInfo : return r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : $l1 = $r1.<org.joda.time.chrono.BasicChronology$YearInfo: long iFirstDayMillis>
org.joda.time.chrono.BasicChronology.getYearMillis : $l1 = $r1.<org.joda.time.chrono.BasicChronology$YearInfo: long iFirstDayMillis> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : return $l1
org.joda.time.chrono.BasicChronology.getYearMillis : return $l1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l5 = l0 - l4
org.joda.time.chrono.BasicChronology.getYear : l5 = l0 - l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b12 = l5 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : $b12 = l5 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b12 >= 0
org.joda.time.chrono.BasicChronology.getYear : if $b12 >= 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b13 = l5 cmp 31536000000L
org.joda.time.chrono.BasicChronology.getYear : $b13 = l5 cmp 31536000000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b13 < 0
org.joda.time.chrono.BasicChronology.getYear : if $b13 < 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : return i3
org.joda.time.chrono.BasicChronology.getYear : return i3 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.get : return $i1
org.joda.time.chrono.BasicYearDateTimeField.get : return $i1 >>>>>>>> org.joda.time.chrono.ISOYearOfEraDateTimeField.get : if i1 >= 0
org.joda.time.chrono.ISOYearOfEraDateTimeField.get : if i1 >= 0 >>>>>>>> org.joda.time.chrono.ISOYearOfEraDateTimeField.get : $i2 = i1
org.joda.time.chrono.ISOYearOfEraDateTimeField.get : $i2 = i1 >>>>>>>> org.joda.time.chrono.ISOYearOfEraDateTimeField.get : return $i2
org.joda.time.chrono.ISOYearOfEraDateTimeField.get : return $i2 >>>>>>>> org.joda.time.field.DividedDateTimeField.get : if i1 < 0
org.joda.time.field.DividedDateTimeField.get : if i1 < 0 >>>>>>>> org.joda.time.field.DividedDateTimeField.get : $i2 = r0.<org.joda.time.field.DividedDateTimeField: int iDivisor>
org.joda.time.field.DividedDateTimeField.get : $i2 = r0.<org.joda.time.field.DividedDateTimeField: int iDivisor> >>>>>>>> org.joda.time.field.DividedDateTimeField.get : $i3 = i1 / $i2
org.joda.time.field.DividedDateTimeField.get : $i3 = i1 / $i2 >>>>>>>> org.joda.time.field.DividedDateTimeField.get : return $i3
org.joda.time.field.DividedDateTimeField.get : return $i3 >>>>>>>> org.joda.time.field.DividedDateTimeField.addWrapField : $i3 = r0.<org.joda.time.field.DividedDateTimeField: int iMin>
org.joda.time.field.DividedDateTimeField.addWrapField : $i3 = r0.<org.joda.time.field.DividedDateTimeField: int iMin> >>>>>>>> org.joda.time.field.DividedDateTimeField.addWrapField : $i4 = r0.<org.joda.time.field.DividedDateTimeField: int iMax>
org.joda.time.field.DividedDateTimeField.addWrapField : $i4 = r0.<org.joda.time.field.DividedDateTimeField: int iMax> >>>>>>>> org.joda.time.field.DividedDateTimeField.addWrapField : $i5 = staticinvoke <org.joda.time.field.FieldUtils: int getWrappedValue(int,int,int,int)>($i2, i1, $i3, $i4)
org.joda.time.field.DividedDateTimeField.addWrapField : $i5 = staticinvoke <org.joda.time.field.FieldUtils: int getWrappedValue(int,int,int,int)>($i2, i1, $i3, $i4) >>>>>>>> org.joda.time.field.FieldUtils.getWrappedValue : $i4 = i0 + i1
org.joda.time.field.FieldUtils.getWrappedValue : $i4 = i0 + i1 >>>>>>>> org.joda.time.field.FieldUtils.getWrappedValue : $i5 = staticinvoke <org.joda.time.field.FieldUtils: int getWrappedValue(int,int,int)>($i4, i2, i3)
org.joda.time.field.FieldUtils.getWrappedValue : $i5 = staticinvoke <org.joda.time.field.FieldUtils: int getWrappedValue(int,int,int)>($i4, i2, i3) >>>>>>>> org.joda.time.field.FieldUtils.getWrappedValue : if i1 < i2
org.joda.time.field.FieldUtils.getWrappedValue : if i1 < i2 >>>>>>>> org.joda.time.field.FieldUtils.getWrappedValue : $i5 = i2 - i1
org.joda.time.field.FieldUtils.getWrappedValue : $i5 = i2 - i1 >>>>>>>> org.joda.time.field.FieldUtils.getWrappedValue : i3 = $i5 + 1
org.joda.time.field.FieldUtils.getWrappedValue : i3 = $i5 + 1 >>>>>>>> org.joda.time.field.FieldUtils.getWrappedValue : i6 = i0 - i1
org.joda.time.field.FieldUtils.getWrappedValue : i6 = i0 - i1 >>>>>>>> org.joda.time.field.FieldUtils.getWrappedValue : if i6 < 0
org.joda.time.field.FieldUtils.getWrappedValue : if i6 < 0 >>>>>>>> org.joda.time.field.FieldUtils.getWrappedValue : $i7 = i6 % i3
org.joda.time.field.FieldUtils.getWrappedValue : $i7 = i6 % i3 >>>>>>>> org.joda.time.field.FieldUtils.getWrappedValue : $i8 = $i7 + i1
org.joda.time.field.FieldUtils.getWrappedValue : $i8 = $i7 + i1 >>>>>>>> org.joda.time.field.FieldUtils.getWrappedValue : return $i8
org.joda.time.field.FieldUtils.getWrappedValue : return $i8 >>>>>>>> org.joda.time.field.FieldUtils.getWrappedValue : return $i5
org.joda.time.field.FieldUtils.getWrappedValue : return $i5 >>>>>>>> org.joda.time.field.DividedDateTimeField.addWrapField : $l6 = virtualinvoke r0.<org.joda.time.field.DividedDateTimeField: long set(long,int)>(l0, $i5)
org.joda.time.field.DividedDateTimeField.addWrapField : $l6 = virtualinvoke r0.<org.joda.time.field.DividedDateTimeField: long set(long,int)>(l0, $i5) >>>>>>>> org.joda.time.field.DividedDateTimeField.set : $i3 = r0.<org.joda.time.field.DividedDateTimeField: int iMin>
org.joda.time.field.DividedDateTimeField.set : $i3 = r0.<org.joda.time.field.DividedDateTimeField: int iMin> >>>>>>>> org.joda.time.field.DividedDateTimeField.set : $i4 = r0.<org.joda.time.field.DividedDateTimeField: int iMax>
org.joda.time.field.DividedDateTimeField.set : $i4 = r0.<org.joda.time.field.DividedDateTimeField: int iMax> >>>>>>>> org.joda.time.field.DividedDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i3, $i4)
org.joda.time.field.DividedDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i3, $i4) >>>>>>>> org.joda.time.field.FieldUtils.verifyValueBounds : if i0 < i1
org.joda.time.field.FieldUtils.verifyValueBounds : if i0 < i1 >>>>>>>> org.joda.time.field.FieldUtils.verifyValueBounds : if i0 <= i2
org.joda.time.field.FieldUtils.verifyValueBounds : if i0 <= i2 >>>>>>>> org.joda.time.field.DividedDateTimeField.set : $r1 = virtualinvoke r0.<org.joda.time.field.DividedDateTimeField: org.joda.time.DateTimeField getWrappedField()>()
org.joda.time.field.DividedDateTimeField.set : $r1 = virtualinvoke r0.<org.joda.time.field.DividedDateTimeField: org.joda.time.DateTimeField getWrappedField()>() >>>>>>>> org.joda.time.field.DividedDateTimeField.set : $i5 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>(l0)
org.joda.time.field.DividedDateTimeField.set : $i5 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.field.DividedDateTimeField.set : i2 = specialinvoke r0.<org.joda.time.field.DividedDateTimeField: int getRemainder(int)>($i5)
org.joda.time.field.DividedDateTimeField.set : i2 = specialinvoke r0.<org.joda.time.field.DividedDateTimeField: int getRemainder(int)>($i5) >>>>>>>> org.joda.time.field.DividedDateTimeField.getRemainder : if i0 < 0
org.joda.time.field.DividedDateTimeField.getRemainder : if i0 < 0 >>>>>>>> org.joda.time.field.DividedDateTimeField.getRemainder : $i1 = r0.<org.joda.time.field.DividedDateTimeField: int iDivisor>
org.joda.time.field.DividedDateTimeField.getRemainder : $i1 = r0.<org.joda.time.field.DividedDateTimeField: int iDivisor> >>>>>>>> org.joda.time.field.DividedDateTimeField.getRemainder : $i2 = i0 % $i1
org.joda.time.field.DividedDateTimeField.getRemainder : $i2 = i0 % $i1 >>>>>>>> org.joda.time.field.DividedDateTimeField.getRemainder : return $i2
org.joda.time.field.DividedDateTimeField.getRemainder : return $i2 >>>>>>>> org.joda.time.field.DividedDateTimeField.set : $r2 = virtualinvoke r0.<org.joda.time.field.DividedDateTimeField: org.joda.time.DateTimeField getWrappedField()>()
org.joda.time.field.DividedDateTimeField.set : $r2 = virtualinvoke r0.<org.joda.time.field.DividedDateTimeField: org.joda.time.DateTimeField getWrappedField()>() >>>>>>>> org.joda.time.field.DividedDateTimeField.set : $i6 = r0.<org.joda.time.field.DividedDateTimeField: int iDivisor>
org.joda.time.field.DividedDateTimeField.set : $i6 = r0.<org.joda.time.field.DividedDateTimeField: int iDivisor> >>>>>>>> org.joda.time.field.DividedDateTimeField.set : $i7 = i1 * $i6
org.joda.time.field.DividedDateTimeField.set : $i7 = i1 * $i6 >>>>>>>> org.joda.time.field.DividedDateTimeField.set : $i8 = $i7 + i2
org.joda.time.field.DividedDateTimeField.set : $i8 = $i7 + i2 >>>>>>>> org.joda.time.field.DividedDateTimeField.set : $l9 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>(l0, $i8)
org.joda.time.field.DividedDateTimeField.set : $l9 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>(l0, $i8) >>>>>>>> org.joda.time.chrono.ISOYearOfEraDateTimeField.set : $i2 = virtualinvoke r0.<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>()
org.joda.time.chrono.ISOYearOfEraDateTimeField.set : $i2 = virtualinvoke r0.<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.chrono.ISOYearOfEraDateTimeField.getMaximumValue : $r1 = virtualinvoke r0.<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DateTimeField getWrappedField()>()
org.joda.time.chrono.ISOYearOfEraDateTimeField.getMaximumValue : $r1 = virtualinvoke r0.<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DateTimeField getWrappedField()>() >>>>>>>> org.joda.time.chrono.ISOYearOfEraDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>()
org.joda.time.chrono.ISOYearOfEraDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMaxYear()>()
org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMaxYear()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getMaxYear : return 292278993
org.joda.time.chrono.GregorianChronology.getMaxYear : return 292278993 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : return $i0
org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.chrono.ISOYearOfEraDateTimeField.getMaximumValue : return $i0
org.joda.time.chrono.ISOYearOfEraDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.chrono.ISOYearOfEraDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, 0, $i2)
org.joda.time.chrono.ISOYearOfEraDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, 0, $i2) >>>>>>>> org.joda.time.chrono.ISOYearOfEraDateTimeField.set : $r1 = virtualinvoke r0.<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DateTimeField getWrappedField()>()
org.joda.time.chrono.ISOYearOfEraDateTimeField.set : $r1 = virtualinvoke r0.<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DateTimeField getWrappedField()>() >>>>>>>> org.joda.time.chrono.ISOYearOfEraDateTimeField.set : $i3 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>(l0)
org.joda.time.chrono.ISOYearOfEraDateTimeField.set : $i3 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.chrono.ISOYearOfEraDateTimeField.set : if $i3 >= 0
org.joda.time.chrono.ISOYearOfEraDateTimeField.set : if $i3 >= 0 >>>>>>>> org.joda.time.chrono.ISOYearOfEraDateTimeField.set : $l4 = specialinvoke r0.<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>(l0, i1)
org.joda.time.chrono.ISOYearOfEraDateTimeField.set : $l4 = specialinvoke r0.<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>(l0, i1) >>>>>>>> org.joda.time.field.DecoratedDateTimeField.set : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DecoratedDateTimeField.set : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DecoratedDateTimeField.set : $l2 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,int)>(l0, i1)
org.joda.time.field.DecoratedDateTimeField.set : $l2 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.set : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : $i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMinYear()>()
org.joda.time.chrono.BasicYearDateTimeField.set : $i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMinYear()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getMinYear : return -292275054
org.joda.time.chrono.GregorianChronology.getMinYear : return -292275054 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : $r2 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.set : $r2 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : $i3 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getMaxYear()>()
org.joda.time.chrono.BasicYearDateTimeField.set : $i3 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getMaxYear()>() >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3)
org.joda.time.chrono.BasicYearDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : $r3 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.set : $r3 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : $l4 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: long setYear(long,int)>(l0, i1)
org.joda.time.chrono.BasicYearDateTimeField.set : $l4 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: long setYear(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicGJChronology.setYear : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : i3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getDayOfYear(long,int)>(l0, i2)
org.joda.time.chrono.BasicGJChronology.setYear : i3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getDayOfYear(long,int)>(l0, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1)
org.joda.time.chrono.BasicChronology.getDayOfYear : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : $l3 = l0 - l2
org.joda.time.chrono.BasicChronology.getDayOfYear : $l3 = l0 - l2 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : $l4 = $l3 / 86400000L
org.joda.time.chrono.BasicChronology.getDayOfYear : $l4 = $l3 / 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : $i5 = (int) $l4
org.joda.time.chrono.BasicChronology.getDayOfYear : $i5 = (int) $l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : $i6 = $i5 + 1
org.joda.time.chrono.BasicChronology.getDayOfYear : $i6 = $i5 + 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : return $i6
org.joda.time.chrono.BasicChronology.getDayOfYear : return $i6 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : i4 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getMillisOfDay(long)>(l0)
org.joda.time.chrono.BasicGJChronology.setYear : i4 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getMillisOfDay(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $b1 = l0 cmp 0L
org.joda.time.chrono.BasicChronology.getMillisOfDay : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : if $b1 < 0
org.joda.time.chrono.BasicChronology.getMillisOfDay : if $b1 < 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $l2 = l0 % 86400000L
org.joda.time.chrono.BasicChronology.getMillisOfDay : $l2 = l0 % 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $i3 = (int) $l2
org.joda.time.chrono.BasicChronology.getMillisOfDay : $i3 = (int) $l2 >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : return $i3
org.joda.time.chrono.BasicChronology.getMillisOfDay : return $i3 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : if i3 <= 59
org.joda.time.chrono.BasicGJChronology.setYear : if i3 <= 59 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : l5 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMonthDayMillis(int,int,int)>(i1, 1, i3)
org.joda.time.chrono.BasicGJChronology.setYear : l5 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMonthDayMillis(int,int,int)>(i1, 1, i3) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $r3 = new org.joda.time.chrono.BasicChronology$YearInfo
org.joda.time.chrono.BasicChronology.getYearInfo : $r3 = new org.joda.time.chrono.BasicChronology$YearInfo >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long calculateFirstDayOfYearMillis(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearInfo : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long calculateFirstDayOfYearMillis(int)>(i0) >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : i1 = i0 / 100
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : i1 = i0 / 100 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : if i0 >= 0
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : if i0 >= 0 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $i9 = i0 >> 2
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $i9 = i0 >> 2 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $i10 = $i9 - i1
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $i10 = $i9 - i1 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $i11 = i1 >> 2
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $i11 = i1 >> 2 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : i8 = $i10 + $i11
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : i8 = $i10 + $i11 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $z0 = virtualinvoke r0.<org.joda.time.chrono.GregorianChronology: boolean isLeapYear(int)>(i0)
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $z0 = virtualinvoke r0.<org.joda.time.chrono.GregorianChronology: boolean isLeapYear(int)>(i0) >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : $i1 = i0 & 3
org.joda.time.chrono.GregorianChronology.isLeapYear : $i1 = i0 & 3 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : if $i1 != 0
org.joda.time.chrono.GregorianChronology.isLeapYear : if $i1 != 0 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : $z0 = 0
org.joda.time.chrono.GregorianChronology.isLeapYear : $z0 = 0 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : return $z0
org.joda.time.chrono.GregorianChronology.isLeapYear : return $z0 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : if $z0 == 0
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : if $z0 == 0 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $l12 = (long) i0
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $l12 = (long) i0 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $l13 = $l12 * 365L
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $l13 = $l12 * 365L >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $i14 = i8 - 719527
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $i14 = i8 - 719527 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $l15 = (long) $i14
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $l15 = (long) $i14 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $l16 = $l13 + $l15
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $l16 = $l13 + $l15 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $l17 = $l16 * 86400000L
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $l17 = $l16 * 86400000L >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : return $l17
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : return $l17 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : specialinvoke $r3.<org.joda.time.chrono.BasicChronology$YearInfo: void <init>(int,long)>(i0, $l3)
org.joda.time.chrono.BasicChronology.getYearInfo : specialinvoke $r3.<org.joda.time.chrono.BasicChronology$YearInfo: void <init>(int,long)>(i0, $l3) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r3
org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r3 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $r4 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache>
org.joda.time.chrono.BasicChronology.getYearInfo : $r4 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $i4 = i0 & 1023
org.joda.time.chrono.BasicChronology.getYearInfo : $i4 = i0 & 1023 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $r4[$i4] = r1
org.joda.time.chrono.BasicChronology.getYearInfo : $r4[$i4] = r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1)
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0)
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: long[] MIN_TOTAL_MILLIS_BY_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: long[] MIN_TOTAL_MILLIS_BY_MONTH_ARRAY> >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $i4 = i1 - 1
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $i4 = i1 - 1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $l5 = $r2[$i4]
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $l5 = $r2[$i4] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : return $l5
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : return $l5 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l5 = l3 + $l4
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l5 = l3 + $l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $i6 = i2 - 1
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $i6 = i2 - 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l7 = (long) $i6
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l7 = (long) $i6 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l8 = $l7 * 86400000L
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l8 = $l7 * 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l9 = l5 + $l8
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l9 = l5 + $l8 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : return $l9
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : return $l9 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : $l6 = (long) i4
org.joda.time.chrono.BasicGJChronology.setYear : $l6 = (long) i4 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : l7 = l5 + $l6
org.joda.time.chrono.BasicGJChronology.setYear : l7 = l5 + $l6 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : return l7
org.joda.time.chrono.BasicGJChronology.setYear : return l7 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : return $l4
org.joda.time.chrono.BasicYearDateTimeField.set : return $l4 >>>>>>>> org.joda.time.field.DecoratedDateTimeField.set : return $l2
org.joda.time.field.DecoratedDateTimeField.set : return $l2 >>>>>>>> org.joda.time.chrono.ISOYearOfEraDateTimeField.set : return $l4
org.joda.time.chrono.ISOYearOfEraDateTimeField.set : return $l4 >>>>>>>> org.joda.time.field.DividedDateTimeField.set : return $l9
org.joda.time.field.DividedDateTimeField.set : return $l9 >>>>>>>> org.joda.time.field.DividedDateTimeField.addWrapField : return $l6
org.joda.time.field.DividedDateTimeField.addWrapField : return $l6 >>>>>>>> org.joda.time.DateMidnight$Property.addWrapFieldToCopy : $r4 = virtualinvoke $r1.<org.joda.time.DateMidnight: org.joda.time.DateMidnight withMillis(long)>($l2)
org.joda.time.DateMidnight$Property.addWrapFieldToCopy : $r4 = virtualinvoke $r1.<org.joda.time.DateMidnight: org.joda.time.DateMidnight withMillis(long)>($l2) >>>>>>>> org.joda.time.DateMidnight.withMillis : r1 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>()
org.joda.time.DateMidnight.withMillis : r1 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.DateMidnight.withMillis : l1 = virtualinvoke r0.<org.joda.time.DateMidnight: long checkInstant(long,org.joda.time.Chronology)>(l0, r1)
org.joda.time.DateMidnight.withMillis : l1 = virtualinvoke r0.<org.joda.time.DateMidnight: long checkInstant(long,org.joda.time.Chronology)>(l0, r1) >>>>>>>> org.joda.time.DateMidnight.withMillis : $l2 = virtualinvoke r0.<org.joda.time.DateMidnight: long getMillis()>()
org.joda.time.DateMidnight.withMillis : $l2 = virtualinvoke r0.<org.joda.time.DateMidnight: long getMillis()>() >>>>>>>> org.joda.time.DateMidnight.withMillis : $b3 = l1 cmp $l2
org.joda.time.DateMidnight.withMillis : $b3 = l1 cmp $l2 >>>>>>>> org.joda.time.DateMidnight.withMillis : if $b3 != 0
org.joda.time.DateMidnight.withMillis : if $b3 != 0 >>>>>>>> org.joda.time.DateMidnight.withMillis : $r2 = new org.joda.time.DateMidnight
org.joda.time.DateMidnight.withMillis : $r2 = new org.joda.time.DateMidnight >>>>>>>> org.joda.time.DateMidnight.withMillis : specialinvoke $r2.<org.joda.time.DateMidnight: void <init>(long,org.joda.time.Chronology)>(l1, r1)
org.joda.time.DateMidnight.withMillis : specialinvoke $r2.<org.joda.time.DateMidnight: void <init>(long,org.joda.time.Chronology)>(l1, r1) >>>>>>>> org.joda.time.DateMidnight.withMillis : return $r2
org.joda.time.DateMidnight.withMillis : return $r2 >>>>>>>> org.joda.time.DateMidnight$Property.addWrapFieldToCopy : return $r4
org.joda.time.DateMidnight$Property.addWrapFieldToCopy : return $r4 >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.toInterval : r1 = virtualinvoke r0.<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeField getField()>()
org.joda.time.field.AbstractReadableInstantFieldProperty.toInterval : r1 = virtualinvoke r0.<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeField getField()>() >>>>>>>> org.joda.time.DateMidnight$Property.getField : $r1 = r0.<org.joda.time.DateMidnight$Property: org.joda.time.DateTimeField iField>
org.joda.time.DateMidnight$Property.getField : $r1 = r0.<org.joda.time.DateMidnight$Property: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.DateMidnight$Property.getField : return $r1
org.joda.time.DateMidnight$Property.getField : return $r1 >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.toInterval : $l2 = virtualinvoke r0.<org.joda.time.field.AbstractReadableInstantFieldProperty: long getMillis()>()
org.joda.time.field.AbstractReadableInstantFieldProperty.toInterval : $l2 = virtualinvoke r0.<org.joda.time.field.AbstractReadableInstantFieldProperty: long getMillis()>() >>>>>>>> org.joda.time.DateMidnight$Property.getMillis : $r1 = r0.<org.joda.time.DateMidnight$Property: org.joda.time.DateMidnight iInstant>
org.joda.time.DateMidnight$Property.getMillis : $r1 = r0.<org.joda.time.DateMidnight$Property: org.joda.time.DateMidnight iInstant> >>>>>>>> org.joda.time.DateMidnight$Property.getMillis : $l0 = virtualinvoke $r1.<org.joda.time.DateMidnight: long getMillis()>()
org.joda.time.DateMidnight$Property.getMillis : $l0 = virtualinvoke $r1.<org.joda.time.DateMidnight: long getMillis()>() >>>>>>>> org.joda.time.DateMidnight$Property.getMillis : return $l0
org.joda.time.DateMidnight$Property.getMillis : return $l0 >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.toInterval : l0 = virtualinvoke r1.<org.joda.time.DateTimeField: long roundFloor(long)>($l2)
org.joda.time.field.AbstractReadableInstantFieldProperty.toInterval : l0 = virtualinvoke r1.<org.joda.time.DateTimeField: long roundFloor(long)>($l2) >>>>>>>> org.joda.time.field.DividedDateTimeField.roundFloor : r1 = virtualinvoke r0.<org.joda.time.field.DividedDateTimeField: org.joda.time.DateTimeField getWrappedField()>()
org.joda.time.field.DividedDateTimeField.roundFloor : r1 = virtualinvoke r0.<org.joda.time.field.DividedDateTimeField: org.joda.time.DateTimeField getWrappedField()>() >>>>>>>> org.joda.time.field.DividedDateTimeField.roundFloor : $i1 = virtualinvoke r0.<org.joda.time.field.DividedDateTimeField: int get(long)>(l0)
org.joda.time.field.DividedDateTimeField.roundFloor : $i1 = virtualinvoke r0.<org.joda.time.field.DividedDateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.field.DividedDateTimeField.roundFloor : $i2 = r0.<org.joda.time.field.DividedDateTimeField: int iDivisor>
org.joda.time.field.DividedDateTimeField.roundFloor : $i2 = r0.<org.joda.time.field.DividedDateTimeField: int iDivisor> >>>>>>>> org.joda.time.field.DividedDateTimeField.roundFloor : $i3 = $i1 * $i2
org.joda.time.field.DividedDateTimeField.roundFloor : $i3 = $i1 * $i2 >>>>>>>> org.joda.time.field.DividedDateTimeField.roundFloor : $l4 = virtualinvoke r1.<org.joda.time.DateTimeField: long set(long,int)>(l0, $i3)
org.joda.time.field.DividedDateTimeField.roundFloor : $l4 = virtualinvoke r1.<org.joda.time.DateTimeField: long set(long,int)>(l0, $i3) >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : $i2 = i0 % 100
org.joda.time.chrono.GregorianChronology.isLeapYear : $i2 = i0 % 100 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : if $i2 != 0
org.joda.time.chrono.GregorianChronology.isLeapYear : if $i2 != 0 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : $i3 = i0 % 400
org.joda.time.chrono.GregorianChronology.isLeapYear : $i3 = i0 % 400 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : if $i3 != 0
org.joda.time.chrono.GregorianChronology.isLeapYear : if $i3 != 0 >>>>>>>> org.joda.time.field.DividedDateTimeField.roundFloor : $l5 = virtualinvoke r1.<org.joda.time.DateTimeField: long roundFloor(long)>($l4)
org.joda.time.field.DividedDateTimeField.roundFloor : $l5 = virtualinvoke r1.<org.joda.time.DateTimeField: long roundFloor(long)>($l4) >>>>>>>> org.joda.time.chrono.ISOYearOfEraDateTimeField.roundFloor : $r1 = virtualinvoke r0.<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DateTimeField getWrappedField()>()
org.joda.time.chrono.ISOYearOfEraDateTimeField.roundFloor : $r1 = virtualinvoke r0.<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DateTimeField getWrappedField()>() >>>>>>>> org.joda.time.chrono.ISOYearOfEraDateTimeField.roundFloor : $l1 = virtualinvoke $r1.<org.joda.time.DateTimeField: long roundFloor(long)>(l0)
org.joda.time.chrono.ISOYearOfEraDateTimeField.roundFloor : $l1 = virtualinvoke $r1.<org.joda.time.DateTimeField: long roundFloor(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.roundFloor : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.roundFloor : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.roundFloor : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>(l0)
org.joda.time.chrono.BasicYearDateTimeField.roundFloor : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: boolean isLeapYear(int)>(i3)
org.joda.time.chrono.BasicChronology.getYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: boolean isLeapYear(int)>(i3) >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $z0 == 0
org.joda.time.chrono.BasicChronology.getYear : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l6 = 31536000000L
org.joda.time.chrono.BasicChronology.getYear : l6 = 31536000000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l14 = l4 + l6
org.joda.time.chrono.BasicChronology.getYear : l14 = l4 + l6 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b15 = l14 cmp l0
org.joda.time.chrono.BasicChronology.getYear : $b15 = l14 cmp l0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b15 > 0
org.joda.time.chrono.BasicChronology.getYear : if $b15 > 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : i3 = i3 + 1
org.joda.time.chrono.BasicChronology.getYear : i3 = i3 + 1 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.roundFloor : $l2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>($i1)
org.joda.time.chrono.BasicYearDateTimeField.roundFloor : $l2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>($i1) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.roundFloor : return $l2
org.joda.time.chrono.BasicYearDateTimeField.roundFloor : return $l2 >>>>>>>> org.joda.time.chrono.ISOYearOfEraDateTimeField.roundFloor : return $l1
org.joda.time.chrono.ISOYearOfEraDateTimeField.roundFloor : return $l1 >>>>>>>> org.joda.time.field.DividedDateTimeField.roundFloor : return $l5
org.joda.time.field.DividedDateTimeField.roundFloor : return $l5 >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.toInterval : l1 = virtualinvoke r1.<org.joda.time.DateTimeField: long add(long,int)>(l0, 1)
org.joda.time.field.AbstractReadableInstantFieldProperty.toInterval : l1 = virtualinvoke r1.<org.joda.time.DateTimeField: long add(long,int)>(l0, 1) >>>>>>>> org.joda.time.field.DividedDateTimeField.add : $r1 = virtualinvoke r0.<org.joda.time.field.DividedDateTimeField: org.joda.time.DateTimeField getWrappedField()>()
org.joda.time.field.DividedDateTimeField.add : $r1 = virtualinvoke r0.<org.joda.time.field.DividedDateTimeField: org.joda.time.DateTimeField getWrappedField()>() >>>>>>>> org.joda.time.field.DividedDateTimeField.add : $i2 = r0.<org.joda.time.field.DividedDateTimeField: int iDivisor>
org.joda.time.field.DividedDateTimeField.add : $i2 = r0.<org.joda.time.field.DividedDateTimeField: int iDivisor> >>>>>>>> org.joda.time.field.DividedDateTimeField.add : $i3 = i1 * $i2
org.joda.time.field.DividedDateTimeField.add : $i3 = i1 * $i2 >>>>>>>> org.joda.time.field.DividedDateTimeField.add : $l4 = virtualinvoke $r1.<org.joda.time.DateTimeField: long add(long,int)>(l0, $i3)
org.joda.time.field.DividedDateTimeField.add : $l4 = virtualinvoke $r1.<org.joda.time.DateTimeField: long add(long,int)>(l0, $i3) >>>>>>>> org.joda.time.chrono.ISOYearOfEraDateTimeField.add : $r1 = virtualinvoke r0.<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DateTimeField getWrappedField()>()
org.joda.time.chrono.ISOYearOfEraDateTimeField.add : $r1 = virtualinvoke r0.<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DateTimeField getWrappedField()>() >>>>>>>> org.joda.time.chrono.ISOYearOfEraDateTimeField.add : $l2 = virtualinvoke $r1.<org.joda.time.DateTimeField: long add(long,int)>(l0, i1)
org.joda.time.chrono.ISOYearOfEraDateTimeField.add : $l2 = virtualinvoke $r1.<org.joda.time.DateTimeField: long add(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.add : if i1 != 0
org.joda.time.chrono.BasicYearDateTimeField.add : if i1 != 0 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.add : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>(l0)
org.joda.time.chrono.BasicYearDateTimeField.add : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.add : i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>(i2, i1)
org.joda.time.chrono.BasicYearDateTimeField.add : i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>(i2, i1) >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : i2 = i0 + i1
org.joda.time.field.FieldUtils.safeAdd : i2 = i0 + i1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $i3 = i0 ^ i2
org.joda.time.field.FieldUtils.safeAdd : $i3 = i0 ^ i2 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $i3 >= 0
org.joda.time.field.FieldUtils.safeAdd : if $i3 >= 0 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : return i2
org.joda.time.field.FieldUtils.safeAdd : return i2 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.add : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>(l0, i3)
org.joda.time.chrono.BasicYearDateTimeField.add : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>(l0, i3) >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $l4 = l0 + 1L
org.joda.time.chrono.BasicChronology.getMillisOfDay : $l4 = l0 + 1L >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $l5 = $l4 % 86400000L
org.joda.time.chrono.BasicChronology.getMillisOfDay : $l5 = $l4 % 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $i6 = (int) $l5
org.joda.time.chrono.BasicChronology.getMillisOfDay : $i6 = (int) $l5 >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $i7 = 86399999 + $i6
org.joda.time.chrono.BasicChronology.getMillisOfDay : $i7 = 86399999 + $i6 >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : return $i7
org.joda.time.chrono.BasicChronology.getMillisOfDay : return $i7 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : $z0 = 1
org.joda.time.chrono.GregorianChronology.isLeapYear : $z0 = 1 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : goto [?= return $z0]
org.joda.time.chrono.GregorianChronology.isLeapYear : goto [?= return $z0] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r1 = <org.joda.time.chrono.BasicGJChronology: long[] MAX_TOTAL_MILLIS_BY_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r1 = <org.joda.time.chrono.BasicGJChronology: long[] MAX_TOTAL_MILLIS_BY_MONTH_ARRAY> >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $i2 = i1 - 1
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $i2 = i1 - 1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $l3 = $r1[$i2]
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $l3 = $r1[$i2] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : return $l3
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : return $l3 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.add : return $l4
org.joda.time.chrono.BasicYearDateTimeField.add : return $l4 >>>>>>>> org.joda.time.chrono.ISOYearOfEraDateTimeField.add : return $l2
org.joda.time.chrono.ISOYearOfEraDateTimeField.add : return $l2 >>>>>>>> org.joda.time.field.DividedDateTimeField.add : return $l4
org.joda.time.field.DividedDateTimeField.add : return $l4 >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.toInterval : $r3 = new org.joda.time.Interval
org.joda.time.field.AbstractReadableInstantFieldProperty.toInterval : $r3 = new org.joda.time.Interval >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.toInterval : specialinvoke $r3.<org.joda.time.Interval: void <init>(long,long)>(l0, l1)
org.joda.time.field.AbstractReadableInstantFieldProperty.toInterval : specialinvoke $r3.<org.joda.time.Interval: void <init>(long,long)>(l0, l1) >>>>>>>> org.joda.time.DateTimeUtils.getChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>()
org.joda.time.DateTimeUtils.getChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>() >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>() >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r0)
org.joda.time.chrono.ISOChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return $r1
org.joda.time.chrono.ISOChronology.getInstance : return $r1 >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return $r1
org.joda.time.DateTimeUtils.getChronology : return $r1 >>>>>>>> org.joda.time.base.AbstractInterval.checkInterval : $b2 = l1 cmp l0
org.joda.time.base.AbstractInterval.checkInterval : $b2 = l1 cmp l0 >>>>>>>> org.joda.time.base.AbstractInterval.checkInterval : if $b2 >= 0
org.joda.time.base.AbstractInterval.checkInterval : if $b2 >= 0 >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.toInterval : r2 = $r3
org.joda.time.field.AbstractReadableInstantFieldProperty.toInterval : r2 = $r3 >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.toInterval : return r2
org.joda.time.field.AbstractReadableInstantFieldProperty.toInterval : return r2 >>>>>>>> org.joda.time.DateMidnight$Property.roundCeilingCopy : $r1 = r0.<org.joda.time.DateMidnight$Property: org.joda.time.DateMidnight iInstant>
org.joda.time.DateMidnight$Property.roundCeilingCopy : $r1 = r0.<org.joda.time.DateMidnight$Property: org.joda.time.DateMidnight iInstant> >>>>>>>> org.joda.time.DateMidnight$Property.roundCeilingCopy : $r2 = r0.<org.joda.time.DateMidnight$Property: org.joda.time.DateTimeField iField>
org.joda.time.DateMidnight$Property.roundCeilingCopy : $r2 = r0.<org.joda.time.DateMidnight$Property: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.DateMidnight$Property.roundCeilingCopy : $r3 = r0.<org.joda.time.DateMidnight$Property: org.joda.time.DateMidnight iInstant>
org.joda.time.DateMidnight$Property.roundCeilingCopy : $r3 = r0.<org.joda.time.DateMidnight$Property: org.joda.time.DateMidnight iInstant> >>>>>>>> org.joda.time.DateMidnight$Property.roundCeilingCopy : $l0 = virtualinvoke $r3.<org.joda.time.DateMidnight: long getMillis()>()
org.joda.time.DateMidnight$Property.roundCeilingCopy : $l0 = virtualinvoke $r3.<org.joda.time.DateMidnight: long getMillis()>() >>>>>>>> org.joda.time.DateMidnight$Property.roundCeilingCopy : $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long roundCeiling(long)>($l0)
org.joda.time.DateMidnight$Property.roundCeilingCopy : $l1 = virtualinvoke $r2.<org.joda.time.DateTimeField: long roundCeiling(long)>($l0) >>>>>>>> org.joda.time.field.BaseDateTimeField.roundCeiling : l1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundFloor(long)>(l0)
org.joda.time.field.BaseDateTimeField.roundCeiling : l1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundFloor(long)>(l0) >>>>>>>> org.joda.time.field.BaseDateTimeField.roundCeiling : $b2 = l1 cmp l0
org.joda.time.field.BaseDateTimeField.roundCeiling : $b2 = l1 cmp l0 >>>>>>>> org.joda.time.field.BaseDateTimeField.roundCeiling : if $b2 == 0
org.joda.time.field.BaseDateTimeField.roundCeiling : if $b2 == 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.roundCeiling : l0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long add(long,int)>(l1, 1)
org.joda.time.field.BaseDateTimeField.roundCeiling : l0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long add(long,int)>(l1, 1) >>>>>>>> org.joda.time.field.BaseDateTimeField.roundCeiling : return l0
org.joda.time.field.BaseDateTimeField.roundCeiling : return l0 >>>>>>>> org.joda.time.DateMidnight$Property.roundCeilingCopy : $r4 = virtualinvoke $r1.<org.joda.time.DateMidnight: org.joda.time.DateMidnight withMillis(long)>($l1)
org.joda.time.DateMidnight$Property.roundCeilingCopy : $r4 = virtualinvoke $r1.<org.joda.time.DateMidnight: org.joda.time.DateMidnight withMillis(long)>($l1) >>>>>>>> org.joda.time.DateMidnight$Property.roundCeilingCopy : return $r4
