org.joda.time.chrono.JulianChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>() >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>($r0, 4)
org.joda.time.chrono.JulianChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>($r0, 4) >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : if r0 != null
org.joda.time.chrono.JulianChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : $r6 = <org.joda.time.chrono.JulianChronology: java.util.Map cCache>
org.joda.time.chrono.JulianChronology.getInstance : $r6 = <org.joda.time.chrono.JulianChronology: java.util.Map cCache> >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : r1 = $r6
org.joda.time.chrono.JulianChronology.getInstance : r1 = $r6 >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : entermonitor $r6
org.joda.time.chrono.JulianChronology.getInstance : entermonitor $r6 >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : $r7 = <org.joda.time.chrono.JulianChronology: java.util.Map cCache>
org.joda.time.chrono.JulianChronology.getInstance : $r7 = <org.joda.time.chrono.JulianChronology: java.util.Map cCache> >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
org.joda.time.chrono.JulianChronology.getInstance : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $r1 = virtualinvoke r0.<org.joda.time.tz.FixedDateTimeZone: java.lang.String getID()>()
org.joda.time.tz.FixedDateTimeZone.hashCode : $r1 = virtualinvoke r0.<org.joda.time.tz.FixedDateTimeZone: java.lang.String getID()>() >>>>>>>> org.joda.time.DateTimeZone.getID : $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>
org.joda.time.DateTimeZone.getID : $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID> >>>>>>>> org.joda.time.DateTimeZone.getID : return $r1
org.joda.time.DateTimeZone.getID : return $r1 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>()
org.joda.time.tz.FixedDateTimeZone.hashCode : $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>() >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iStandardOffset>
org.joda.time.tz.FixedDateTimeZone.hashCode : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iStandardOffset> >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i2 = 37 * $i1
org.joda.time.tz.FixedDateTimeZone.hashCode : $i2 = 37 * $i1 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i3 = $i0 + $i2
org.joda.time.tz.FixedDateTimeZone.hashCode : $i3 = $i0 + $i2 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i4 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset>
org.joda.time.tz.FixedDateTimeZone.hashCode : $i4 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset> >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i5 = 31 * $i4
org.joda.time.tz.FixedDateTimeZone.hashCode : $i5 = 31 * $i4 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i6 = $i3 + $i5
org.joda.time.tz.FixedDateTimeZone.hashCode : $i6 = $i3 + $i5 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : return $i6
org.joda.time.tz.FixedDateTimeZone.hashCode : return $i6 >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : r2 = (org.joda.time.chrono.JulianChronology[]) $r8
org.joda.time.chrono.JulianChronology.getInstance : r2 = (org.joda.time.chrono.JulianChronology[]) $r8 >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : if r2 != null
org.joda.time.chrono.JulianChronology.getInstance : if r2 != null >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : $i1 = i0 - 1
org.joda.time.chrono.JulianChronology.getInstance : $i1 = i0 - 1 >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : r3 = r2[$i1]
org.joda.time.chrono.JulianChronology.getInstance : r3 = r2[$i1] >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : goto [?= (branch)]
org.joda.time.chrono.JulianChronology.getInstance : goto [?= (branch)] >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : if r3 != null
org.joda.time.chrono.JulianChronology.getInstance : if r3 != null >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : exitmonitor r1
org.joda.time.chrono.JulianChronology.getInstance : exitmonitor r1 >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : goto [?= return r3]
org.joda.time.chrono.JulianChronology.getInstance : goto [?= return r3] >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : return r3
org.joda.time.chrono.JulianChronology.getInstance : return r3 >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : return $r1
org.joda.time.chrono.JulianChronology.getInstance : return $r1 >>>>>>>> org.joda.time.chrono.JulianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.JulianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : return $r1
org.joda.time.chrono.AssembledChronology.getBase : return $r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : r1 = $r2
org.joda.time.chrono.BasicChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : if $r2 == null
org.joda.time.chrono.BasicChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : return $r4
org.joda.time.chrono.BasicChronology.getZone : return $r4 >>>>>>>> org.joda.time.chrono.JulianChronology.getZone : return $r1
org.joda.time.chrono.JulianChronology.getZone : return $r1 >>>>>>>> org.joda.time.DateTimeZone.getName : if r1 != null
org.joda.time.DateTimeZone.getName : if r1 != null >>>>>>>> org.joda.time.DateTimeZone.getName : r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>()
org.joda.time.DateTimeZone.getName : r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>() >>>>>>>> org.joda.time.DateTimeZone.getName : r2 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>(l0)
org.joda.time.DateTimeZone.getName : r2 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>(l0) >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getNameKey : $r1 = r0.<org.joda.time.tz.FixedDateTimeZone: java.lang.String iNameKey>
org.joda.time.tz.FixedDateTimeZone.getNameKey : $r1 = r0.<org.joda.time.tz.FixedDateTimeZone: java.lang.String iNameKey> >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getNameKey : return $r1
org.joda.time.tz.FixedDateTimeZone.getNameKey : return $r1 >>>>>>>> org.joda.time.DateTimeZone.getName : if r2 != null
org.joda.time.DateTimeZone.getName : if r2 != null >>>>>>>> org.joda.time.DateTimeZone.getName : $r5 = <org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider cNameProvider>
org.joda.time.DateTimeZone.getName : $r5 = <org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider cNameProvider> >>>>>>>> org.joda.time.DateTimeZone.getName : $r6 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>
org.joda.time.DateTimeZone.getName : $r6 = r0.<org.joda.time.DateTimeZone: java.lang.String iID> >>>>>>>> org.joda.time.DateTimeZone.getName : r3 = interfaceinvoke $r5.<org.joda.time.tz.NameProvider: java.lang.String getName(java.util.Locale,java.lang.String,java.lang.String)>(r1, $r6, r2)
org.joda.time.DateTimeZone.getName : r3 = interfaceinvoke $r5.<org.joda.time.tz.NameProvider: java.lang.String getName(java.util.Locale,java.lang.String,java.lang.String)>(r1, $r6, r2) >>>>>>>> org.joda.time.tz.DefaultNameProvider.getName : r4 = specialinvoke r0.<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>(r1, r2, r3)
org.joda.time.tz.DefaultNameProvider.getName : r4 = specialinvoke r0.<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>(r1, r2, r3) >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : if r1 == null
org.joda.time.tz.DefaultNameProvider.getNameSet : if r1 == null >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : if r2 == null
org.joda.time.tz.DefaultNameProvider.getNameSet : if r2 == null >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : if r3 != null
org.joda.time.tz.DefaultNameProvider.getNameSet : if r3 != null >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $r8 = r0.<org.joda.time.tz.DefaultNameProvider: java.util.HashMap iByLocaleCache>
org.joda.time.tz.DefaultNameProvider.getNameSet : $r8 = r0.<org.joda.time.tz.DefaultNameProvider: java.util.HashMap iByLocaleCache> >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $r9 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1)
org.joda.time.tz.DefaultNameProvider.getNameSet : $r9 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : r4 = (java.util.Map) $r9
org.joda.time.tz.DefaultNameProvider.getNameSet : r4 = (java.util.Map) $r9 >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : if r4 != null
org.joda.time.tz.DefaultNameProvider.getNameSet : if r4 != null >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $r13 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2)
org.joda.time.tz.DefaultNameProvider.getNameSet : $r13 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : r5 = (java.util.Map) $r13
org.joda.time.tz.DefaultNameProvider.getNameSet : r5 = (java.util.Map) $r13 >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : if r5 != null
org.joda.time.tz.DefaultNameProvider.getNameSet : if r5 != null >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $r39 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3)
org.joda.time.tz.DefaultNameProvider.getNameSet : $r39 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3) >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $r40 = (java.lang.String[]) $r39
org.joda.time.tz.DefaultNameProvider.getNameSet : $r40 = (java.lang.String[]) $r39 >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $r41 = (java.lang.String[]) $r40
org.joda.time.tz.DefaultNameProvider.getNameSet : $r41 = (java.lang.String[]) $r40 >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : return $r41
org.joda.time.tz.DefaultNameProvider.getNameSet : return $r41 >>>>>>>> org.joda.time.tz.DefaultNameProvider.getName : if r4 != null
org.joda.time.tz.DefaultNameProvider.getName : if r4 != null >>>>>>>> org.joda.time.tz.DefaultNameProvider.getName : $r5 = r4[1]
org.joda.time.tz.DefaultNameProvider.getName : $r5 = r4[1] >>>>>>>> org.joda.time.tz.DefaultNameProvider.getName : return $r5
org.joda.time.tz.DefaultNameProvider.getName : return $r5 >>>>>>>> org.joda.time.DateTimeZone.getName : if r3 == null
org.joda.time.DateTimeZone.getName : if r3 == null >>>>>>>> org.joda.time.DateTimeZone.getName : return r3
