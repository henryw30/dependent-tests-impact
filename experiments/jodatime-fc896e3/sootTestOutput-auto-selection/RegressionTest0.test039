org.joda.time.Years.years : lookupswitch(i0) {     case -2147483648: >>>>>>>> org.joda.time.Years.years : $r0 = <org.joda.time.Years: org.joda.time.Years ZERO>
org.joda.time.Years.years : $r0 = <org.joda.time.Years: org.joda.time.Years ZERO> >>>>>>>> org.joda.time.Years.years : return $r0
org.joda.time.Years.years : return $r0 >>>>>>>> org.joda.time.Years.minus : $i1 = staticinvoke <org.joda.time.field.FieldUtils: int safeNegate(int)>(i0)
org.joda.time.Years.minus : $i1 = staticinvoke <org.joda.time.field.FieldUtils: int safeNegate(int)>(i0) >>>>>>>> org.joda.time.field.FieldUtils.safeNegate : if i0 != -2147483648
org.joda.time.field.FieldUtils.safeNegate : if i0 != -2147483648 >>>>>>>> org.joda.time.field.FieldUtils.safeNegate : $i1 = neg i0
org.joda.time.field.FieldUtils.safeNegate : $i1 = neg i0 >>>>>>>> org.joda.time.field.FieldUtils.safeNegate : return $i1
org.joda.time.field.FieldUtils.safeNegate : return $i1 >>>>>>>> org.joda.time.Years.minus : $r1 = virtualinvoke r0.<org.joda.time.Years: org.joda.time.Years plus(int)>($i1)
org.joda.time.Years.minus : $r1 = virtualinvoke r0.<org.joda.time.Years: org.joda.time.Years plus(int)>($i1) >>>>>>>> org.joda.time.Years.plus : if i0 != 0
org.joda.time.Years.plus : if i0 != 0 >>>>>>>> org.joda.time.Years.plus : $i1 = virtualinvoke r0.<org.joda.time.Years: int getValue()>()
org.joda.time.Years.plus : $i1 = virtualinvoke r0.<org.joda.time.Years: int getValue()>() >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.getValue : $i0 = r0.<org.joda.time.base.BaseSingleFieldPeriod: int iPeriod>
org.joda.time.base.BaseSingleFieldPeriod.getValue : $i0 = r0.<org.joda.time.base.BaseSingleFieldPeriod: int iPeriod> >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.getValue : return $i0
org.joda.time.base.BaseSingleFieldPeriod.getValue : return $i0 >>>>>>>> org.joda.time.Years.plus : $i2 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>($i1, i0)
org.joda.time.Years.plus : $i2 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>($i1, i0) >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : i2 = i0 + i1
org.joda.time.field.FieldUtils.safeAdd : i2 = i0 + i1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $i3 = i0 ^ i2
org.joda.time.field.FieldUtils.safeAdd : $i3 = i0 ^ i2 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $i3 >= 0
org.joda.time.field.FieldUtils.safeAdd : if $i3 >= 0 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : return i2
org.joda.time.field.FieldUtils.safeAdd : return i2 >>>>>>>> org.joda.time.Years.plus : $r1 = staticinvoke <org.joda.time.Years: org.joda.time.Years years(int)>($i2)
org.joda.time.Years.plus : $r1 = staticinvoke <org.joda.time.Years: org.joda.time.Years years(int)>($i2) >>>>>>>> org.joda.time.Years.years : $r1 = <org.joda.time.Years: org.joda.time.Years ONE>
org.joda.time.Years.years : $r1 = <org.joda.time.Years: org.joda.time.Years ONE> >>>>>>>> org.joda.time.Years.years : return $r1
org.joda.time.Years.years : return $r1 >>>>>>>> org.joda.time.Years.plus : return $r1
org.joda.time.Years.plus : return $r1 >>>>>>>> org.joda.time.Years.minus : return $r1
org.joda.time.Years.minus : return $r1 >>>>>>>> org.joda.time.format.ISOPeriodFormat.standard : $r0 = <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter cStandard>
org.joda.time.format.ISOPeriodFormat.standard : $r0 = <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter cStandard> >>>>>>>> org.joda.time.format.ISOPeriodFormat.standard : if $r0 != null
org.joda.time.format.ISOPeriodFormat.standard : if $r0 != null >>>>>>>> org.joda.time.format.ISOPeriodFormat.standard : $r19 = <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter cStandard>
org.joda.time.format.ISOPeriodFormat.standard : $r19 = <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter cStandard> >>>>>>>> org.joda.time.format.ISOPeriodFormat.standard : return $r19
org.joda.time.format.ISOPeriodFormat.standard : return $r19 >>>>>>>> org.joda.time.PeriodType.weeks : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cWeeks>
org.joda.time.PeriodType.weeks : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cWeeks> >>>>>>>> org.joda.time.PeriodType.weeks : if r0 != null
org.joda.time.PeriodType.weeks : if r0 != null >>>>>>>> org.joda.time.PeriodType.weeks : $r2 = new org.joda.time.PeriodType
org.joda.time.PeriodType.weeks : $r2 = new org.joda.time.PeriodType >>>>>>>> org.joda.time.PeriodType.weeks : $r3 = newarray (org.joda.time.DurationFieldType)[1]
org.joda.time.PeriodType.weeks : $r3 = newarray (org.joda.time.DurationFieldType)[1] >>>>>>>> org.joda.time.PeriodType.weeks : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>()
org.joda.time.PeriodType.weeks : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>() >>>>>>>> org.joda.time.DurationFieldType.weeks : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType WEEKS_TYPE>
org.joda.time.DurationFieldType.weeks : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType WEEKS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.weeks : return $r0
org.joda.time.DurationFieldType.weeks : return $r0 >>>>>>>> org.joda.time.PeriodType.weeks : $r3[0] = $r1
org.joda.time.PeriodType.weeks : $r3[0] = $r1 >>>>>>>> org.joda.time.PeriodType.weeks : $r4 = newarray (int)[8]
org.joda.time.PeriodType.weeks : $r4 = newarray (int)[8] >>>>>>>> org.joda.time.PeriodType.weeks : $r4[0] = -1
org.joda.time.PeriodType.weeks : $r4[0] = -1 >>>>>>>> org.joda.time.PeriodType.weeks : $r4[1] = -1
org.joda.time.PeriodType.weeks : $r4[1] = -1 >>>>>>>> org.joda.time.PeriodType.weeks : $r4[2] = 0
org.joda.time.PeriodType.weeks : $r4[2] = 0 >>>>>>>> org.joda.time.PeriodType.weeks : $r4[3] = -1
org.joda.time.PeriodType.weeks : $r4[3] = -1 >>>>>>>> org.joda.time.PeriodType.weeks : $r4[4] = -1
org.joda.time.PeriodType.weeks : $r4[4] = -1 >>>>>>>> org.joda.time.PeriodType.weeks : $r4[5] = -1
org.joda.time.PeriodType.weeks : $r4[5] = -1 >>>>>>>> org.joda.time.PeriodType.weeks : $r4[6] = -1
org.joda.time.PeriodType.weeks : $r4[6] = -1 >>>>>>>> org.joda.time.PeriodType.weeks : $r4[7] = -1
org.joda.time.PeriodType.weeks : $r4[7] = -1 >>>>>>>> org.joda.time.PeriodType.weeks : specialinvoke $r2.<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>("Weeks", $r3, $r4)
org.joda.time.PeriodType.weeks : specialinvoke $r2.<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>("Weeks", $r3, $r4) >>>>>>>> org.joda.time.PeriodType.weeks : r0 = $r2
org.joda.time.PeriodType.weeks : r0 = $r2 >>>>>>>> org.joda.time.PeriodType.weeks : <org.joda.time.PeriodType: org.joda.time.PeriodType cWeeks> = r0
org.joda.time.PeriodType.weeks : <org.joda.time.PeriodType: org.joda.time.PeriodType cWeeks> = r0 >>>>>>>> org.joda.time.PeriodType.weeks : return r0
org.joda.time.PeriodType.weeks : return r0 >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : $r2 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.PeriodType iParseType>
org.joda.time.format.PeriodFormatter.withParseType : $r2 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.PeriodType iParseType> >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : if r1 != $r2
org.joda.time.format.PeriodFormatter.withParseType : if r1 != $r2 >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : $r3 = new org.joda.time.format.PeriodFormatter
org.joda.time.format.PeriodFormatter.withParseType : $r3 = new org.joda.time.format.PeriodFormatter >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : $r4 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter iPrinter>
org.joda.time.format.PeriodFormatter.withParseType : $r4 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter iPrinter> >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : $r5 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser iParser>
org.joda.time.format.PeriodFormatter.withParseType : $r5 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser iParser> >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : $r6 = r0.<org.joda.time.format.PeriodFormatter: java.util.Locale iLocale>
org.joda.time.format.PeriodFormatter.withParseType : $r6 = r0.<org.joda.time.format.PeriodFormatter: java.util.Locale iLocale> >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : specialinvoke $r3.<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,java.util.Locale,org.joda.time.PeriodType)>($r4, $r5, $r6, r1)
org.joda.time.format.PeriodFormatter.withParseType : specialinvoke $r3.<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,java.util.Locale,org.joda.time.PeriodType)>($r4, $r5, $r6, r1) >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : return $r3
org.joda.time.format.PeriodFormatter.withParseType : return $r3 >>>>>>>> org.joda.time.Weeks.standardWeeksIn : i0 = staticinvoke <org.joda.time.base.BaseSingleFieldPeriod: int standardPeriodIn(org.joda.time.ReadablePeriod,long)>(r0, 604800000L)
org.joda.time.Weeks.standardWeeksIn : i0 = staticinvoke <org.joda.time.base.BaseSingleFieldPeriod: int standardPeriodIn(org.joda.time.ReadablePeriod,long)>(r0, 604800000L) >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : if r0 != null
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : if r0 != null >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() >>>>>>>> org.joda.time.chrono.ISOChronology.getInstanceUTC : $r0 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>
org.joda.time.chrono.ISOChronology.getInstanceUTC : $r0 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstanceUTC : return $r0
org.joda.time.chrono.ISOChronology.getInstanceUTC : return $r0 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : l1 = 0L
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : l1 = 0L >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : i2 = 0
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : i2 = 0 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $i4 = interfaceinvoke r0.<org.joda.time.ReadablePeriod: int size()>()
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $i4 = interfaceinvoke r0.<org.joda.time.ReadablePeriod: int size()>() >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.size : return 1
org.joda.time.base.BaseSingleFieldPeriod.size : return 1 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : if i2 >= $i4
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : if i2 >= $i4 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : i3 = interfaceinvoke r0.<org.joda.time.ReadablePeriod: int getValue(int)>(i2)
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : i3 = interfaceinvoke r0.<org.joda.time.ReadablePeriod: int getValue(int)>(i2) >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.getValue : if i0 == 0
org.joda.time.base.BaseSingleFieldPeriod.getValue : if i0 == 0 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.getValue : $i1 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>()
org.joda.time.base.BaseSingleFieldPeriod.getValue : $i1 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>() >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.getValue : return $i1
org.joda.time.base.BaseSingleFieldPeriod.getValue : return $i1 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : if i3 == 0
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : if i3 == 0 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $r4 = interfaceinvoke r0.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i2)
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $r4 = interfaceinvoke r0.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i2) >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.getFieldType : if i0 == 0
org.joda.time.base.BaseSingleFieldPeriod.getFieldType : if i0 == 0 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.getFieldType : $r3 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType()>()
org.joda.time.base.BaseSingleFieldPeriod.getFieldType : $r3 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType()>() >>>>>>>> org.joda.time.Years.getFieldType : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>()
org.joda.time.Years.getFieldType : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>() >>>>>>>> org.joda.time.DurationFieldType.years : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType YEARS_TYPE>
org.joda.time.DurationFieldType.years : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType YEARS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.years : return $r0
org.joda.time.DurationFieldType.years : return $r0 >>>>>>>> org.joda.time.Years.getFieldType : return $r1
org.joda.time.Years.getFieldType : return $r1 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.getFieldType : return $r3
org.joda.time.base.BaseSingleFieldPeriod.getFieldType : return $r3 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : r2 = virtualinvoke $r4.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>(r1)
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : r2 = virtualinvoke $r4.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getChronology : if r0 != null
org.joda.time.DateTimeUtils.getChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.DateTimeUtils.getChronology : return r0 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal>
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : tableswitch($b0) {     case 1:
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : tableswitch($b0) {     case 1: >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r6 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField years()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r6 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField years()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.years : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears>
org.joda.time.chrono.AssembledChronology.years : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears> >>>>>>>> org.joda.time.chrono.AssembledChronology.years : return $r1
org.joda.time.chrono.AssembledChronology.years : return $r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r6
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r6 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $z0 = virtualinvoke r2.<org.joda.time.DurationField: boolean isPrecise()>()
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $z0 = virtualinvoke r2.<org.joda.time.DurationField: boolean isPrecise()>() >>>>>>>> org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.isPrecise : return 0
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.isPrecise : return 0 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : if $z0 != 0
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : if $z0 != 0 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $r5 = new java.lang.IllegalArgumentException
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $r5 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $r3 = new java.lang.StringBuilder
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $r3 = new java.lang.StringBuilder >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot convert period to duration as ")
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot convert period to duration as ") >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $r7 = virtualinvoke r2.<org.joda.time.DurationField: java.lang.String getName()>()
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $r7 = virtualinvoke r2.<org.joda.time.DurationField: java.lang.String getName()>() >>>>>>>> org.joda.time.field.BaseDurationField.getName : $r1 = r0.<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType iType>
org.joda.time.field.BaseDurationField.getName : $r1 = r0.<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType iType> >>>>>>>> org.joda.time.field.BaseDurationField.getName : $r2 = virtualinvoke $r1.<org.joda.time.DurationFieldType: java.lang.String getName()>()
org.joda.time.field.BaseDurationField.getName : $r2 = virtualinvoke $r1.<org.joda.time.DurationFieldType: java.lang.String getName()>() >>>>>>>> org.joda.time.DurationFieldType.getName : $r1 = r0.<org.joda.time.DurationFieldType: java.lang.String iName>
org.joda.time.DurationFieldType.getName : $r1 = r0.<org.joda.time.DurationFieldType: java.lang.String iName> >>>>>>>> org.joda.time.DurationFieldType.getName : return $r1
org.joda.time.DurationFieldType.getName : return $r1 >>>>>>>> org.joda.time.field.BaseDurationField.getName : return $r2
org.joda.time.field.BaseDurationField.getName : return $r2 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not precise in the period ")
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not precise in the period ") >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0)
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) >>>>>>>> org.joda.time.Years.toString : $r1 = new java.lang.StringBuilder
org.joda.time.Years.toString : $r1 = new java.lang.StringBuilder >>>>>>>> org.joda.time.Years.toString : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
org.joda.time.Years.toString : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.Years.toString : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("P")
org.joda.time.Years.toString : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("P") >>>>>>>> org.joda.time.Years.toString : $i0 = virtualinvoke r0.<org.joda.time.Years: int getValue()>()
org.joda.time.Years.toString : $i0 = virtualinvoke r0.<org.joda.time.Years: int getValue()>() >>>>>>>> org.joda.time.Years.toString : $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0)
org.joda.time.Years.toString : $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0) >>>>>>>> org.joda.time.Years.toString : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3)
org.joda.time.Years.toString : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) >>>>>>>> org.joda.time.Years.toString : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Y")
org.joda.time.Years.toString : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Y") >>>>>>>> org.joda.time.Years.toString : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.Years.toString : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.Years.toString : return $r6
org.joda.time.Years.toString : return $r6 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11)
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11) >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : throw $r5
