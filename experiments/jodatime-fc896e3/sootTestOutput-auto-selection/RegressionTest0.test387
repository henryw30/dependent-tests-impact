org.joda.time.format.ISOPeriodFormat.alternateWithWeeks : $r0 = <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter cAlternateWithWeeks> >>>>>>>> org.joda.time.format.ISOPeriodFormat.alternateWithWeeks : if $r0 != null
org.joda.time.format.ISOPeriodFormat.alternateWithWeeks : if $r0 != null >>>>>>>> org.joda.time.format.ISOPeriodFormat.alternateWithWeeks : $r15 = <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter cAlternateWithWeeks>
org.joda.time.format.ISOPeriodFormat.alternateWithWeeks : $r15 = <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter cAlternateWithWeeks> >>>>>>>> org.joda.time.format.ISOPeriodFormat.alternateWithWeeks : return $r15
org.joda.time.format.ISOPeriodFormat.alternateWithWeeks : return $r15 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r0 != null
org.joda.time.chrono.ISOChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.chrono.ISOChronology.getInstance : r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>() >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63
org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>
org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0]
org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0] >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r1 == null
org.joda.time.chrono.ISOChronology.getInstance : if r1 == null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2
org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null
org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.GregorianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : return $r1
org.joda.time.chrono.AssembledChronology.getBase : return $r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : r1 = $r2
org.joda.time.chrono.BasicChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : if $r2 == null
org.joda.time.chrono.BasicChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : return $r4
org.joda.time.chrono.BasicChronology.getZone : return $r4 >>>>>>>> org.joda.time.chrono.GregorianChronology.getZone : return $r1
org.joda.time.chrono.GregorianChronology.getZone : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : return $r3
org.joda.time.chrono.AssembledChronology.getZone : return $r3 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0
org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return r1
org.joda.time.chrono.ISOChronology.getInstance : return r1 >>>>>>>> org.joda.time.DateTimeUtils.getChronology : if r0 != null
org.joda.time.DateTimeUtils.getChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.DateTimeUtils.getChronology : return r0 >>>>>>>> org.joda.time.DateTimeZone.getMillisKeepLocal : if r1 != null
org.joda.time.DateTimeZone.getMillisKeepLocal : if r1 != null >>>>>>>> org.joda.time.DateTimeZone.getMillisKeepLocal : if r1 != r0
org.joda.time.DateTimeZone.getMillisKeepLocal : if r1 != r0 >>>>>>>> org.joda.time.DateTimeZone.getMillisKeepLocal : return l0
org.joda.time.DateTimeZone.getMillisKeepLocal : return l0 >>>>>>>> org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>
org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.ISOChronology.withUTC : return $r1
org.joda.time.chrono.ISOChronology.withUTC : return $r1 >>>>>>>> org.joda.time.LocalDateTime.monthOfYear : $r1 = new org.joda.time.LocalDateTime$Property
org.joda.time.LocalDateTime.monthOfYear : $r1 = new org.joda.time.LocalDateTime$Property >>>>>>>> org.joda.time.LocalDateTime.monthOfYear : $r2 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalDateTime.monthOfYear : $r2 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.LocalDateTime.getChronology : $r1 = r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology iChronology>
org.joda.time.LocalDateTime.getChronology : $r1 = r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.LocalDateTime.getChronology : return $r1
org.joda.time.LocalDateTime.getChronology : return $r1 >>>>>>>> org.joda.time.LocalDateTime.monthOfYear : $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.LocalDateTime.monthOfYear : $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.monthOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear>
org.joda.time.chrono.AssembledChronology.monthOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.monthOfYear : return $r1
org.joda.time.chrono.AssembledChronology.monthOfYear : return $r1 >>>>>>>> org.joda.time.LocalDateTime.monthOfYear : specialinvoke $r1.<org.joda.time.LocalDateTime$Property: void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField)>(r0, $r3)
org.joda.time.LocalDateTime.monthOfYear : specialinvoke $r1.<org.joda.time.LocalDateTime$Property: void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField)>(r0, $r3) >>>>>>>> org.joda.time.LocalDateTime.monthOfYear : return $r1
org.joda.time.LocalDateTime.monthOfYear : return $r1 >>>>>>>> org.joda.time.base.AbstractPartial.isAfter : if r1 != null
org.joda.time.base.AbstractPartial.isAfter : if r1 != null >>>>>>>> org.joda.time.base.AbstractPartial.isAfter : $i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>(r1)
org.joda.time.base.AbstractPartial.isAfter : $i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>(r1) >>>>>>>> org.joda.time.LocalDateTime.compareTo : if r0 != r1
org.joda.time.LocalDateTime.compareTo : if r0 != r1 >>>>>>>> org.joda.time.LocalDateTime.compareTo : $z0 = r1 instanceof org.joda.time.LocalDateTime
org.joda.time.LocalDateTime.compareTo : $z0 = r1 instanceof org.joda.time.LocalDateTime >>>>>>>> org.joda.time.LocalDateTime.compareTo : if $z0 == 0
org.joda.time.LocalDateTime.compareTo : if $z0 == 0 >>>>>>>> org.joda.time.LocalDateTime.compareTo : r2 = (org.joda.time.LocalDateTime) r1
org.joda.time.LocalDateTime.compareTo : r2 = (org.joda.time.LocalDateTime) r1 >>>>>>>> org.joda.time.LocalDateTime.compareTo : $r3 = r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology iChronology>
org.joda.time.LocalDateTime.compareTo : $r3 = r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.LocalDateTime.compareTo : $r4 = r2.<org.joda.time.LocalDateTime: org.joda.time.Chronology iChronology>
org.joda.time.LocalDateTime.compareTo : $r4 = r2.<org.joda.time.LocalDateTime: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.LocalDateTime.compareTo : $z1 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4)
org.joda.time.LocalDateTime.compareTo : $z1 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4) >>>>>>>> org.joda.time.chrono.ISOChronology.equals : $z0 = specialinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1)
org.joda.time.chrono.ISOChronology.equals : $z0 = specialinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.joda.time.chrono.ISOChronology.equals : return $z0
org.joda.time.chrono.ISOChronology.equals : return $z0 >>>>>>>> org.joda.time.LocalDateTime.compareTo : if $z1 == 0
org.joda.time.LocalDateTime.compareTo : if $z1 == 0 >>>>>>>> org.joda.time.LocalDateTime.compareTo : $l0 = r0.<org.joda.time.LocalDateTime: long iLocalMillis>
org.joda.time.LocalDateTime.compareTo : $l0 = r0.<org.joda.time.LocalDateTime: long iLocalMillis> >>>>>>>> org.joda.time.LocalDateTime.compareTo : $l1 = r2.<org.joda.time.LocalDateTime: long iLocalMillis>
org.joda.time.LocalDateTime.compareTo : $l1 = r2.<org.joda.time.LocalDateTime: long iLocalMillis> >>>>>>>> org.joda.time.LocalDateTime.compareTo : $b2 = $l0 cmp $l1
org.joda.time.LocalDateTime.compareTo : $b2 = $l0 cmp $l1 >>>>>>>> org.joda.time.LocalDateTime.compareTo : if $b2 >= 0
org.joda.time.LocalDateTime.compareTo : if $b2 >= 0 >>>>>>>> org.joda.time.LocalDateTime.compareTo : $l4 = r0.<org.joda.time.LocalDateTime: long iLocalMillis>
org.joda.time.LocalDateTime.compareTo : $l4 = r0.<org.joda.time.LocalDateTime: long iLocalMillis> >>>>>>>> org.joda.time.LocalDateTime.compareTo : $l5 = r2.<org.joda.time.LocalDateTime: long iLocalMillis>
org.joda.time.LocalDateTime.compareTo : $l5 = r2.<org.joda.time.LocalDateTime: long iLocalMillis> >>>>>>>> org.joda.time.LocalDateTime.compareTo : $b6 = $l4 cmp $l5
org.joda.time.LocalDateTime.compareTo : $b6 = $l4 cmp $l5 >>>>>>>> org.joda.time.LocalDateTime.compareTo : if $b6 != 0
org.joda.time.LocalDateTime.compareTo : if $b6 != 0 >>>>>>>> org.joda.time.LocalDateTime.compareTo : $b3 = 0
org.joda.time.LocalDateTime.compareTo : $b3 = 0 >>>>>>>> org.joda.time.LocalDateTime.compareTo : goto [?= return $b3]
org.joda.time.LocalDateTime.compareTo : goto [?= return $b3] >>>>>>>> org.joda.time.LocalDateTime.compareTo : return $b3
org.joda.time.LocalDateTime.compareTo : return $b3 >>>>>>>> org.joda.time.base.AbstractPartial.isAfter : if $i0 <= 0
org.joda.time.base.AbstractPartial.isAfter : if $i0 <= 0 >>>>>>>> org.joda.time.base.AbstractPartial.isAfter : $z0 = 0
org.joda.time.base.AbstractPartial.isAfter : $z0 = 0 >>>>>>>> org.joda.time.base.AbstractPartial.isAfter : return $z0
org.joda.time.base.AbstractPartial.isAfter : return $z0 >>>>>>>> org.joda.time.LocalDateTime.withMillisOfDay : $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalDateTime.withMillisOfDay : $r1 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.LocalDateTime.withMillisOfDay : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>()
org.joda.time.LocalDateTime.withMillisOfDay : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.millisOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay>
org.joda.time.chrono.AssembledChronology.millisOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.millisOfDay : return $r1
org.joda.time.chrono.AssembledChronology.millisOfDay : return $r1 >>>>>>>> org.joda.time.LocalDateTime.withMillisOfDay : $l1 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>()
org.joda.time.LocalDateTime.withMillisOfDay : $l1 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>() >>>>>>>> org.joda.time.LocalDateTime.getLocalMillis : $l0 = r0.<org.joda.time.LocalDateTime: long iLocalMillis>
org.joda.time.LocalDateTime.getLocalMillis : $l0 = r0.<org.joda.time.LocalDateTime: long iLocalMillis> >>>>>>>> org.joda.time.LocalDateTime.getLocalMillis : return $l0
org.joda.time.LocalDateTime.getLocalMillis : return $l0 >>>>>>>> org.joda.time.LocalDateTime.withMillisOfDay : $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, i0)
org.joda.time.LocalDateTime.withMillisOfDay : $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, i0) >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int getMinimumValue()>()
org.joda.time.field.PreciseDateTimeField.set : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int getMinimumValue()>() >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getMinimumValue : return 0
org.joda.time.field.PreciseDurationDateTimeField.getMinimumValue : return 0 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $i3 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>()
org.joda.time.field.PreciseDateTimeField.set : $i3 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange>
org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange> >>>>>>>> org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i1 = $i0 - 1
org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i1 = $i0 - 1 >>>>>>>> org.joda.time.field.PreciseDateTimeField.getMaximumValue : return $i1
org.joda.time.field.PreciseDateTimeField.getMaximumValue : return $i1 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3)
org.joda.time.field.PreciseDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3) >>>>>>>> org.joda.time.field.FieldUtils.verifyValueBounds : if i0 < i1
org.joda.time.field.FieldUtils.verifyValueBounds : if i0 < i1 >>>>>>>> org.joda.time.field.FieldUtils.verifyValueBounds : if i0 <= i2
org.joda.time.field.FieldUtils.verifyValueBounds : if i0 <= i2 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $i4 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int get(long)>(l0)
org.joda.time.field.PreciseDateTimeField.set : $i4 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDateTimeField.get : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : if $b1 < 0
org.joda.time.field.PreciseDateTimeField.get : if $b1 < 0 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: long getUnitMillis()>()
org.joda.time.field.PreciseDateTimeField.get : $l2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: long getUnitMillis()>() >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : return $l0
org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : return $l0 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l3 = l0 / $l2
org.joda.time.field.PreciseDateTimeField.get : $l3 = l0 / $l2 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $i4 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange>
org.joda.time.field.PreciseDateTimeField.get : $i4 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange> >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l5 = (long) $i4
org.joda.time.field.PreciseDateTimeField.get : $l5 = (long) $i4 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l6 = $l3 % $l5
org.joda.time.field.PreciseDateTimeField.get : $l6 = $l3 % $l5 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $i7 = (int) $l6
org.joda.time.field.PreciseDateTimeField.get : $i7 = (int) $l6 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : return $i7
org.joda.time.field.PreciseDateTimeField.get : return $i7 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $i5 = i1 - $i4
org.joda.time.field.PreciseDateTimeField.set : $i5 = i1 - $i4 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $l6 = (long) $i5
org.joda.time.field.PreciseDateTimeField.set : $l6 = (long) $i5 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $l7 = r0.<org.joda.time.field.PreciseDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDateTimeField.set : $l7 = r0.<org.joda.time.field.PreciseDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $l8 = $l6 * $l7
org.joda.time.field.PreciseDateTimeField.set : $l8 = $l6 * $l7 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $l9 = l0 + $l8
org.joda.time.field.PreciseDateTimeField.set : $l9 = l0 + $l8 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : return $l9
org.joda.time.field.PreciseDateTimeField.set : return $l9 >>>>>>>> org.joda.time.LocalDateTime.withMillisOfDay : $r3 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>($l2)
org.joda.time.LocalDateTime.withMillisOfDay : $r3 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>($l2) >>>>>>>> org.joda.time.LocalDateTime.withLocalMillis : $l1 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>()
org.joda.time.LocalDateTime.withLocalMillis : $l1 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>() >>>>>>>> org.joda.time.LocalDateTime.withLocalMillis : $b2 = l0 cmp $l1
org.joda.time.LocalDateTime.withLocalMillis : $b2 = l0 cmp $l1 >>>>>>>> org.joda.time.LocalDateTime.withLocalMillis : if $b2 != 0
org.joda.time.LocalDateTime.withLocalMillis : if $b2 != 0 >>>>>>>> org.joda.time.LocalDateTime.withLocalMillis : $r1 = new org.joda.time.LocalDateTime
org.joda.time.LocalDateTime.withLocalMillis : $r1 = new org.joda.time.LocalDateTime >>>>>>>> org.joda.time.LocalDateTime.withLocalMillis : $r2 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalDateTime.withLocalMillis : $r2 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.LocalDateTime.withLocalMillis : specialinvoke $r1.<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>(l0, $r2)
org.joda.time.LocalDateTime.withLocalMillis : specialinvoke $r1.<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>(l0, $r2) >>>>>>>> org.joda.time.LocalDateTime.withLocalMillis : return $r1
org.joda.time.LocalDateTime.withLocalMillis : return $r1 >>>>>>>> org.joda.time.LocalDateTime.withMillisOfDay : return $r3
org.joda.time.LocalDateTime.withMillisOfDay : return $r3 >>>>>>>> org.joda.time.LocalDateTime.dayOfYear : $r1 = new org.joda.time.LocalDateTime$Property
org.joda.time.LocalDateTime.dayOfYear : $r1 = new org.joda.time.LocalDateTime$Property >>>>>>>> org.joda.time.LocalDateTime.dayOfYear : $r2 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalDateTime.dayOfYear : $r2 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.LocalDateTime.dayOfYear : $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfYear()>()
org.joda.time.LocalDateTime.dayOfYear : $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfYear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfYear>
org.joda.time.chrono.AssembledChronology.dayOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfYear : return $r1
org.joda.time.chrono.AssembledChronology.dayOfYear : return $r1 >>>>>>>> org.joda.time.LocalDateTime.dayOfYear : specialinvoke $r1.<org.joda.time.LocalDateTime$Property: void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField)>(r0, $r3)
org.joda.time.LocalDateTime.dayOfYear : specialinvoke $r1.<org.joda.time.LocalDateTime$Property: void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField)>(r0, $r3) >>>>>>>> org.joda.time.LocalDateTime.dayOfYear : return $r1
org.joda.time.LocalDateTime.dayOfYear : return $r1 >>>>>>>> org.joda.time.PeriodType.dayTime : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cDTime>
org.joda.time.PeriodType.dayTime : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cDTime> >>>>>>>> org.joda.time.PeriodType.dayTime : if r0 != null
org.joda.time.PeriodType.dayTime : if r0 != null >>>>>>>> org.joda.time.PeriodType.dayTime : return r0
org.joda.time.PeriodType.dayTime : return r0 >>>>>>>> org.joda.time.base.BasePeriod.checkPeriodType : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>(r1)
org.joda.time.base.BasePeriod.checkPeriodType : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getPeriodType : if r0 != null
org.joda.time.DateTimeUtils.getPeriodType : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getPeriodType : return r0
org.joda.time.DateTimeUtils.getPeriodType : return r0 >>>>>>>> org.joda.time.base.BasePeriod.checkPeriodType : return $r2
org.joda.time.base.BasePeriod.checkPeriodType : return $r2 >>>>>>>> org.joda.time.chrono.BaseChronology.get : i2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>()
org.joda.time.chrono.BaseChronology.get : i2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>() >>>>>>>> org.joda.time.base.AbstractPeriod.size : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.base.AbstractPeriod.size : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.base.BasePeriod.getPeriodType : $r1 = r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType>
org.joda.time.base.BasePeriod.getPeriodType : $r1 = r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> >>>>>>>> org.joda.time.base.BasePeriod.getPeriodType : return $r1
org.joda.time.base.BasePeriod.getPeriodType : return $r1 >>>>>>>> org.joda.time.base.AbstractPeriod.size : $i0 = virtualinvoke $r1.<org.joda.time.PeriodType: int size()>()
org.joda.time.base.AbstractPeriod.size : $i0 = virtualinvoke $r1.<org.joda.time.PeriodType: int size()>() >>>>>>>> org.joda.time.PeriodType.size : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.size : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes> >>>>>>>> org.joda.time.PeriodType.size : $i0 = lengthof $r1
org.joda.time.PeriodType.size : $i0 = lengthof $r1 >>>>>>>> org.joda.time.PeriodType.size : return $i0
org.joda.time.PeriodType.size : return $i0 >>>>>>>> org.joda.time.base.AbstractPeriod.size : return $i0
org.joda.time.base.AbstractPeriod.size : return $i0 >>>>>>>> org.joda.time.chrono.BaseChronology.get : r2 = newarray (int)[i2]
org.joda.time.chrono.BaseChronology.get : r2 = newarray (int)[i2] >>>>>>>> org.joda.time.chrono.BaseChronology.get : $b5 = l0 cmp l1
org.joda.time.chrono.BaseChronology.get : $b5 = l0 cmp l1 >>>>>>>> org.joda.time.chrono.BaseChronology.get : if $b5 == 0
org.joda.time.chrono.BaseChronology.get : if $b5 == 0 >>>>>>>> org.joda.time.chrono.BaseChronology.get : i3 = 0
org.joda.time.chrono.BaseChronology.get : i3 = 0 >>>>>>>> org.joda.time.chrono.BaseChronology.get : if i3 >= i2
org.joda.time.chrono.BaseChronology.get : if i3 >= i2 >>>>>>>> org.joda.time.chrono.BaseChronology.get : $r4 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i3)
org.joda.time.chrono.BaseChronology.get : $r4 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i3) >>>>>>>> org.joda.time.base.AbstractPeriod.getFieldType : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.base.AbstractPeriod.getFieldType : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.base.AbstractPeriod.getFieldType : $r2 = virtualinvoke $r1.<org.joda.time.PeriodType: org.joda.time.DurationFieldType getFieldType(int)>(i0)
org.joda.time.base.AbstractPeriod.getFieldType : $r2 = virtualinvoke $r1.<org.joda.time.PeriodType: org.joda.time.DurationFieldType getFieldType(int)>(i0) >>>>>>>> org.joda.time.PeriodType.getFieldType : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.getFieldType : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes> >>>>>>>> org.joda.time.PeriodType.getFieldType : $r2 = $r1[i0]
org.joda.time.PeriodType.getFieldType : $r2 = $r1[i0] >>>>>>>> org.joda.time.PeriodType.getFieldType : return $r2
org.joda.time.PeriodType.getFieldType : return $r2 >>>>>>>> org.joda.time.base.AbstractPeriod.getFieldType : return $r2
org.joda.time.base.AbstractPeriod.getFieldType : return $r2 >>>>>>>> org.joda.time.chrono.BaseChronology.get : r3 = virtualinvoke $r4.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>(r0)
org.joda.time.chrono.BaseChronology.get : r3 = virtualinvoke $r4.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>(r0) >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal>
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : tableswitch($b0) {     case 1:
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : tableswitch($b0) {     case 1: >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField days()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField days()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.days : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays>
org.joda.time.chrono.AssembledChronology.days : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays> >>>>>>>> org.joda.time.chrono.AssembledChronology.days : return $r1
org.joda.time.chrono.AssembledChronology.days : return $r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r9
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r9 >>>>>>>> org.joda.time.chrono.BaseChronology.get : i4 = virtualinvoke r3.<org.joda.time.DurationField: int getDifference(long,long)>(l1, l0)
org.joda.time.chrono.BaseChronology.get : i4 = virtualinvoke r3.<org.joda.time.DurationField: int getDifference(long,long)>(l1, l0) >>>>>>>> org.joda.time.field.BaseDurationField.getDifference : $l2 = virtualinvoke r0.<org.joda.time.field.BaseDurationField: long getDifferenceAsLong(long,long)>(l0, l1)
org.joda.time.field.BaseDurationField.getDifference : $l2 = virtualinvoke r0.<org.joda.time.field.BaseDurationField: long getDifferenceAsLong(long,long)>(l0, l1) >>>>>>>> org.joda.time.field.PreciseDurationField.getDifferenceAsLong : l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeSubtract(long,long)>(l0, l1)
org.joda.time.field.PreciseDurationField.getDifferenceAsLong : l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeSubtract(long,long)>(l0, l1) >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : l2 = l0 - l1
org.joda.time.field.FieldUtils.safeSubtract : l2 = l0 - l1 >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : $l3 = l0 ^ l2
org.joda.time.field.FieldUtils.safeSubtract : $l3 = l0 ^ l2 >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : $b4 = $l3 cmp 0L
org.joda.time.field.FieldUtils.safeSubtract : $b4 = $l3 cmp 0L >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : if $b4 >= 0
org.joda.time.field.FieldUtils.safeSubtract : if $b4 >= 0 >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : $l5 = l0 ^ l1
org.joda.time.field.FieldUtils.safeSubtract : $l5 = l0 ^ l1 >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : $b6 = $l5 cmp 0L
org.joda.time.field.FieldUtils.safeSubtract : $b6 = $l5 cmp 0L >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : if $b6 >= 0
org.joda.time.field.FieldUtils.safeSubtract : if $b6 >= 0 >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : return l2
org.joda.time.field.FieldUtils.safeSubtract : return l2 >>>>>>>> org.joda.time.field.PreciseDurationField.getDifferenceAsLong : $l3 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis>
org.joda.time.field.PreciseDurationField.getDifferenceAsLong : $l3 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationField.getDifferenceAsLong : $l4 = l2 / $l3
org.joda.time.field.PreciseDurationField.getDifferenceAsLong : $l4 = l2 / $l3 >>>>>>>> org.joda.time.field.PreciseDurationField.getDifferenceAsLong : return $l4
org.joda.time.field.PreciseDurationField.getDifferenceAsLong : return $l4 >>>>>>>> org.joda.time.field.BaseDurationField.getDifference : $i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l2)
org.joda.time.field.BaseDurationField.getDifference : $i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l2) >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : $b1 = -2147483648L cmp l0
org.joda.time.field.FieldUtils.safeToInt : $b1 = -2147483648L cmp l0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : if $b1 > 0
org.joda.time.field.FieldUtils.safeToInt : if $b1 > 0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : $b2 = l0 cmp 2147483647L
org.joda.time.field.FieldUtils.safeToInt : $b2 = l0 cmp 2147483647L >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : if $b2 > 0
org.joda.time.field.FieldUtils.safeToInt : if $b2 > 0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : $i3 = (int) l0
org.joda.time.field.FieldUtils.safeToInt : $i3 = (int) l0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : return $i3
org.joda.time.field.FieldUtils.safeToInt : return $i3 >>>>>>>> org.joda.time.field.BaseDurationField.getDifference : return $i3
org.joda.time.field.BaseDurationField.getDifference : return $i3 >>>>>>>> org.joda.time.chrono.BaseChronology.get : l0 = virtualinvoke r3.<org.joda.time.DurationField: long add(long,int)>(l0, i4)
org.joda.time.chrono.BaseChronology.get : l0 = virtualinvoke r3.<org.joda.time.DurationField: long add(long,int)>(l0, i4) >>>>>>>> org.joda.time.field.PreciseDurationField.add : $l3 = (long) i1
org.joda.time.field.PreciseDurationField.add : $l3 = (long) i1 >>>>>>>> org.joda.time.field.PreciseDurationField.add : $l4 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis>
org.joda.time.field.PreciseDurationField.add : $l4 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationField.add : l2 = $l3 * $l4
org.joda.time.field.PreciseDurationField.add : l2 = $l3 * $l4 >>>>>>>> org.joda.time.field.PreciseDurationField.add : $l5 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, l2)
org.joda.time.field.PreciseDurationField.add : $l5 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, l2) >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : l2 = l0 + l1
org.joda.time.field.FieldUtils.safeAdd : l2 = l0 + l1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $l3 = l0 ^ l2
org.joda.time.field.FieldUtils.safeAdd : $l3 = l0 ^ l2 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $b4 = $l3 cmp 0L
org.joda.time.field.FieldUtils.safeAdd : $b4 = $l3 cmp 0L >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $b4 >= 0
org.joda.time.field.FieldUtils.safeAdd : if $b4 >= 0 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : return l2
org.joda.time.field.FieldUtils.safeAdd : return l2 >>>>>>>> org.joda.time.field.PreciseDurationField.add : return $l5
org.joda.time.field.PreciseDurationField.add : return $l5 >>>>>>>> org.joda.time.chrono.BaseChronology.get : r2[i3] = i4
org.joda.time.chrono.BaseChronology.get : r2[i3] = i4 >>>>>>>> org.joda.time.chrono.BaseChronology.get : i3 = i3 + 1
org.joda.time.chrono.BaseChronology.get : i3 = i3 + 1 >>>>>>>> org.joda.time.chrono.BaseChronology.get : goto [?= (branch)]
org.joda.time.chrono.BaseChronology.get : goto [?= (branch)] >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r11 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField hours()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r11 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField hours()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.hours : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours>
org.joda.time.chrono.AssembledChronology.hours : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours> >>>>>>>> org.joda.time.chrono.AssembledChronology.hours : return $r1
org.joda.time.chrono.AssembledChronology.hours : return $r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r11
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r11 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r12 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField minutes()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r12 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField minutes()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.minutes : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes>
org.joda.time.chrono.AssembledChronology.minutes : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes> >>>>>>>> org.joda.time.chrono.AssembledChronology.minutes : return $r1
org.joda.time.chrono.AssembledChronology.minutes : return $r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r12
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r12 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r13 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField seconds()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r13 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField seconds()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.seconds : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iSeconds>
org.joda.time.chrono.AssembledChronology.seconds : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iSeconds> >>>>>>>> org.joda.time.chrono.AssembledChronology.seconds : return $r1
org.joda.time.chrono.AssembledChronology.seconds : return $r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r13
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r13 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r14 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField millis()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r14 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField millis()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.millis : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMillis>
org.joda.time.chrono.AssembledChronology.millis : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMillis> >>>>>>>> org.joda.time.chrono.AssembledChronology.millis : return $r1
org.joda.time.chrono.AssembledChronology.millis : return $r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r14
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r14 >>>>>>>> org.joda.time.field.MillisDurationField.getDifference : $l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeSubtract(long,long)>(l0, l1)
org.joda.time.field.MillisDurationField.getDifference : $l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeSubtract(long,long)>(l0, l1) >>>>>>>> org.joda.time.field.MillisDurationField.getDifference : $i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l2)
org.joda.time.field.MillisDurationField.getDifference : $i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l2) >>>>>>>> org.joda.time.field.MillisDurationField.getDifference : return $i3
org.joda.time.field.MillisDurationField.getDifference : return $i3 >>>>>>>> org.joda.time.field.MillisDurationField.add : $l2 = (long) i1
org.joda.time.field.MillisDurationField.add : $l2 = (long) i1 >>>>>>>> org.joda.time.field.MillisDurationField.add : $l3 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, $l2)
org.joda.time.field.MillisDurationField.add : $l3 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, $l2) >>>>>>>> org.joda.time.field.MillisDurationField.add : return $l3
org.joda.time.field.MillisDurationField.add : return $l3 >>>>>>>> org.joda.time.chrono.BaseChronology.get : return r2
org.joda.time.chrono.BaseChronology.get : return r2 >>>>>>>> org.joda.time.PeriodType.withSecondsRemoved : $r1 = specialinvoke r0.<org.joda.time.PeriodType: org.joda.time.PeriodType withFieldRemoved(int,java.lang.String)>(6, "NoSeconds")
org.joda.time.PeriodType.withSecondsRemoved : $r1 = specialinvoke r0.<org.joda.time.PeriodType: org.joda.time.PeriodType withFieldRemoved(int,java.lang.String)>(6, "NoSeconds") >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $r3 = r0.<org.joda.time.PeriodType: int[] iIndices>
org.joda.time.PeriodType.withFieldRemoved : $r3 = r0.<org.joda.time.PeriodType: int[] iIndices> >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : i1 = $r3[i0]
org.joda.time.PeriodType.withFieldRemoved : i1 = $r3[i0] >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : if i1 != -1
org.joda.time.PeriodType.withFieldRemoved : if i1 != -1 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $i4 = virtualinvoke r0.<org.joda.time.PeriodType: int size()>()
org.joda.time.PeriodType.withFieldRemoved : $i4 = virtualinvoke r0.<org.joda.time.PeriodType: int size()>() >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $i5 = $i4 - 1
org.joda.time.PeriodType.withFieldRemoved : $i5 = $i4 - 1 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : r2 = newarray (org.joda.time.DurationFieldType)[$i5]
org.joda.time.PeriodType.withFieldRemoved : r2 = newarray (org.joda.time.DurationFieldType)[$i5] >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : i2 = 0
org.joda.time.PeriodType.withFieldRemoved : i2 = 0 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $r4 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.withFieldRemoved : $r4 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes> >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $i6 = lengthof $r4
org.joda.time.PeriodType.withFieldRemoved : $i6 = lengthof $r4 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : if i2 >= $i6
org.joda.time.PeriodType.withFieldRemoved : if i2 >= $i6 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : if i2 >= i1
org.joda.time.PeriodType.withFieldRemoved : if i2 >= i1 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $r5 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.withFieldRemoved : $r5 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes> >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $r6 = $r5[i2]
org.joda.time.PeriodType.withFieldRemoved : $r6 = $r5[i2] >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : r2[i2] = $r6
org.joda.time.PeriodType.withFieldRemoved : r2[i2] = $r6 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : goto [?= i2 = i2 + 1]
org.joda.time.PeriodType.withFieldRemoved : goto [?= i2 = i2 + 1] >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : i2 = i2 + 1
org.joda.time.PeriodType.withFieldRemoved : i2 = i2 + 1 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : goto [?= $r4 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>]
org.joda.time.PeriodType.withFieldRemoved : goto [?= $r4 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>] >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : if i2 <= i1
org.joda.time.PeriodType.withFieldRemoved : if i2 <= i1 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $i7 = i2 - 1
org.joda.time.PeriodType.withFieldRemoved : $i7 = i2 - 1 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $r7 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.withFieldRemoved : $r7 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes> >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $r8 = $r7[i2]
org.joda.time.PeriodType.withFieldRemoved : $r8 = $r7[i2] >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : r2[$i7] = $r8
org.joda.time.PeriodType.withFieldRemoved : r2[$i7] = $r8 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : r9 = newarray (int)[8]
org.joda.time.PeriodType.withFieldRemoved : r9 = newarray (int)[8] >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : i3 = 0
org.joda.time.PeriodType.withFieldRemoved : i3 = 0 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $i8 = lengthof r9
org.joda.time.PeriodType.withFieldRemoved : $i8 = lengthof r9 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : if i3 >= $i8
org.joda.time.PeriodType.withFieldRemoved : if i3 >= $i8 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : if i3 >= i0
org.joda.time.PeriodType.withFieldRemoved : if i3 >= i0 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $r10 = r0.<org.joda.time.PeriodType: int[] iIndices>
org.joda.time.PeriodType.withFieldRemoved : $r10 = r0.<org.joda.time.PeriodType: int[] iIndices> >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $i9 = $r10[i3]
org.joda.time.PeriodType.withFieldRemoved : $i9 = $r10[i3] >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : r9[i3] = $i9
org.joda.time.PeriodType.withFieldRemoved : r9[i3] = $i9 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : goto [?= i3 = i3 + 1]
org.joda.time.PeriodType.withFieldRemoved : goto [?= i3 = i3 + 1] >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : i3 = i3 + 1
org.joda.time.PeriodType.withFieldRemoved : i3 = i3 + 1 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : goto [?= $i8 = lengthof r9]
org.joda.time.PeriodType.withFieldRemoved : goto [?= $i8 = lengthof r9] >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : if i3 <= i0
org.joda.time.PeriodType.withFieldRemoved : if i3 <= i0 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : r9[i3] = -1
org.joda.time.PeriodType.withFieldRemoved : r9[i3] = -1 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $i10 = i3
org.joda.time.PeriodType.withFieldRemoved : $i10 = i3 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $r12 = r0.<org.joda.time.PeriodType: int[] iIndices>
org.joda.time.PeriodType.withFieldRemoved : $r12 = r0.<org.joda.time.PeriodType: int[] iIndices> >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $i11 = $r12[i3]
org.joda.time.PeriodType.withFieldRemoved : $i11 = $r12[i3] >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : if $i11 != -1
org.joda.time.PeriodType.withFieldRemoved : if $i11 != -1 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $r13 = r0.<org.joda.time.PeriodType: int[] iIndices>
org.joda.time.PeriodType.withFieldRemoved : $r13 = r0.<org.joda.time.PeriodType: int[] iIndices> >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $i13 = $r13[i3]
org.joda.time.PeriodType.withFieldRemoved : $i13 = $r13[i3] >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $i12 = $i13 - 1
org.joda.time.PeriodType.withFieldRemoved : $i12 = $i13 - 1 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : r9[$i10] = $i12
org.joda.time.PeriodType.withFieldRemoved : r9[$i10] = $i12 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $r14 = new org.joda.time.PeriodType
org.joda.time.PeriodType.withFieldRemoved : $r14 = new org.joda.time.PeriodType >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $r15 = new java.lang.StringBuilder
org.joda.time.PeriodType.withFieldRemoved : $r15 = new java.lang.StringBuilder >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : specialinvoke $r15.<java.lang.StringBuilder: void <init>()>()
org.joda.time.PeriodType.withFieldRemoved : specialinvoke $r15.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $r16 = virtualinvoke r0.<org.joda.time.PeriodType: java.lang.String getName()>()
org.joda.time.PeriodType.withFieldRemoved : $r16 = virtualinvoke r0.<org.joda.time.PeriodType: java.lang.String getName()>() >>>>>>>> org.joda.time.PeriodType.getName : $r1 = r0.<org.joda.time.PeriodType: java.lang.String iName>
org.joda.time.PeriodType.getName : $r1 = r0.<org.joda.time.PeriodType: java.lang.String iName> >>>>>>>> org.joda.time.PeriodType.getName : return $r1
org.joda.time.PeriodType.getName : return $r1 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16)
org.joda.time.PeriodType.withFieldRemoved : $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.joda.time.PeriodType.withFieldRemoved : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.PeriodType.withFieldRemoved : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : specialinvoke $r14.<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>($r19, r2, r9)
org.joda.time.PeriodType.withFieldRemoved : specialinvoke $r14.<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>($r19, r2, r9) >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : return $r14
org.joda.time.PeriodType.withFieldRemoved : return $r14 >>>>>>>> org.joda.time.PeriodType.withSecondsRemoved : return $r1
org.joda.time.PeriodType.withSecondsRemoved : return $r1 >>>>>>>> org.joda.time.DateTimeUtils.currentTimeMillis : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider>
org.joda.time.DateTimeUtils.currentTimeMillis : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> >>>>>>>> org.joda.time.DateTimeUtils.currentTimeMillis : $l0 = interfaceinvoke $r0.<org.joda.time.DateTimeUtils$MillisProvider: long getMillis()>()
org.joda.time.DateTimeUtils.currentTimeMillis : $l0 = interfaceinvoke $r0.<org.joda.time.DateTimeUtils$MillisProvider: long getMillis()>() >>>>>>>> org.joda.time.DateTimeUtils$SystemMillisProvider.getMillis : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.joda.time.DateTimeUtils$SystemMillisProvider.getMillis : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.joda.time.DateTimeUtils$SystemMillisProvider.getMillis : return $l0
org.joda.time.DateTimeUtils$SystemMillisProvider.getMillis : return $l0 >>>>>>>> org.joda.time.DateTimeUtils.currentTimeMillis : return $l0
org.joda.time.DateTimeUtils.currentTimeMillis : return $l0 >>>>>>>> org.joda.time.base.BaseDateTime.checkChronology : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.base.BaseDateTime.checkChronology : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>()
org.joda.time.DateTimeUtils.getChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>() >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>() >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r0)
org.joda.time.chrono.ISOChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return $r1
org.joda.time.chrono.ISOChronology.getInstance : return $r1 >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return $r1
org.joda.time.DateTimeUtils.getChronology : return $r1 >>>>>>>> org.joda.time.base.BaseDateTime.checkChronology : return $r2
org.joda.time.base.BaseDateTime.checkChronology : return $r2 >>>>>>>> org.joda.time.base.BaseDateTime.checkInstant : return l0
org.joda.time.base.BaseDateTime.checkInstant : return l0 >>>>>>>> org.joda.time.chrono.GregorianChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.chrono.GregorianChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>($r0, 4)
org.joda.time.chrono.GregorianChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>($r0, 4) >>>>>>>> org.joda.time.chrono.GregorianChronology.getInstance : if r0 != null
org.joda.time.chrono.GregorianChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.GregorianChronology.getInstance : $r6 = <org.joda.time.chrono.GregorianChronology: java.util.Map cCache>
org.joda.time.chrono.GregorianChronology.getInstance : $r6 = <org.joda.time.chrono.GregorianChronology: java.util.Map cCache> >>>>>>>> org.joda.time.chrono.GregorianChronology.getInstance : r1 = $r6
org.joda.time.chrono.GregorianChronology.getInstance : r1 = $r6 >>>>>>>> org.joda.time.chrono.GregorianChronology.getInstance : entermonitor $r6
org.joda.time.chrono.GregorianChronology.getInstance : entermonitor $r6 >>>>>>>> org.joda.time.chrono.GregorianChronology.getInstance : $r7 = <org.joda.time.chrono.GregorianChronology: java.util.Map cCache>
org.joda.time.chrono.GregorianChronology.getInstance : $r7 = <org.joda.time.chrono.GregorianChronology: java.util.Map cCache> >>>>>>>> org.joda.time.chrono.GregorianChronology.getInstance : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
org.joda.time.chrono.GregorianChronology.getInstance : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $r1 = virtualinvoke r0.<org.joda.time.tz.FixedDateTimeZone: java.lang.String getID()>()
org.joda.time.tz.FixedDateTimeZone.hashCode : $r1 = virtualinvoke r0.<org.joda.time.tz.FixedDateTimeZone: java.lang.String getID()>() >>>>>>>> org.joda.time.DateTimeZone.getID : $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>
org.joda.time.DateTimeZone.getID : $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID> >>>>>>>> org.joda.time.DateTimeZone.getID : return $r1
org.joda.time.DateTimeZone.getID : return $r1 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>()
org.joda.time.tz.FixedDateTimeZone.hashCode : $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>() >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iStandardOffset>
org.joda.time.tz.FixedDateTimeZone.hashCode : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iStandardOffset> >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i2 = 37 * $i1
org.joda.time.tz.FixedDateTimeZone.hashCode : $i2 = 37 * $i1 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i3 = $i0 + $i2
org.joda.time.tz.FixedDateTimeZone.hashCode : $i3 = $i0 + $i2 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i4 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset>
org.joda.time.tz.FixedDateTimeZone.hashCode : $i4 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset> >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i5 = 31 * $i4
org.joda.time.tz.FixedDateTimeZone.hashCode : $i5 = 31 * $i4 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i6 = $i3 + $i5
org.joda.time.tz.FixedDateTimeZone.hashCode : $i6 = $i3 + $i5 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : return $i6
org.joda.time.tz.FixedDateTimeZone.hashCode : return $i6 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.equals : if r0 != r1
org.joda.time.tz.FixedDateTimeZone.equals : if r0 != r1 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.equals : $z0 = r1 instanceof org.joda.time.tz.FixedDateTimeZone
org.joda.time.tz.FixedDateTimeZone.equals : $z0 = r1 instanceof org.joda.time.tz.FixedDateTimeZone >>>>>>>> org.joda.time.tz.FixedDateTimeZone.equals : if $z0 == 0
org.joda.time.tz.FixedDateTimeZone.equals : if $z0 == 0 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.equals : return 0
org.joda.time.tz.FixedDateTimeZone.equals : return 0 >>>>>>>> org.joda.time.chrono.GregorianChronology.getInstance : r2 = (org.joda.time.chrono.GregorianChronology[]) $r8
org.joda.time.chrono.GregorianChronology.getInstance : r2 = (org.joda.time.chrono.GregorianChronology[]) $r8 >>>>>>>> org.joda.time.chrono.GregorianChronology.getInstance : if r2 != null
org.joda.time.chrono.GregorianChronology.getInstance : if r2 != null >>>>>>>> org.joda.time.chrono.GregorianChronology.getInstance : $i1 = i0 - 1
org.joda.time.chrono.GregorianChronology.getInstance : $i1 = i0 - 1 >>>>>>>> org.joda.time.chrono.GregorianChronology.getInstance : r3 = r2[$i1]
org.joda.time.chrono.GregorianChronology.getInstance : r3 = r2[$i1] >>>>>>>> org.joda.time.chrono.GregorianChronology.getInstance : goto [?= (branch)]
org.joda.time.chrono.GregorianChronology.getInstance : goto [?= (branch)] >>>>>>>> org.joda.time.chrono.GregorianChronology.getInstance : if r3 != null
org.joda.time.chrono.GregorianChronology.getInstance : if r3 != null >>>>>>>> org.joda.time.chrono.GregorianChronology.getInstance : exitmonitor r1
org.joda.time.chrono.GregorianChronology.getInstance : exitmonitor r1 >>>>>>>> org.joda.time.chrono.GregorianChronology.getInstance : goto [?= return r3]
org.joda.time.chrono.GregorianChronology.getInstance : goto [?= return r3] >>>>>>>> org.joda.time.chrono.GregorianChronology.getInstance : return r3
org.joda.time.chrono.GregorianChronology.getInstance : return r3 >>>>>>>> org.joda.time.chrono.GregorianChronology.getInstance : return $r1
org.joda.time.chrono.GregorianChronology.getInstance : return $r1 >>>>>>>> org.joda.time.convert.ConverterManager.getInstance : $r0 = <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager INSTANCE>
org.joda.time.convert.ConverterManager.getInstance : $r0 = <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager INSTANCE> >>>>>>>> org.joda.time.convert.ConverterManager.getInstance : if $r0 != null
org.joda.time.convert.ConverterManager.getInstance : if $r0 != null >>>>>>>> org.joda.time.convert.ConverterManager.getInstance : $r2 = <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager INSTANCE>
org.joda.time.convert.ConverterManager.getInstance : $r2 = <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager INSTANCE> >>>>>>>> org.joda.time.convert.ConverterManager.getInstance : return $r2
org.joda.time.convert.ConverterManager.getInstance : return $r2 >>>>>>>> org.joda.time.convert.ConverterManager.getPeriodConverter : $r4 = r0.<org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterSet iPeriodConverters>
org.joda.time.convert.ConverterManager.getPeriodConverter : $r4 = r0.<org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterSet iPeriodConverters> >>>>>>>> org.joda.time.convert.ConverterManager.getPeriodConverter : if r1 != null
org.joda.time.convert.ConverterManager.getPeriodConverter : if r1 != null >>>>>>>> org.joda.time.convert.ConverterManager.getPeriodConverter : $r5 = null
org.joda.time.convert.ConverterManager.getPeriodConverter : $r5 = null >>>>>>>> org.joda.time.convert.ConverterManager.getPeriodConverter : goto [?= $r6 = virtualinvoke $r4.<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>($r5)]
org.joda.time.convert.ConverterManager.getPeriodConverter : goto [?= $r6 = virtualinvoke $r4.<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>($r5)] >>>>>>>> org.joda.time.convert.ConverterManager.getPeriodConverter : $r6 = virtualinvoke $r4.<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>($r5)
org.joda.time.convert.ConverterManager.getPeriodConverter : $r6 = virtualinvoke $r4.<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>($r5) >>>>>>>> org.joda.time.convert.ConverterSet.select : r2 = r0.<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet$Entry[] iSelectEntries>
org.joda.time.convert.ConverterSet.select : r2 = r0.<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet$Entry[] iSelectEntries> >>>>>>>> org.joda.time.convert.ConverterSet.select : i0 = lengthof r2
org.joda.time.convert.ConverterSet.select : i0 = lengthof r2 >>>>>>>> org.joda.time.convert.ConverterSet.select : if r1 != null
org.joda.time.convert.ConverterSet.select : if r1 != null >>>>>>>> org.joda.time.convert.ConverterSet.select : $i4 = 0
org.joda.time.convert.ConverterSet.select : $i4 = 0 >>>>>>>> org.joda.time.convert.ConverterSet.select : goto [?= i1 = $i4]
org.joda.time.convert.ConverterSet.select : goto [?= i1 = $i4] >>>>>>>> org.joda.time.convert.ConverterSet.select : i1 = $i4
org.joda.time.convert.ConverterSet.select : i1 = $i4 >>>>>>>> org.joda.time.convert.ConverterSet.select : $r6 = r2[i1]
org.joda.time.convert.ConverterSet.select : $r6 = r2[i1] >>>>>>>> org.joda.time.convert.ConverterSet.select : r3 = $r6
org.joda.time.convert.ConverterSet.select : r3 = $r6 >>>>>>>> org.joda.time.convert.ConverterSet.select : if $r6 == null
org.joda.time.convert.ConverterSet.select : if $r6 == null >>>>>>>> org.joda.time.convert.ConverterSet.select : $r7 = r3.<org.joda.time.convert.ConverterSet$Entry: java.lang.Class iType>
org.joda.time.convert.ConverterSet.select : $r7 = r3.<org.joda.time.convert.ConverterSet$Entry: java.lang.Class iType> >>>>>>>> org.joda.time.convert.ConverterSet.select : if $r7 != r1
org.joda.time.convert.ConverterSet.select : if $r7 != r1 >>>>>>>> org.joda.time.convert.ConverterSet.select : $r8 = r3.<org.joda.time.convert.ConverterSet$Entry: org.joda.time.convert.Converter iConverter>
org.joda.time.convert.ConverterSet.select : $r8 = r3.<org.joda.time.convert.ConverterSet$Entry: org.joda.time.convert.Converter iConverter> >>>>>>>> org.joda.time.convert.ConverterSet.select : return $r8
org.joda.time.convert.ConverterSet.select : return $r8 >>>>>>>> org.joda.time.convert.ConverterManager.getPeriodConverter : r2 = (org.joda.time.convert.PeriodConverter) $r6
org.joda.time.convert.ConverterManager.getPeriodConverter : r2 = (org.joda.time.convert.PeriodConverter) $r6 >>>>>>>> org.joda.time.convert.ConverterManager.getPeriodConverter : if r2 == null
org.joda.time.convert.ConverterManager.getPeriodConverter : if r2 == null >>>>>>>> org.joda.time.convert.ConverterManager.getPeriodConverter : return r2
org.joda.time.convert.ConverterManager.getPeriodConverter : return r2 >>>>>>>> org.joda.time.convert.AbstractConverter.getPeriodType : $r2 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType standard()>()
org.joda.time.convert.AbstractConverter.getPeriodType : $r2 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType standard()>() >>>>>>>> org.joda.time.PeriodType.standard : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cStandard>
org.joda.time.PeriodType.standard : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cStandard> >>>>>>>> org.joda.time.PeriodType.standard : if r0 != null
org.joda.time.PeriodType.standard : if r0 != null >>>>>>>> org.joda.time.PeriodType.standard : return r0
org.joda.time.PeriodType.standard : return r0 >>>>>>>> org.joda.time.convert.AbstractConverter.getPeriodType : return $r2
org.joda.time.convert.AbstractConverter.getPeriodType : return $r2 >>>>>>>> org.joda.time.convert.NullConverter.setInto : $r4 = (org.joda.time.Period) null
org.joda.time.convert.NullConverter.setInto : $r4 = (org.joda.time.Period) null >>>>>>>> org.joda.time.convert.NullConverter.setInto : interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setPeriod(org.joda.time.ReadablePeriod)>($r4)
org.joda.time.convert.NullConverter.setInto : interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setPeriod(org.joda.time.ReadablePeriod)>($r4) >>>>>>>> org.joda.time.MutablePeriod.setPeriod : specialinvoke r0.<org.joda.time.base.BasePeriod: void setPeriod(org.joda.time.ReadablePeriod)>(r1)
org.joda.time.MutablePeriod.setPeriod : specialinvoke r0.<org.joda.time.base.BasePeriod: void setPeriod(org.joda.time.ReadablePeriod)>(r1) >>>>>>>> org.joda.time.base.BasePeriod.setPeriod : if r1 != null
org.joda.time.base.BasePeriod.setPeriod : if r1 != null >>>>>>>> org.joda.time.base.BasePeriod.setPeriod : $i0 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int size()>()
org.joda.time.base.BasePeriod.setPeriod : $i0 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int size()>() >>>>>>>> org.joda.time.base.BasePeriod.setPeriod : $r2 = newarray (int)[$i0]
org.joda.time.base.BasePeriod.setPeriod : $r2 = newarray (int)[$i0] >>>>>>>> org.joda.time.base.BasePeriod.setPeriod : virtualinvoke r0.<org.joda.time.base.BasePeriod: void setValues(int[])>($r2)
org.joda.time.base.BasePeriod.setPeriod : virtualinvoke r0.<org.joda.time.base.BasePeriod: void setValues(int[])>($r2) >>>>>>>> org.joda.time.base.BasePeriod.setValues : $r2 = r0.<org.joda.time.base.BasePeriod: int[] iValues>
org.joda.time.base.BasePeriod.setValues : $r2 = r0.<org.joda.time.base.BasePeriod: int[] iValues> >>>>>>>> org.joda.time.base.BasePeriod.setValues : $r3 = r0.<org.joda.time.base.BasePeriod: int[] iValues>
org.joda.time.base.BasePeriod.setValues : $r3 = r0.<org.joda.time.base.BasePeriod: int[] iValues> >>>>>>>> org.joda.time.base.BasePeriod.setValues : $i0 = lengthof $r3
org.joda.time.base.BasePeriod.setValues : $i0 = lengthof $r3 >>>>>>>> org.joda.time.base.BasePeriod.setValues : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r2, 0, $i0)
org.joda.time.base.BasePeriod.setValues : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r2, 0, $i0) >>>>>>>> org.joda.time.base.BasePeriod.setPeriod : goto [?= return]
org.joda.time.base.BasePeriod.setPeriod : goto [?= return] >>>>>>>> org.joda.time.chrono.AssembledChronology.hourOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay>
org.joda.time.chrono.AssembledChronology.hourOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.hourOfDay : return $r1
org.joda.time.chrono.AssembledChronology.hourOfDay : return $r1 >>>>>>>> org.joda.time.chrono.BaseChronology.get : i1 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>()
org.joda.time.chrono.BaseChronology.get : i1 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>() >>>>>>>> org.joda.time.chrono.BaseChronology.get : r2 = newarray (int)[i1]
org.joda.time.chrono.BaseChronology.get : r2 = newarray (int)[i1] >>>>>>>> org.joda.time.chrono.BaseChronology.get : $b5 = l0 cmp 0L
org.joda.time.chrono.BaseChronology.get : $b5 = l0 cmp 0L >>>>>>>> org.joda.time.chrono.BaseChronology.get : l2 = 0L
org.joda.time.chrono.BaseChronology.get : l2 = 0L >>>>>>>> org.joda.time.chrono.BaseChronology.get : if i3 >= i1
org.joda.time.chrono.BaseChronology.get : if i3 >= i1 >>>>>>>> org.joda.time.chrono.BaseChronology.get : $z0 = virtualinvoke r3.<org.joda.time.DurationField: boolean isPrecise()>()
org.joda.time.chrono.BaseChronology.get : $z0 = virtualinvoke r3.<org.joda.time.DurationField: boolean isPrecise()>() >>>>>>>> org.joda.time.field.PreciseDurationField.isPrecise : return 1
org.joda.time.field.PreciseDurationField.isPrecise : return 1 >>>>>>>> org.joda.time.chrono.BaseChronology.get : if $z0 == 0
org.joda.time.chrono.BaseChronology.get : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BaseChronology.get : i4 = virtualinvoke r3.<org.joda.time.DurationField: int getDifference(long,long)>(l0, l2)
org.joda.time.chrono.BaseChronology.get : i4 = virtualinvoke r3.<org.joda.time.DurationField: int getDifference(long,long)>(l0, l2) >>>>>>>> org.joda.time.chrono.BaseChronology.get : l2 = virtualinvoke r3.<org.joda.time.DurationField: long add(long,int)>(l2, i4)
org.joda.time.chrono.BaseChronology.get : l2 = virtualinvoke r3.<org.joda.time.DurationField: long add(long,int)>(l2, i4) >>>>>>>> org.joda.time.field.MillisDurationField.isPrecise : return 1
org.joda.time.field.MillisDurationField.isPrecise : return 1 >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : $r2 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.PeriodType iParseType>
org.joda.time.format.PeriodFormatter.withParseType : $r2 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.PeriodType iParseType> >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : if r1 != $r2
org.joda.time.format.PeriodFormatter.withParseType : if r1 != $r2 >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : $r3 = new org.joda.time.format.PeriodFormatter
org.joda.time.format.PeriodFormatter.withParseType : $r3 = new org.joda.time.format.PeriodFormatter >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : $r4 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter iPrinter>
org.joda.time.format.PeriodFormatter.withParseType : $r4 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter iPrinter> >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : $r5 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser iParser>
org.joda.time.format.PeriodFormatter.withParseType : $r5 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser iParser> >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : $r6 = r0.<org.joda.time.format.PeriodFormatter: java.util.Locale iLocale>
org.joda.time.format.PeriodFormatter.withParseType : $r6 = r0.<org.joda.time.format.PeriodFormatter: java.util.Locale iLocale> >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : specialinvoke $r3.<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,java.util.Locale,org.joda.time.PeriodType)>($r4, $r5, $r6, r1)
org.joda.time.format.PeriodFormatter.withParseType : specialinvoke $r3.<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,java.util.Locale,org.joda.time.PeriodType)>($r4, $r5, $r6, r1) >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : return $r3
org.joda.time.format.PeriodFormatter.withParseType : return $r3 >>>>>>>> org.joda.time.format.PeriodFormatter.withLocale : $r2 = virtualinvoke r0.<org.joda.time.format.PeriodFormatter: java.util.Locale getLocale()>()
org.joda.time.format.PeriodFormatter.withLocale : $r2 = virtualinvoke r0.<org.joda.time.format.PeriodFormatter: java.util.Locale getLocale()>() >>>>>>>> org.joda.time.format.PeriodFormatter.getLocale : $r1 = r0.<org.joda.time.format.PeriodFormatter: java.util.Locale iLocale>
org.joda.time.format.PeriodFormatter.getLocale : $r1 = r0.<org.joda.time.format.PeriodFormatter: java.util.Locale iLocale> >>>>>>>> org.joda.time.format.PeriodFormatter.getLocale : return $r1
org.joda.time.format.PeriodFormatter.getLocale : return $r1 >>>>>>>> org.joda.time.format.PeriodFormatter.withLocale : if r1 == $r2
org.joda.time.format.PeriodFormatter.withLocale : if r1 == $r2 >>>>>>>> org.joda.time.format.PeriodFormatter.withLocale : return r0
org.joda.time.format.PeriodFormatter.withLocale : return r0 >>>>>>>> org.joda.time.format.PeriodFormatter.parsePeriod : specialinvoke r0.<org.joda.time.format.PeriodFormatter: void checkParser()>()
org.joda.time.format.PeriodFormatter.parsePeriod : specialinvoke r0.<org.joda.time.format.PeriodFormatter: void checkParser()>() >>>>>>>> org.joda.time.format.PeriodFormatter.checkParser : $r1 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser iParser>
org.joda.time.format.PeriodFormatter.checkParser : $r1 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser iParser> >>>>>>>> org.joda.time.format.PeriodFormatter.checkParser : if $r1 != null
org.joda.time.format.PeriodFormatter.checkParser : if $r1 != null >>>>>>>> org.joda.time.format.PeriodFormatter.parsePeriod : $r2 = virtualinvoke r0.<org.joda.time.format.PeriodFormatter: org.joda.time.MutablePeriod parseMutablePeriod(java.lang.String)>(r1)
org.joda.time.format.PeriodFormatter.parsePeriod : $r2 = virtualinvoke r0.<org.joda.time.format.PeriodFormatter: org.joda.time.MutablePeriod parseMutablePeriod(java.lang.String)>(r1) >>>>>>>> org.joda.time.format.PeriodFormatter.parseMutablePeriod : specialinvoke r0.<org.joda.time.format.PeriodFormatter: void checkParser()>()
org.joda.time.format.PeriodFormatter.parseMutablePeriod : specialinvoke r0.<org.joda.time.format.PeriodFormatter: void checkParser()>() >>>>>>>> org.joda.time.format.PeriodFormatter.parseMutablePeriod : $r3 = new org.joda.time.MutablePeriod
org.joda.time.format.PeriodFormatter.parseMutablePeriod : $r3 = new org.joda.time.MutablePeriod >>>>>>>> org.joda.time.format.PeriodFormatter.parseMutablePeriod : $r4 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.PeriodType iParseType>
org.joda.time.format.PeriodFormatter.parseMutablePeriod : $r4 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.PeriodType iParseType> >>>>>>>> org.joda.time.format.PeriodFormatter.parseMutablePeriod : specialinvoke $r3.<org.joda.time.MutablePeriod: void <init>(long,org.joda.time.PeriodType)>(0L, $r4)
org.joda.time.format.PeriodFormatter.parseMutablePeriod : specialinvoke $r3.<org.joda.time.MutablePeriod: void <init>(long,org.joda.time.PeriodType)>(0L, $r4) >>>>>>>> org.joda.time.format.PeriodFormatter.parseMutablePeriod : r2 = $r3
org.joda.time.format.PeriodFormatter.parseMutablePeriod : r2 = $r3 >>>>>>>> org.joda.time.format.PeriodFormatter.parseMutablePeriod : $r5 = virtualinvoke r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser getParser()>()
org.joda.time.format.PeriodFormatter.parseMutablePeriod : $r5 = virtualinvoke r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser getParser()>() >>>>>>>> org.joda.time.format.PeriodFormatter.getParser : $r1 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser iParser>
org.joda.time.format.PeriodFormatter.getParser : $r1 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser iParser> >>>>>>>> org.joda.time.format.PeriodFormatter.getParser : return $r1
org.joda.time.format.PeriodFormatter.getParser : return $r1 >>>>>>>> org.joda.time.format.PeriodFormatter.parseMutablePeriod : $r6 = r0.<org.joda.time.format.PeriodFormatter: java.util.Locale iLocale>
org.joda.time.format.PeriodFormatter.parseMutablePeriod : $r6 = r0.<org.joda.time.format.PeriodFormatter: java.util.Locale iLocale> >>>>>>>> org.joda.time.format.PeriodFormatter.parseMutablePeriod : i0 = interfaceinvoke $r5.<org.joda.time.format.PeriodParser: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>(r2, r1, 0, $r6)
org.joda.time.format.PeriodFormatter.parseMutablePeriod : i0 = interfaceinvoke $r5.<org.joda.time.format.PeriodParser: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>(r2, r1, 0, $r6) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : i1 = i0
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : i1 = i0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : $r6 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodParser iBeforeParser>
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : $r6 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodParser iBeforeParser> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : i4 = interfaceinvoke $r6.<org.joda.time.format.PeriodParser: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>(r1, r2, i0, r3)
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : i4 = interfaceinvoke $r6.<org.joda.time.format.PeriodParser: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>(r1, r2, i0, r3) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Composite: org.joda.time.format.PeriodParser[] iParsers>
org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Composite: org.joda.time.format.PeriodParser[] iParsers> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : if r4 != null
org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : if r4 != null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : i1 = lengthof r4
org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : i1 = lengthof r4 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : i2 = 0
org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : i2 = 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : if i2 >= i1
org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : if i2 >= i1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : if i0 < 0
org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : if i0 < 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : $r6 = r4[i2]
org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : $r6 = r4[i2] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : i0 = interfaceinvoke $r6.<org.joda.time.format.PeriodParser: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>(r1, r2, i0, r3)
org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : i0 = interfaceinvoke $r6.<org.joda.time.format.PeriodParser: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>(r1, r2, i0, r3) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Literal.parseInto : $r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Literal: java.lang.String iText>
org.joda.time.format.PeriodFormatterBuilder$Literal.parseInto : $r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Literal: java.lang.String iText> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Literal.parseInto : $r5 = r0.<org.joda.time.format.PeriodFormatterBuilder$Literal: java.lang.String iText>
org.joda.time.format.PeriodFormatterBuilder$Literal.parseInto : $r5 = r0.<org.joda.time.format.PeriodFormatterBuilder$Literal: java.lang.String iText> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Literal.parseInto : $i1 = virtualinvoke $r5.<java.lang.String: int length()>()
org.joda.time.format.PeriodFormatterBuilder$Literal.parseInto : $i1 = virtualinvoke $r5.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Literal.parseInto : $z0 = virtualinvoke r2.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i0, $r4, 0, $i1)
org.joda.time.format.PeriodFormatterBuilder$Literal.parseInto : $z0 = virtualinvoke r2.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i0, $r4, 0, $i1) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Literal.parseInto : if $z0 == 0
org.joda.time.format.PeriodFormatterBuilder$Literal.parseInto : if $z0 == 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Literal.parseInto : $i4 = i0 ^ -1
org.joda.time.format.PeriodFormatterBuilder$Literal.parseInto : $i4 = i0 ^ -1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Literal.parseInto : return $i4
org.joda.time.format.PeriodFormatterBuilder$Literal.parseInto : return $i4 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : i2 = i2 + 1
org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : i2 = i2 + 1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : goto [?= (branch)]
org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : goto [?= (branch)] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : return i0
org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : return i0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : if i4 >= 0
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : if i4 >= 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : return i4
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : return i4 >>>>>>>> org.joda.time.format.PeriodFormatter.parseMutablePeriod : if i0 < 0
org.joda.time.format.PeriodFormatter.parseMutablePeriod : if i0 < 0 >>>>>>>> org.joda.time.format.PeriodFormatter.parseMutablePeriod : i0 = i0 ^ -1
org.joda.time.format.PeriodFormatter.parseMutablePeriod : i0 = i0 ^ -1 >>>>>>>> org.joda.time.format.PeriodFormatter.parseMutablePeriod : $r7 = new java.lang.IllegalArgumentException
org.joda.time.format.PeriodFormatter.parseMutablePeriod : $r7 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.format.PeriodFormatter.parseMutablePeriod : $r8 = staticinvoke <org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>(r1, i0)
org.joda.time.format.PeriodFormatter.parseMutablePeriod : $r8 = staticinvoke <org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>(r1, i0) >>>>>>>> org.joda.time.format.FormatUtils.createErrorMessage : i1 = i0 + 32
org.joda.time.format.FormatUtils.createErrorMessage : i1 = i0 + 32 >>>>>>>> org.joda.time.format.FormatUtils.createErrorMessage : $i2 = virtualinvoke r0.<java.lang.String: int length()>()
org.joda.time.format.FormatUtils.createErrorMessage : $i2 = virtualinvoke r0.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.FormatUtils.createErrorMessage : $i3 = i1 + 3
org.joda.time.format.FormatUtils.createErrorMessage : $i3 = i1 + 3 >>>>>>>> org.joda.time.format.FormatUtils.createErrorMessage : if $i2 > $i3
org.joda.time.format.FormatUtils.createErrorMessage : if $i2 > $i3 >>>>>>>> org.joda.time.format.FormatUtils.createErrorMessage : r1 = r0
org.joda.time.format.FormatUtils.createErrorMessage : r1 = r0 >>>>>>>> org.joda.time.format.FormatUtils.createErrorMessage : goto [?= (branch)]
org.joda.time.format.FormatUtils.createErrorMessage : goto [?= (branch)] >>>>>>>> org.joda.time.format.FormatUtils.createErrorMessage : if i0 > 0
org.joda.time.format.FormatUtils.createErrorMessage : if i0 > 0 >>>>>>>> org.joda.time.format.FormatUtils.createErrorMessage : $r3 = new java.lang.StringBuilder
org.joda.time.format.FormatUtils.createErrorMessage : $r3 = new java.lang.StringBuilder >>>>>>>> org.joda.time.format.FormatUtils.createErrorMessage : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
org.joda.time.format.FormatUtils.createErrorMessage : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.format.FormatUtils.createErrorMessage : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid format: \"")
org.joda.time.format.FormatUtils.createErrorMessage : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid format: \"") >>>>>>>> org.joda.time.format.FormatUtils.createErrorMessage : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.joda.time.format.FormatUtils.createErrorMessage : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.joda.time.format.FormatUtils.createErrorMessage : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34)
org.joda.time.format.FormatUtils.createErrorMessage : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34) >>>>>>>> org.joda.time.format.FormatUtils.createErrorMessage : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.format.FormatUtils.createErrorMessage : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.format.FormatUtils.createErrorMessage : return $r7
org.joda.time.format.FormatUtils.createErrorMessage : return $r7 >>>>>>>> org.joda.time.format.PeriodFormatter.parseMutablePeriod : specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8)
org.joda.time.format.PeriodFormatter.parseMutablePeriod : specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8) >>>>>>>> org.joda.time.format.PeriodFormatter.parseMutablePeriod : throw $r7
