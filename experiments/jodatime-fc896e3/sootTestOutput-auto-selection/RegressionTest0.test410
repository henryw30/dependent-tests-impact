org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>() >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r0)
org.joda.time.chrono.ISOChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r0 != null
org.joda.time.chrono.ISOChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63
org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>
org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0]
org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0] >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r1 == null
org.joda.time.chrono.ISOChronology.getInstance : if r1 == null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2
org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null
org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.GregorianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : return $r1
org.joda.time.chrono.AssembledChronology.getBase : return $r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : r1 = $r2
org.joda.time.chrono.BasicChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : if $r2 == null
org.joda.time.chrono.BasicChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : return $r4
org.joda.time.chrono.BasicChronology.getZone : return $r4 >>>>>>>> org.joda.time.chrono.GregorianChronology.getZone : return $r1
org.joda.time.chrono.GregorianChronology.getZone : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : return $r3
org.joda.time.chrono.AssembledChronology.getZone : return $r3 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0
org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return r1
org.joda.time.chrono.ISOChronology.getInstance : return r1 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return $r1
org.joda.time.chrono.ISOChronology.getInstance : return $r1 >>>>>>>> org.joda.time.DateTimeUtils.getChronology : if r0 != null
org.joda.time.DateTimeUtils.getChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.DateTimeUtils.getChronology : return r0 >>>>>>>> org.joda.time.DateTimeZone.getMillisKeepLocal : if r1 != null
org.joda.time.DateTimeZone.getMillisKeepLocal : if r1 != null >>>>>>>> org.joda.time.DateTimeZone.getMillisKeepLocal : if r1 != r0
org.joda.time.DateTimeZone.getMillisKeepLocal : if r1 != r0 >>>>>>>> org.joda.time.DateTimeZone.getMillisKeepLocal : return l0
org.joda.time.DateTimeZone.getMillisKeepLocal : return l0 >>>>>>>> org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>
org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.ISOChronology.withUTC : return $r1
org.joda.time.chrono.ISOChronology.withUTC : return $r1 >>>>>>>> org.joda.time.LocalDateTime.hourOfDay : $r1 = new org.joda.time.LocalDateTime$Property
org.joda.time.LocalDateTime.hourOfDay : $r1 = new org.joda.time.LocalDateTime$Property >>>>>>>> org.joda.time.LocalDateTime.hourOfDay : $r2 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalDateTime.hourOfDay : $r2 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.LocalDateTime.getChronology : $r1 = r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology iChronology>
org.joda.time.LocalDateTime.getChronology : $r1 = r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.LocalDateTime.getChronology : return $r1
org.joda.time.LocalDateTime.getChronology : return $r1 >>>>>>>> org.joda.time.LocalDateTime.hourOfDay : $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>()
org.joda.time.LocalDateTime.hourOfDay : $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.hourOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay>
org.joda.time.chrono.AssembledChronology.hourOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.hourOfDay : return $r1
org.joda.time.chrono.AssembledChronology.hourOfDay : return $r1 >>>>>>>> org.joda.time.LocalDateTime.hourOfDay : specialinvoke $r1.<org.joda.time.LocalDateTime$Property: void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField)>(r0, $r3)
org.joda.time.LocalDateTime.hourOfDay : specialinvoke $r1.<org.joda.time.LocalDateTime$Property: void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField)>(r0, $r3) >>>>>>>> org.joda.time.LocalDateTime.hourOfDay : return $r1
org.joda.time.LocalDateTime.hourOfDay : return $r1 >>>>>>>> org.joda.time.LocalDateTime$Property.setCopy : $r2 = virtualinvoke r0.<org.joda.time.LocalDateTime$Property: org.joda.time.LocalDateTime setCopy(java.lang.String,java.util.Locale)>(r1, null)
org.joda.time.LocalDateTime$Property.setCopy : $r2 = virtualinvoke r0.<org.joda.time.LocalDateTime$Property: org.joda.time.LocalDateTime setCopy(java.lang.String,java.util.Locale)>(r1, null) >>>>>>>> org.joda.time.LocalDateTime$Property.setCopy : $r3 = r0.<org.joda.time.LocalDateTime$Property: org.joda.time.LocalDateTime iInstant>
org.joda.time.LocalDateTime$Property.setCopy : $r3 = r0.<org.joda.time.LocalDateTime$Property: org.joda.time.LocalDateTime iInstant> >>>>>>>> org.joda.time.LocalDateTime$Property.setCopy : $r4 = r0.<org.joda.time.LocalDateTime$Property: org.joda.time.DateTimeField iField>
org.joda.time.LocalDateTime$Property.setCopy : $r4 = r0.<org.joda.time.LocalDateTime$Property: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.LocalDateTime$Property.setCopy : $r5 = r0.<org.joda.time.LocalDateTime$Property: org.joda.time.LocalDateTime iInstant>
org.joda.time.LocalDateTime$Property.setCopy : $r5 = r0.<org.joda.time.LocalDateTime$Property: org.joda.time.LocalDateTime iInstant> >>>>>>>> org.joda.time.LocalDateTime$Property.setCopy : $l0 = virtualinvoke $r5.<org.joda.time.LocalDateTime: long getLocalMillis()>()
org.joda.time.LocalDateTime$Property.setCopy : $l0 = virtualinvoke $r5.<org.joda.time.LocalDateTime: long getLocalMillis()>() >>>>>>>> org.joda.time.LocalDateTime.getLocalMillis : $l0 = r0.<org.joda.time.LocalDateTime: long iLocalMillis>
org.joda.time.LocalDateTime.getLocalMillis : $l0 = r0.<org.joda.time.LocalDateTime: long iLocalMillis> >>>>>>>> org.joda.time.LocalDateTime.getLocalMillis : return $l0
org.joda.time.LocalDateTime.getLocalMillis : return $l0 >>>>>>>> org.joda.time.LocalDateTime$Property.setCopy : $l1 = virtualinvoke $r4.<org.joda.time.DateTimeField: long set(long,java.lang.String,java.util.Locale)>($l0, r1, r2)
org.joda.time.LocalDateTime$Property.setCopy : $l1 = virtualinvoke $r4.<org.joda.time.DateTimeField: long set(long,java.lang.String,java.util.Locale)>($l0, r1, r2) >>>>>>>> org.joda.time.field.BaseDateTimeField.set : i1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int convertText(java.lang.String,java.util.Locale)>(r1, r2)
org.joda.time.field.BaseDateTimeField.set : i1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int convertText(java.lang.String,java.util.Locale)>(r1, r2) >>>>>>>> org.joda.time.field.BaseDateTimeField.convertText : $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r1)
org.joda.time.field.BaseDateTimeField.convertText : $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r1) >>>>>>>> org.joda.time.field.BaseDateTimeField.convertText : r3 = $r4
org.joda.time.field.BaseDateTimeField.convertText : r3 = $r4 >>>>>>>> org.joda.time.field.BaseDateTimeField.convertText : $r5 = new org.joda.time.IllegalFieldValueException
org.joda.time.field.BaseDateTimeField.convertText : $r5 = new org.joda.time.IllegalFieldValueException >>>>>>>> org.joda.time.field.BaseDateTimeField.convertText : $r6 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>()
org.joda.time.field.BaseDateTimeField.convertText : $r6 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.getType : $r1 = r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType iType>
org.joda.time.field.BaseDateTimeField.getType : $r1 = r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType iType> >>>>>>>> org.joda.time.field.BaseDateTimeField.getType : return $r1
org.joda.time.field.BaseDateTimeField.getType : return $r1 >>>>>>>> org.joda.time.field.BaseDateTimeField.convertText : specialinvoke $r5.<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.String)>($r6, r1)
org.joda.time.field.BaseDateTimeField.convertText : specialinvoke $r5.<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.String)>($r6, r1) >>>>>>>> org.joda.time.DateTimeFieldType.getName : $r1 = r0.<org.joda.time.DateTimeFieldType: java.lang.String iName>
org.joda.time.DateTimeFieldType.getName : $r1 = r0.<org.joda.time.DateTimeFieldType: java.lang.String iName> >>>>>>>> org.joda.time.DateTimeFieldType.getName : return $r1
org.joda.time.DateTimeFieldType.getName : return $r1 >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : $r2 = new java.lang.StringBuffer
org.joda.time.IllegalFieldValueException.createMessage : $r2 = new java.lang.StringBuffer >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>()
org.joda.time.IllegalFieldValueException.createMessage : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Value ")
org.joda.time.IllegalFieldValueException.createMessage : r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Value ") >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : if r1 != null
org.joda.time.IllegalFieldValueException.createMessage : if r1 != null >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(34)
org.joda.time.IllegalFieldValueException.createMessage : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(34) >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1)
org.joda.time.IllegalFieldValueException.createMessage : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1) >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : $r8 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" for ")
org.joda.time.IllegalFieldValueException.createMessage : $r8 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" for ") >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0)
org.joda.time.IllegalFieldValueException.createMessage : $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0) >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32)
org.joda.time.IllegalFieldValueException.createMessage : $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32) >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("is not supported")
org.joda.time.IllegalFieldValueException.createMessage : virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("is not supported") >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : $r12 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
org.joda.time.IllegalFieldValueException.createMessage : $r12 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : return $r12
org.joda.time.IllegalFieldValueException.createMessage : return $r12 >>>>>>>> org.joda.time.field.BaseDateTimeField.convertText : throw $r5
