crystal.util.SetOperations.setDifference : $r2 = new java.util.HashSet >>>>>>>> crystal.util.SetOperations.setDifference : specialinvoke $r2.<java.util.HashSet: void <init>()>()
crystal.util.SetOperations.setDifference : specialinvoke $r2.<java.util.HashSet: void <init>()>() >>>>>>>> crystal.util.SetOperations.setDifference : r3 = $r2
crystal.util.SetOperations.setDifference : r3 = $r2 >>>>>>>> crystal.util.SetOperations.setDifference : interfaceinvoke r3.<java.util.Set: boolean addAll(java.util.Collection)>(r0)
crystal.util.SetOperations.setDifference : interfaceinvoke r3.<java.util.Set: boolean addAll(java.util.Collection)>(r0) >>>>>>>> crystal.util.SetOperations.setDifference : interfaceinvoke r3.<java.util.Set: boolean removeAll(java.util.Collection)>(r1)
crystal.util.SetOperations.setDifference : interfaceinvoke r3.<java.util.Set: boolean removeAll(java.util.Collection)>(r1) >>>>>>>> crystal.util.SetOperations.setDifference : return r3
crystal.util.SetOperations.setDifference : return r3 >>>>>>>> crystal.util.SetOperations.isSuperset : $z0 = staticinvoke <crystal.util.SetOperations: boolean isSubset(java.util.Set,java.util.Set)>(r1, r0)
crystal.util.SetOperations.isSuperset : $z0 = staticinvoke <crystal.util.SetOperations: boolean isSubset(java.util.Set,java.util.Set)>(r1, r0) >>>>>>>> crystal.util.SetOperations.isSubset : $r2 = staticinvoke <crystal.util.SetOperations: java.util.Set setDifference(java.util.Set,java.util.Set)>(r0, r1)
crystal.util.SetOperations.isSubset : $r2 = staticinvoke <crystal.util.SetOperations: java.util.Set setDifference(java.util.Set,java.util.Set)>(r0, r1) >>>>>>>> crystal.util.SetOperations.isSubset : $z0 = interfaceinvoke $r2.<java.util.Set: boolean isEmpty()>()
crystal.util.SetOperations.isSubset : $z0 = interfaceinvoke $r2.<java.util.Set: boolean isEmpty()>() >>>>>>>> crystal.util.SetOperations.isSubset : return $z0
crystal.util.SetOperations.isSubset : return $z0 >>>>>>>> crystal.util.SetOperations.isSuperset : return $z0
