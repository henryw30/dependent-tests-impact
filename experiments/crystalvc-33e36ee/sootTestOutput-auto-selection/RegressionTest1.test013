crystal.model.DataSource.setParent : if r1 == null >>>>>>>> crystal.model.DataSource.setParent : $r2 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>()
crystal.model.DataSource.setParent : $r2 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>() >>>>>>>> crystal.model.DataSource.setParent : $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("")
crystal.model.DataSource.setParent : $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("") >>>>>>>> crystal.model.DataSource.setParent : if $z0 == 0
crystal.model.DataSource.setParent : if $z0 == 0 >>>>>>>> crystal.model.DataSource.setParent : r0.<crystal.model.DataSource: java.lang.String _parent> = r1
crystal.model.DataSource.setParent : r0.<crystal.model.DataSource: java.lang.String _parent> = r1 >>>>>>>> crystal.model.DataSource.setCompileCommand : r0.<crystal.model.DataSource: java.lang.String _compileCommand> = r1
crystal.model.DataSource.setCompileCommand : r0.<crystal.model.DataSource: java.lang.String _compileCommand> = r1 >>>>>>>> crystal.model.DataSource.setRemoteCmd : r0.<crystal.model.DataSource: java.lang.String _remoteCmd> = r1
crystal.model.DataSource.setRemoteCmd : r0.<crystal.model.DataSource: java.lang.String _remoteCmd> = r1 >>>>>>>> crystal.server.GitStateChecker.getLocalState : $r1 = staticinvoke <crystal.server.AbstractStateChecker: java.lang.String getLocalState(crystal.client.ProjectPreferences)>(r0)
crystal.server.GitStateChecker.getLocalState : $r1 = staticinvoke <crystal.server.AbstractStateChecker: java.lang.String getLocalState(crystal.client.ProjectPreferences)>(r0) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r0)
crystal.server.AbstractStateChecker.getLocalState : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r0) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r10 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()
crystal.server.AbstractStateChecker.getLocalState : $r10 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.client.ProjectPreferences.getEnvironment : $r1 = r0.<crystal.client.ProjectPreferences: crystal.model.DataSource _myEnvironment>
crystal.client.ProjectPreferences.getEnvironment : $r1 = r0.<crystal.client.ProjectPreferences: crystal.model.DataSource _myEnvironment> >>>>>>>> crystal.client.ProjectPreferences.getEnvironment : return $r1
crystal.client.ProjectPreferences.getEnvironment : return $r1 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $z0 = virtualinvoke $r10.<crystal.model.DataSource: boolean isEnabled()>()
crystal.server.AbstractStateChecker.getLocalState : $z0 = virtualinvoke $r10.<crystal.model.DataSource: boolean isEnabled()>() >>>>>>>> crystal.model.DataSource.isEnabled : $z0 = r0.<crystal.model.DataSource: boolean _enabled>
crystal.model.DataSource.isEnabled : $z0 = r0.<crystal.model.DataSource: boolean _enabled> >>>>>>>> crystal.model.DataSource.isEnabled : return $z0
crystal.model.DataSource.isEnabled : return $z0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : if $z0 != 0
crystal.server.AbstractStateChecker.getLocalState : if $z0 != 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : n0 = null
crystal.server.AbstractStateChecker.getLocalState : n0 = null >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r11 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()
crystal.server.AbstractStateChecker.getLocalState : $r11 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : r1 = virtualinvoke $r11.<crystal.model.DataSource: crystal.model.DataSource$RepoKind getKind()>()
crystal.server.AbstractStateChecker.getLocalState : r1 = virtualinvoke $r11.<crystal.model.DataSource: crystal.model.DataSource$RepoKind getKind()>() >>>>>>>> crystal.model.DataSource.getKind : $r1 = r0.<crystal.model.DataSource: crystal.model.DataSource$RepoKind _repoKind>
crystal.model.DataSource.getKind : $r1 = r0.<crystal.model.DataSource: crystal.model.DataSource$RepoKind _repoKind> >>>>>>>> crystal.model.DataSource.getKind : return $r1
crystal.model.DataSource.getKind : return $r1 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r2 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind HG>
crystal.server.AbstractStateChecker.getLocalState : $r2 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind HG> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $z1 = virtualinvoke r1.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r2)
crystal.server.AbstractStateChecker.getLocalState : $z1 = virtualinvoke r1.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r2) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : if $z1 == 0
crystal.server.AbstractStateChecker.getLocalState : if $z1 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : r12 = <crystal.server.HgLogParser: java.util.Map hgCheckpoint>
crystal.server.AbstractStateChecker.getLocalState : r12 = <crystal.server.HgLogParser: java.util.Map hgCheckpoint> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : goto [?= n1 = null]
crystal.server.AbstractStateChecker.getLocalState : goto [?= n1 = null] >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : n1 = null
crystal.server.AbstractStateChecker.getLocalState : n1 = null >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r14 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind HG>
crystal.server.AbstractStateChecker.getLocalState : $r14 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind HG> >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $z3 = virtualinvoke r1.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r14)
crystal.server.AbstractStateChecker.getLocalState : $z3 = virtualinvoke r1.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r14) >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : if $z3 == 0
crystal.server.AbstractStateChecker.getLocalState : if $z3 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : $r15 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>()
crystal.server.AbstractStateChecker.getLocalState : $r15 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>() >>>>>>>> crystal.client.ProjectPreferences.getClientPreferences : $r1 = r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences _clientPreferences>
crystal.client.ProjectPreferences.getClientPreferences : $r1 = r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences _clientPreferences> >>>>>>>> crystal.client.ProjectPreferences.getClientPreferences : return $r1
crystal.client.ProjectPreferences.getClientPreferences : return $r1 >>>>>>>> crystal.server.AbstractStateChecker.getLocalState : r16 = virtualinvoke $r15.<crystal.client.ClientPreferences: java.lang.String getHgPath()>()
