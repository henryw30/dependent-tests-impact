crystal.server.GitLogParser.parseLog : $r1 = <crystal.server.GitLogParser: java.util.Map gitCheckpoint> >>>>>>>> crystal.server.GitLogParser.parseLog : $r2 = staticinvoke <crystal.server.GitLogParser: java.util.HashMap abstractParseLog(java.lang.String,java.util.Map)>(r0, $r1)
crystal.server.GitLogParser.parseLog : $r2 = staticinvoke <crystal.server.GitLogParser: java.util.HashMap abstractParseLog(java.lang.String,java.util.Map)>(r0, $r1) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : staticinvoke <crystal.util.ValidInputChecker: void checkNullInput(java.lang.Object)>(r0)
crystal.server.AbstractLogParser.abstractParseLog : staticinvoke <crystal.util.ValidInputChecker: void checkNullInput(java.lang.Object)>(r0) >>>>>>>> crystal.util.ValidInputChecker.checkNullInput : if r0 != null
crystal.util.ValidInputChecker.checkNullInput : if r0 != null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r14 = new java.util.HashMap
crystal.server.AbstractLogParser.abstractParseLog : $r14 = new java.util.HashMap >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r14.<java.util.HashMap: void <init>()>()
crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r14.<java.util.HashMap: void <init>()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r2 = $r14
crystal.server.AbstractLogParser.abstractParseLog : r2 = $r14 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r15 = new java.lang.StringBuilder
crystal.server.AbstractLogParser.abstractParseLog : $r15 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>("\n")
crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>("\n") >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r16 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels CHANGESET>
crystal.server.AbstractLogParser.abstractParseLog : $r16 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels CHANGESET> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r17 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r16)
crystal.server.AbstractLogParser.abstractParseLog : $r17 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r16) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r18 = (java.lang.String) $r17
crystal.server.AbstractLogParser.abstractParseLog : $r18 = (java.lang.String) $r17 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18)
crystal.server.AbstractLogParser.abstractParseLog : $r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractLogParser.abstractParseLog : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r21 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>($r20)
crystal.server.AbstractLogParser.abstractParseLog : $r21 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>($r20) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r3 = $r21
crystal.server.AbstractLogParser.abstractParseLog : r3 = $r21 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : i0 = lengthof $r21
crystal.server.AbstractLogParser.abstractParseLog : i0 = lengthof $r21 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : i1 = 0
crystal.server.AbstractLogParser.abstractParseLog : i1 = 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : goto [?= (branch)]
crystal.server.AbstractLogParser.abstractParseLog : goto [?= (branch)] >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if i1 < i0
crystal.server.AbstractLogParser.abstractParseLog : if i1 < i0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r4 = r3[i1]
crystal.server.AbstractLogParser.abstractParseLog : r4 = r3[i1] >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r22 = virtualinvoke r4.<java.lang.String: java.lang.String trim()>()
crystal.server.AbstractLogParser.abstractParseLog : $r22 = virtualinvoke r4.<java.lang.String: java.lang.String trim()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $z0 = virtualinvoke $r22.<java.lang.String: boolean isEmpty()>()
crystal.server.AbstractLogParser.abstractParseLog : $z0 = virtualinvoke $r22.<java.lang.String: boolean isEmpty()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $z0 != 0
crystal.server.AbstractLogParser.abstractParseLog : if $z0 != 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : i1 = i1 + 1
crystal.server.AbstractLogParser.abstractParseLog : i1 = i1 + 1 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : return r2
crystal.server.AbstractLogParser.abstractParseLog : return r2 >>>>>>>> crystal.server.GitLogParser.parseLog : return $r2
