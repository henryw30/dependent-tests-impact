crystal.client.ConflictDaemon.getInstance : $r0 = <crystal.client.ConflictDaemon: crystal.client.ConflictDaemon _instance> >>>>>>>> crystal.client.ConflictDaemon.getInstance : if $r0 != null
crystal.client.ConflictDaemon.getInstance : if $r0 != null >>>>>>>> crystal.client.ConflictDaemon.getInstance : $r2 = <crystal.client.ConflictDaemon: crystal.client.ConflictDaemon _instance>
crystal.client.ConflictDaemon.getInstance : $r2 = <crystal.client.ConflictDaemon: crystal.client.ConflictDaemon _instance> >>>>>>>> crystal.client.ConflictDaemon.getInstance : return $r2
crystal.client.ConflictDaemon.getInstance : return $r2 >>>>>>>> crystal.client.ConflictDaemon.enable : r0.<crystal.client.ConflictDaemon: boolean _enabled> = z0
crystal.client.ConflictDaemon.enable : r0.<crystal.client.ConflictDaemon: boolean _enabled> = z0 >>>>>>>> crystal.client.ConflictDaemon.removeAllListeners : $r1 = r0.<crystal.client.ConflictDaemon: java.util.Vector _listeners>
crystal.client.ConflictDaemon.removeAllListeners : $r1 = r0.<crystal.client.ConflictDaemon: java.util.Vector _listeners> >>>>>>>> crystal.client.ConflictDaemon.removeAllListeners : virtualinvoke $r1.<java.util.Vector: void removeAllElements()>()
crystal.client.ConflictDaemon.removeAllListeners : virtualinvoke $r1.<java.util.Vector: void removeAllElements()>() >>>>>>>> crystal.client.ConflictDaemon.getRelationships : $r1 = r0.<crystal.client.ConflictDaemon: java.util.Hashtable _relationshipMap>
crystal.client.ConflictDaemon.getRelationships : $r1 = r0.<crystal.client.ConflictDaemon: java.util.Hashtable _relationshipMap> >>>>>>>> crystal.client.ConflictDaemon.getRelationships : $r2 = virtualinvoke $r1.<java.util.Hashtable: java.util.Collection values()>()
crystal.client.ConflictDaemon.getRelationships : $r2 = virtualinvoke $r1.<java.util.Hashtable: java.util.Collection values()>() >>>>>>>> crystal.client.ConflictDaemon.getRelationships : return $r2
crystal.client.ConflictDaemon.getRelationships : return $r2 >>>>>>>> crystal.model.DataSource.setParent : if r1 == null
crystal.model.DataSource.setParent : if r1 == null >>>>>>>> crystal.model.DataSource.setParent : $r2 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>()
crystal.model.DataSource.setParent : $r2 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>() >>>>>>>> crystal.model.DataSource.setParent : $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("")
crystal.model.DataSource.setParent : $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("") >>>>>>>> crystal.model.DataSource.setParent : if $z0 == 0
crystal.model.DataSource.setParent : if $z0 == 0 >>>>>>>> crystal.model.DataSource.setParent : r0.<crystal.model.DataSource: java.lang.String _parent> = r1
crystal.model.DataSource.setParent : r0.<crystal.model.DataSource: java.lang.String _parent> = r1 >>>>>>>> crystal.model.DataSource.getParent : $r1 = r0.<crystal.model.DataSource: java.lang.String _parent>
crystal.model.DataSource.getParent : $r1 = r0.<crystal.model.DataSource: java.lang.String _parent> >>>>>>>> crystal.model.DataSource.getParent : if $r1 != null
crystal.model.DataSource.getParent : if $r1 != null >>>>>>>> crystal.model.DataSource.getParent : $r2 = r0.<crystal.model.DataSource: java.lang.String _parent>
crystal.model.DataSource.getParent : $r2 = r0.<crystal.model.DataSource: java.lang.String _parent> >>>>>>>> crystal.model.DataSource.getParent : return $r2
crystal.model.DataSource.getParent : return $r2 >>>>>>>> crystal.model.DataSource.isHidden : $z0 = r0.<crystal.model.DataSource: boolean _hide>
crystal.model.DataSource.isHidden : $z0 = r0.<crystal.model.DataSource: boolean _hide> >>>>>>>> crystal.model.DataSource.isHidden : return $z0
crystal.model.DataSource.isHidden : return $z0 >>>>>>>> crystal.client.ConflictDaemon.getLocalState : $r4 = r0.<crystal.client.ConflictDaemon: java.util.Hashtable _localStateMap>
crystal.client.ConflictDaemon.getLocalState : $r4 = r0.<crystal.client.ConflictDaemon: java.util.Hashtable _localStateMap> >>>>>>>> crystal.client.ConflictDaemon.getLocalState : $r5 = virtualinvoke $r4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1)
crystal.client.ConflictDaemon.getLocalState : $r5 = virtualinvoke $r4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> crystal.client.ConflictDaemon.getLocalState : r2 = (crystal.model.LocalStateResult) $r5
crystal.client.ConflictDaemon.getLocalState : r2 = (crystal.model.LocalStateResult) $r5 >>>>>>>> crystal.client.ConflictDaemon.getLocalState : if r2 != null
crystal.client.ConflictDaemon.getLocalState : if r2 != null >>>>>>>> crystal.client.ConflictDaemon.getLocalState : $r6 = new crystal.model.LocalStateResult
crystal.client.ConflictDaemon.getLocalState : $r6 = new crystal.model.LocalStateResult >>>>>>>> crystal.client.ConflictDaemon.getLocalState : $r3 = <crystal.model.LocalStateResult: java.lang.String PENDING>
crystal.client.ConflictDaemon.getLocalState : $r3 = <crystal.model.LocalStateResult: java.lang.String PENDING> >>>>>>>> crystal.client.ConflictDaemon.getLocalState : specialinvoke $r6.<crystal.model.LocalStateResult: void <init>(crystal.model.DataSource,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, $r3, null, null, null)
crystal.client.ConflictDaemon.getLocalState : specialinvoke $r6.<crystal.model.LocalStateResult: void <init>(crystal.model.DataSource,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, $r3, null, null, null) >>>>>>>> crystal.client.ConflictDaemon.getLocalState : r2 = $r6
crystal.client.ConflictDaemon.getLocalState : r2 = $r6 >>>>>>>> crystal.client.ConflictDaemon.getLocalState : $r7 = r0.<crystal.client.ConflictDaemon: java.util.Hashtable _localStateMap>
crystal.client.ConflictDaemon.getLocalState : $r7 = r0.<crystal.client.ConflictDaemon: java.util.Hashtable _localStateMap> >>>>>>>> crystal.client.ConflictDaemon.getLocalState : virtualinvoke $r7.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
crystal.client.ConflictDaemon.getLocalState : virtualinvoke $r7.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> crystal.client.ConflictDaemon.getLocalState : return r2
