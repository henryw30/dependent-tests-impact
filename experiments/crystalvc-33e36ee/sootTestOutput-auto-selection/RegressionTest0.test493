crystal.model.DataSource.setParent : if r1 == null >>>>>>>> crystal.model.DataSource.setParent : $r2 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>()
crystal.model.DataSource.setParent : $r2 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>() >>>>>>>> crystal.model.DataSource.setParent : $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("")
crystal.model.DataSource.setParent : $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("") >>>>>>>> crystal.model.DataSource.setParent : if $z0 == 0
crystal.model.DataSource.setParent : if $z0 == 0 >>>>>>>> crystal.model.DataSource.setParent : r0.<crystal.model.DataSource: java.lang.String _parent> = r1
crystal.model.DataSource.setParent : r0.<crystal.model.DataSource: java.lang.String _parent> = r1 >>>>>>>> crystal.model.DataSource.setCompileCommand : r0.<crystal.model.DataSource: java.lang.String _compileCommand> = r1
crystal.model.DataSource.setCompileCommand : r0.<crystal.model.DataSource: java.lang.String _compileCommand> = r1 >>>>>>>> crystal.util.JMultiLineToolTip.updateUI : $r1 = staticinvoke <crystal.util.MultiLineToolTipUI: javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)>(r0)
crystal.util.JMultiLineToolTip.updateUI : $r1 = staticinvoke <crystal.util.MultiLineToolTipUI: javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)>(r0) >>>>>>>> crystal.util.MultiLineToolTipUI.createUI : $r1 = <crystal.util.MultiLineToolTipUI: crystal.util.MultiLineToolTipUI sharedInstance>
crystal.util.MultiLineToolTipUI.createUI : $r1 = <crystal.util.MultiLineToolTipUI: crystal.util.MultiLineToolTipUI sharedInstance> >>>>>>>> crystal.util.MultiLineToolTipUI.createUI : return $r1
crystal.util.MultiLineToolTipUI.createUI : return $r1 >>>>>>>> crystal.util.JMultiLineToolTip.updateUI : virtualinvoke r0.<crystal.util.JMultiLineToolTip: void setUI(javax.swing.plaf.ComponentUI)>($r1)
crystal.util.JMultiLineToolTip.updateUI : virtualinvoke r0.<crystal.util.JMultiLineToolTip: void setUI(javax.swing.plaf.ComponentUI)>($r1) >>>>>>>> crystal.util.MultiLineToolTipUI.installUI : specialinvoke r0.<javax.swing.plaf.basic.BasicToolTipUI: void installUI(javax.swing.JComponent)>(r1)
crystal.util.MultiLineToolTipUI.installUI : specialinvoke r0.<javax.swing.plaf.basic.BasicToolTipUI: void installUI(javax.swing.JComponent)>(r1) >>>>>>>> crystal.util.MultiLineToolTipUI.installUI : $r2 = (javax.swing.JToolTip) r1
crystal.util.MultiLineToolTipUI.installUI : $r2 = (javax.swing.JToolTip) r1 >>>>>>>> crystal.util.MultiLineToolTipUI.installUI : <crystal.util.MultiLineToolTipUI: javax.swing.JToolTip tip> = $r2
crystal.util.MultiLineToolTipUI.installUI : <crystal.util.MultiLineToolTipUI: javax.swing.JToolTip tip> = $r2 >>>>>>>> crystal.util.MultiLineToolTipUI.installUI : $r3 = new javax.swing.CellRendererPane
crystal.util.MultiLineToolTipUI.installUI : $r3 = new javax.swing.CellRendererPane >>>>>>>> crystal.util.MultiLineToolTipUI.installUI : specialinvoke $r3.<javax.swing.CellRendererPane: void <init>()>()
crystal.util.MultiLineToolTipUI.installUI : specialinvoke $r3.<javax.swing.CellRendererPane: void <init>()>() >>>>>>>> crystal.util.MultiLineToolTipUI.installUI : r0.<crystal.util.MultiLineToolTipUI: javax.swing.CellRendererPane rendererPane> = $r3
crystal.util.MultiLineToolTipUI.installUI : r0.<crystal.util.MultiLineToolTipUI: javax.swing.CellRendererPane rendererPane> = $r3 >>>>>>>> crystal.util.MultiLineToolTipUI.installUI : $r4 = r0.<crystal.util.MultiLineToolTipUI: javax.swing.CellRendererPane rendererPane>
crystal.util.MultiLineToolTipUI.installUI : $r4 = r0.<crystal.util.MultiLineToolTipUI: javax.swing.CellRendererPane rendererPane> >>>>>>>> crystal.util.MultiLineToolTipUI.installUI : virtualinvoke r1.<javax.swing.JComponent: java.awt.Component add(java.awt.Component)>($r4)
crystal.util.MultiLineToolTipUI.installUI : virtualinvoke r1.<javax.swing.JComponent: java.awt.Component add(java.awt.Component)>($r4) >>>>>>>> crystal.util.MultiLineToolTipUI.uninstallUI : specialinvoke r0.<javax.swing.plaf.basic.BasicToolTipUI: void uninstallUI(javax.swing.JComponent)>(r1)
crystal.util.MultiLineToolTipUI.uninstallUI : specialinvoke r0.<javax.swing.plaf.basic.BasicToolTipUI: void uninstallUI(javax.swing.JComponent)>(r1) >>>>>>>> crystal.util.MultiLineToolTipUI.uninstallUI : $r2 = r0.<crystal.util.MultiLineToolTipUI: javax.swing.CellRendererPane rendererPane>
crystal.util.MultiLineToolTipUI.uninstallUI : $r2 = r0.<crystal.util.MultiLineToolTipUI: javax.swing.CellRendererPane rendererPane> >>>>>>>> crystal.util.MultiLineToolTipUI.uninstallUI : virtualinvoke r1.<javax.swing.JComponent: void remove(java.awt.Component)>($r2)
crystal.util.MultiLineToolTipUI.uninstallUI : virtualinvoke r1.<javax.swing.JComponent: void remove(java.awt.Component)>($r2) >>>>>>>> crystal.util.MultiLineToolTipUI.uninstallUI : r0.<crystal.util.MultiLineToolTipUI: javax.swing.CellRendererPane rendererPane> = null
crystal.util.MultiLineToolTipUI.uninstallUI : r0.<crystal.util.MultiLineToolTipUI: javax.swing.CellRendererPane rendererPane> = null >>>>>>>> crystal.model.DataSource.equals : if r1 == null
crystal.model.DataSource.equals : if r1 == null >>>>>>>> crystal.model.DataSource.equals : $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()
crystal.model.DataSource.equals : $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> crystal.model.DataSource.equals : $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
crystal.model.DataSource.equals : $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> crystal.model.DataSource.equals : if $r3 != $r4
crystal.model.DataSource.equals : if $r3 != $r4 >>>>>>>> crystal.model.DataSource.equals : return 0
