crystal.model.DataSource.setParent : if r1 == null >>>>>>>> crystal.model.DataSource.setParent : $r2 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>()
crystal.model.DataSource.setParent : $r2 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>() >>>>>>>> crystal.model.DataSource.setParent : $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("")
crystal.model.DataSource.setParent : $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("") >>>>>>>> crystal.model.DataSource.setParent : if $z0 == 0
crystal.model.DataSource.setParent : if $z0 == 0 >>>>>>>> crystal.model.DataSource.setParent : r0.<crystal.model.DataSource: java.lang.String _parent> = r1
crystal.model.DataSource.setParent : r0.<crystal.model.DataSource: java.lang.String _parent> = r1 >>>>>>>> crystal.model.DataSource.setCompileCommand : r0.<crystal.model.DataSource: java.lang.String _compileCommand> = r1
crystal.model.DataSource.setCompileCommand : r0.<crystal.model.DataSource: java.lang.String _compileCommand> = r1 >>>>>>>> crystal.util.ValidInputChecker.checkValidStringInput : if r0 == null
crystal.util.ValidInputChecker.checkValidStringInput : if r0 == null >>>>>>>> crystal.util.ValidInputChecker.checkValidStringInput : $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>()
crystal.util.ValidInputChecker.checkValidStringInput : $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>() >>>>>>>> crystal.util.ValidInputChecker.checkValidStringInput : $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("")
crystal.util.ValidInputChecker.checkValidStringInput : $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("") >>>>>>>> crystal.util.ValidInputChecker.checkValidStringInput : if $z0 == 0
crystal.util.ValidInputChecker.checkValidStringInput : if $z0 == 0 >>>>>>>> crystal.client.ClientPreferences.addProjectPreferences : $r5 = r0.<crystal.client.ClientPreferences: java.util.Vector _projectPreferences>
crystal.client.ClientPreferences.addProjectPreferences : $r5 = r0.<crystal.client.ClientPreferences: java.util.Vector _projectPreferences> >>>>>>>> crystal.client.ClientPreferences.addProjectPreferences : r2 = virtualinvoke $r5.<java.util.Vector: java.util.Iterator iterator()>()
crystal.client.ClientPreferences.addProjectPreferences : r2 = virtualinvoke $r5.<java.util.Vector: java.util.Iterator iterator()>() >>>>>>>> crystal.client.ClientPreferences.addProjectPreferences : goto [?= $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
crystal.client.ClientPreferences.addProjectPreferences : goto [?= $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> crystal.client.ClientPreferences.addProjectPreferences : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
crystal.client.ClientPreferences.addProjectPreferences : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> crystal.client.ClientPreferences.addProjectPreferences : if $z1 != 0
crystal.client.ClientPreferences.addProjectPreferences : if $z1 != 0 >>>>>>>> crystal.client.ClientPreferences.addProjectPreferences : $r16 = r0.<crystal.client.ClientPreferences: java.util.Vector _projectPreferences>
crystal.client.ClientPreferences.addProjectPreferences : $r16 = r0.<crystal.client.ClientPreferences: java.util.Vector _projectPreferences> >>>>>>>> crystal.client.ClientPreferences.addProjectPreferences : virtualinvoke $r16.<java.util.Vector: boolean add(java.lang.Object)>(r1)
crystal.client.ClientPreferences.addProjectPreferences : virtualinvoke $r16.<java.util.Vector: boolean add(java.lang.Object)>(r1) >>>>>>>> crystal.client.ClientPreferences.setGitPath : r0.<crystal.client.ClientPreferences: java.lang.String _gitPath> = r1
crystal.client.ClientPreferences.setGitPath : r0.<crystal.client.ClientPreferences: java.lang.String _gitPath> = r1 >>>>>>>> crystal.client.ClientPreferences.removeProjectPreferences : $r2 = r0.<crystal.client.ClientPreferences: java.util.Vector _projectPreferences>
crystal.client.ClientPreferences.removeProjectPreferences : $r2 = r0.<crystal.client.ClientPreferences: java.util.Vector _projectPreferences> >>>>>>>> crystal.client.ClientPreferences.removeProjectPreferences : virtualinvoke $r2.<java.util.Vector: boolean remove(java.lang.Object)>(r1)
crystal.client.ClientPreferences.removeProjectPreferences : virtualinvoke $r2.<java.util.Vector: boolean remove(java.lang.Object)>(r1) >>>>>>>> crystal.client.ProjectPreferences.clone : $r5 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>()
crystal.client.ProjectPreferences.clone : $r5 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> crystal.client.ProjectPreferences.clone : r1 = (crystal.client.ProjectPreferences) $r5
crystal.client.ProjectPreferences.clone : r1 = (crystal.client.ProjectPreferences) $r5 >>>>>>>> crystal.client.ProjectPreferences.clone : $r6 = new java.util.Vector
crystal.client.ProjectPreferences.clone : $r6 = new java.util.Vector >>>>>>>> crystal.client.ProjectPreferences.clone : specialinvoke $r6.<java.util.Vector: void <init>()>()
crystal.client.ProjectPreferences.clone : specialinvoke $r6.<java.util.Vector: void <init>()>() >>>>>>>> crystal.client.ProjectPreferences.clone : r2 = $r6
crystal.client.ProjectPreferences.clone : r2 = $r6 >>>>>>>> crystal.client.ProjectPreferences.clone : $r7 = r0.<crystal.client.ProjectPreferences: java.util.Vector _dataSources>
crystal.client.ProjectPreferences.clone : $r7 = r0.<crystal.client.ProjectPreferences: java.util.Vector _dataSources> >>>>>>>> crystal.client.ProjectPreferences.clone : r3 = virtualinvoke $r7.<java.util.Vector: java.util.Iterator iterator()>()
crystal.client.ProjectPreferences.clone : r3 = virtualinvoke $r7.<java.util.Vector: java.util.Iterator iterator()>() >>>>>>>> crystal.client.ProjectPreferences.clone : goto [?= $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
crystal.client.ProjectPreferences.clone : goto [?= $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> crystal.client.ProjectPreferences.clone : $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
crystal.client.ProjectPreferences.clone : $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> crystal.client.ProjectPreferences.clone : if $z1 != 0
crystal.client.ProjectPreferences.clone : if $z1 != 0 >>>>>>>> crystal.client.ProjectPreferences.clone : r1.<crystal.client.ProjectPreferences: java.util.Vector _dataSources> = r2
crystal.client.ProjectPreferences.clone : r1.<crystal.client.ProjectPreferences: java.util.Vector _dataSources> = r2 >>>>>>>> crystal.client.ProjectPreferences.clone : $r10 = r0.<crystal.client.ProjectPreferences: crystal.model.DataSource _myEnvironment>
crystal.client.ProjectPreferences.clone : $r10 = r0.<crystal.client.ProjectPreferences: crystal.model.DataSource _myEnvironment> >>>>>>>> crystal.client.ProjectPreferences.clone : $r11 = virtualinvoke $r10.<crystal.model.DataSource: crystal.model.DataSource clone()>()
crystal.client.ProjectPreferences.clone : $r11 = virtualinvoke $r10.<crystal.model.DataSource: crystal.model.DataSource clone()>() >>>>>>>> crystal.model.DataSource.clone : $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>()
crystal.model.DataSource.clone : $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> crystal.model.DataSource.clone : r1 = (crystal.model.DataSource) $r2
crystal.model.DataSource.clone : r1 = (crystal.model.DataSource) $r2 >>>>>>>> crystal.model.DataSource.clone : $r3 = r0.<crystal.model.DataSource: crystal.model.RevisionHistory _history>
crystal.model.DataSource.clone : $r3 = r0.<crystal.model.DataSource: crystal.model.RevisionHistory _history> >>>>>>>> crystal.model.DataSource.clone : if $r3 == null
crystal.model.DataSource.clone : if $r3 == null >>>>>>>> crystal.model.DataSource.clone : $r6 = r0.<crystal.model.DataSource: crystal.model.RevisionHistory _oldHistory>
crystal.model.DataSource.clone : $r6 = r0.<crystal.model.DataSource: crystal.model.RevisionHistory _oldHistory> >>>>>>>> crystal.model.DataSource.clone : if $r6 == null
crystal.model.DataSource.clone : if $r6 == null >>>>>>>> crystal.model.DataSource.clone : return r1
crystal.model.DataSource.clone : return r1 >>>>>>>> crystal.client.ProjectPreferences.clone : r1.<crystal.client.ProjectPreferences: crystal.model.DataSource _myEnvironment> = $r11
crystal.client.ProjectPreferences.clone : r1.<crystal.client.ProjectPreferences: crystal.model.DataSource _myEnvironment> = $r11 >>>>>>>> crystal.client.ProjectPreferences.clone : $r12 = r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences _clientPreferences>
crystal.client.ProjectPreferences.clone : $r12 = r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences _clientPreferences> >>>>>>>> crystal.client.ProjectPreferences.clone : r1.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences _clientPreferences> = $r12
crystal.client.ProjectPreferences.clone : r1.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences _clientPreferences> = $r12 >>>>>>>> crystal.client.ProjectPreferences.clone : return r1
crystal.client.ProjectPreferences.clone : return r1 >>>>>>>> crystal.model.DataSource.setRemoteCmd : r0.<crystal.model.DataSource: java.lang.String _remoteCmd> = r1
crystal.model.DataSource.setRemoteCmd : r0.<crystal.model.DataSource: java.lang.String _remoteCmd> = r1 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r0)
crystal.server.AbstractStateChecker.getRelationship : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r0) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r1)
crystal.server.AbstractStateChecker.getRelationship : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r1) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : r4 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.Class)>(class "crystal/server/AbstractStateChecker")
crystal.server.AbstractStateChecker.getRelationship : r4 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.Class)>(class "crystal/server/AbstractStateChecker") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r22 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()
crystal.server.AbstractStateChecker.getRelationship : $r22 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.client.ProjectPreferences.getEnvironment : $r1 = r0.<crystal.client.ProjectPreferences: crystal.model.DataSource _myEnvironment>
crystal.client.ProjectPreferences.getEnvironment : $r1 = r0.<crystal.client.ProjectPreferences: crystal.model.DataSource _myEnvironment> >>>>>>>> crystal.client.ProjectPreferences.getEnvironment : return $r1
crystal.client.ProjectPreferences.getEnvironment : return $r1 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $z0 = virtualinvoke $r22.<crystal.model.DataSource: boolean isEnabled()>()
crystal.server.AbstractStateChecker.getRelationship : $z0 = virtualinvoke $r22.<crystal.model.DataSource: boolean isEnabled()>() >>>>>>>> crystal.model.DataSource.isEnabled : $z0 = r0.<crystal.model.DataSource: boolean _enabled>
crystal.model.DataSource.isEnabled : $z0 = r0.<crystal.model.DataSource: boolean _enabled> >>>>>>>> crystal.model.DataSource.isEnabled : return $z0
crystal.model.DataSource.isEnabled : return $z0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : if $z0 == 0
crystal.server.AbstractStateChecker.getRelationship : if $z0 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $z1 = virtualinvoke r1.<crystal.model.DataSource: boolean isEnabled()>()
crystal.server.AbstractStateChecker.getRelationship : $z1 = virtualinvoke r1.<crystal.model.DataSource: boolean isEnabled()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : if $z1 != 0
crystal.server.AbstractStateChecker.getRelationship : if $z1 != 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r23 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()
crystal.server.AbstractStateChecker.getRelationship : $r23 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : r5 = virtualinvoke r0.<crystal.client.ProjectPreferences: java.lang.String getProjectCheckoutLocation(crystal.model.DataSource)>($r23)
crystal.server.AbstractStateChecker.getRelationship : r5 = virtualinvoke r0.<crystal.client.ProjectPreferences: java.lang.String getProjectCheckoutLocation(crystal.model.DataSource)>($r23) >>>>>>>> crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r4 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>()
crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r4 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>() >>>>>>>> crystal.client.ProjectPreferences.getClientPreferences : $r1 = r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences _clientPreferences>
crystal.client.ProjectPreferences.getClientPreferences : $r1 = r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences _clientPreferences> >>>>>>>> crystal.client.ProjectPreferences.getClientPreferences : return $r1
crystal.client.ProjectPreferences.getClientPreferences : return $r1 >>>>>>>> crystal.client.ProjectPreferences.getProjectCheckoutLocation : r2 = virtualinvoke $r4.<crystal.client.ClientPreferences: java.lang.String getTempDirectory()>()
crystal.client.ProjectPreferences.getProjectCheckoutLocation : r2 = virtualinvoke $r4.<crystal.client.ClientPreferences: java.lang.String getTempDirectory()>() >>>>>>>> crystal.client.ClientPreferences.getTempDirectory : $r1 = r0.<crystal.client.ClientPreferences: java.lang.String _tempDirectory>
crystal.client.ClientPreferences.getTempDirectory : $r1 = r0.<crystal.client.ClientPreferences: java.lang.String _tempDirectory> >>>>>>>> crystal.client.ClientPreferences.getTempDirectory : return $r1
crystal.client.ClientPreferences.getTempDirectory : return $r1 >>>>>>>> crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r3 = <java.io.File: java.lang.String separator>
crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r3 = <java.io.File: java.lang.String separator> >>>>>>>> crystal.client.ProjectPreferences.getProjectCheckoutLocation : $z0 = virtualinvoke r2.<java.lang.String: boolean endsWith(java.lang.String)>($r3)
crystal.client.ProjectPreferences.getProjectCheckoutLocation : $z0 = virtualinvoke r2.<java.lang.String: boolean endsWith(java.lang.String)>($r3) >>>>>>>> crystal.client.ProjectPreferences.getProjectCheckoutLocation : if $z0 != 0
crystal.client.ProjectPreferences.getProjectCheckoutLocation : if $z0 != 0 >>>>>>>> crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r5 = new java.lang.StringBuilder
crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r5 = new java.lang.StringBuilder >>>>>>>> crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2)
crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2) >>>>>>>> crystal.client.ProjectPreferences.getProjectCheckoutLocation : specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>($r6)
crystal.client.ProjectPreferences.getProjectCheckoutLocation : specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>($r6) >>>>>>>> crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r7 = <java.io.File: java.lang.String separator>
crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r7 = <java.io.File: java.lang.String separator> >>>>>>>> crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)
crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) >>>>>>>> crystal.client.ProjectPreferences.getProjectCheckoutLocation : r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.client.ProjectPreferences.getProjectCheckoutLocation : r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r9 = new java.lang.StringBuilder
crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r9 = new java.lang.StringBuilder >>>>>>>> crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2)
crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2) >>>>>>>> crystal.client.ProjectPreferences.getProjectCheckoutLocation : specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>($r10)
crystal.client.ProjectPreferences.getProjectCheckoutLocation : specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>($r10) >>>>>>>> crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r11 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()
crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r11 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r12 = virtualinvoke $r11.<crystal.model.DataSource: java.lang.String getShortName()>()
crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r12 = virtualinvoke $r11.<crystal.model.DataSource: java.lang.String getShortName()>() >>>>>>>> crystal.model.DataSource.getShortName : $r1 = r0.<crystal.model.DataSource: java.lang.String _shortName>
crystal.model.DataSource.getShortName : $r1 = r0.<crystal.model.DataSource: java.lang.String _shortName> >>>>>>>> crystal.model.DataSource.getShortName : return $r1
crystal.model.DataSource.getShortName : return $r1 >>>>>>>> crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12)
crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) >>>>>>>> crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_")
crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_") >>>>>>>> crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r15 = virtualinvoke r1.<crystal.model.DataSource: java.lang.String getShortName()>()
crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r15 = virtualinvoke r1.<crystal.model.DataSource: java.lang.String getShortName()>() >>>>>>>> crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15)
crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15) >>>>>>>> crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.client.ProjectPreferences.getProjectCheckoutLocation : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.client.ProjectPreferences.getProjectCheckoutLocation : return $r17
crystal.client.ProjectPreferences.getProjectCheckoutLocation : return $r17 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : r6 = virtualinvoke r0.<crystal.client.ProjectPreferences: java.lang.String getProjectCheckoutLocation(crystal.model.DataSource)>(r1)
crystal.server.AbstractStateChecker.getRelationship : r6 = virtualinvoke r0.<crystal.client.ProjectPreferences: java.lang.String getProjectCheckoutLocation(crystal.model.DataSource)>(r1) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : n0 = null
crystal.server.AbstractStateChecker.getRelationship : n0 = null >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r24 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind HG>
crystal.server.AbstractStateChecker.getRelationship : $r24 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind HG> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $z2 = virtualinvoke r3.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r24)
crystal.server.AbstractStateChecker.getRelationship : $z2 = virtualinvoke r3.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r24) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : if $z2 == 0
crystal.server.AbstractStateChecker.getRelationship : if $z2 == 0 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r25 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>()
crystal.server.AbstractStateChecker.getRelationship : $r25 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : r26 = virtualinvoke $r25.<crystal.client.ClientPreferences: java.lang.String getHgPath()>()
crystal.server.AbstractStateChecker.getRelationship : r26 = virtualinvoke $r25.<crystal.client.ClientPreferences: java.lang.String getHgPath()>() >>>>>>>> crystal.client.ClientPreferences.getHgPath : $r1 = r0.<crystal.client.ClientPreferences: java.lang.String _hgPath>
crystal.client.ClientPreferences.getHgPath : $r1 = r0.<crystal.client.ClientPreferences: java.lang.String _hgPath> >>>>>>>> crystal.client.ClientPreferences.getHgPath : return $r1
crystal.client.ClientPreferences.getHgPath : return $r1 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : goto [?= $r29 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>()]
crystal.server.AbstractStateChecker.getRelationship : goto [?= $r29 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>()] >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r29 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>()
crystal.server.AbstractStateChecker.getRelationship : $r29 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.client.ClientPreferences getClientPreferences()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : r7 = virtualinvoke $r29.<crystal.client.ClientPreferences: java.lang.String getTempDirectory()>()
crystal.server.AbstractStateChecker.getRelationship : r7 = virtualinvoke $r29.<crystal.client.ClientPreferences: java.lang.String getTempDirectory()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r30 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.getRelationship : $r30 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r30.<java.lang.StringBuilder: void <init>(java.lang.String)>("tempMine_")
crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r30.<java.lang.StringBuilder: void <init>(java.lang.String)>("tempMine_") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r31 = staticinvoke <crystal.util.TimeUtility: java.lang.String getCurrentLSMRDateString()>()
crystal.server.AbstractStateChecker.getRelationship : $r31 = staticinvoke <crystal.util.TimeUtility: java.lang.String getCurrentLSMRDateString()>() >>>>>>>> crystal.util.TimeUtility.getCurrentLSMRDateString : $r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>()
crystal.util.TimeUtility.getCurrentLSMRDateString : $r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>() >>>>>>>> crystal.util.TimeUtility.getCurrentLSMRDateString : $r1 = virtualinvoke $r0.<java.util.Calendar: java.util.Date getTime()>()
crystal.util.TimeUtility.getCurrentLSMRDateString : $r1 = virtualinvoke $r0.<java.util.Calendar: java.util.Date getTime()>() >>>>>>>> crystal.util.TimeUtility.getCurrentLSMRDateString : $r2 = staticinvoke <crystal.util.TimeUtility: java.lang.String formatLSMRDate(java.util.Date)>($r1)
crystal.util.TimeUtility.getCurrentLSMRDateString : $r2 = staticinvoke <crystal.util.TimeUtility: java.lang.String formatLSMRDate(java.util.Date)>($r1) >>>>>>>> crystal.util.TimeUtility.formatLSMRDate : $r1 = new java.text.SimpleDateFormat
crystal.util.TimeUtility.formatLSMRDate : $r1 = new java.text.SimpleDateFormat >>>>>>>> crystal.util.TimeUtility.formatLSMRDate : $r2 = <crystal.util.TimeUtility: java.lang.String LSMR_DATE_FORMAT>
crystal.util.TimeUtility.formatLSMRDate : $r2 = <crystal.util.TimeUtility: java.lang.String LSMR_DATE_FORMAT> >>>>>>>> crystal.util.TimeUtility.formatLSMRDate : specialinvoke $r1.<java.text.SimpleDateFormat: void <init>(java.lang.String)>($r2)
crystal.util.TimeUtility.formatLSMRDate : specialinvoke $r1.<java.text.SimpleDateFormat: void <init>(java.lang.String)>($r2) >>>>>>>> crystal.util.TimeUtility.formatLSMRDate : $r3 = virtualinvoke $r1.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>(r0)
crystal.util.TimeUtility.formatLSMRDate : $r3 = virtualinvoke $r1.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>(r0) >>>>>>>> crystal.util.TimeUtility.formatLSMRDate : return $r3
crystal.util.TimeUtility.formatLSMRDate : return $r3 >>>>>>>> crystal.util.TimeUtility.getCurrentLSMRDateString : return $r2
crystal.util.TimeUtility.getCurrentLSMRDateString : return $r2 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31)
crystal.server.AbstractStateChecker.getRelationship : $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : r8 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.getRelationship : r8 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r33 = virtualinvoke r1.<crystal.model.DataSource: java.lang.String getRemoteCmd()>()
crystal.server.AbstractStateChecker.getRelationship : $r33 = virtualinvoke r1.<crystal.model.DataSource: java.lang.String getRemoteCmd()>() >>>>>>>> crystal.model.DataSource.getRemoteCmd : $r1 = r0.<crystal.model.DataSource: java.lang.String _remoteCmd>
crystal.model.DataSource.getRemoteCmd : $r1 = r0.<crystal.model.DataSource: java.lang.String _remoteCmd> >>>>>>>> crystal.model.DataSource.getRemoteCmd : return $r1
crystal.model.DataSource.getRemoteCmd : return $r1 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r34 = virtualinvoke r1.<crystal.model.DataSource: java.lang.String getShortName()>()
crystal.server.AbstractStateChecker.getRelationship : $r34 = virtualinvoke r1.<crystal.model.DataSource: java.lang.String getShortName()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r35 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()
crystal.server.AbstractStateChecker.getRelationship : $r35 = virtualinvoke r0.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r36 = virtualinvoke $r35.<crystal.model.DataSource: java.lang.String getShortName()>()
crystal.server.AbstractStateChecker.getRelationship : $r36 = virtualinvoke $r35.<crystal.model.DataSource: java.lang.String getShortName()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : staticinvoke <crystal.server.AbstractStateChecker: void updateLocalRepositoryAndCheckCacheError(crystal.model.DataSource,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r26, r6, r7, $r33, $r34, $r36)
crystal.server.AbstractStateChecker.getRelationship : staticinvoke <crystal.server.AbstractStateChecker: void updateLocalRepositoryAndCheckCacheError(crystal.model.DataSource,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r26, r6, r7, $r33, $r34, $r36) >>>>>>>> crystal.server.AbstractStateChecker.updateLocalRepositoryAndCheckCacheError : r7 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.Class)>(class "crystal/server/AbstractStateChecker")
crystal.server.AbstractStateChecker.updateLocalRepositoryAndCheckCacheError : r7 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.Class)>(class "crystal/server/AbstractStateChecker") >>>>>>>> crystal.server.AbstractStateChecker.updateLocalRepositoryAndCheckCacheError : $r10 = new java.io.File
crystal.server.AbstractStateChecker.updateLocalRepositoryAndCheckCacheError : $r10 = new java.io.File >>>>>>>> crystal.server.AbstractStateChecker.updateLocalRepositoryAndCheckCacheError : specialinvoke $r10.<java.io.File: void <init>(java.lang.String)>(r2)
crystal.server.AbstractStateChecker.updateLocalRepositoryAndCheckCacheError : specialinvoke $r10.<java.io.File: void <init>(java.lang.String)>(r2) >>>>>>>> crystal.server.AbstractStateChecker.updateLocalRepositoryAndCheckCacheError : $z0 = virtualinvoke $r10.<java.io.File: boolean exists()>()
crystal.server.AbstractStateChecker.updateLocalRepositoryAndCheckCacheError : $z0 = virtualinvoke $r10.<java.io.File: boolean exists()>() >>>>>>>> crystal.server.AbstractStateChecker.updateLocalRepositoryAndCheckCacheError : if $z0 == 0
crystal.server.AbstractStateChecker.updateLocalRepositoryAndCheckCacheError : if $z0 == 0 >>>>>>>> crystal.server.AbstractStateChecker.updateLocalRepositoryAndCheckCacheError : $r35 = virtualinvoke r0.<crystal.model.DataSource: java.lang.String getCloneString()>()
crystal.server.AbstractStateChecker.updateLocalRepositoryAndCheckCacheError : $r35 = virtualinvoke r0.<crystal.model.DataSource: java.lang.String getCloneString()>() >>>>>>>> crystal.model.DataSource.getCloneString : $r1 = r0.<crystal.model.DataSource: java.lang.String _cloneString>
crystal.model.DataSource.getCloneString : $r1 = r0.<crystal.model.DataSource: java.lang.String _cloneString> >>>>>>>> crystal.model.DataSource.getCloneString : return $r1
crystal.model.DataSource.getCloneString : return $r1 >>>>>>>> crystal.server.AbstractStateChecker.updateLocalRepositoryAndCheckCacheError : staticinvoke <crystal.server.AbstractStateChecker: void createLocalRepository(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, $r35, r2, r3, r4)
crystal.server.AbstractStateChecker.updateLocalRepositoryAndCheckCacheError : staticinvoke <crystal.server.AbstractStateChecker: void createLocalRepository(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, $r35, r2, r3, r4) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r0)
crystal.server.AbstractStateChecker.createLocalRepository : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r0) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r1)
crystal.server.AbstractStateChecker.createLocalRepository : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r1) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r2)
crystal.server.AbstractStateChecker.createLocalRepository : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r2) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r3)
crystal.server.AbstractStateChecker.createLocalRepository : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r3) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r9 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.createLocalRepository : $r9 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0)
crystal.server.AbstractStateChecker.createLocalRepository : $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>($r10)
crystal.server.AbstractStateChecker.createLocalRepository : specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>($r10) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" clone")
crystal.server.AbstractStateChecker.createLocalRepository : $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" clone") >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : r5 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.createLocalRepository : r5 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r12 = new java.util.ArrayList
crystal.server.AbstractStateChecker.createLocalRepository : $r12 = new java.util.ArrayList >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : specialinvoke $r12.<java.util.ArrayList: void <init>()>()
crystal.server.AbstractStateChecker.createLocalRepository : specialinvoke $r12.<java.util.ArrayList: void <init>()>() >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : r6 = $r12
crystal.server.AbstractStateChecker.createLocalRepository : r6 = $r12 >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>("clone")
crystal.server.AbstractStateChecker.createLocalRepository : interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>("clone") >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : if r4 == null
crystal.server.AbstractStateChecker.createLocalRepository : if r4 == null >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>("--remotecmd")
crystal.server.AbstractStateChecker.createLocalRepository : interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>("--remotecmd") >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r4)
crystal.server.AbstractStateChecker.createLocalRepository : interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r4) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r13 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.createLocalRepository : $r13 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r14 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r5)
crystal.server.AbstractStateChecker.createLocalRepository : $r14 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r5) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>($r14)
crystal.server.AbstractStateChecker.createLocalRepository : specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>($r14) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --remotecmd ")
crystal.server.AbstractStateChecker.createLocalRepository : $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --remotecmd ") >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)
crystal.server.AbstractStateChecker.createLocalRepository : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : r5 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.createLocalRepository : r5 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r1)
crystal.server.AbstractStateChecker.createLocalRepository : interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r1) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r2)
crystal.server.AbstractStateChecker.createLocalRepository : interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r2) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r17 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.createLocalRepository : $r17 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r18 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r5)
crystal.server.AbstractStateChecker.createLocalRepository : $r18 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r5) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>($r18)
crystal.server.AbstractStateChecker.createLocalRepository : specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>($r18) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")
crystal.server.AbstractStateChecker.createLocalRepository : $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
crystal.server.AbstractStateChecker.createLocalRepository : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")
crystal.server.AbstractStateChecker.createLocalRepository : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
crystal.server.AbstractStateChecker.createLocalRepository : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.createLocalRepository : virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r24 = newarray (java.lang.String)[0]
crystal.server.AbstractStateChecker.createLocalRepository : $r24 = newarray (java.lang.String)[0] >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r25 = interfaceinvoke r6.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r24)
crystal.server.AbstractStateChecker.createLocalRepository : $r25 = interfaceinvoke r6.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r24) >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : $r26 = (java.lang.String[]) $r25
crystal.server.AbstractStateChecker.createLocalRepository : $r26 = (java.lang.String[]) $r25 >>>>>>>> crystal.server.AbstractStateChecker.createLocalRepository : r7 = staticinvoke <crystal.util.RunIt: crystal.util.RunIt$Output execute(java.lang.String,java.lang.String[],java.lang.String,boolean)>(r0, $r26, r3, 0)
crystal.server.AbstractStateChecker.createLocalRepository : r7 = staticinvoke <crystal.util.RunIt: crystal.util.RunIt$Output execute(java.lang.String,java.lang.String[],java.lang.String,boolean)>(r0, $r26, r3, 0) >>>>>>>> crystal.util.RunIt.execute : l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
crystal.util.RunIt.execute : l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> crystal.util.RunIt.execute : $r13 = new java.lang.ProcessBuilder
crystal.util.RunIt.execute : $r13 = new java.lang.ProcessBuilder >>>>>>>> crystal.util.RunIt.execute : $r14 = newarray (java.lang.String)[0]
crystal.util.RunIt.execute : $r14 = newarray (java.lang.String)[0] >>>>>>>> crystal.util.RunIt.execute : specialinvoke $r13.<java.lang.ProcessBuilder: void <init>(java.lang.String[])>($r14)
crystal.util.RunIt.execute : specialinvoke $r13.<java.lang.ProcessBuilder: void <init>(java.lang.String[])>($r14) >>>>>>>> crystal.util.RunIt.execute : r3 = $r13
crystal.util.RunIt.execute : r3 = $r13 >>>>>>>> crystal.util.RunIt.execute : $r15 = new java.io.File
crystal.util.RunIt.execute : $r15 = new java.io.File >>>>>>>> crystal.util.RunIt.execute : specialinvoke $r15.<java.io.File: void <init>(java.lang.String)>(r2)
crystal.util.RunIt.execute : specialinvoke $r15.<java.io.File: void <init>(java.lang.String)>(r2) >>>>>>>> crystal.util.RunIt.execute : r4 = $r15
crystal.util.RunIt.execute : r4 = $r15 >>>>>>>> crystal.util.RunIt.execute : $z1 = <crystal.util.RunIt: boolean $assertionsDisabled>
crystal.util.RunIt.execute : $z1 = <crystal.util.RunIt: boolean $assertionsDisabled> >>>>>>>> crystal.util.RunIt.execute : if $z1 != 0
crystal.util.RunIt.execute : if $z1 != 0 >>>>>>>> crystal.util.RunIt.execute : $z3 = <crystal.util.RunIt: boolean $assertionsDisabled>
crystal.util.RunIt.execute : $z3 = <crystal.util.RunIt: boolean $assertionsDisabled> >>>>>>>> crystal.util.RunIt.execute : if $z3 != 0
crystal.util.RunIt.execute : if $z3 != 0 >>>>>>>> crystal.util.RunIt.execute : $r18 = new java.io.File
crystal.util.RunIt.execute : $r18 = new java.io.File >>>>>>>> crystal.util.RunIt.execute : specialinvoke $r18.<java.io.File: void <init>(java.lang.String)>(r2)
crystal.util.RunIt.execute : specialinvoke $r18.<java.io.File: void <init>(java.lang.String)>(r2) >>>>>>>> crystal.util.RunIt.execute : virtualinvoke r3.<java.lang.ProcessBuilder: java.lang.ProcessBuilder directory(java.io.File)>($r18)
crystal.util.RunIt.execute : virtualinvoke r3.<java.lang.ProcessBuilder: java.lang.ProcessBuilder directory(java.io.File)>($r18) >>>>>>>> crystal.util.RunIt.execute : if r1 == null
crystal.util.RunIt.execute : if r1 == null >>>>>>>> crystal.util.RunIt.execute : $i4 = lengthof r1
crystal.util.RunIt.execute : $i4 = lengthof r1 >>>>>>>> crystal.util.RunIt.execute : if $i4 != 0
crystal.util.RunIt.execute : if $i4 != 0 >>>>>>>> crystal.util.RunIt.execute : $r22 = new java.util.Vector
crystal.util.RunIt.execute : $r22 = new java.util.Vector >>>>>>>> crystal.util.RunIt.execute : specialinvoke $r22.<java.util.Vector: void <init>()>()
crystal.util.RunIt.execute : specialinvoke $r22.<java.util.Vector: void <init>()>() >>>>>>>> crystal.util.RunIt.execute : r5 = $r22
crystal.util.RunIt.execute : r5 = $r22 >>>>>>>> crystal.util.RunIt.execute : interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r0)
crystal.util.RunIt.execute : interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r0) >>>>>>>> crystal.util.RunIt.execute : r6 = r1
crystal.util.RunIt.execute : r6 = r1 >>>>>>>> crystal.util.RunIt.execute : i1 = lengthof r1
crystal.util.RunIt.execute : i1 = lengthof r1 >>>>>>>> crystal.util.RunIt.execute : i2 = 0
crystal.util.RunIt.execute : i2 = 0 >>>>>>>> crystal.util.RunIt.execute : goto [?= (branch)]
crystal.util.RunIt.execute : goto [?= (branch)] >>>>>>>> crystal.util.RunIt.execute : if i2 < i1
crystal.util.RunIt.execute : if i2 < i1 >>>>>>>> crystal.util.RunIt.execute : r7 = r6[i2]
crystal.util.RunIt.execute : r7 = r6[i2] >>>>>>>> crystal.util.RunIt.execute : interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r7)
crystal.util.RunIt.execute : interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r7) >>>>>>>> crystal.util.RunIt.execute : i2 = i2 + 1
crystal.util.RunIt.execute : i2 = i2 + 1 >>>>>>>> crystal.util.RunIt.execute : virtualinvoke r3.<java.lang.ProcessBuilder: java.lang.ProcessBuilder command(java.util.List)>(r5)
crystal.util.RunIt.execute : virtualinvoke r3.<java.lang.ProcessBuilder: java.lang.ProcessBuilder command(java.util.List)>(r5) >>>>>>>> crystal.util.RunIt.execute : $r25 = <crystal.util.RunIt: org.apache.log4j.Logger _log>
crystal.util.RunIt.execute : $r25 = <crystal.util.RunIt: org.apache.log4j.Logger _log> >>>>>>>> crystal.util.RunIt.execute : $r26 = new java.lang.StringBuilder
crystal.util.RunIt.execute : $r26 = new java.lang.StringBuilder >>>>>>>> crystal.util.RunIt.execute : specialinvoke $r26.<java.lang.StringBuilder: void <init>(java.lang.String)>("\tRunIt::execute(..) - command: ")
crystal.util.RunIt.execute : specialinvoke $r26.<java.lang.StringBuilder: void <init>(java.lang.String)>("\tRunIt::execute(..) - command: ") >>>>>>>> crystal.util.RunIt.execute : $r27 = virtualinvoke r3.<java.lang.ProcessBuilder: java.util.List command()>()
crystal.util.RunIt.execute : $r27 = virtualinvoke r3.<java.lang.ProcessBuilder: java.util.List command()>() >>>>>>>> crystal.util.RunIt.execute : $r28 = virtualinvoke $r27.<java.lang.Object: java.lang.String toString()>()
crystal.util.RunIt.execute : $r28 = virtualinvoke $r27.<java.lang.Object: java.lang.String toString()>() >>>>>>>> crystal.util.RunIt.execute : $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28)
crystal.util.RunIt.execute : $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28) >>>>>>>> crystal.util.RunIt.execute : $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; in path: ")
crystal.util.RunIt.execute : $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; in path: ") >>>>>>>> crystal.util.RunIt.execute : $r31 = virtualinvoke r3.<java.lang.ProcessBuilder: java.io.File directory()>()
crystal.util.RunIt.execute : $r31 = virtualinvoke r3.<java.lang.ProcessBuilder: java.io.File directory()>() >>>>>>>> crystal.util.RunIt.execute : $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r31)
crystal.util.RunIt.execute : $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r31) >>>>>>>> crystal.util.RunIt.execute : $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.util.RunIt.execute : $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.util.RunIt.execute : virtualinvoke $r25.<org.apache.log4j.Logger: void info(java.lang.Object)>($r33)
crystal.util.RunIt.execute : virtualinvoke $r25.<org.apache.log4j.Logger: void info(java.lang.Object)>($r33) >>>>>>>> crystal.util.RunIt.execute : r34 = virtualinvoke r3.<java.lang.ProcessBuilder: java.lang.Process start()>()
crystal.util.RunIt.execute : r34 = virtualinvoke r3.<java.lang.ProcessBuilder: java.lang.Process start()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : r46 = $r45
crystal.server.AbstractStateChecker.getRelationship : r46 = $r45 >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r47 = new java.lang.StringBuilder
crystal.server.AbstractStateChecker.getRelationship : $r47 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r48 = <crystal.model.Relationship: java.lang.String ERROR>
crystal.server.AbstractStateChecker.getRelationship : $r48 = <crystal.model.Relationship: java.lang.String ERROR> >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r49 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r48)
crystal.server.AbstractStateChecker.getRelationship : $r49 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r48) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r47.<java.lang.StringBuilder: void <init>(java.lang.String)>($r49)
crystal.server.AbstractStateChecker.getRelationship : specialinvoke $r47.<java.lang.StringBuilder: void <init>(java.lang.String)>($r49) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r50 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")
crystal.server.AbstractStateChecker.getRelationship : $r50 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r51 = virtualinvoke r46.<java.io.IOException: java.lang.String getMessage()>()
crystal.server.AbstractStateChecker.getRelationship : $r51 = virtualinvoke r46.<java.io.IOException: java.lang.String getMessage()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r52 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r51)
crystal.server.AbstractStateChecker.getRelationship : $r52 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r51) >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractStateChecker.getRelationship : $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractStateChecker.getRelationship : return $r53
