crystal.client.ConflictDaemon.getInstance : $r0 = <crystal.client.ConflictDaemon: crystal.client.ConflictDaemon _instance> >>>>>>>> crystal.client.ConflictDaemon.getInstance : if $r0 != null
crystal.client.ConflictDaemon.getInstance : if $r0 != null >>>>>>>> crystal.client.ConflictDaemon.getInstance : $r2 = <crystal.client.ConflictDaemon: crystal.client.ConflictDaemon _instance>
crystal.client.ConflictDaemon.getInstance : $r2 = <crystal.client.ConflictDaemon: crystal.client.ConflictDaemon _instance> >>>>>>>> crystal.client.ConflictDaemon.getInstance : return $r2
crystal.client.ConflictDaemon.getInstance : return $r2 >>>>>>>> crystal.client.ConflictDaemon.enable : r0.<crystal.client.ConflictDaemon: boolean _enabled> = z0
crystal.client.ConflictDaemon.enable : r0.<crystal.client.ConflictDaemon: boolean _enabled> = z0 >>>>>>>> crystal.client.ConflictDaemon.removeAllListeners : $r1 = r0.<crystal.client.ConflictDaemon: java.util.Vector _listeners>
crystal.client.ConflictDaemon.removeAllListeners : $r1 = r0.<crystal.client.ConflictDaemon: java.util.Vector _listeners> >>>>>>>> crystal.client.ConflictDaemon.removeAllListeners : virtualinvoke $r1.<java.util.Vector: void removeAllElements()>()
crystal.client.ConflictDaemon.removeAllListeners : virtualinvoke $r1.<java.util.Vector: void removeAllElements()>() >>>>>>>> crystal.model.DataSource.setParent : if r1 == null
crystal.model.DataSource.setParent : if r1 == null >>>>>>>> crystal.model.DataSource.setParent : $r2 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>()
crystal.model.DataSource.setParent : $r2 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>() >>>>>>>> crystal.model.DataSource.setParent : $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("")
crystal.model.DataSource.setParent : $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("") >>>>>>>> crystal.model.DataSource.setParent : if $z0 == 0
crystal.model.DataSource.setParent : if $z0 == 0 >>>>>>>> crystal.model.DataSource.setParent : r0.<crystal.model.DataSource: java.lang.String _parent> = r1
crystal.model.DataSource.setParent : r0.<crystal.model.DataSource: java.lang.String _parent> = r1 >>>>>>>> crystal.model.DataSource.clone : $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>()
crystal.model.DataSource.clone : $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> crystal.model.DataSource.clone : r1 = (crystal.model.DataSource) $r2
crystal.model.DataSource.clone : r1 = (crystal.model.DataSource) $r2 >>>>>>>> crystal.model.DataSource.clone : $r3 = r0.<crystal.model.DataSource: crystal.model.RevisionHistory _history>
crystal.model.DataSource.clone : $r3 = r0.<crystal.model.DataSource: crystal.model.RevisionHistory _history> >>>>>>>> crystal.model.DataSource.clone : if $r3 == null
crystal.model.DataSource.clone : if $r3 == null >>>>>>>> crystal.model.DataSource.clone : $r6 = r0.<crystal.model.DataSource: crystal.model.RevisionHistory _oldHistory>
crystal.model.DataSource.clone : $r6 = r0.<crystal.model.DataSource: crystal.model.RevisionHistory _oldHistory> >>>>>>>> crystal.model.DataSource.clone : if $r6 == null
crystal.model.DataSource.clone : if $r6 == null >>>>>>>> crystal.model.DataSource.clone : return r1
crystal.model.DataSource.clone : return r1 >>>>>>>> crystal.util.ValidInputChecker.checkValidStringInput : if r0 == null
crystal.util.ValidInputChecker.checkValidStringInput : if r0 == null >>>>>>>> crystal.util.ValidInputChecker.checkValidStringInput : $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>()
crystal.util.ValidInputChecker.checkValidStringInput : $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>() >>>>>>>> crystal.util.ValidInputChecker.checkValidStringInput : $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("")
crystal.util.ValidInputChecker.checkValidStringInput : $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("") >>>>>>>> crystal.util.ValidInputChecker.checkValidStringInput : if $z0 == 0
crystal.util.ValidInputChecker.checkValidStringInput : if $z0 == 0 >>>>>>>> crystal.util.JMultiLineToolTip.updateUI : $r1 = staticinvoke <crystal.util.MultiLineToolTipUI: javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)>(r0)
crystal.util.JMultiLineToolTip.updateUI : $r1 = staticinvoke <crystal.util.MultiLineToolTipUI: javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)>(r0) >>>>>>>> crystal.util.MultiLineToolTipUI.createUI : $r1 = <crystal.util.MultiLineToolTipUI: crystal.util.MultiLineToolTipUI sharedInstance>
crystal.util.MultiLineToolTipUI.createUI : $r1 = <crystal.util.MultiLineToolTipUI: crystal.util.MultiLineToolTipUI sharedInstance> >>>>>>>> crystal.util.MultiLineToolTipUI.createUI : return $r1
crystal.util.MultiLineToolTipUI.createUI : return $r1 >>>>>>>> crystal.util.JMultiLineToolTip.updateUI : virtualinvoke r0.<crystal.util.JMultiLineToolTip: void setUI(javax.swing.plaf.ComponentUI)>($r1)
crystal.util.JMultiLineToolTip.updateUI : virtualinvoke r0.<crystal.util.JMultiLineToolTip: void setUI(javax.swing.plaf.ComponentUI)>($r1) >>>>>>>> crystal.util.MultiLineToolTipUI.installUI : specialinvoke r0.<javax.swing.plaf.basic.BasicToolTipUI: void installUI(javax.swing.JComponent)>(r1)
crystal.util.MultiLineToolTipUI.installUI : specialinvoke r0.<javax.swing.plaf.basic.BasicToolTipUI: void installUI(javax.swing.JComponent)>(r1) >>>>>>>> crystal.util.MultiLineToolTipUI.installUI : $r2 = (javax.swing.JToolTip) r1
crystal.util.MultiLineToolTipUI.installUI : $r2 = (javax.swing.JToolTip) r1 >>>>>>>> crystal.util.MultiLineToolTipUI.installUI : <crystal.util.MultiLineToolTipUI: javax.swing.JToolTip tip> = $r2
crystal.util.MultiLineToolTipUI.installUI : <crystal.util.MultiLineToolTipUI: javax.swing.JToolTip tip> = $r2 >>>>>>>> crystal.util.MultiLineToolTipUI.installUI : $r3 = new javax.swing.CellRendererPane
crystal.util.MultiLineToolTipUI.installUI : $r3 = new javax.swing.CellRendererPane >>>>>>>> crystal.util.MultiLineToolTipUI.installUI : specialinvoke $r3.<javax.swing.CellRendererPane: void <init>()>()
crystal.util.MultiLineToolTipUI.installUI : specialinvoke $r3.<javax.swing.CellRendererPane: void <init>()>() >>>>>>>> crystal.util.MultiLineToolTipUI.installUI : r0.<crystal.util.MultiLineToolTipUI: javax.swing.CellRendererPane rendererPane> = $r3
crystal.util.MultiLineToolTipUI.installUI : r0.<crystal.util.MultiLineToolTipUI: javax.swing.CellRendererPane rendererPane> = $r3 >>>>>>>> crystal.util.MultiLineToolTipUI.installUI : $r4 = r0.<crystal.util.MultiLineToolTipUI: javax.swing.CellRendererPane rendererPane>
crystal.util.MultiLineToolTipUI.installUI : $r4 = r0.<crystal.util.MultiLineToolTipUI: javax.swing.CellRendererPane rendererPane> >>>>>>>> crystal.util.MultiLineToolTipUI.installUI : virtualinvoke r1.<javax.swing.JComponent: java.awt.Component add(java.awt.Component)>($r4)
crystal.util.MultiLineToolTipUI.installUI : virtualinvoke r1.<javax.swing.JComponent: java.awt.Component add(java.awt.Component)>($r4) >>>>>>>> crystal.util.MultiLineToolTipUI.uninstallUI : specialinvoke r0.<javax.swing.plaf.basic.BasicToolTipUI: void uninstallUI(javax.swing.JComponent)>(r1)
crystal.util.MultiLineToolTipUI.uninstallUI : specialinvoke r0.<javax.swing.plaf.basic.BasicToolTipUI: void uninstallUI(javax.swing.JComponent)>(r1) >>>>>>>> crystal.util.MultiLineToolTipUI.uninstallUI : $r2 = r0.<crystal.util.MultiLineToolTipUI: javax.swing.CellRendererPane rendererPane>
crystal.util.MultiLineToolTipUI.uninstallUI : $r2 = r0.<crystal.util.MultiLineToolTipUI: javax.swing.CellRendererPane rendererPane> >>>>>>>> crystal.util.MultiLineToolTipUI.uninstallUI : virtualinvoke r1.<javax.swing.JComponent: void remove(java.awt.Component)>($r2)
crystal.util.MultiLineToolTipUI.uninstallUI : virtualinvoke r1.<javax.swing.JComponent: void remove(java.awt.Component)>($r2) >>>>>>>> crystal.util.MultiLineToolTipUI.uninstallUI : r0.<crystal.util.MultiLineToolTipUI: javax.swing.CellRendererPane rendererPane> = null
crystal.util.MultiLineToolTipUI.uninstallUI : r0.<crystal.util.MultiLineToolTipUI: javax.swing.CellRendererPane rendererPane> = null >>>>>>>> crystal.client.ClientPreferences.equals : if r1 == null
crystal.client.ClientPreferences.equals : if r1 == null >>>>>>>> crystal.client.ClientPreferences.equals : $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()
crystal.client.ClientPreferences.equals : $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> crystal.client.ClientPreferences.equals : $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
crystal.client.ClientPreferences.equals : $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> crystal.client.ClientPreferences.equals : if $r3 != $r4
crystal.client.ClientPreferences.equals : if $r3 != $r4 >>>>>>>> crystal.client.ClientPreferences.equals : return 0
crystal.client.ClientPreferences.equals : return 0 >>>>>>>> crystal.client.ClientPreferences.getHgPath : $r1 = r0.<crystal.client.ClientPreferences: java.lang.String _hgPath>
crystal.client.ClientPreferences.getHgPath : $r1 = r0.<crystal.client.ClientPreferences: java.lang.String _hgPath> >>>>>>>> crystal.client.ClientPreferences.getHgPath : return $r1
crystal.client.ClientPreferences.getHgPath : return $r1 >>>>>>>> crystal.client.ClientPreferences.getRefresh : $l0 = r0.<crystal.client.ClientPreferences: long _refresh>
crystal.client.ClientPreferences.getRefresh : $l0 = r0.<crystal.client.ClientPreferences: long _refresh> >>>>>>>> crystal.client.ClientPreferences.getRefresh : return $l0
crystal.client.ClientPreferences.getRefresh : return $l0 >>>>>>>> crystal.model.DataSource.setCompileCommand : r0.<crystal.model.DataSource: java.lang.String _compileCommand> = r1
crystal.model.DataSource.setCompileCommand : r0.<crystal.model.DataSource: java.lang.String _compileCommand> = r1 >>>>>>>> crystal.client.ClientPreferences.addProjectPreferences : $r5 = r0.<crystal.client.ClientPreferences: java.util.Vector _projectPreferences>
crystal.client.ClientPreferences.addProjectPreferences : $r5 = r0.<crystal.client.ClientPreferences: java.util.Vector _projectPreferences> >>>>>>>> crystal.client.ClientPreferences.addProjectPreferences : r2 = virtualinvoke $r5.<java.util.Vector: java.util.Iterator iterator()>()
crystal.client.ClientPreferences.addProjectPreferences : r2 = virtualinvoke $r5.<java.util.Vector: java.util.Iterator iterator()>() >>>>>>>> crystal.client.ClientPreferences.addProjectPreferences : goto [?= $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
crystal.client.ClientPreferences.addProjectPreferences : goto [?= $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> crystal.client.ClientPreferences.addProjectPreferences : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
crystal.client.ClientPreferences.addProjectPreferences : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> crystal.client.ClientPreferences.addProjectPreferences : if $z1 != 0
crystal.client.ClientPreferences.addProjectPreferences : if $z1 != 0 >>>>>>>> crystal.client.ClientPreferences.addProjectPreferences : $r16 = r0.<crystal.client.ClientPreferences: java.util.Vector _projectPreferences>
crystal.client.ClientPreferences.addProjectPreferences : $r16 = r0.<crystal.client.ClientPreferences: java.util.Vector _projectPreferences> >>>>>>>> crystal.client.ClientPreferences.addProjectPreferences : virtualinvoke $r16.<java.util.Vector: boolean add(java.lang.Object)>(r1)
crystal.client.ClientPreferences.addProjectPreferences : virtualinvoke $r16.<java.util.Vector: boolean add(java.lang.Object)>(r1) >>>>>>>> crystal.client.ClientPreferences.setGitPath : r0.<crystal.client.ClientPreferences: java.lang.String _gitPath> = r1
crystal.client.ClientPreferences.setGitPath : r0.<crystal.client.ClientPreferences: java.lang.String _gitPath> = r1 >>>>>>>> crystal.client.ClientPreferences.removeProjectPreferences : $r2 = r0.<crystal.client.ClientPreferences: java.util.Vector _projectPreferences>
crystal.client.ClientPreferences.removeProjectPreferences : $r2 = r0.<crystal.client.ClientPreferences: java.util.Vector _projectPreferences> >>>>>>>> crystal.client.ClientPreferences.removeProjectPreferences : virtualinvoke $r2.<java.util.Vector: boolean remove(java.lang.Object)>(r1)
crystal.client.ClientPreferences.removeProjectPreferences : virtualinvoke $r2.<java.util.Vector: boolean remove(java.lang.Object)>(r1) >>>>>>>> crystal.client.ConflictDaemon.calculateRelationship : $z0 = r0.<crystal.client.ConflictDaemon: boolean _enabled>
crystal.client.ConflictDaemon.calculateRelationship : $z0 = r0.<crystal.client.ConflictDaemon: boolean _enabled> >>>>>>>> crystal.client.ConflictDaemon.calculateRelationship : if $z0 != 0
crystal.client.ConflictDaemon.calculateRelationship : if $z0 != 0 >>>>>>>> crystal.client.ConflictDaemon.calculateRelationship : r3 = null
crystal.client.ConflictDaemon.calculateRelationship : r3 = null >>>>>>>> crystal.client.ConflictDaemon.calculateRelationship : l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
crystal.client.ConflictDaemon.calculateRelationship : l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> crystal.client.ConflictDaemon.calculateRelationship : $r8 = virtualinvoke r1.<crystal.model.DataSource: crystal.model.DataSource$RepoKind getKind()>()
crystal.client.ConflictDaemon.calculateRelationship : $r8 = virtualinvoke r1.<crystal.model.DataSource: crystal.model.DataSource$RepoKind getKind()>() >>>>>>>> crystal.model.DataSource.getKind : $r1 = r0.<crystal.model.DataSource: crystal.model.DataSource$RepoKind _repoKind>
crystal.model.DataSource.getKind : $r1 = r0.<crystal.model.DataSource: crystal.model.DataSource$RepoKind _repoKind> >>>>>>>> crystal.model.DataSource.getKind : return $r1
crystal.model.DataSource.getKind : return $r1 >>>>>>>> crystal.client.ConflictDaemon.calculateRelationship : $r4 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind HG>
crystal.client.ConflictDaemon.calculateRelationship : $r4 = <crystal.model.DataSource$RepoKind: crystal.model.DataSource$RepoKind HG> >>>>>>>> crystal.client.ConflictDaemon.calculateRelationship : $z1 = virtualinvoke $r8.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r4)
crystal.client.ConflictDaemon.calculateRelationship : $z1 = virtualinvoke $r8.<crystal.model.DataSource$RepoKind: boolean equals(java.lang.Object)>($r4) >>>>>>>> crystal.client.ConflictDaemon.calculateRelationship : if $z1 == 0
crystal.client.ConflictDaemon.calculateRelationship : if $z1 == 0 >>>>>>>> crystal.client.ConflictDaemon.calculateRelationship : $r9 = r0.<crystal.client.ConflictDaemon: org.apache.log4j.Logger _log>
crystal.client.ConflictDaemon.calculateRelationship : $r9 = r0.<crystal.client.ConflictDaemon: org.apache.log4j.Logger _log> >>>>>>>> crystal.client.ConflictDaemon.calculateRelationship : $r10 = new java.lang.StringBuilder
crystal.client.ConflictDaemon.calculateRelationship : $r10 = new java.lang.StringBuilder >>>>>>>> crystal.client.ConflictDaemon.calculateRelationship : specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("ConflictDaemon::calculateRelationship( ")
crystal.client.ConflictDaemon.calculateRelationship : specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("ConflictDaemon::calculateRelationship( ") >>>>>>>> crystal.client.ConflictDaemon.calculateRelationship : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1)
crystal.client.ConflictDaemon.calculateRelationship : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) >>>>>>>> crystal.model.DataSource.toString : $r1 = new java.lang.StringBuilder
crystal.model.DataSource.toString : $r1 = new java.lang.StringBuilder >>>>>>>> crystal.model.DataSource.toString : $r2 = virtualinvoke r0.<crystal.model.DataSource: java.lang.String getShortName()>()
crystal.model.DataSource.toString : $r2 = virtualinvoke r0.<crystal.model.DataSource: java.lang.String getShortName()>() >>>>>>>> crystal.model.DataSource.getShortName : $r1 = r0.<crystal.model.DataSource: java.lang.String _shortName>
crystal.model.DataSource.getShortName : $r1 = r0.<crystal.model.DataSource: java.lang.String _shortName> >>>>>>>> crystal.model.DataSource.getShortName : return $r1
crystal.model.DataSource.getShortName : return $r1 >>>>>>>> crystal.model.DataSource.toString : $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2)
crystal.model.DataSource.toString : $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2) >>>>>>>> crystal.model.DataSource.toString : specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3)
crystal.model.DataSource.toString : specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3) >>>>>>>> crystal.model.DataSource.toString : $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_")
crystal.model.DataSource.toString : $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_") >>>>>>>> crystal.model.DataSource.toString : $r5 = virtualinvoke r0.<crystal.model.DataSource: crystal.model.DataSource$RepoKind getKind()>()
crystal.model.DataSource.toString : $r5 = virtualinvoke r0.<crystal.model.DataSource: crystal.model.DataSource$RepoKind getKind()>() >>>>>>>> crystal.model.DataSource.toString : $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5)
crystal.model.DataSource.toString : $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5) >>>>>>>> crystal.model.DataSource.toString : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_")
crystal.model.DataSource.toString : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_") >>>>>>>> crystal.model.DataSource.toString : $r8 = virtualinvoke r0.<crystal.model.DataSource: java.lang.String getCloneString()>()
crystal.model.DataSource.toString : $r8 = virtualinvoke r0.<crystal.model.DataSource: java.lang.String getCloneString()>() >>>>>>>> crystal.model.DataSource.getCloneString : $r1 = r0.<crystal.model.DataSource: java.lang.String _cloneString>
crystal.model.DataSource.getCloneString : $r1 = r0.<crystal.model.DataSource: java.lang.String _cloneString> >>>>>>>> crystal.model.DataSource.getCloneString : return $r1
crystal.model.DataSource.getCloneString : return $r1 >>>>>>>> crystal.model.DataSource.toString : $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)
crystal.model.DataSource.toString : $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) >>>>>>>> crystal.model.DataSource.toString : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.model.DataSource.toString : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.model.DataSource.toString : return $r10
crystal.model.DataSource.toString : return $r10 >>>>>>>> crystal.client.ConflictDaemon.calculateRelationship : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ... )")
crystal.client.ConflictDaemon.calculateRelationship : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ... )") >>>>>>>> crystal.client.ConflictDaemon.calculateRelationship : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.client.ConflictDaemon.calculateRelationship : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.client.ConflictDaemon.calculateRelationship : virtualinvoke $r9.<org.apache.log4j.Logger: void trace(java.lang.Object)>($r13)
crystal.client.ConflictDaemon.calculateRelationship : virtualinvoke $r9.<org.apache.log4j.Logger: void trace(java.lang.Object)>($r13) >>>>>>>> crystal.client.ConflictDaemon.calculateRelationship : $r14 = r0.<crystal.client.ConflictDaemon: java.util.Hashtable _relationshipMap>
crystal.client.ConflictDaemon.calculateRelationship : $r14 = r0.<crystal.client.ConflictDaemon: java.util.Hashtable _relationshipMap> >>>>>>>> crystal.client.ConflictDaemon.calculateRelationship : $r15 = virtualinvoke $r14.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1)
crystal.client.ConflictDaemon.calculateRelationship : $r15 = virtualinvoke $r14.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> crystal.client.ConflictDaemon.calculateRelationship : $r16 = (crystal.model.Relationship) $r15
crystal.client.ConflictDaemon.calculateRelationship : $r16 = (crystal.model.Relationship) $r15 >>>>>>>> crystal.client.ConflictDaemon.calculateRelationship : r5 = virtualinvoke $r16.<crystal.model.Relationship: java.lang.String getName()>()
crystal.client.ConflictDaemon.calculateRelationship : r5 = virtualinvoke $r16.<crystal.model.Relationship: java.lang.String getName()>() >>>>>>>> crystal.client.ConflictDaemon.calculateRelationship : r64 = $r63
crystal.client.ConflictDaemon.calculateRelationship : r64 = $r63 >>>>>>>> crystal.client.ConflictDaemon.calculateRelationship : $r65 = r0.<crystal.client.ConflictDaemon: org.apache.log4j.Logger _log>
crystal.client.ConflictDaemon.calculateRelationship : $r65 = r0.<crystal.client.ConflictDaemon: org.apache.log4j.Logger _log> >>>>>>>> crystal.client.ConflictDaemon.calculateRelationship : $r66 = new java.lang.StringBuilder
crystal.client.ConflictDaemon.calculateRelationship : $r66 = new java.lang.StringBuilder >>>>>>>> crystal.client.ConflictDaemon.calculateRelationship : specialinvoke $r66.<java.lang.StringBuilder: void <init>(java.lang.String)>("Runtime Exception caught while getting state for: ")
crystal.client.ConflictDaemon.calculateRelationship : specialinvoke $r66.<java.lang.StringBuilder: void <init>(java.lang.String)>("Runtime Exception caught while getting state for: ") >>>>>>>> crystal.client.ConflictDaemon.calculateRelationship : $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1)
crystal.client.ConflictDaemon.calculateRelationship : $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) >>>>>>>> crystal.client.ConflictDaemon.calculateRelationship : $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n")
crystal.client.ConflictDaemon.calculateRelationship : $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n") >>>>>>>> crystal.client.ConflictDaemon.calculateRelationship : $r69 = virtualinvoke r64.<java.lang.RuntimeException: java.lang.String getMessage()>()
crystal.client.ConflictDaemon.calculateRelationship : $r69 = virtualinvoke r64.<java.lang.RuntimeException: java.lang.String getMessage()>() >>>>>>>> crystal.client.ConflictDaemon.calculateRelationship : $r70 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r69)
crystal.client.ConflictDaemon.calculateRelationship : $r70 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r69) >>>>>>>> crystal.client.ConflictDaemon.calculateRelationship : $r71 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.client.ConflictDaemon.calculateRelationship : $r71 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.client.ConflictDaemon.calculateRelationship : virtualinvoke $r65.<org.apache.log4j.Logger: void error(java.lang.Object)>($r71)
crystal.client.ConflictDaemon.calculateRelationship : virtualinvoke $r65.<org.apache.log4j.Logger: void error(java.lang.Object)>($r71) >>>>>>>> crystal.client.ConflictDaemon.calculateRelationship : virtualinvoke r64.<java.lang.RuntimeException: void printStackTrace()>()
crystal.client.ConflictDaemon.calculateRelationship : virtualinvoke r64.<java.lang.RuntimeException: void printStackTrace()>() >>>>>>>> crystal.client.ConflictDaemon.calculateRelationship : goto [?= return null]
crystal.client.ConflictDaemon.calculateRelationship : goto [?= return null] >>>>>>>> crystal.client.ConflictDaemon.calculateRelationship : return null
crystal.client.ConflictDaemon.calculateRelationship : return null >>>>>>>> crystal.model.DataSource.equals : if r1 == null
crystal.model.DataSource.equals : if r1 == null >>>>>>>> crystal.model.DataSource.equals : $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()
crystal.model.DataSource.equals : $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> crystal.model.DataSource.equals : $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
crystal.model.DataSource.equals : $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> crystal.model.DataSource.equals : if $r3 != $r4
crystal.model.DataSource.equals : if $r3 != $r4 >>>>>>>> crystal.model.DataSource.equals : r2 = (crystal.model.DataSource) r1
crystal.model.DataSource.equals : r2 = (crystal.model.DataSource) r1 >>>>>>>> crystal.model.DataSource.equals : $r5 = r0.<crystal.model.DataSource: java.lang.String _shortName>
crystal.model.DataSource.equals : $r5 = r0.<crystal.model.DataSource: java.lang.String _shortName> >>>>>>>> crystal.model.DataSource.equals : if $r5 != null
crystal.model.DataSource.equals : if $r5 != null >>>>>>>> crystal.model.DataSource.equals : $r7 = r0.<crystal.model.DataSource: java.lang.String _shortName>
crystal.model.DataSource.equals : $r7 = r0.<crystal.model.DataSource: java.lang.String _shortName> >>>>>>>> crystal.model.DataSource.equals : $r8 = r2.<crystal.model.DataSource: java.lang.String _shortName>
crystal.model.DataSource.equals : $r8 = r2.<crystal.model.DataSource: java.lang.String _shortName> >>>>>>>> crystal.model.DataSource.equals : $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8)
crystal.model.DataSource.equals : $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8) >>>>>>>> crystal.model.DataSource.equals : if $z0 != 0
crystal.model.DataSource.equals : if $z0 != 0 >>>>>>>> crystal.model.DataSource.equals : return 1
