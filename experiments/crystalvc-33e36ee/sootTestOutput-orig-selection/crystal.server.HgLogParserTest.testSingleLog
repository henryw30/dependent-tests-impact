crystal.server.TestHgStateChecker.ensureEnvironment : r0 = <crystal.server.TestConstants: java.lang.String PROJECT_PATH> >>>>>>>> crystal.client.ConflictSystemTray.startLogging : $r0 = <crystal.Constants: org.apache.log4j.Level LOG_LEVEL>
crystal.client.ConflictSystemTray.startLogging : $r0 = <crystal.Constants: org.apache.log4j.Level LOG_LEVEL> >>>>>>>> crystal.client.ConflictSystemTray.startLogging : $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.home")
crystal.client.ConflictSystemTray.startLogging : $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.home") >>>>>>>> crystal.client.ConflictSystemTray.startLogging : staticinvoke <crystal.util.LSMRLogger: void startLog4J(boolean,boolean,org.apache.log4j.Level,java.lang.String,java.lang.String)>(1, 1, $r0, $r1, ".conflictClientLog")
crystal.client.ConflictSystemTray.startLogging : staticinvoke <crystal.util.LSMRLogger: void startLog4J(boolean,boolean,org.apache.log4j.Level,java.lang.String,java.lang.String)>(1, 1, $r0, $r1, ".conflictClientLog") >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r3 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>()
crystal.util.LSMRLogger.startLog4J : $r3 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : virtualinvoke $r3.<org.apache.log4j.Logger: void removeAllAppenders()>()
crystal.util.LSMRLogger.startLog4J : virtualinvoke $r3.<org.apache.log4j.Logger: void removeAllAppenders()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : staticinvoke <org.apache.log4j.BasicConfigurator: void configure()>()
crystal.util.LSMRLogger.startLog4J : staticinvoke <org.apache.log4j.BasicConfigurator: void configure()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r10 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>()
crystal.util.LSMRLogger.startLog4J : $r10 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r11 = virtualinvoke $r10.<org.apache.log4j.Logger: java.util.Enumeration getAllAppenders()>()
crystal.util.LSMRLogger.startLog4J : $r11 = virtualinvoke $r10.<org.apache.log4j.Logger: java.util.Enumeration getAllAppenders()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r12 = interfaceinvoke $r11.<java.util.Enumeration: java.lang.Object nextElement()>()
crystal.util.LSMRLogger.startLog4J : $r12 = interfaceinvoke $r11.<java.util.Enumeration: java.lang.Object nextElement()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : r4 = (org.apache.log4j.ConsoleAppender) $r12
crystal.util.LSMRLogger.startLog4J : r4 = (org.apache.log4j.ConsoleAppender) $r12 >>>>>>>> crystal.util.LSMRLogger.startLog4J : if z0 == 0
crystal.util.LSMRLogger.startLog4J : if z0 == 0 >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r5 = <org.apache.log4j.Level: org.apache.log4j.Level ERROR>
crystal.util.LSMRLogger.startLog4J : $r5 = <org.apache.log4j.Level: org.apache.log4j.Level ERROR> >>>>>>>> crystal.util.LSMRLogger.startLog4J : virtualinvoke r4.<org.apache.log4j.ConsoleAppender: void setThreshold(org.apache.log4j.Priority)>($r5)
crystal.util.LSMRLogger.startLog4J : virtualinvoke r4.<org.apache.log4j.ConsoleAppender: void setThreshold(org.apache.log4j.Priority)>($r5) >>>>>>>> crystal.util.LSMRLogger.startLog4J : if r1 == null
crystal.util.LSMRLogger.startLog4J : if r1 == null >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r13 = <java.io.File: java.lang.String separator>
crystal.util.LSMRLogger.startLog4J : $r13 = <java.io.File: java.lang.String separator> >>>>>>>> crystal.util.LSMRLogger.startLog4J : $z2 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>($r13)
crystal.util.LSMRLogger.startLog4J : $z2 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>($r13) >>>>>>>> crystal.util.LSMRLogger.startLog4J : if $z2 != 0
crystal.util.LSMRLogger.startLog4J : if $z2 != 0 >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r14 = new java.lang.StringBuilder
crystal.util.LSMRLogger.startLog4J : $r14 = new java.lang.StringBuilder >>>>>>>> crystal.util.LSMRLogger.startLog4J : specialinvoke $r14.<java.lang.StringBuilder: void <init>()>()
crystal.util.LSMRLogger.startLog4J : specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
crystal.util.LSMRLogger.startLog4J : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r16 = <java.io.File: java.lang.String separator>
crystal.util.LSMRLogger.startLog4J : $r16 = <java.io.File: java.lang.String separator> >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16)
crystal.util.LSMRLogger.startLog4J : $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) >>>>>>>> crystal.util.LSMRLogger.startLog4J : r1 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.util.LSMRLogger.startLog4J : r1 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r18 = new java.io.File
crystal.util.LSMRLogger.startLog4J : $r18 = new java.io.File >>>>>>>> crystal.util.LSMRLogger.startLog4J : specialinvoke $r18.<java.io.File: void <init>(java.lang.String)>(r1)
crystal.util.LSMRLogger.startLog4J : specialinvoke $r18.<java.io.File: void <init>(java.lang.String)>(r1) >>>>>>>> crystal.util.LSMRLogger.startLog4J : r6 = $r18
crystal.util.LSMRLogger.startLog4J : r6 = $r18 >>>>>>>> crystal.util.LSMRLogger.startLog4J : $z3 = virtualinvoke r6.<java.io.File: boolean exists()>()
crystal.util.LSMRLogger.startLog4J : $z3 = virtualinvoke r6.<java.io.File: boolean exists()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : if $z3 != 0
crystal.util.LSMRLogger.startLog4J : if $z3 != 0 >>>>>>>> crystal.util.LSMRLogger.startLog4J : if r2 != null
crystal.util.LSMRLogger.startLog4J : if r2 != null >>>>>>>> crystal.util.LSMRLogger.startLog4J : r25 = null
crystal.util.LSMRLogger.startLog4J : r25 = null >>>>>>>> crystal.util.LSMRLogger.startLog4J : n0 = null
crystal.util.LSMRLogger.startLog4J : n0 = null >>>>>>>> crystal.util.LSMRLogger.startLog4J : if z1 == 0
crystal.util.LSMRLogger.startLog4J : if z1 == 0 >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r26 = new org.apache.log4j.xml.XMLLayout
crystal.util.LSMRLogger.startLog4J : $r26 = new org.apache.log4j.xml.XMLLayout >>>>>>>> crystal.util.LSMRLogger.startLog4J : specialinvoke $r26.<org.apache.log4j.xml.XMLLayout: void <init>()>()
crystal.util.LSMRLogger.startLog4J : specialinvoke $r26.<org.apache.log4j.xml.XMLLayout: void <init>()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : r27 = $r26
crystal.util.LSMRLogger.startLog4J : r27 = $r26 >>>>>>>> crystal.util.LSMRLogger.startLog4J : goto [?= (branch)]
crystal.util.LSMRLogger.startLog4J : goto [?= (branch)] >>>>>>>> crystal.util.LSMRLogger.startLog4J : if r4 == null
crystal.util.LSMRLogger.startLog4J : if r4 == null >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r29 = new org.apache.log4j.PatternLayout
crystal.util.LSMRLogger.startLog4J : $r29 = new org.apache.log4j.PatternLayout >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r7 = <crystal.util.LSMRLogger: java.lang.String LOG_PATTERN_VERBOSE>
crystal.util.LSMRLogger.startLog4J : $r7 = <crystal.util.LSMRLogger: java.lang.String LOG_PATTERN_VERBOSE> >>>>>>>> crystal.util.LSMRLogger.startLog4J : specialinvoke $r29.<org.apache.log4j.PatternLayout: void <init>(java.lang.String)>($r7)
crystal.util.LSMRLogger.startLog4J : specialinvoke $r29.<org.apache.log4j.PatternLayout: void <init>(java.lang.String)>($r7) >>>>>>>> crystal.util.LSMRLogger.startLog4J : virtualinvoke r4.<org.apache.log4j.ConsoleAppender: void setLayout(org.apache.log4j.Layout)>($r29)
crystal.util.LSMRLogger.startLog4J : virtualinvoke r4.<org.apache.log4j.ConsoleAppender: void setLayout(org.apache.log4j.Layout)>($r29) >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r30 = new org.apache.log4j.RollingFileAppender
crystal.util.LSMRLogger.startLog4J : $r30 = new org.apache.log4j.RollingFileAppender >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r31 = new java.lang.StringBuilder
crystal.util.LSMRLogger.startLog4J : $r31 = new java.lang.StringBuilder >>>>>>>> crystal.util.LSMRLogger.startLog4J : specialinvoke $r31.<java.lang.StringBuilder: void <init>()>()
crystal.util.LSMRLogger.startLog4J : specialinvoke $r31.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
crystal.util.LSMRLogger.startLog4J : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
crystal.util.LSMRLogger.startLog4J : $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".xml")
crystal.util.LSMRLogger.startLog4J : $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".xml") >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.util.LSMRLogger.startLog4J : $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : specialinvoke $r30.<org.apache.log4j.RollingFileAppender: void <init>(org.apache.log4j.Layout,java.lang.String)>(r27, $r35)
crystal.util.LSMRLogger.startLog4J : specialinvoke $r30.<org.apache.log4j.RollingFileAppender: void <init>(org.apache.log4j.Layout,java.lang.String)>(r27, $r35) >>>>>>>> crystal.util.LSMRLogger.startLog4J : r25 = $r30
crystal.util.LSMRLogger.startLog4J : r25 = $r30 >>>>>>>> crystal.util.LSMRLogger.startLog4J : virtualinvoke r25.<org.apache.log4j.RollingFileAppender: void setMaxBackupIndex(int)>(10)
crystal.util.LSMRLogger.startLog4J : virtualinvoke r25.<org.apache.log4j.RollingFileAppender: void setMaxBackupIndex(int)>(10) >>>>>>>> crystal.util.LSMRLogger.startLog4J : virtualinvoke r25.<org.apache.log4j.RollingFileAppender: void setMaxFileSize(java.lang.String)>("10MB")
crystal.util.LSMRLogger.startLog4J : virtualinvoke r25.<org.apache.log4j.RollingFileAppender: void setMaxFileSize(java.lang.String)>("10MB") >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r44 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>()
crystal.util.LSMRLogger.startLog4J : $r44 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : virtualinvoke $r44.<org.apache.log4j.Logger: void addAppender(org.apache.log4j.Appender)>(r25)
crystal.util.LSMRLogger.startLog4J : virtualinvoke $r44.<org.apache.log4j.Logger: void addAppender(org.apache.log4j.Appender)>(r25) >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r45 = new org.apache.log4j.xml.XMLLayout
crystal.util.LSMRLogger.startLog4J : $r45 = new org.apache.log4j.xml.XMLLayout >>>>>>>> crystal.util.LSMRLogger.startLog4J : specialinvoke $r45.<org.apache.log4j.xml.XMLLayout: void <init>()>()
crystal.util.LSMRLogger.startLog4J : specialinvoke $r45.<org.apache.log4j.xml.XMLLayout: void <init>()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : r8 = $r45
crystal.util.LSMRLogger.startLog4J : r8 = $r45 >>>>>>>> crystal.util.LSMRLogger.startLog4J : virtualinvoke r8.<org.apache.log4j.xml.XMLLayout: void setLocationInfo(boolean)>(1)
crystal.util.LSMRLogger.startLog4J : virtualinvoke r8.<org.apache.log4j.xml.XMLLayout: void setLocationInfo(boolean)>(1) >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r46 = new org.apache.log4j.RollingFileAppender
crystal.util.LSMRLogger.startLog4J : $r46 = new org.apache.log4j.RollingFileAppender >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r47 = new java.lang.StringBuilder
crystal.util.LSMRLogger.startLog4J : $r47 = new java.lang.StringBuilder >>>>>>>> crystal.util.LSMRLogger.startLog4J : specialinvoke $r47.<java.lang.StringBuilder: void <init>()>()
crystal.util.LSMRLogger.startLog4J : specialinvoke $r47.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
crystal.util.LSMRLogger.startLog4J : $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
crystal.util.LSMRLogger.startLog4J : $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".xml")
crystal.util.LSMRLogger.startLog4J : $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".xml") >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.util.LSMRLogger.startLog4J : $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : specialinvoke $r46.<org.apache.log4j.RollingFileAppender: void <init>(org.apache.log4j.Layout,java.lang.String)>(r8, $r51)
crystal.util.LSMRLogger.startLog4J : specialinvoke $r46.<org.apache.log4j.RollingFileAppender: void <init>(org.apache.log4j.Layout,java.lang.String)>(r8, $r51) >>>>>>>> crystal.util.LSMRLogger.startLog4J : r52 = $r46
crystal.util.LSMRLogger.startLog4J : r52 = $r46 >>>>>>>> crystal.util.LSMRLogger.startLog4J : virtualinvoke r52.<org.apache.log4j.RollingFileAppender: void setMaxBackupIndex(int)>(10)
crystal.util.LSMRLogger.startLog4J : virtualinvoke r52.<org.apache.log4j.RollingFileAppender: void setMaxBackupIndex(int)>(10) >>>>>>>> crystal.util.LSMRLogger.startLog4J : virtualinvoke r52.<org.apache.log4j.RollingFileAppender: void setMaxFileSize(java.lang.String)>("10MB")
crystal.util.LSMRLogger.startLog4J : virtualinvoke r52.<org.apache.log4j.RollingFileAppender: void setMaxFileSize(java.lang.String)>("10MB") >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r53 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>()
crystal.util.LSMRLogger.startLog4J : $r53 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : virtualinvoke $r53.<org.apache.log4j.Logger: void addAppender(org.apache.log4j.Appender)>(r52)
crystal.util.LSMRLogger.startLog4J : virtualinvoke $r53.<org.apache.log4j.Logger: void addAppender(org.apache.log4j.Appender)>(r52) >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r54 = new org.apache.log4j.PatternLayout
crystal.util.LSMRLogger.startLog4J : $r54 = new org.apache.log4j.PatternLayout >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r55 = <crystal.util.LSMRLogger: java.lang.String LOG_PATTERN_VERBOSE>
crystal.util.LSMRLogger.startLog4J : $r55 = <crystal.util.LSMRLogger: java.lang.String LOG_PATTERN_VERBOSE> >>>>>>>> crystal.util.LSMRLogger.startLog4J : specialinvoke $r54.<org.apache.log4j.PatternLayout: void <init>(java.lang.String)>($r55)
crystal.util.LSMRLogger.startLog4J : specialinvoke $r54.<org.apache.log4j.PatternLayout: void <init>(java.lang.String)>($r55) >>>>>>>> crystal.util.LSMRLogger.startLog4J : r9 = $r54
crystal.util.LSMRLogger.startLog4J : r9 = $r54 >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r56 = new org.apache.log4j.RollingFileAppender
crystal.util.LSMRLogger.startLog4J : $r56 = new org.apache.log4j.RollingFileAppender >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r57 = new java.lang.StringBuilder
crystal.util.LSMRLogger.startLog4J : $r57 = new java.lang.StringBuilder >>>>>>>> crystal.util.LSMRLogger.startLog4J : specialinvoke $r57.<java.lang.StringBuilder: void <init>()>()
crystal.util.LSMRLogger.startLog4J : specialinvoke $r57.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
crystal.util.LSMRLogger.startLog4J : $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
crystal.util.LSMRLogger.startLog4J : $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".log")
crystal.util.LSMRLogger.startLog4J : $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".log") >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.util.LSMRLogger.startLog4J : $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : specialinvoke $r56.<org.apache.log4j.RollingFileAppender: void <init>(org.apache.log4j.Layout,java.lang.String)>(r9, $r61)
crystal.util.LSMRLogger.startLog4J : specialinvoke $r56.<org.apache.log4j.RollingFileAppender: void <init>(org.apache.log4j.Layout,java.lang.String)>(r9, $r61) >>>>>>>> crystal.util.LSMRLogger.startLog4J : r62 = $r56
crystal.util.LSMRLogger.startLog4J : r62 = $r56 >>>>>>>> crystal.util.LSMRLogger.startLog4J : virtualinvoke r62.<org.apache.log4j.RollingFileAppender: void setMaxBackupIndex(int)>(10)
crystal.util.LSMRLogger.startLog4J : virtualinvoke r62.<org.apache.log4j.RollingFileAppender: void setMaxBackupIndex(int)>(10) >>>>>>>> crystal.util.LSMRLogger.startLog4J : virtualinvoke r62.<org.apache.log4j.RollingFileAppender: void setMaxFileSize(java.lang.String)>("10MB")
crystal.util.LSMRLogger.startLog4J : virtualinvoke r62.<org.apache.log4j.RollingFileAppender: void setMaxFileSize(java.lang.String)>("10MB") >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r63 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>()
crystal.util.LSMRLogger.startLog4J : $r63 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : virtualinvoke $r63.<org.apache.log4j.Logger: void addAppender(org.apache.log4j.Appender)>(r62)
crystal.util.LSMRLogger.startLog4J : virtualinvoke $r63.<org.apache.log4j.Logger: void addAppender(org.apache.log4j.Appender)>(r62) >>>>>>>> crystal.util.LSMRLogger.startLog4J : goto [?= $r66 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>()]
crystal.util.LSMRLogger.startLog4J : goto [?= $r66 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>()] >>>>>>>> crystal.util.LSMRLogger.startLog4J : $r66 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>()
crystal.util.LSMRLogger.startLog4J : $r66 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getRootLogger()>() >>>>>>>> crystal.util.LSMRLogger.startLog4J : virtualinvoke $r66.<org.apache.log4j.Logger: void setLevel(org.apache.log4j.Level)>(r0)
crystal.util.LSMRLogger.startLog4J : virtualinvoke $r66.<org.apache.log4j.Logger: void setLevel(org.apache.log4j.Level)>(r0) >>>>>>>> crystal.server.TestHgStateChecker.cleanEnvironment : r0 = <crystal.server.TestConstants: java.lang.String PROJECT_PATH>
crystal.server.TestHgStateChecker.cleanEnvironment : r0 = <crystal.server.TestConstants: java.lang.String PROJECT_PATH> >>>>>>>> crystal.server.HgLogParser.parseLog : $r1 = <crystal.server.HgLogParser: java.util.Map hgCheckpoint>
crystal.server.HgLogParser.parseLog : $r1 = <crystal.server.HgLogParser: java.util.Map hgCheckpoint> >>>>>>>> crystal.server.HgLogParser.parseLog : $r2 = staticinvoke <crystal.server.HgLogParser: java.util.HashMap abstractParseLog(java.lang.String,java.util.Map)>(r0, $r1)
crystal.server.HgLogParser.parseLog : $r2 = staticinvoke <crystal.server.HgLogParser: java.util.HashMap abstractParseLog(java.lang.String,java.util.Map)>(r0, $r1) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : staticinvoke <crystal.util.ValidInputChecker: void checkNullInput(java.lang.Object)>(r0)
crystal.server.AbstractLogParser.abstractParseLog : staticinvoke <crystal.util.ValidInputChecker: void checkNullInput(java.lang.Object)>(r0) >>>>>>>> crystal.util.ValidInputChecker.checkNullInput : if r0 != null
crystal.util.ValidInputChecker.checkNullInput : if r0 != null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r15 = new java.util.HashMap
crystal.server.AbstractLogParser.abstractParseLog : $r15 = new java.util.HashMap >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r15.<java.util.HashMap: void <init>()>()
crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r15.<java.util.HashMap: void <init>()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r2 = $r15
crystal.server.AbstractLogParser.abstractParseLog : r2 = $r15 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r16 = new java.lang.StringBuilder
crystal.server.AbstractLogParser.abstractParseLog : $r16 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r16.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r16.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n")
crystal.server.AbstractLogParser.abstractParseLog : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n") >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r3 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels CHANGESET>
crystal.server.AbstractLogParser.abstractParseLog : $r3 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels CHANGESET> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r18 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3)
crystal.server.AbstractLogParser.abstractParseLog : $r18 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r19 = (java.lang.String) $r18
crystal.server.AbstractLogParser.abstractParseLog : $r19 = (java.lang.String) $r18 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19)
crystal.server.AbstractLogParser.abstractParseLog : $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractLogParser.abstractParseLog : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r4 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>($r21)
crystal.server.AbstractLogParser.abstractParseLog : r4 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>($r21) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : i0 = lengthof r4
crystal.server.AbstractLogParser.abstractParseLog : i0 = lengthof r4 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : i1 = 0
crystal.server.AbstractLogParser.abstractParseLog : i1 = 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if i1 >= i0
crystal.server.AbstractLogParser.abstractParseLog : if i1 >= i0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r5 = r4[i1]
crystal.server.AbstractLogParser.abstractParseLog : r5 = r4[i1] >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r22 = virtualinvoke r5.<java.lang.String: java.lang.String trim()>()
crystal.server.AbstractLogParser.abstractParseLog : $r22 = virtualinvoke r5.<java.lang.String: java.lang.String trim()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $z0 = virtualinvoke $r22.<java.lang.String: boolean isEmpty()>()
crystal.server.AbstractLogParser.abstractParseLog : $z0 = virtualinvoke $r22.<java.lang.String: boolean isEmpty()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $z0 != 0
crystal.server.AbstractLogParser.abstractParseLog : if $z0 != 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r23 = new java.lang.StringBuilder
crystal.server.AbstractLogParser.abstractParseLog : $r23 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r23.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r23.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r24 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels CHANGESET>
crystal.server.AbstractLogParser.abstractParseLog : $r24 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels CHANGESET> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r25 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r24)
crystal.server.AbstractLogParser.abstractParseLog : $r25 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r24) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r26 = (java.lang.String) $r25
crystal.server.AbstractLogParser.abstractParseLog : $r26 = (java.lang.String) $r25 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r27 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26)
crystal.server.AbstractLogParser.abstractParseLog : $r27 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5)
crystal.server.AbstractLogParser.abstractParseLog : $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractLogParser.abstractParseLog : r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r30 = new java.util.StringTokenizer
crystal.server.AbstractLogParser.abstractParseLog : $r30 = new java.util.StringTokenizer >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r30.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r29, "\n")
crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r30.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r29, "\n") >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r6 = $r30
crystal.server.AbstractLogParser.abstractParseLog : r6 = $r30 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r7 = null
crystal.server.AbstractLogParser.abstractParseLog : r7 = null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r8 = null
crystal.server.AbstractLogParser.abstractParseLog : r8 = null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r9 = null
crystal.server.AbstractLogParser.abstractParseLog : r9 = null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r10 = null
crystal.server.AbstractLogParser.abstractParseLog : r10 = null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r31 = new java.util.ArrayList
crystal.server.AbstractLogParser.abstractParseLog : $r31 = new java.util.ArrayList >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r31.<java.util.ArrayList: void <init>()>()
crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r31.<java.util.ArrayList: void <init>()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r11 = $r31
crystal.server.AbstractLogParser.abstractParseLog : r11 = $r31 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $z1 = virtualinvoke r6.<java.util.StringTokenizer: boolean hasMoreTokens()>()
crystal.server.AbstractLogParser.abstractParseLog : $z1 = virtualinvoke r6.<java.util.StringTokenizer: boolean hasMoreTokens()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $z1 == 0
crystal.server.AbstractLogParser.abstractParseLog : if $z1 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r32 = virtualinvoke r6.<java.util.StringTokenizer: java.lang.String nextToken()>()
crystal.server.AbstractLogParser.abstractParseLog : $r32 = virtualinvoke r6.<java.util.StringTokenizer: java.lang.String nextToken()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r12 = virtualinvoke $r32.<java.lang.String: java.lang.String trim()>()
crystal.server.AbstractLogParser.abstractParseLog : r12 = virtualinvoke $r32.<java.lang.String: java.lang.String trim()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r33 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels CHANGESET>
crystal.server.AbstractLogParser.abstractParseLog : $r33 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels CHANGESET> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r34 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r33)
crystal.server.AbstractLogParser.abstractParseLog : $r34 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r33) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r35 = (java.lang.String) $r34
crystal.server.AbstractLogParser.abstractParseLog : $r35 = (java.lang.String) $r34 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $z2 = virtualinvoke r12.<java.lang.String: boolean startsWith(java.lang.String)>($r35)
crystal.server.AbstractLogParser.abstractParseLog : $z2 = virtualinvoke r12.<java.lang.String: boolean startsWith(java.lang.String)>($r35) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $z2 == 0
crystal.server.AbstractLogParser.abstractParseLog : if $z2 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r36 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r12)
crystal.server.AbstractLogParser.abstractParseLog : $r36 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r12) >>>>>>>> crystal.server.AbstractLogParser.clipFront : $r1 = new java.util.StringTokenizer
crystal.server.AbstractLogParser.clipFront : $r1 = new java.util.StringTokenizer >>>>>>>> crystal.server.AbstractLogParser.clipFront : specialinvoke $r1.<java.util.StringTokenizer: void <init>(java.lang.String)>(r0)
crystal.server.AbstractLogParser.clipFront : specialinvoke $r1.<java.util.StringTokenizer: void <init>(java.lang.String)>(r0) >>>>>>>> crystal.server.AbstractLogParser.clipFront : r2 = $r1
crystal.server.AbstractLogParser.clipFront : r2 = $r1 >>>>>>>> crystal.server.AbstractLogParser.clipFront : virtualinvoke r2.<java.util.StringTokenizer: java.lang.String nextToken()>()
crystal.server.AbstractLogParser.clipFront : virtualinvoke r2.<java.util.StringTokenizer: java.lang.String nextToken()>() >>>>>>>> crystal.server.AbstractLogParser.clipFront : r3 = ""
crystal.server.AbstractLogParser.clipFront : r3 = "" >>>>>>>> crystal.server.AbstractLogParser.clipFront : $z0 = virtualinvoke r2.<java.util.StringTokenizer: boolean hasMoreTokens()>()
crystal.server.AbstractLogParser.clipFront : $z0 = virtualinvoke r2.<java.util.StringTokenizer: boolean hasMoreTokens()>() >>>>>>>> crystal.server.AbstractLogParser.clipFront : if $z0 == 0
crystal.server.AbstractLogParser.clipFront : if $z0 == 0 >>>>>>>> crystal.server.AbstractLogParser.clipFront : $r5 = new java.lang.StringBuilder
crystal.server.AbstractLogParser.clipFront : $r5 = new java.lang.StringBuilder >>>>>>>> crystal.server.AbstractLogParser.clipFront : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()
crystal.server.AbstractLogParser.clipFront : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() >>>>>>>> crystal.server.AbstractLogParser.clipFront : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3)
crystal.server.AbstractLogParser.clipFront : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) >>>>>>>> crystal.server.AbstractLogParser.clipFront : $r7 = virtualinvoke r2.<java.util.StringTokenizer: java.lang.String nextToken()>()
crystal.server.AbstractLogParser.clipFront : $r7 = virtualinvoke r2.<java.util.StringTokenizer: java.lang.String nextToken()>() >>>>>>>> crystal.server.AbstractLogParser.clipFront : $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)
crystal.server.AbstractLogParser.clipFront : $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) >>>>>>>> crystal.server.AbstractLogParser.clipFront : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")
crystal.server.AbstractLogParser.clipFront : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") >>>>>>>> crystal.server.AbstractLogParser.clipFront : r3 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()
crystal.server.AbstractLogParser.clipFront : r3 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> crystal.server.AbstractLogParser.clipFront : goto [?= $z0 = virtualinvoke r2.<java.util.StringTokenizer: boolean hasMoreTokens()>()]
crystal.server.AbstractLogParser.clipFront : goto [?= $z0 = virtualinvoke r2.<java.util.StringTokenizer: boolean hasMoreTokens()>()] >>>>>>>> crystal.server.AbstractLogParser.clipFront : $r10 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>()
crystal.server.AbstractLogParser.clipFront : $r10 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>() >>>>>>>> crystal.server.AbstractLogParser.clipFront : return $r10
crystal.server.AbstractLogParser.clipFront : return $r10 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $z3 = virtualinvoke $r36.<java.lang.String: boolean contains(java.lang.CharSequence)>(":")
crystal.server.AbstractLogParser.abstractParseLog : $z3 = virtualinvoke $r36.<java.lang.String: boolean contains(java.lang.CharSequence)>(":") >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $z3 == 0
crystal.server.AbstractLogParser.abstractParseLog : if $z3 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r37 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r12)
crystal.server.AbstractLogParser.abstractParseLog : $r37 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r12) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r38 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r12)
crystal.server.AbstractLogParser.abstractParseLog : $r38 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r12) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $i2 = virtualinvoke $r38.<java.lang.String: int indexOf(java.lang.String)>(":")
crystal.server.AbstractLogParser.abstractParseLog : $i2 = virtualinvoke $r38.<java.lang.String: int indexOf(java.lang.String)>(":") >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $i3 = $i2 + 1
crystal.server.AbstractLogParser.abstractParseLog : $i3 = $i2 + 1 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r7 = virtualinvoke $r37.<java.lang.String: java.lang.String substring(int)>($i3)
crystal.server.AbstractLogParser.abstractParseLog : r7 = virtualinvoke $r37.<java.lang.String: java.lang.String substring(int)>($i3) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : goto [?= (branch)]
crystal.server.AbstractLogParser.abstractParseLog : goto [?= (branch)] >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : goto [?= $z1 = virtualinvoke r6.<java.util.StringTokenizer: boolean hasMoreTokens()>()]
crystal.server.AbstractLogParser.abstractParseLog : goto [?= $z1 = virtualinvoke r6.<java.util.StringTokenizer: boolean hasMoreTokens()>()] >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r39 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels TAG>
crystal.server.AbstractLogParser.abstractParseLog : $r39 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels TAG> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r40 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r39)
crystal.server.AbstractLogParser.abstractParseLog : $r40 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r39) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $r40 == null
crystal.server.AbstractLogParser.abstractParseLog : if $r40 == null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r41 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels TAG>
crystal.server.AbstractLogParser.abstractParseLog : $r41 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels TAG> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r42 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r41)
crystal.server.AbstractLogParser.abstractParseLog : $r42 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r41) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r43 = (java.lang.String) $r42
crystal.server.AbstractLogParser.abstractParseLog : $r43 = (java.lang.String) $r42 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $z4 = virtualinvoke r12.<java.lang.String: boolean startsWith(java.lang.String)>($r43)
crystal.server.AbstractLogParser.abstractParseLog : $z4 = virtualinvoke r12.<java.lang.String: boolean startsWith(java.lang.String)>($r43) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $z4 == 0
crystal.server.AbstractLogParser.abstractParseLog : if $z4 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r44 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels PARENT>
crystal.server.AbstractLogParser.abstractParseLog : $r44 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels PARENT> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r45 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r44)
crystal.server.AbstractLogParser.abstractParseLog : $r45 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r44) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $r45 == null
crystal.server.AbstractLogParser.abstractParseLog : if $r45 == null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r46 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels PARENT>
crystal.server.AbstractLogParser.abstractParseLog : $r46 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels PARENT> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r47 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r46)
crystal.server.AbstractLogParser.abstractParseLog : $r47 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r46) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r48 = (java.lang.String) $r47
crystal.server.AbstractLogParser.abstractParseLog : $r48 = (java.lang.String) $r47 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $z5 = virtualinvoke r12.<java.lang.String: boolean startsWith(java.lang.String)>($r48)
crystal.server.AbstractLogParser.abstractParseLog : $z5 = virtualinvoke r12.<java.lang.String: boolean startsWith(java.lang.String)>($r48) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $z5 == 0
crystal.server.AbstractLogParser.abstractParseLog : if $z5 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r52 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels USER>
crystal.server.AbstractLogParser.abstractParseLog : $r52 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels USER> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r53 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r52)
crystal.server.AbstractLogParser.abstractParseLog : $r53 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r52) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $r53 == null
crystal.server.AbstractLogParser.abstractParseLog : if $r53 == null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r54 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels USER>
crystal.server.AbstractLogParser.abstractParseLog : $r54 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels USER> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r55 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r54)
crystal.server.AbstractLogParser.abstractParseLog : $r55 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r54) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r56 = (java.lang.String) $r55
crystal.server.AbstractLogParser.abstractParseLog : $r56 = (java.lang.String) $r55 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $z8 = virtualinvoke r12.<java.lang.String: boolean startsWith(java.lang.String)>($r56)
crystal.server.AbstractLogParser.abstractParseLog : $z8 = virtualinvoke r12.<java.lang.String: boolean startsWith(java.lang.String)>($r56) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $z8 == 0
crystal.server.AbstractLogParser.abstractParseLog : if $z8 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r8 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r12)
crystal.server.AbstractLogParser.abstractParseLog : r8 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r12) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r57 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels DATE>
crystal.server.AbstractLogParser.abstractParseLog : $r57 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels DATE> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r58 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r57)
crystal.server.AbstractLogParser.abstractParseLog : $r58 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r57) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $r58 == null
crystal.server.AbstractLogParser.abstractParseLog : if $r58 == null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r59 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels DATE>
crystal.server.AbstractLogParser.abstractParseLog : $r59 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels DATE> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r60 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r59)
crystal.server.AbstractLogParser.abstractParseLog : $r60 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r59) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r61 = (java.lang.String) $r60
crystal.server.AbstractLogParser.abstractParseLog : $r61 = (java.lang.String) $r60 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $z9 = virtualinvoke r12.<java.lang.String: boolean startsWith(java.lang.String)>($r61)
crystal.server.AbstractLogParser.abstractParseLog : $z9 = virtualinvoke r12.<java.lang.String: boolean startsWith(java.lang.String)>($r61) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $z9 == 0
crystal.server.AbstractLogParser.abstractParseLog : if $z9 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r9 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r12)
crystal.server.AbstractLogParser.abstractParseLog : r9 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r12) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r62 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels SUMMARY>
crystal.server.AbstractLogParser.abstractParseLog : $r62 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels SUMMARY> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r63 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r62)
crystal.server.AbstractLogParser.abstractParseLog : $r63 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r62) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $r63 == null
crystal.server.AbstractLogParser.abstractParseLog : if $r63 == null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r64 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels SUMMARY>
crystal.server.AbstractLogParser.abstractParseLog : $r64 = <crystal.server.AbstractLogParser$CheckpointLabels: crystal.server.AbstractLogParser$CheckpointLabels SUMMARY> >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r65 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r64)
crystal.server.AbstractLogParser.abstractParseLog : $r65 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r64) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r66 = (java.lang.String) $r65
crystal.server.AbstractLogParser.abstractParseLog : $r66 = (java.lang.String) $r65 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $z10 = virtualinvoke r12.<java.lang.String: boolean startsWith(java.lang.String)>($r66)
crystal.server.AbstractLogParser.abstractParseLog : $z10 = virtualinvoke r12.<java.lang.String: boolean startsWith(java.lang.String)>($r66) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if $z10 == 0
crystal.server.AbstractLogParser.abstractParseLog : if $z10 == 0 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : r10 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r12)
crystal.server.AbstractLogParser.abstractParseLog : r10 = staticinvoke <crystal.server.AbstractLogParser: java.lang.String clipFront(java.lang.String)>(r12) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if r10 != null
crystal.server.AbstractLogParser.abstractParseLog : if r10 != null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if r8 != null
crystal.server.AbstractLogParser.abstractParseLog : if r8 != null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if r9 != null
crystal.server.AbstractLogParser.abstractParseLog : if r9 != null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : if r7 == null
crystal.server.AbstractLogParser.abstractParseLog : if r7 == null >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r81 = virtualinvoke r7.<java.lang.String: java.lang.String intern()>()
crystal.server.AbstractLogParser.abstractParseLog : $r81 = virtualinvoke r7.<java.lang.String: java.lang.String intern()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r82 = new crystal.server.AbstractLogParser$Checkpoint
crystal.server.AbstractLogParser.abstractParseLog : $r82 = new crystal.server.AbstractLogParser$Checkpoint >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r83 = virtualinvoke r7.<java.lang.String: java.lang.String intern()>()
crystal.server.AbstractLogParser.abstractParseLog : $r83 = virtualinvoke r7.<java.lang.String: java.lang.String intern()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r84 = virtualinvoke r8.<java.lang.String: java.lang.String intern()>()
crystal.server.AbstractLogParser.abstractParseLog : $r84 = virtualinvoke r8.<java.lang.String: java.lang.String intern()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r85 = virtualinvoke r9.<java.lang.String: java.lang.String intern()>()
crystal.server.AbstractLogParser.abstractParseLog : $r85 = virtualinvoke r9.<java.lang.String: java.lang.String intern()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : $r86 = virtualinvoke r10.<java.lang.String: java.lang.String intern()>()
crystal.server.AbstractLogParser.abstractParseLog : $r86 = virtualinvoke r10.<java.lang.String: java.lang.String intern()>() >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r82.<crystal.server.AbstractLogParser$Checkpoint: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List)>($r83, $r84, $r85, $r86, r11)
crystal.server.AbstractLogParser.abstractParseLog : specialinvoke $r82.<crystal.server.AbstractLogParser$Checkpoint: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List)>($r83, $r84, $r85, $r86, r11) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r81, $r82)
crystal.server.AbstractLogParser.abstractParseLog : virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r81, $r82) >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : goto [?= i1 = i1 + 1]
crystal.server.AbstractLogParser.abstractParseLog : goto [?= i1 = i1 + 1] >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : i1 = i1 + 1
crystal.server.AbstractLogParser.abstractParseLog : i1 = i1 + 1 >>>>>>>> crystal.server.AbstractLogParser.abstractParseLog : return r2
crystal.server.AbstractLogParser.abstractParseLog : return r2 >>>>>>>> crystal.server.HgLogParser.parseLog : return $r2
crystal.server.HgLogParser.parseLog : return $r2 >>>>>>>> crystal.server.AbstractLogParser$Checkpoint.getChangeset : $r1 = r0.<crystal.server.AbstractLogParser$Checkpoint: java.lang.String _changeset>
crystal.server.AbstractLogParser$Checkpoint.getChangeset : $r1 = r0.<crystal.server.AbstractLogParser$Checkpoint: java.lang.String _changeset> >>>>>>>> crystal.server.AbstractLogParser$Checkpoint.getChangeset : return $r1
crystal.server.AbstractLogParser$Checkpoint.getChangeset : return $r1 >>>>>>>> crystal.server.AbstractLogParser$Checkpoint.getCommitter : $r1 = r0.<crystal.server.AbstractLogParser$Checkpoint: java.lang.String _user>
crystal.server.AbstractLogParser$Checkpoint.getCommitter : $r1 = r0.<crystal.server.AbstractLogParser$Checkpoint: java.lang.String _user> >>>>>>>> crystal.server.AbstractLogParser$Checkpoint.getCommitter : return $r1
crystal.server.AbstractLogParser$Checkpoint.getCommitter : return $r1 >>>>>>>> crystal.server.AbstractLogParser$Checkpoint.getDate : $r1 = r0.<crystal.server.AbstractLogParser$Checkpoint: java.lang.String _date>
crystal.server.AbstractLogParser$Checkpoint.getDate : $r1 = r0.<crystal.server.AbstractLogParser$Checkpoint: java.lang.String _date> >>>>>>>> crystal.server.AbstractLogParser$Checkpoint.getDate : return $r1
crystal.server.AbstractLogParser$Checkpoint.getDate : return $r1 >>>>>>>> crystal.server.AbstractLogParser$Checkpoint.getSummary : $r1 = r0.<crystal.server.AbstractLogParser$Checkpoint: java.lang.String _summary>
crystal.server.AbstractLogParser$Checkpoint.getSummary : $r1 = r0.<crystal.server.AbstractLogParser$Checkpoint: java.lang.String _summary> >>>>>>>> crystal.server.AbstractLogParser$Checkpoint.getSummary : return $r1
