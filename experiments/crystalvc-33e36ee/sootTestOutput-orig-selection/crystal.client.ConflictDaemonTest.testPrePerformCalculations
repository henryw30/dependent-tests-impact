crystal.client.ConflictDaemon.getInstance : $r0 = <crystal.client.ConflictDaemon: crystal.client.ConflictDaemon _instance> >>>>>>>> crystal.client.ConflictDaemon.getInstance : if $r0 != null
crystal.client.ConflictDaemon.getInstance : if $r0 != null >>>>>>>> crystal.client.ConflictDaemon.getInstance : $r2 = <crystal.client.ConflictDaemon: crystal.client.ConflictDaemon _instance>
crystal.client.ConflictDaemon.getInstance : $r2 = <crystal.client.ConflictDaemon: crystal.client.ConflictDaemon _instance> >>>>>>>> crystal.client.ConflictDaemon.getInstance : return $r2
crystal.client.ConflictDaemon.getInstance : return $r2 >>>>>>>> crystal.client.ConflictDaemon.prePerformCalculations : $z0 = r0.<crystal.client.ConflictDaemon: boolean _enabled>
crystal.client.ConflictDaemon.prePerformCalculations : $z0 = r0.<crystal.client.ConflictDaemon: boolean _enabled> >>>>>>>> crystal.client.ConflictDaemon.prePerformCalculations : if $z0 != 0
crystal.client.ConflictDaemon.prePerformCalculations : if $z0 != 0 >>>>>>>> crystal.client.ConflictDaemon.prePerformCalculations : $r9 = virtualinvoke r1.<crystal.client.ClientPreferences: java.util.Collection getProjectPreference()>()
crystal.client.ConflictDaemon.prePerformCalculations : $r9 = virtualinvoke r1.<crystal.client.ClientPreferences: java.util.Collection getProjectPreference()>() >>>>>>>> crystal.client.ClientPreferences.getProjectPreference : $r1 = r0.<crystal.client.ClientPreferences: java.util.Vector _projectPreferences>
crystal.client.ClientPreferences.getProjectPreference : $r1 = r0.<crystal.client.ClientPreferences: java.util.Vector _projectPreferences> >>>>>>>> crystal.client.ClientPreferences.getProjectPreference : return $r1
crystal.client.ClientPreferences.getProjectPreference : return $r1 >>>>>>>> crystal.client.ConflictDaemon.prePerformCalculations : r2 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>()
crystal.client.ConflictDaemon.prePerformCalculations : r2 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> crystal.client.ConflictDaemon.prePerformCalculations : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
crystal.client.ConflictDaemon.prePerformCalculations : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> crystal.client.ConflictDaemon.prePerformCalculations : if $z1 == 0
crystal.client.ConflictDaemon.prePerformCalculations : if $z1 == 0 >>>>>>>> crystal.client.ConflictDaemon.prePerformCalculations : $r10 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
crystal.client.ConflictDaemon.prePerformCalculations : $r10 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> crystal.client.ConflictDaemon.prePerformCalculations : r3 = (crystal.client.ProjectPreferences) $r10
crystal.client.ConflictDaemon.prePerformCalculations : r3 = (crystal.client.ProjectPreferences) $r10 >>>>>>>> crystal.client.ConflictDaemon.prePerformCalculations : r4 = virtualinvoke r3.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>()
crystal.client.ConflictDaemon.prePerformCalculations : r4 = virtualinvoke r3.<crystal.client.ProjectPreferences: crystal.model.DataSource getEnvironment()>() >>>>>>>> crystal.client.ProjectPreferences.getEnvironment : $r1 = r0.<crystal.client.ProjectPreferences: crystal.model.DataSource _myEnvironment>
crystal.client.ProjectPreferences.getEnvironment : $r1 = r0.<crystal.client.ProjectPreferences: crystal.model.DataSource _myEnvironment> >>>>>>>> crystal.client.ProjectPreferences.getEnvironment : return $r1
crystal.client.ProjectPreferences.getEnvironment : return $r1 >>>>>>>> crystal.client.ConflictDaemon.prePerformCalculations : $r11 = r0.<crystal.client.ConflictDaemon: java.util.Hashtable _localStateMap>
crystal.client.ConflictDaemon.prePerformCalculations : $r11 = r0.<crystal.client.ConflictDaemon: java.util.Hashtable _localStateMap> >>>>>>>> crystal.client.ConflictDaemon.prePerformCalculations : $r5 = new crystal.model.LocalStateResult
crystal.client.ConflictDaemon.prePerformCalculations : $r5 = new crystal.model.LocalStateResult >>>>>>>> crystal.client.ConflictDaemon.prePerformCalculations : $r6 = <crystal.model.LocalStateResult: java.lang.String PENDING>
crystal.client.ConflictDaemon.prePerformCalculations : $r6 = <crystal.model.LocalStateResult: java.lang.String PENDING> >>>>>>>> crystal.client.ConflictDaemon.prePerformCalculations : $r12 = r0.<crystal.client.ConflictDaemon: java.util.Hashtable _localStateMap>
crystal.client.ConflictDaemon.prePerformCalculations : $r12 = r0.<crystal.client.ConflictDaemon: java.util.Hashtable _localStateMap> >>>>>>>> crystal.client.ConflictDaemon.prePerformCalculations : $r13 = virtualinvoke $r12.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r4)
crystal.client.ConflictDaemon.prePerformCalculations : $r13 = virtualinvoke $r12.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r4) >>>>>>>> crystal.client.ConflictDaemon.prePerformCalculations : $r14 = (crystal.model.LocalStateResult) $r13
crystal.client.ConflictDaemon.prePerformCalculations : $r14 = (crystal.model.LocalStateResult) $r13 >>>>>>>> crystal.client.ConflictDaemon.prePerformCalculations : $r15 = virtualinvoke $r14.<crystal.model.LocalStateResult: java.lang.String getLocalState()>()
